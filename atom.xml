<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-06T08:47:57.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>乱花渐欲迷人眼,返璞归真F8(2)</title>
    <link href="http://yoursite.com/2017/04/06/%E4%B9%B1%E8%8A%B1%E6%B8%90%E6%AC%B2%E8%BF%B7%E4%BA%BA%E7%9C%BC-%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9FF8-2/"/>
    <id>http://yoursite.com/2017/04/06/乱花渐欲迷人眼-返璞归真F8-2/</id>
    <published>2017-04-06T10:45:08.000Z</published>
    <updated>2017-04-06T08:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入口和配置文件"><a href="#入口和配置文件" class="headerlink" title="入口和配置文件"></a>入口和配置文件</h1><h2 id="F8APP-js-setup-js文件"><a href="#F8APP-js-setup-js文件" class="headerlink" title="./F8APP/js/setup.js文件"></a>./F8APP/js/setup.js文件</h2><blockquote>
<p>这一部分我们从index.ios.js文件顺藤摸瓜找到了<code>setup.js</code>文件<br><code>./F8APP/js/setup.js</code></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> F8App = <span class="built_in">require</span>(<span class="string">'F8App'</span>);<span class="comment">//主程序文件的入口</span></div><div class="line"><span class="keyword">var</span> FacebookSDK = <span class="built_in">require</span>(<span class="string">'FacebookSDK'</span>);<span class="comment">//处理facebook登录和好友的API</span></div><div class="line"><span class="keyword">var</span> Parse = <span class="built_in">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//parse的客户端</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</div><div class="line"><span class="keyword">var</span> Relay = <span class="built_in">require</span>(<span class="string">'react-relay'</span>);<span class="comment">//react程序的组件也可以使用Relay的数据层,这个在info这个组件中使用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; Provider &#125; = <span class="built_in">require</span>(<span class="string">'react-redux'</span>);<span class="comment">//Redux的包装器</span></div><div class="line"><span class="keyword">var</span> configureStore = <span class="built_in">require</span>(<span class="string">'./store/configureStore'</span>);<span class="comment">//store</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;serverURL&#125; = <span class="built_in">require</span>(<span class="string">'./env'</span>);<span class="comment">//环境配置，是parsesever的配置地址</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>): <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="built_in">console</span>.disableYellowBox = <span class="literal">true</span>;</div><div class="line">  <span class="comment">//parseServer后面会结合leancloud来看看代码,两者的API是一样的</span></div><div class="line">  Parse.initialize(<span class="string">'oss-f8-app-2016'</span>);<span class="comment">//初始化一个parse</span></div><div class="line">  Parse.serverURL = <span class="string">`<span class="subst">$&#123;serverURL&#125;</span>/parse`</span>;<span class="comment">//parse的url地址</span></div><div class="line"></div><div class="line">  FacebookSDK.init();<span class="comment">//初始化Facebook的配置</span></div><div class="line">  Parse.FacebookUtils.init();</div><div class="line">  Relay.injectNetworkLayer(<span class="comment">//Realy数据层的配置</span></div><div class="line">    <span class="keyword">new</span> Relay.DefaultNetworkLayer(<span class="string">`<span class="subst">$&#123;serverURL&#125;</span>/graphql`</span>, &#123;</div><div class="line">      <span class="attr">fetchTimeout</span>: <span class="number">30000</span>,</div><div class="line">      <span class="attr">retryDelays</span>: [<span class="number">5000</span>, <span class="number">10000</span>],</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">super</span>();</div><div class="line">      <span class="keyword">this</span>.state = &#123;<span class="comment">//初始化state</span></div><div class="line">        isLoading: <span class="literal">true</span>,</div><div class="line">        <span class="attr">store</span>: configureStore(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">isLoading</span>: <span class="literal">false</span>&#125;)),</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.isLoading) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> (<span class="comment">//注入store给ui组件使用</span></div><div class="line">        &lt;Provider store=&#123;<span class="keyword">this</span>.state.store&#125;&gt;</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">F8App</span> /&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Root;</div><div class="line">&#125;</div><div class="line"></div><div class="line">global.LOG = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'/------------------------------\\'</span>);</div><div class="line">  <span class="built_in">console</span>.log(...args);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'\\------------------------------/'</span>);</div><div class="line">  <span class="keyword">return</span> args[args.length - <span class="number">1</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = setup;</div></pre></td></tr></table></figure>
<p>这个文件在去年阅读的时候直接忽略了.最近研究了parseServer的本地部署和相关的graphql的使用以及leancloud的使用,才发现这个部分真的是非常便利.只要是有了数据对象最好还能有schema,model.后台基本都不需要了.当然不可能是完全替代服务器的所有功能.这个到了相应的地方再说.</p>
<p>接下来是F8APP的入口文件</p>
<h2 id="F8APP-js-F8App-js"><a href="#F8APP-js-F8App-js" class="headerlink" title="./F8APP/js/F8App.js"></a>./F8APP/js/F8App.js</h2><p><code>./F8APP/js/F8App.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> </span></div><div class="line">'use strict';</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</div><div class="line"><span class="keyword">var</span> AppState = <span class="built_in">require</span>(<span class="string">'AppState'</span>);</div><div class="line"><span class="keyword">var</span> LoginScreen = <span class="built_in">require</span>(<span class="string">'./login/LoginScreen'</span>);<span class="comment">//登录组件</span></div><div class="line"><span class="keyword">var</span> PushNotificationsController = <span class="built_in">require</span>(<span class="string">'./PushNotificationsController'</span>);<span class="comment">//推送组件</span></div><div class="line"><span class="keyword">var</span> StyleSheet = <span class="built_in">require</span>(<span class="string">'StyleSheet'</span>);</div><div class="line"><span class="keyword">var</span> F8Navigator = <span class="built_in">require</span>(<span class="string">'F8Navigator'</span>);<span class="comment">//导航组件</span></div><div class="line"><span class="keyword">var</span> CodePush = <span class="built_in">require</span>(<span class="string">'react-native-code-push'</span>);<span class="comment">//热更新组件</span></div><div class="line"><span class="keyword">var</span> View = <span class="built_in">require</span>(<span class="string">'View'</span>);</div><div class="line"><span class="keyword">var</span> StatusBar = <span class="built_in">require</span>(<span class="string">'StatusBar'</span>);<span class="comment">//状态栏组件</span></div><div class="line"><span class="keyword">var</span> &#123;<span class="comment">//这里的每一action最终都会形成state这棵树下的次级分枝</span></div><div class="line">  <span class="comment">//名字都非常的醒目和直接,我们可以直接先看action和reducer都干了些什么工作</span></div><div class="line">  loadConfig,</div><div class="line">  loadMaps,</div><div class="line">  loadNotifications,</div><div class="line">  loadSessions,</div><div class="line">  loadFriendsSchedules,</div><div class="line">  loadSurveys,</div><div class="line">&#125; = <span class="built_in">require</span>(<span class="string">'./actions'</span>);<span class="comment">//加载初始化配置的action</span></div><div class="line"><span class="comment">//这个地方的初始化的一些state是在这里加载的,对比ireading软件的//内容加载是在组件中的componentdidMount加载的,放在这里性能是不//是有些优化,</span></div><div class="line"><span class="keyword">var</span> &#123; updateInstallation &#125; = <span class="built_in">require</span>(<span class="string">'./actions/installation'</span>);</div><div class="line"><span class="keyword">var</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">'react-redux'</span>);<span class="comment">//connect函数</span></div><div class="line"><span class="comment">//没想到在这里也是可以用的,在f8app中那个组件要使用state和dispatch就在哪里导入connect函数.</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">'./env.js'</span>);<span class="comment">//获取当前版本号码</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> F8App = React.createClass(&#123;</div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//监听change事件</span></div><div class="line">    AppState.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.handleAppStateChange);</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Make this list smaller, we basically download the whole internet</span></div><div class="line">    <span class="comment">//这个地方在先于UI组件之前加载了所有的state，</span></div><div class="line">    <span class="comment">//根据UI导航的默认项是session，我觉得这里可以先加载//session这个state，在首页加载的时候速度就快了,其他的//state在切换到需要某部分的state的时候在加载</span></div><div class="line">    <span class="comment">//是不是惰性加载的意思？</span></div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadNotifications());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadMaps());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadConfig());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadSessions());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadFriendsSchedules());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadSurveys());</div><div class="line"></div><div class="line">    updateInstallation(&#123;version&#125;);<span class="comment">//热更新版本.</span></div><div class="line">    CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//移除change事件</span></div><div class="line">    AppState.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.handleAppStateChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">handleAppStateChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">appState</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (appState === <span class="string">'active'</span>) &#123;<span class="comment">//在线就分发动作</span></div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadSessions());</div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadNotifications());</div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadSurveys());</div><div class="line">      CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//下面这个地方对于初学redux的就有点绕了</span></div><div class="line">    <span class="comment">//在reducer/user.js中定义了初始化的state,isLoggedIn</span></div><div class="line">    <span class="comment">//就是false，所以初次加载的时候就会显示登录按钮了</span></div><div class="line">    <span class="comment">//如果登录了以后根据登录回调函数的返回值来修改isLoggedIn的state为//true，同时由于还使用了redux-presist的组件持久化state，在下一//次打开的时候就不会显示登录按钮了</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.isLoggedIn) &#123;</div><div class="line">      <span class="keyword">return</span> &lt;LoginScreen /&gt;;</div><div class="line">    &#125;</div><div class="line">    return (//如果已经登录过就直接显示导航界面了.</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;StatusBar</div><div class="line">          translucent=&#123;true&#125;</div><div class="line">          backgroundColor="rgba(0, 0, 0, 0.2)"</div><div class="line">          barStyle="light-content"</div><div class="line">         /&gt;</div><div class="line">        &lt;F8Navigator /&gt;</div><div class="line">        &lt;PushNotificationsController /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function select(store) &#123;//这里只需要获取是否登录的state就可以了</div><div class="line">  //select函数截取和映射组件需要的那部分state，这和数据库是一样的</div><div class="line">  //select * from 获取所有的数据, 加了where条件就会返回一部分数据</div><div class="line">  return &#123;</div><div class="line">    isLoggedIn: store.user.isLoggedIn || store.user.hasSkippedLogin,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = connect(select)(F8App);</div></pre></td></tr></table></figure>
<h2 id="connect文件的源码的一点研究-函数式编程的启蒙"><a href="#connect文件的源码的一点研究-函数式编程的启蒙" class="headerlink" title="connect文件的源码的一点研究-函数式编程的启蒙"></a>connect文件的源码的一点研究-函数式编程的启蒙</h2><p>如果你对于react-redux有了一定了解,会在connect()中找dispatch在哪里？实际上如果没有<code>mapDiaptchToProps</code>也是可以工作的,在<code>node_modules/react-redux/commponents/connect.js</code><br><code>connect.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//部分代码</span></div><div class="line"> <span class="keyword">const</span> defaultMapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123; dispatch &#125;)<span class="comment">//不传递也是可以的</span></div><div class="line"> </div><div class="line"> <span class="keyword">let</span> mapDispatch</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mapDispatchToProps === <span class="string">'function'</span>) &#123;</div><div class="line">    mapDispatch = mapDispatchToProps</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mapDispatchToProps) &#123;<span class="comment">//如果没传dispatch函数</span></div><div class="line">  <span class="comment">//就是默认的参数,还是dispatch</span></div><div class="line">    mapDispatch = defaultMapDispatchToProps</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    mapDispatch = wrapActionCreators(mapDispatchToProps)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>入口文件和初始化配置和加载项就看这么多,下面我们直接先跳到reducer目录<br>看看数据state是怎么组织的.</p>
<h1 id="Reducer文件夹的内容"><a href="#Reducer文件夹的内容" class="headerlink" title="Reducer文件夹的内容"></a>Reducer文件夹的内容</h1><p>图片2 reducer的结构目录<br>除了测试文件夹和假数据文件夹和createParseReducer.js文件,其他的文件都导入到index.js文件</p>
<h2 id="F8App-reducers-index-js"><a href="#F8App-reducers-index-js" class="headerlink" title="./F8App/reducers/index.js"></a><code>./F8App/reducers/index.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; combineReducers &#125; = <span class="built_in">require</span>(<span class="string">'redux'</span>);</div><div class="line"><span class="comment">//每个导入的文件都是对象,combinReducers函数负责把小对象合成一个大的单一对象.</span></div><div class="line"><span class="comment">//如果是多人开发我觉得可以每个开发者：一个组件-一组相关的actions-</span></div><div class="line"><span class="comment">//-一个单一的reducer,如果比喻的话像是一根粗绳子,实际是有小股的绳子拧在//一起形成的,各自在出力,旁边的小股如果出问题了不影响其他部分.</span></div><div class="line"><span class="built_in">module</span>.exports = combineReducers(&#123;</div><div class="line">  <span class="attr">config</span>: <span class="built_in">require</span>(<span class="string">'./config'</span>),</div><div class="line">  <span class="attr">notifications</span>: <span class="built_in">require</span>(<span class="string">'./notifications'</span>),</div><div class="line">  <span class="attr">maps</span>: <span class="built_in">require</span>(<span class="string">'./maps'</span>),</div><div class="line">  <span class="attr">sessions</span>: <span class="built_in">require</span>(<span class="string">'./sessions'</span>),</div><div class="line">  <span class="attr">user</span>: <span class="built_in">require</span>(<span class="string">'./user'</span>),</div><div class="line">  <span class="attr">schedule</span>: <span class="built_in">require</span>(<span class="string">'./schedule'</span>),</div><div class="line">  <span class="attr">topics</span>: <span class="built_in">require</span>(<span class="string">'./topics'</span>),</div><div class="line">  <span class="attr">filter</span>: <span class="built_in">require</span>(<span class="string">'./filter'</span>),</div><div class="line">  <span class="attr">navigation</span>: <span class="built_in">require</span>(<span class="string">'./navigation'</span>),</div><div class="line">  <span class="attr">friendsSchedules</span>: <span class="built_in">require</span>(<span class="string">'./friendsSchedules'</span>),</div><div class="line">  <span class="attr">surveys</span>: <span class="built_in">require</span>(<span class="string">'./surveys'</span>),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//现在在我眼里，index.js就是一个数据库,其中的每一个reducer就是一张、数</span></div><div class="line"><span class="comment">//据表,这么比喻我觉得还是可以接受的,有助于概念的理解</span></div></pre></td></tr></table></figure>
<ul>
<li>在数据库中数据库的名字只是一个标示,真正实现具体内容的是每张表的内容,所以要具体看看每个<code>表(state)</code>都是有哪些内容.知道了表里的内容,就可以相应的理解对于表的操作方法(action).</li>
<li><p>combinReducers的源码实际就是合并对象的,如果是简单的对象还好处理，复杂在上面的<code>每一个reducer</code>实际还可以合并<code>更小的reducer</code>,这对于大型项目的state结构有好处,但是源码不太好理解,我没搞懂,而且更大型的state的组织形式还没有看到那个源码使用,半路出家的基础薄弱,这个地方有点免为其难了,不过怎么做应该是很好操作的.以后努力熟悉这个方面的内容.这个是state的组织形式.在redux和react-redux中到处弥漫着函数式编程的思想,可惜道行不深,无法完全理解.留待日后再说O(∩_∩)O~.</p>
</li>
<li><p>单独看每个导入的reducer就涉及到了具体的逻辑了.这部分的reducer的文件名和action中的文件名是对应的.所以在看这部分的时候要两个文件一起打开看.我在mac上使用了sizeUP软件,点击两个文件以后,选left或者right就可以把两个文件视图平分到屏幕上,不用手动去拉视窗大小,非常方便.</p>
</li>
</ul>
<h1 id="action和reducer配对出现"><a href="#action和reducer配对出现" class="headerlink" title="action和reducer配对出现"></a>action和reducer配对出现</h1><h2 id="login-js-action和user-js-reducer"><a href="#login-js-action和user-js-reducer" class="headerlink" title="login.js action和user.js reducer"></a>login.js action和user.js reducer</h2><p><code>user.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> type &#123;Action&#125; <span class="keyword">from</span> <span class="string">'../actions/types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> type State = &#123;<span class="comment">//类型约束</span></div><div class="line">  isLoggedIn: boolean;</div><div class="line">  hasSkippedLogin: boolean;</div><div class="line">  sharedSchedule: ?boolean;</div><div class="line">  id: ?string;</div><div class="line">  name: ?string;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;<span class="comment">//初始化的state</span></div><div class="line">  isLoggedIn: <span class="literal">false</span>,</div><div class="line">  <span class="attr">hasSkippedLogin</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">sharedSchedule</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">id</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">name</span>: <span class="literal">null</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">state: State = initialState, action: Action</span>): <span class="title">State</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'LOGGED_IN'</span>) &#123;处理登录的action</div><div class="line">    <span class="comment">//获取action的负载内容</span></div><div class="line">    <span class="keyword">let</span> &#123;id, name, sharedSchedule&#125; = action.data;</div><div class="line">    <span class="keyword">if</span> (sharedSchedule === <span class="literal">undefined</span>) &#123;</div><div class="line">      sharedSchedule = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="comment">//根据这个属性就可以在UI中做出相应的改变了</span></div><div class="line">      hasSkippedLogin: <span class="literal">false</span>,</div><div class="line">      sharedSchedule,</div><div class="line">      id,<span class="comment">//下面这两个参数要在到达reducer之前获得,所以在action中</span></div><div class="line">      <span class="comment">//执行远程数据的获取</span></div><div class="line">      name,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SKIPPED_LOGIN'</span>) &#123;<span class="comment">//跳过登录的action</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">isLoggedIn</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">hasSkippedLogin</span>: <span class="literal">true</span>,<span class="comment">//改变这个属性</span></div><div class="line">      sharedSchedule: <span class="literal">null</span>,</div><div class="line">      <span class="attr">id</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">name</span>: <span class="literal">null</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'LOGGED_OUT'</span>) &#123;<span class="comment">//处理登出的action</span></div><div class="line">    <span class="keyword">return</span> initialState;<span class="comment">//返回初始值就可以了</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SET_SHARING'</span>) &#123;<span class="comment">//设置分享的action</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...state,</div><div class="line">      <span class="attr">sharedSchedule</span>: action.enabled,<span class="comment">//组件根据这个state就//可以决定是可以分享还是不可以分享</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'RESET_NUXES'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;...state, <span class="attr">sharedSchedule</span>: <span class="literal">null</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = user;</div></pre></td></tr></table></figure></p>
<p>user的reducer还比较简单,最后一句<code>module.expors=user;</code>使用了javascript中函数是第一类对象的定义,user是这个<code>函数对象的引用</code><br>那么user对象中是什么呢？😁,里面是<code>闭包</code>啊! 要不然combineReducers里面调用user函数的时候state能记住改变的内容呢？要理解这些概念,对javascript的闭包的理解是不可少的. </p>
<p><code>login.js</code><br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">use</span> <span class="title">strict</span>';</div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="keyword">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//连接parse的客户端包</span></div><div class="line"><span class="keyword">const</span> FacebookSDK = <span class="keyword">require</span>(<span class="string">'FacebookSDK'</span>);</div><div class="line"><span class="keyword">const</span> ActionSheetIOS = <span class="keyword">require</span>(<span class="string">'ActionSheetIOS'</span>);<span class="comment">//上拉组件</span></div><div class="line"><span class="keyword">const</span> &#123;Platform&#125; = <span class="keyword">require</span>(<span class="string">'react-native'</span>);<span class="comment">//</span></div><div class="line"><span class="keyword">const</span> Alert = <span class="keyword">require</span>(<span class="string">'Alert'</span>);</div><div class="line"><span class="keyword">const</span> &#123;restoreSchedule, loadFriendsSchedules&#125; = <span class="keyword">require</span>(<span class="string">'./schedule'</span>);</div><div class="line"><span class="keyword">const</span> &#123;updateInstallation&#125; = <span class="keyword">require</span>(<span class="string">'./installation'</span>);</div><div class="line"><span class="keyword">const</span> &#123;loadSurveys&#125; = <span class="keyword">require</span>(<span class="string">'./surveys'</span>);</div><div class="line"></div><div class="line">import type &#123; Action, ThunkAction &#125; from <span class="string">'./types'</span>;</div><div class="line"><span class="comment">//下面两个函数是使用ParseFacebook登录的异步操作</span></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">ParseFacebookLogin</span><span class="params">(scope)</span>: <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    Parse.FacebookUtils.logIn(scope, &#123;</div><div class="line">      success: resolve,</div><div class="line">      error: (user, error) =&gt; reject(error &amp;&amp; error.error || error),</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">queryFacebookAPI</span><span class="params">(path, ...args)</span>: <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    FacebookSDK.api(path, ...args, (response) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (response &amp;&amp; !response.error) &#123;</div><div class="line">        resolve(response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(response &amp;&amp; response.error);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">_logInWithFacebook</span><span class="params">(source: ?string)</span>: <span class="title">Promise</span>&lt;<span class="title">Array</span>&lt;<span class="title">Action</span>&gt;&gt; </span>&#123;</div><div class="line">  await ParseFacebookLogin(<span class="string">'public_profile,email,user_friends'</span>);<span class="comment">//es7的异步操作</span></div><div class="line">  <span class="keyword">const</span> profile = await queryFacebookAPI(<span class="string">'/me'</span>, &#123;fields: <span class="string">'name,email'</span>&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> user = await Parse.User.currentAsync();</div><div class="line">  user.set(<span class="string">'facebook_id'</span>, profile.id);</div><div class="line">  user.set(<span class="string">'name'</span>, profile.name);</div><div class="line">  user.set(<span class="string">'email'</span>, profile.email);</div><div class="line">  await user.save();</div><div class="line">  await updateInstallation(&#123;user&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> action = &#123;<span class="comment">//配置action对象</span></div><div class="line">    type: <span class="string">'LOGGED_IN'</span>, <span class="comment">//传到reducer的actioType</span></div><div class="line">    source,</div><div class="line">    data: &#123;</div><div class="line">      id: profile.id,</div><div class="line">      name: profile.name,</div><div class="line">      sharedSchedule: user.get(<span class="string">'sharedSchedule'</span>),</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Promise.all([</div><div class="line">    Promise.resolve(action),</div><div class="line">    restoreSchedule(),</div><div class="line">  ]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//这一步就有点绕了,由于是远程操作,需要异步处理,等待结果以后才能dispatch</span></div><div class="line"><span class="comment">//获取的结果,</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInWithFacebook</span><span class="params">(source: ?string)</span>: <span class="title">ThunkAction</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (dispatch) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> login = _logInWithFacebook(source);<span class="comment">//返回的就是上面的const action</span></div><div class="line">    </div><div class="line">    <span class="comment">// Loading friends schedules shouldn't block the login process</span></div><div class="line">    login.then(</div><div class="line">      (result) =&gt; &#123;</div><div class="line">        dispatch(result);</div><div class="line">        dispatch(loadFriendsSchedules());</div><div class="line">        dispatch(loadSurveys());</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> login;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">skipLogin</span><span class="params">()</span>: <span class="title">Action</span> </span>&#123;<span class="comment">//跳过登录的action</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    type: <span class="string">'SKIPPED_LOGIN'</span>,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOut</span><span class="params">()</span>: <span class="title">ThunkAction</span> </span>&#123;<span class="comment">//登出也是异步操作,等待两个远程数据的相应结果</span></div><div class="line">  <span class="keyword">return</span> (dispatch) =&gt; &#123;</div><div class="line">    Parse.User.logOut();</div><div class="line">    FacebookSDK.logout();</div><div class="line">    updateInstallation(&#123;user: <span class="keyword">null</span>, channels: []&#125;);</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Make sure reducers clear their state</span></div><div class="line">    <span class="keyword">return</span> dispatch(&#123;</div><div class="line">      type: <span class="string">'LOGGED_OUT'</span>,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOutWithPrompt</span><span class="params">()</span>: <span class="title">ThunkAction</span> </span>&#123;<span class="comment">//对话框退出,也是异步操作</span></div><div class="line">  <span class="comment">//确认以后再dispatch一个action</span></div><div class="line">  <span class="keyword">return</span> (dispatch, getState) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> name = getState().user.name || <span class="string">'there'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</div><div class="line">      ActionSheetIOS.showActionSheetWithOptions(</div><div class="line">        &#123;</div><div class="line">          title: `Hi, $&#123;name&#125;`,</div><div class="line">          options: [<span class="string">'Log out'</span>, <span class="string">'Cancel'</span>],</div><div class="line">          destructiveButtonIndex: <span class="number">0</span>,</div><div class="line">          cancelButtonIndex: <span class="number">1</span>,</div><div class="line">        &#125;,</div><div class="line">        (buttonIndex) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (buttonIndex === <span class="number">0</span>) &#123;<span class="comment">//根据逻辑判dispatch退出操作</span></div><div class="line">            dispatch(logOut());</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      Alert.alert(<span class="comment">//andoid弹出对话框</span></div><div class="line">        `Hi, $&#123;name&#125;`,</div><div class="line">        <span class="string">'Log out from F8?'</span>,</div><div class="line">        [</div><div class="line">          &#123; text: <span class="string">'Cancel'</span> &#125;,</div><div class="line">          &#123; text: <span class="string">'Log out'</span>, onPress: () =&gt; dispatch(logOut()) &#125;,</div><div class="line">        ]</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//初看代码logInWithFacebook这个action是没有在ationType中的,但是其实</span></div><div class="line"><span class="comment">//这个函数有返回了LoginedIn对象,这一点有仔细看看</span></div><div class="line">module.exports = &#123;logInWithFacebook, skipLogin, logOut, logOutWithPrompt&#125;;</div></pre></td></tr></table></figure></p>
<p>登录的具体逻辑和实现就是这些.UI组件要怎么做呢？好了我这里在举一个生活中的例子来说明.这个思想从我的电灯模型开始演化成为了自动贩卖机模型或者ATM机模型了. 我们姑且称为ATM机模型好了.回想你去ATM取钱,输入密码,输入钱的数目.你是大款一次想取十万块,点击按键或者触摸屏输入十万块,可惜ATM的钱箱没有装那么多,告诉你ATM机没有这么多钱，这个消息反应的ATM钱箱的<code>state</code>是没有十万.于是你按键或者触摸操作输入1000块,于是乎ATM机器给你吐出了1000块.你的账户的余额<code>state</code>减掉了1000块.这个过程居然和counter的过程是一样的.那么为什么要介绍这个模型呢？我们按键或者触摸操作,并没有在屏幕上实现具体的操作,钞票的制作,钱箱的打开,钞票的数量计算都是有机器来完成的.我们点击的屏幕和按键其实就是UI用户界面,界面上的按键其实只是实际操作的代理.javacript的函数可以<code>传引用赋值</code>,我们就可以使用函数名字来调用实际的函数具体操作.尽管屏幕上没有钱箱,但是我们却可以取到钱.从这个例子看,redux是多么的简单.但是琢磨出这个原理也是花了很长时间的.这实际就是中介者模式.<br>哈哈那个钱箱就是一个<code>闭包</code>,你看看是不是？</p>
<h2 id="Actions文件夹中的工具文件parse-js"><a href="#Actions文件夹中的工具文件parse-js" class="headerlink" title="Actions文件夹中的工具文件parse.js"></a>Actions文件夹中的工具文件parse.js</h2><p><code>parse.js</code></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="javascript"><span class="meta">'use strict'</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="built_in">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//parseServer的客户端</span></div><div class="line"><span class="keyword">const</span> logError = <span class="built_in">require</span>(<span class="string">'logError'</span>);</div><div class="line"><span class="keyword">const</span> InteractionManager = <span class="built_in">require</span>(<span class="string">'InteractionManager'</span>);</div><div class="line"></div><div class="line"><span class="keyword">import</span> type &#123; ThunkAction &#125; <span class="keyword">from</span> <span class="string">'./types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Maps = Parse.Object.extend(<span class="string">'Maps'</span>);<span class="comment">//ParseServer的对象</span></div><div class="line"><span class="comment">//可以参看ireading app feedback模块里的反馈意见的远程存储,使用的是leancloud</span></div><div class="line"><span class="comment">//但是API是完全一样的.</span></div><div class="line"><span class="keyword">const</span> Notification = Parse.Object.extend(<span class="string">'Notification'</span>);</div><div class="line"><span class="comment">//总的ParseQuery查询函数,根据type和查询筛选结果动态dispatch action</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadParseQuery</span>(<span class="params">type: string, query: Parse.Query</span>): <span class="title">ThunkAction</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> query.find(&#123;</div><div class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// We don't want data loading to interfere with smooth animations</span></div><div class="line">        InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="comment">// Flow can't guarantee &#123;type, list&#125; is a valid action</span></div><div class="line">          dispatch((&#123;type, list&#125;: any));</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>: logError,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">//load就是tabbar默认tab加载的会议日程state</span></div><div class="line">  loadSessions: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//加载会议日程,这里不是浏览器的session，映射</span></div><div class="line">    loadParseQuery(</div><div class="line">      <span class="string">'LOADED_SESSIONS'</span>,</div><div class="line">      <span class="keyword">new</span> Parse.Query(<span class="string">'Agenda'</span>)</div><div class="line">        .include(<span class="string">'speakers'</span>)</div><div class="line">        .ascending(<span class="string">'startTime'</span>)</div><div class="line">    ),</div><div class="line"></div><div class="line">  <span class="attr">loadMaps</span>: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//映射</span></div><div class="line">    loadParseQuery(<span class="string">'LOADED_MAPS'</span>, <span class="keyword">new</span> Parse.Query(Maps)),</div><div class="line"></div><div class="line">  <span class="attr">loadNotifications</span>: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//映射对象</span></div><div class="line">    loadParseQuery(<span class="string">'LOADED_NOTIFICATIONS'</span>, <span class="keyword">new</span> Parse.Query(Notification)),</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="actions-config-js"><a href="#actions-config-js" class="headerlink" title="actions/config.js"></a>actions/config.js</h2><p><code>config.js</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">strict</span>';</div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="keyword">require</span>(<span class="string">'parse/react-native'</span>);</div><div class="line"><span class="keyword">const</span> InteractionManager = <span class="keyword">require</span>(<span class="string">'InteractionManager'</span>);</div><div class="line"></div><div class="line">import type &#123; Action &#125; from <span class="string">'./types'</span>; <span class="comment">//获得所有的type</span></div><div class="line"></div><div class="line"><span class="comment">//获取配置文件的异步操作</span></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">loadConfig</span><span class="params">()</span>: <span class="title">Promise</span>&lt;<span class="title">Action</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">const</span> config = await Parse.Config.get();<span class="comment">// 从parse服务器获取配置数据</span></div><div class="line">  await InteractionManager.runAfterInteractions();</div><div class="line">  <span class="keyword">return</span> &#123;<span class="comment">//操作逻辑在这里返回config数据然后拷贝到state</span></div><div class="line">    type: <span class="string">'LOADED_CONFIG'</span>,</div><div class="line">    config,<span class="comment">//配置负载或者载荷</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = &#123;loadConfig&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入口和配置文件&quot;&gt;&lt;a href=&quot;#入口和配置文件&quot; class=&quot;headerlink&quot; title=&quot;入口和配置文件&quot;&gt;&lt;/a&gt;入口和配置文件&lt;/h1&gt;&lt;h2 id=&quot;F8APP-js-setup-js文件&quot;&gt;&lt;a href=&quot;#F8APP-js-setup
    
    </summary>
    
      <category term="F8App源码阅读" scheme="http://yoursite.com/categories/F8App%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="React-native" scheme="http://yoursite.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>乱花渐欲迷人眼,返璞归真F8(1)</title>
    <link href="http://yoursite.com/2017/04/05/%E4%B9%B1%E8%8A%B1%E6%B8%90%E6%AC%B2%E8%BF%B7%E4%BA%BA%E7%9C%BC-%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F-1/"/>
    <id>http://yoursite.com/2017/04/05/乱花渐欲迷人眼-返璞归真-1/</id>
    <published>2017-04-05T10:00:23.000Z</published>
    <updated>2017-04-05T18:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>去年写了几篇f8app的代码阅读,基本是站在UI组件的角度来的,随着学习的深入,对其中的代码有了更深的体会,现在有很多开源的RN项目可以供参考,但是有一些都存在某些问题.细节考虑的不周到,学习的意义打了折扣.F8APP是facebook的亲儿子，所以开发者的水平是很高的,前面阅读的时候觉得怎么写的很难懂,甚至还有些地方对Redux的实现都感觉不太标准,这两天在回头看的时候,不得不佩服人家的开发水平.代码里对于组件的实现,Redux的渗透,多数据源的接入,代码组织方面都是独居匠心的.我自从重新阅读了以后,感觉写代码当如此啊. </p>
</blockquote>
<p>但是到了现在的这个觉悟并不是一蹴而就的.经过一段时间的学习,学习工具箱里就有一些工具了.</p>
<ul>
<li>函数式编程的思想,javascript里的函数是一等对象,其实意思是函数和对象在javascript中都是<code>引用赋值的</code>,<strong>这一点非常的非常的关键</strong>.这并非危言耸听,一旦你在读代码中有了这个觉悟的话,javascript的功力会大增的.我们随时可以把一个函数映射到一个变量上,这就是引用赋值,一旦这样做以后,函数可以使用这个变量在代码中传来传去,灵活性大增.有没有思考过React/Redux中组件dispatch一个action到底发生了什么?bindActionCreator是怎么实现的？这还没完,继续挖掘函数编程是怎么在f8里实现的</li>
<li>模式设计的思想：中介者模式,发布订阅者模式,等等模式,在这面也很好的实现了。要有一点模式设计的知识</li>
<li>React-native跨平台开发的代码复用问题,功能,逻辑和表现形式的结合思考。先逻辑后表现。</li>
<li>临机应变,刚开始看f8app的代码的时候看不下去,尤其是在对redux有了初步的了解,产生盲目崇拜以后,在React中必须要找到几个文件夹在才能是根正苗红的Redux应用.于是在里面找,这里面更本就没有container文件夹么？怎么办？其实在container文件中也只是用connect对象注入了组件是组件订阅了需要的props，具有了dispatch方法.仅此而已.所以在f8app中直接在UI组件中使用了connect对象.这样对于编码实际更好操作，更直观.另外带来的好处是,组价其实不一定非要用redux来处理,可以使用其他的框架来处理.info这个模块就没有采用redux的框架.要从功能上灵活处理。能达到随机应变要对功能的实现有深刻的认识。</li>
<li>对于state的思考,后面如果要继续提高RN的编程能力,要不断的思考state的问题.目前看到的两个大型程序的state，一个是f8的，一个是cnode的state.<br>我前面写过文章把state看成是内存的数据库,围绕着state做增删改查工作，是不是这个意思呢？f8中的state实现是一颗倒立的树,为什么是树呢？这是相对于网状结构来的,state中是没有之间的连接关系的.数据以节点来组织.看到f8app中combineReducer中的映射的时候，那感觉真爽啊。编程真有意思.回头看代码在解释.</li>
<li>parse-server和graghql的问题,</li>
<li><p>观察的视点选择问题,如果会你看过<a href="https://medium.com/@rajaraodv/step-by-step-guide-to-building-react-redux-apps-using-mocks-48ca0f47f9a" target="_blank" rel="external">这篇文章</a>,<a href="https://wenku.baidu.com/view/881a48f8aaea998fcd220ea5.html?from=search" target="_blank" rel="external">中文翻译版</a>的话,这篇文章实际是从UI组件的角度来找视点的,对于初学者俩说,这篇文章的确是很好的,但是对于F8app这样的大型app,从视图就有点喧宾夺主了.在f8app中state和Actions的复杂程度更高,从组件上面去学习就有点麻烦,尤其是这里面有几个地方的组件组合真的是太厉害了，看完组件的组合关系就已经没耐心了.从action和state开始读似乎是可行的.当然因人而异.我提出这个观点至少是说明我思考过这个问题.</p>
</li>
<li><p>贪心原理 f8APP中已经包含和了很多组件和中间件了,多学几遍就可以在其他地方用了.太好了.</p>
</li>
</ul>
<blockquote>
<p>时间太晚了，有些地方白天想明白了,现在又忘了.先写这么多.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;去年写了几篇f8app的代码阅读,基本是站在UI组件的角度来的,随着学习的深入,对其中的代码有了更深的体会,现在有很多开源的RN项目可以供参考,但是有一些都存在某些问题.细节考虑的不周到,学习的意义打了折扣.F8APP是facebook的亲儿子，所
    
    </summary>
    
      <category term="F8App源码阅读" scheme="http://yoursite.com/categories/F8App%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="React-native" scheme="http://yoursite.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|redux undo/redo reducer增强组件</title>
    <link href="http://yoursite.com/2017/04/04/%E7%BF%BB%E8%AF%91-redux-undo-redo-reucer%E5%A2%9E%E5%BC%BA%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/04/04/翻译-redux-undo-redo-reucer增强组件/</id>
    <published>2017-04-04T13:18:28.000Z</published>
    <updated>2017-04-04T15:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.</p>
<hr>
</blockquote>
<h1 id="redux-undo-redo"><a href="#redux-undo-redo" class="headerlink" title="redux undo/redo"></a>redux undo/redo</h1><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif" alt=""></p>
<p>提示:你可以使用<a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external">redux-undo-boilerplate</a>来开始项目.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><code>npm install --save redux-undo</code></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div><div class="line">undoable(reducer)</div><div class="line">undoable(reducer, config)</div></pre></td></tr></table></figure>
<h2 id="让你的reducers变得可以重做"><a href="#让你的reducers变得可以重做" class="headerlink" title="让你的reducers变得可以重做"></a>让你的reducers变得可以重做</h2><p><code>redux-undo</code>是一个reducer增强组件,它提供了<code>undoable</code>函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.</p>
<p><strong>注意：</strong>如果在<code>state.counter</code>之前接入,你必须要在包装<code>reducer</code>之后接入<code>state.coutner.present</code>.</p>
<p>首先导入<code>redux-undo</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Redux utility functions </span></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="comment">// redux-undo higher-order reducer </span></div><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>接着,添加<code>undoable</code>到你的reducer<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">combineReducers</span>(&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="built_in">undoable</span>(counter)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><code>配置项</code>想这样传递<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">combineReducers</span>(&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="built_in">undoable</span>(counter, &#123;</div><div class="line">    limit: 10 // set a limit for the history </div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="历史API"><a href="#历史API" class="headerlink" title="历史API"></a>历史API</h2><p>使用reducer包装你的reducer想这样<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  past: [...pastStatesHere...],</div><div class="line">  present: <span class="meta">&#123;...currentStateHere...&#125;</span>,</div><div class="line">  future: [...futureStatesHere...]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在你可以使用<code>state.present</code>获取当前的state<br>获取所有过去的state使用<code>state.past</code>.</p>
<h2 id="Undo-Redo-Actions"><a href="#Undo-Redo-Actions" class="headerlink" title="Undo/Redo Actions"></a>Undo/Redo Actions</h2><p>首先导入undo/redo action creators<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<code>store.dispatch()</code>和undo/redo action creators来执行undo/redo操作.<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">store.dispatch<span class="comment">(ActionCreators.undo()</span>) <span class="comment">// undo the last action </span></div><div class="line">store.dispatch<span class="comment">(ActionCreators.redo()</span>) <span class="comment">// redo the last action </span></div><div class="line"> </div><div class="line">store.dispatch<span class="comment">(ActionCreators.jumpToPast(index)</span>) <span class="comment">// jump to requested index in the past[] array </span></div><div class="line">store.dispatch<span class="comment">(ActionCreators.jumpToFuture(index)</span>) <span class="comment">// jump to requested index in the future[] array</span></div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置对象传递给<code>undoable()</code>(值是默认值)</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  limi<span class="variable">t:</span> false, // <span class="keyword">set</span> <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">number</span> <span class="keyword">to</span> turn <span class="keyword">on</span> <span class="keyword">a</span> limit <span class="keyword">for</span> the <span class="keyword">history</span> </div><div class="line"> </div><div class="line">  <span class="built_in">filter</span>: () =&gt; true, // see `Filtering Actions` section </div><div class="line"> </div><div class="line">  undoType: ActionTypes.UNDO, // define <span class="keyword">a</span> custom action <span class="built_in">type</span> <span class="keyword">for</span> this <span class="keyword">undo</span> action </div><div class="line">  redoType: ActionTypes.REDO, // define <span class="keyword">a</span> custom action <span class="built_in">type</span> <span class="keyword">for</span> this <span class="keyword">redo</span> action </div><div class="line"> </div><div class="line">  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action <span class="built_in">type</span> <span class="keyword">for</span> this jumpToPast action </div><div class="line">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action <span class="built_in">type</span> <span class="keyword">for</span> this jumpToFuture action </div><div class="line"> </div><div class="line">  initialState: undefined, // initial state (<span class="keyword">e</span>.g. <span class="keyword">for</span> loading) </div><div class="line">  initType<span class="variable">s:</span> [<span class="string">'@@redux/INIT'</span>, <span class="string">'@@INIT'</span>] // <span class="keyword">history</span> will <span class="keyword">be</span> (re)<span class="keyword">set</span> upon init action <span class="built_in">type</span> </div><div class="line">  initialHistory: &#123; // initial <span class="keyword">history</span> (<span class="keyword">e</span>.g. <span class="keyword">for</span> loading) </div><div class="line">    pas<span class="variable">t:</span> [],</div><div class="line">    presen<span class="variable">t:</span> config.initialState,</div><div class="line">    future: []</div><div class="line">  &#125;,</div><div class="line"> </div><div class="line">  debu<span class="variable">g:</span> false, // <span class="keyword">set</span> <span class="keyword">to</span> `true` <span class="keyword">to</span> turn <span class="keyword">on</span> debugging </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="过滤Actions"><a href="#过滤Actions" class="headerlink" title="过滤Actions"></a>过滤Actions</h2><p>如果你不想包含每一步的action,可以传递一个函数到<code>undoable</code><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, <span class="keyword">function</span> <span class="title">filterActions</span>(action, currentState, previousState) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">action.type</span> === SOME_ACTION; // only add to history <span class="keyword">if</span> action <span class="keyword">is</span> SOME_ACTION只有some_action的action才能记录 </div><div class="line">&#125;)</div><div class="line"> </div><div class="line">// <span class="keyword">or</span> you could <span class="keyword">do</span>... </div><div class="line"> </div><div class="line">undoable(reducer, <span class="keyword">function</span> <span class="title">filterState</span>(action, currentState, previousState) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">currentState</span> !== previousState; // only add to history <span class="keyword">if</span> state changed只有state变化的才能记录重做 </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>或者你可以使用<code>distinctState</code>,<code>includeAction</code>,<code>excludeAction</code>助手函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123; distinctState, includeAction, excludeAction &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>现在你可以使用助手函数了,相当简单<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: includeAction(SOME_ACTION)</span></span> &#125;)</div><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: excludeAction(SOME_ACTION)</span></span> &#125;)</div><div class="line"> </div><div class="line"><span class="comment">// or you could do... </span></div><div class="line"> </div><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: distinctState()</span></span> &#125;)</div></pre></td></tr></table></figure></p>
<p>甚至还支持数组<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">undoable</span>(<span class="selector-tag">reducer</span>, &#123; <span class="attribute">filter</span>: <span class="built_in">includeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class="line"><span class="selector-tag">undoable</span>(<span class="selector-tag">reducer</span>, &#123; <span class="attribute">filter</span>: <span class="built_in">excludeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="有什么魔法？怎么工作的"><a href="#有什么魔法？怎么工作的" class="headerlink" title="有什么魔法？怎么工作的"></a>有什么魔法？怎么工作的</h2><p>Redux文档中的<a href="https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="external"><code>实现Undo历史的方案</code></a>解释了redux-undo工作的具体细节.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Immutable Data Structures and JavaScript</title>
    <link href="http://yoursite.com/2017/04/04/%E7%BF%BB%E8%AF%91-Immutable-Data-Structures-and-JavaScript/"/>
    <id>http://yoursite.com/2017/04/04/翻译-Immutable-Data-Structures-and-JavaScript/</id>
    <published>2017-04-04T12:28:01.000Z</published>
    <updated>2017-04-04T05:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>不久以前我简单的谈了谈我的想法,把最新的blog重写一下,发誓要涉及一些学到的有深度的东西.现在我要谈谈javascript中的immutable数据结构,尤其是两个库<a href="https://github.com/facebook/immutable-js" target="_blank" rel="external">immutable.js</a>和<a href="https://github.com/rtfeldman/seamless-immutable" target="_blank" rel="external">seamliess-immutable</a>.还有其他的库,但是选择标标准是真正的持久数据结构或者拷贝javascript对象的概念区别.比较这两个重点,不要管到底是选择什么库.我还要谈一点<a href="https://github.com/cognitect/transit-js" target="_blank" rel="external">transit-js</a>，它在做数据的序列化方面很好.</p>
<p>有关Redux的应用谈的少一点.大体是谈谈immutable数据结构的使用,但是也提供一些在Redux中使用的特殊点.在Redux中,你有单个的state对象,并且不复制他,有很多方法可以达到这个目的,每一个都有所权衡.我会在在下面探索一下.</p>
<p>在Redux中有一件事是要考虑怎么聚合reducers来形成单个的app state原子.Redux默认提供的方式(combineReducers)假定你把多个值合并成一个单一的javascript对象.如果你想把他们合并成一个Immutable.js对象,例如你可能需要编写你自己的<em>combinReducers</em>来达到这个目的.这一点可能会非常有必要如果你需要序列化你的app state,并且你设定state整个都是由Immutable.js对象组成的.</p>
<p>大多数这种应用一般都使用immutable对象.有时候有点尴尬,因为你要和默认的语法斗争,这感觉就像你在用types玩杂耍.然而,根据你的app和你的配置,你可以从中跳出来.</p>
<p>目前,有一个为原生Javascript应用添加immutable数据结构的<a href="https://github.com/sebmarkbage/ecmascript-immutable-data-structures" target="_blank" rel="external">建议</a></p>
<h2 id="Immutable-js"><a href="#Immutable-js" class="headerlink" title="Immutable.js"></a>Immutable.js</h2><p>Immutable.js来自Facebook,它是实现immutable数据结构最流行的方法.规模很庞大,使用类似<code>tries</code>的高级方法实现结构化共享,实现整个数据的持久化.所有的更新都返回新值,但是内部结构是共享的,这一点大大的降低了内存的使用(GC thrashing).这就意味着如果你应用一个有1000个元素的矢量,他不会实际创建一个有1001个元素的新矢量.大多数情况下,内部仅仅有一些小的对象被分配.</p>
<p>数据结构共享的先进性,很大一部分是由Okasaki的开创性工作启发的,</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不久以前我简单的谈了谈我的想法,把最新的blog重写一下,发誓要涉及一些学到的有深度的东西.现在我要谈谈javascript中的immutable数据结构,尤其是两个库&lt;a href=&quot;https://github.com/facebook/immutable-js&quot; ta
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Redux undo/redo</title>
    <link href="http://yoursite.com/2017/04/04/Redux-undo-redo/"/>
    <id>http://yoursite.com/2017/04/04/Redux-undo-redo/</id>
    <published>2017-04-04T00:18:11.000Z</published>
    <updated>2017-04-03T16:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-undo-redo"><a href="#redux-undo-redo" class="headerlink" title="redux undo/redo"></a>redux undo/redo</h1><blockquote>
<p>这是把redux undo的堆栈操作有包装了一下</p>
</blockquote>
<p><a href="https://www.npmjs.com/package/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/redux-undo.svg?style=flat-square" alt="NPM version (&gt;=0.4)"></a> <a href="https://www.npmjs.com/package/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/npm/dm/redux-undo.svg?style=flat-square" alt="NPM Downloads"></a> <a href="https://coveralls.io/r/omnidan/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/coveralls/omnidan/redux-undo.svg?style=flat-square" alt="Coverage Status"></a> <a href="https://david-dm.org/omnidan/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/david/omnidan/redux-undo.svg?style=flat-square" alt="Dependencies"></a> <a href="http://standardjs.com/" target="_blank" rel="external"><img src="https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square" alt="js-standard-style"></a> <a href="https://raw.githubusercontent.com/omnidan/redux-undo/master/LICENSE.md" target="_blank" rel="external"><img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square" alt="GitHub license"></a></p>
<p><em>simple undo/redo functionality for redux state containers</em></p>
<p><a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external"><img src="https://i.imgur.com/M2KR4uo.gif" alt="https://i.imgur.com/M2KR4uo.gif"></a></p>
<p><strong>Protip:</strong> Check out the <a href="https://github.com/omnidan/redux-undo/tree/master/examples/todos-with-undo" target="_blank" rel="external">todos-with-undo example</a> or the <a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external">redux-undo-boilerplate</a> to quickly get started with <code>redux-undo</code>.</p>
<p><strong>Switching from 0.x to 1.0 (beta):</strong> Make sure to update your programs to the <a href="#history-api">latest History API</a>.</p>
<hr>
<p><strong>This README is about the new 1.0-beta branch of redux-undo, if you are using<br>or plan on using 0.6, check out <a href="https://github.com/omnidan/redux-undo/tree/0.6" target="_blank" rel="external">the <code>0.6</code> branch</a></strong></p>
<hr>
<h2 id="Note-on-1-0-0-beta7"><a href="#Note-on-1-0-0-beta7" class="headerlink" title="Note on 1.0.0-beta7"></a>Note on 1.0.0-beta7</h2><p>If you use Redux Undo in CommonJS environment, <strong>don’t forget to add <code>.default</code> to your import</strong>.</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">- var ReduxUndo = require('redux-undo')</span></div><div class="line"><span class="addition">+ var ReduxUndo = require('redux-undo').default</span></div></pre></td></tr></table></figure>
<p>If your environment support es modules just go by:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReduxUndo <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>We are also supporting UMD build:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ReduxUndo = <span class="built_in">window</span>.ReduxUndo.default;</div></pre></td></tr></table></figure>
<p><strong>once again <code>.default</code> is required.</strong></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install --save redux-undo@beta</div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div><div class="line">undoable(reducer)</div><div class="line">undoable(reducer, config)</div></pre></td></tr></table></figure>
<h2 id="Making-your-reducers-undoable"><a href="#Making-your-reducers-undoable" class="headerlink" title="Making your reducers undoable"></a>Making your reducers undoable</h2><p><code>redux-undo</code> is a reducer enhancer (higher-order reducer), it provides the <code>undoable</code> function, which<br>takes an existing reducer and a configuration object and enhances your existing<br>reducer with undo functionality.</p>
<p><strong>Note:</strong> If you were accessing <code>state.counter</code> before, you have to access<br><code>state.counter.present</code> after wrapping your reducer with <code>undoable</code>.</p>
<p>To install, firstly import <code>redux-undo</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Redux utility functions</span></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="comment">// redux-undo higher-order reducer</span></div><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Then, add <code>undoable</code> to your reducer(s) like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">combineReducers(&#123;</div><div class="line">  <span class="attr">counter</span>: undoable(counter)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>A <a href="#configuration">configuration</a> can be passed like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">combineReducers(&#123;</div><div class="line">  <span class="attr">counter</span>: undoable(counter, &#123;</div><div class="line">    <span class="attr">limit</span>: <span class="number">10</span> <span class="comment">// set a limit for the history</span></div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><p>Wrapping your reducer with <code>undoable</code> makes the state look like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">past</span>: [...pastStatesHere...],</div><div class="line">  <span class="attr">present</span>: &#123;...currentStateHere...&#125;,</div><div class="line">  <span class="attr">future</span>: [...futureStatesHere...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now you can get your current state like this: <code>state.present</code></p>
<p>And you can access all past states (e.g. to show a history) like this: <code>state.past</code></p>
<h2 id="Undo-Redo-Actions"><a href="#Undo-Redo-Actions" class="headerlink" title="Undo/Redo Actions"></a>Undo/Redo Actions</h2><p>Firstly, import the undo/redo action creators:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Then, you can use <code>store.dispatch()</code> and the undo/redo action creators to<br>perform undo/redo operations on your state:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">store.dispatch(ActionCreators.undo()) <span class="comment">// undo the last action</span></div><div class="line">store.dispatch(ActionCreators.redo()) <span class="comment">// redo the last action</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.jump(<span class="number">-2</span>)) <span class="comment">// undo 2 steps</span></div><div class="line">store.dispatch(ActionCreators.jump(<span class="number">5</span>)) <span class="comment">// redo 5 steps</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.jumpToPast(index)) <span class="comment">// jump to requested index in the past[] array</span></div><div class="line">store.dispatch(ActionCreators.jumpToFuture(index)) <span class="comment">// jump to requested index in the future[] array</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.clearHistory()) <span class="comment">// [beta only] Remove all items from past[] and future[] arrays</span></div></pre></td></tr></table></figure>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>A configuration object can be passed to <code>undoable()</code> like this (values shown<br>are default values):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">limit</span>: <span class="literal">false</span>, <span class="comment">// set to a number to turn on a limit for the history</span></div><div class="line"></div><div class="line">  filter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>, <span class="comment">// see `Filtering Actions` section</span></div><div class="line"></div><div class="line">  undoType: ActionTypes.UNDO, <span class="comment">// define a custom action type for this undo action</span></div><div class="line">  redoType: ActionTypes.REDO, <span class="comment">// define a custom action type for this redo action</span></div><div class="line"></div><div class="line">  jumpType: ActionTypes.JUMP, <span class="comment">// define custom action type for this jump action</span></div><div class="line"></div><div class="line">  jumpToPastType: ActionTypes.JUMP_TO_PAST, <span class="comment">// define custom action type for this jumpToPast action</span></div><div class="line">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, <span class="comment">// define custom action type for this jumpToFuture action</span></div><div class="line"></div><div class="line">  clearHistoryType: ActionTypes.CLEAR_HISTORY, <span class="comment">// [beta only] define custom action type for this clearHistory action</span></div><div class="line">  <span class="comment">// you can also pass an array of strings to define several action types that would clear the history</span></div><div class="line">  <span class="comment">// beware: those actions will not be passed down to the wrapped reducers</span></div><div class="line"></div><div class="line">  initTypes: [<span class="string">'@@redux-undo/INIT'</span>] <span class="comment">// history will be (re)set upon init action type</span></div><div class="line">  <span class="comment">// beware: those actions will not be passed down to the wrapped reducers</span></div><div class="line"></div><div class="line">  debug: <span class="literal">false</span>, <span class="comment">// set to `true` to turn on debugging</span></div><div class="line"></div><div class="line">  neverSkipReducer: <span class="literal">false</span>, <span class="comment">// prevent undoable from skipping the reducer on undo/redo and clearHistoryType actions</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> If you want to use just the <code>initTypes</code> functionality, but not import<br>the whole redux-undo library, use <a href="https://github.com/omnidan/redux-recycle" target="_blank" rel="external">redux-recycle</a>!</p>
<h4 id="Initial-State-and-History"><a href="#Initial-State-and-History" class="headerlink" title="Initial State and History"></a>Initial State and History</h4><p>You can use your redux store to set an initial history for your undoable reducers:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialHistory = &#123;</div><div class="line">  <span class="attr">past</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  <span class="attr">present</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">future</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(undoable(counter), initialHistory);</div></pre></td></tr></table></figure>
<p>Or just set the current state like you’re used to with Redux. Redux-undo will create the history for you:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(undoable(counter), &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">// will make the state look like this:</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">past</span>: [],</div><div class="line">  <span class="attr">present</span>: &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;,</div><div class="line">  <span class="attr">future</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Filtering-Actions"><a href="#Filtering-Actions" class="headerlink" title="Filtering Actions"></a>Filtering Actions</h3><p>If you don’t want to include every action in the undo/redo history, you can<br>add a <code>filter</code> function to <code>undoable</code>. <code>redux-undo</code> provides you with the<br><code>includeAction</code> and <code>excludeAction</code> helpers for basic filtering.</p>
<p>They should be imported like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123; includeAction, excludeAction &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Now you can use the helper functions:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: includeAction(SOME_ACTION) &#125;)</div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: excludeAction(SOME_ACTION) &#125;)</div><div class="line"></div><div class="line"><span class="comment">// they even support Arrays:</span></div><div class="line"></div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: includeAction([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: excludeAction([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> Since <a href="https://github.com/omnidan/redux-undo/releases/tag/beta4" target="_blank" rel="external"><code>beta4</code></a>,<br>          only actions resulting in a new state are recorded. This means the<br>          (now deprecated) <code>distinctState()</code> filter is auto-applied.</p>
<h4 id="Custom-filters"><a href="#Custom-filters" class="headerlink" title="Custom filters"></a>Custom filters</h4><p>If you want to create your own filter, pass in a function with the signature<br><code>(action, currentState, previousHistory)</code>. For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: <span class="function"><span class="keyword">function</span> <span class="title">filterActions</span>(<span class="params">action, currentState, previousHistory</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> action.type === SOME_ACTION; <span class="comment">// only add to history if action is SOME_ACTION</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// The entire `history` state is available to your filter, so you can make</span></div><div class="line"><span class="comment">// decisions based on past or future states:</span></div><div class="line"></div><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: <span class="function"><span class="keyword">function</span> <span class="title">filterState</span>(<span class="params">action, currentState, previousHistory</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> &#123; past, present, future &#125; = previousHistory;</div><div class="line">    <span class="keyword">return</span> future.length === <span class="number">0</span>; <span class="comment">// only add to history if future is empty</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Combining-Filters"><a href="#Combining-Filters" class="headerlink" title="Combining Filters"></a>Combining Filters</h3><p>You can also use our helper to combine filters.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123;combineFilters&#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActionSelfExcluded</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> action.wouldLikeToBeInHistory</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">areWeRecording</span>(<span class="params">action, state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.recording</div><div class="line">&#125;</div><div class="line"></div><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: combineFilters(isActionSelfExcluded, areWeRecording)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Ignoring-Actions"><a href="#Ignoring-Actions" class="headerlink" title="Ignoring Actions"></a>Ignoring Actions</h3><p>When implementing a filter function, it only prevents the old state from being<br>stored in the history. <strong><code>filter</code> does not prevent the present state from being<br>updated.</strong></p>
<p>If you want to ignore an action completely, as in, not even update the present<br>state, you can make use of <a href="https://github.com/omnidan/redux-ignore" target="_blank" rel="external">redux-ignore</a>.</p>
<p>It can be used like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ignoreActions &#125; <span class="keyword">from</span> <span class="string">'redux-ignore'</span></div><div class="line"></div><div class="line">ignoreActions(</div><div class="line">  undoable(reducer),</div><div class="line">  [IGNORED_ACTION, ANOTHER_IGNORED_ACTION]</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// or define your own function:</span></div><div class="line"></div><div class="line">ignoreActions(</div><div class="line">  undoable(reducer),</div><div class="line">  (action) =&gt; action.type === SOME_ACTION <span class="comment">// only add to history if action is SOME_ACTION</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="What-is-this-magic-How-does-it-work"><a href="#What-is-this-magic-How-does-it-work" class="headerlink" title="What is this magic? How does it work?"></a>What is this magic? How does it work?</h2><p>Have a read of the <a href="http://redux.js.org/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="external">Implementing Undo History recipe</a> in the Redux documents, which explains in detail how redux-undo works.</p>
<h2 id="Gitter-Chat-Support"><a href="#Gitter-Chat-Support" class="headerlink" title="Gitter Chat / Support"></a>Gitter Chat / Support</h2><p>If you have a question or just want to discuss something with other redux-undo users/maintainers, <a href="https://gitter.im/omnidan/redux-undo" target="_blank" rel="external">chat with the community on gitter.im/omnidan/redux-undo</a></p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT, see <code>LICENSE.md</code> for more information.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redux-undo-redo&quot;&gt;&lt;a href=&quot;#redux-undo-redo&quot; class=&quot;headerlink&quot; title=&quot;redux undo/redo&quot;&gt;&lt;/a&gt;redux undo/redo&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是把re
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Simple React Native forms with redux-form, immutable.js and styled-components - Esben Petersen</title>
    <link href="http://yoursite.com/2017/04/04/%E7%BF%BB%E8%AF%91-Simple-React-Native-forms-with-redux-form-immutable-js-and-styled-components-Esben-Petersen/"/>
    <id>http://yoursite.com/2017/04/04/翻译-Simple-React-Native-forms-with-redux-form-immutable-js-and-styled-components-Esben-Petersen/</id>
    <published>2017-04-03T16:07:15.000Z</published>
    <updated>2017-04-03T12:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在React中处理表单还不怎么好弄,看看这篇文章讲的挺好的看看,试着翻译一下<br>  <a href="http://esbenp.github.io/2017/01/06/react-native-redux-form-immutable-styled-components/" target="_blank" rel="external">原文参看</a></p>
</blockquote>
<h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>如果你想看看怎么在react-native 想使用redux-form和immutable.js.你看可以看看<a href="https://github.com/esbenp/react-native-redux-form-example" target="_blank" rel="external">这篇文章的代码</a></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在<code>Traede</code>,我使用redux整合redux-form来创建表单.redux-form是一个非常好的库,但是没有什么好的示例代码介绍怎么和React-native配合使用.所以当我开始在React-Natvie中使用redux-form的时候,发现还是有一点难度的.大多数的情况都因为我发现在React-Native中使用Immutable.js的时候会中断redux-form运行的bug.Redux-form主版本号已经到了6.4.2了.所以我考虑可以根据我的学习过程来写一点怎么在应用中同时使用redux-form和Immutable.js的文档.</p>
<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><p>大体的步骤是:</p>
<ol>
<li>看看redux-form在native和web之间的差异点</li>
<li>看看怎么使redux-form和Immutable.js一起使用</li>
<li>使用react-native-clean-form的完整实例</li>
</ol>
<p>鸡冻不？好了,开始了</p>
<h2 id="在React-native中使用redux-form"><a href="#在React-native中使用redux-form" class="headerlink" title="在React-native中使用redux-form"></a>在React-native中使用redux-form</h2><p>如果你不太熟悉redux-form,我建议你看看<a href="http://redux-form.com/6.4.3/docs/GettingStarted.md/" target="_blank" rel="external">redux-form简单文档</a><br>.<em>注意：这个指南假定你使用的redux-form的版本大于6.4.2</em>.如果不是这个版本,并且还在使用Immutable.js,那么要看看这个<a href="https://github.com/erikras/redux-form/pull/2336" target="_blank" rel="external">issue</a>.创建一个表单基础的三个步骤是:</p>
<ol>
<li>在你的redux store中加入redux-form reducer</li>
<li>使用<code>reduxForm</code>包装器把你的表单连接到store</li>
<li>使用<code>Field</code>包装器把特定的表单字段连接到Store</li>
</ol>
<h3 id="0-创建React-Native-项目"><a href="#0-创建React-Native-项目" class="headerlink" title="0. 创建React Native 项目"></a>0. 创建React Native 项目</h3><p>假设你已经有了可以运行的React Native项目.如果没有,使用<code>react-native init MyReduxFormProjct</code>终端命令行命令也很容易创建项目.</p>
<h3 id="1-把redux-form-reducer添加到你的redux-store"><a href="#1-把redux-form-reducer添加到你的redux-store" class="headerlink" title="1.把redux-form reducer添加到你的redux store"></a>1.把redux-form reducer添加到你的redux store</h3><p>做这一步,请参考<a href="http://redux-form.com/6.4.3/docs/GettingStarted.md/" target="_blank" rel="external">redux-form文档</a></p>
<h3 id="2-使用redux-form包装器把你的form连接到store"><a href="#2-使用redux-form包装器把你的form连接到store" class="headerlink" title="2.使用redux-form包装器把你的form连接到store"></a>2.使用redux-form包装器把你的form连接到store</h3><p>我们使用一个简单的表单来开始工作.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  TextInput,</div><div class="line">  TouchableOpacity,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;styles.input&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Form</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  button: &#123;</div><div class="line">    backgroundColor: 'blue',</div><div class="line">    color: 'white',</div><div class="line">    height: 30,</div><div class="line">    lineHeight: 30,</div><div class="line">    marginTop: 10,</div><div class="line">    textAlign: 'center',</div><div class="line">    width: 250</div><div class="line">  &#125;,</div><div class="line">  container: &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  input: &#123;</div><div class="line">    borderColor: 'black',</div><div class="line">    borderWidth: 1,</div><div class="line">    height: 37,</div><div class="line">    width: 250</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe9qllp362j30680b4743.jpg" alt=""></p>
<p>好了,我们已经有了表单,看起来和十亿美元级别的app差不多.下面我们需要使用<code>reduxForm</code>包装器把表单连接到redux form上.这是因为在表单中的每一个按键操作都会发送输入字段的值到store.当我们按下提交按钮,redux-form将会从store中获取保存的值发送到一个我们定制的回调函数.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; reduxForm &#125; <span class="keyword">from</span> <span class="string">'redux-form'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> submit = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'submitting form'</span>, values)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; handleSubmit &#125; = props</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;styles.input&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;handleSubmit(submit)&#125;</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(&#123;</div><div class="line">  form: 'test'</div><div class="line">&#125;)(Form)</div></pre></td></tr></table></figure>
<p><em>注释：为了简单,省略了样式和对象的导入代码</em></p>
<p>好了,首先我们使用<code>reduxForm</code>包装form并连接到store.这是<code>react-redux</code>的基础版本之上的一点修改,可能你比较熟悉了.</p>
<p>接着,我们使用了redux-form的<code>handleSubmit</code>(这个函数是通过<code>redux-Form注入到组件中的</code>).submit函数附加到我们的submit按钮上,所以点击按钮的时候,表单会被提交.这一点和web开发的submit函数是不同的,web开发中这个函数附加到form元素上.在移动平台上没有form元素,所以我们直接把它添加到button上,或者<code>TouchableOpaticy</code>.就是这么回事.</p>
<p>到了这一步,可以使用模拟器运行代码试试.我高度推荐<code>react-native-debugger</code>作为Debugger.你可以看看<a href="https://facebook.github.io/react-native/docs/debugging.html" target="_blank" rel="external">React Native 有关degugging文档</a>的建议.</p>
<p>当你在模拟器中试着点击提交表单时,你可以看到回调函数返回了空值.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe9qmb54t8j31aq0e0dh3.jpg" alt=""></p>
<p>值在哪里呢？</p>
<h3 id="3-使用Field包装器把fields连接到store"><a href="#3-使用Field包装器把fields连接到store" class="headerlink" title="3.使用Field包装器把fields连接到store"></a>3.使用Field包装器把fields连接到store</h3><p>所以说,redux-form要工作,你必须要使用<code>Field</code>包装器把每一个field连接到store.</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml"> import </span><span class="template-variable">&#123; Field, reduxForm &#125;</span><span class="xml"> from 'redux-form'</span></div><div class="line"></div><div class="line">const submit = values =&gt; <span class="template-variable">&#123;</span></div><div class="line">  console.log('submitting form', values)</div><div class="line">&#125;<span class="xml"></span></div><div class="line"></div><div class="line">const renderInput = (<span class="template-variable">&#123; input: &#123; onChange, ...restInput &#125;</span><span class="xml">&#125;) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line">  return &lt;TextInput style=&#123;styles.input&#125;<span class="xml"> onChangeText=</span><span class="template-variable">&#123;onChange&#125;</span><span class="xml"> </span><span class="template-variable">&#123;...restInput&#125;</span><span class="xml"> /&gt;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">const Form = props =&gt; <span class="template-variable">&#123;</span></div><div class="line">  const &#123; handleSubmit &#125;<span class="xml"> = props</span></div><div class="line"></div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.container&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;renderInput&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=</span><span class="template-variable">&#123;handleSubmit(submit)&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.button&#125;</span><span class="xml"><span class="tag">&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(<span class="template-variable">&#123;</span></div><div class="line">  form: 'test'</div><div class="line">&#125;<span class="xml">)(Form)</span></div></pre></td></tr></table></figure>
<p>注意,我们添加了<code>Field</code>组件,给定了name属性,和web开发中的<code>input</code>field工作是类似的.我们也添加了一个渲染函数告诉reduxForm,这个字段应该怎么渲染.(基本上就是一个<code>TextInput</code>组件).</p>
<p><em>现在</em>这里有些小技巧,很多人可能会出错.<strong>所以留心一下</strong>.在web Reac中<code>input</code>组件中,当field的值发生变化时,触发一个<code>onChange</code>回调函数.在React Native中<code>TextInput</code>组件触发的是<code>onChangeText</code>回调函数.为了应对这个问题,我们手动添加变化的句柄<code>onChangeText={onChange}</code>.</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fe9qmuwabmj31ao0cmdh6.jpg" alt=""><br>现在当我们提交的时候,表单工作了.</p>
<h2 id="使用Immutable-js时候也可以工作"><a href="#使用Immutable-js时候也可以工作" class="headerlink" title="使用Immutable.js时候也可以工作"></a>使用Immutable.js时候也可以工作</h2><p>如果你想在state的管理中使用immutable.js,那么需要一些额外的步骤了配合redux-form工作.我建议你读读<a href="http://redux-form.com/6.4.3/examples/immutable/" target="_blank" rel="external">使用immutable.js和redux-form的官方文档</a>.但是我们通过一些步骤马上开始.</p>
<h3 id="1-使用redux-immutablejs-combineReducers和redux-form-reducer的immutable版本"><a href="#1-使用redux-immutablejs-combineReducers和redux-form-reducer的immutable版本" class="headerlink" title="1.使用redux-immutablejs combineReducers和redux-form reducer的immutable版本"></a>1.使用redux-immutablejs combineReducers和redux-form reducer的immutable版本</h3><p>找到你穿件redux store的代码处</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux-immutablejs'</span></div><div class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> form &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span> <span class="comment">// &lt;--- immutable import</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123; form &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</div></pre></td></tr></table></figure>
<p>这里有两件事:(1)你必须使用从redux-immutable或者redux-immutablejs注入<code>combineReducers</code>方法.重要的是输入的reducer是从<code>redux-form/immutable</code>.<strong>并不是redux-form</strong>.</p>
<h3 id="2-使用reduxForm包装器和Field的immutable版本"><a href="#2-使用reduxForm包装器和Field的immutable版本" class="headerlink" title="2.使用reduxForm包装器和Field的immutable版本"></a>2.使用reduxForm包装器和Field的immutable版本</h3><p>这一步和第一步实际有点类似.当你在<code>reduxForm</code>中包装一个表单连接到redux store的时候,确保是从<code>redux-form/immutable</code>导入的.类似<br><code>Field</code>也是从这里导入的.<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml">import </span><span class="template-variable">&#123; Field, reduxForm &#125;</span><span class="xml"> from 'redux-form/immutable' // <span class="tag">&lt;<span class="name">----</span> <span class="attr">LOOK</span> <span class="attr">HERE</span></span></span></div><div class="line"></div><div class="line"><span class="attr">const</span> <span class="attr">submit</span> = <span class="string">values</span> =&gt; <span class="template-variable">&#123;</span></div><div class="line">  console.log('submitting form', values.toJS()) &lt;--- use toJS() to cast to plain object</div><div class="line">&#125;<span class="xml"></span></div><div class="line"></div><div class="line">const renderInput = (<span class="template-variable">&#123; input: &#123; onChange, ...restInput &#125;</span><span class="xml">&#125;) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line">  return &lt;TextInput style=&#123;styles.input&#125;<span class="xml"> onChangeText=</span><span class="template-variable">&#123;onChange&#125;</span><span class="xml"> </span><span class="template-variable">&#123;...restInput&#125;</span><span class="xml"> /&gt;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">const Form = props =&gt; <span class="template-variable">&#123;</span></div><div class="line">  const &#123; handleSubmit &#125;<span class="xml"> = props</span></div><div class="line"></div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.container&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;renderInput&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=</span><span class="template-variable">&#123;handleSubmit(submit)&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.button&#125;</span><span class="xml"><span class="tag">&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(<span class="template-variable">&#123;</span></div><div class="line">  form: 'test'</div><div class="line">&#125;<span class="xml">)(Form)</span></div></pre></td></tr></table></figure></p>
<h3 id="3-完成了"><a href="#3-完成了" class="headerlink" title="3.完成了"></a>3.完成了</h3><p>就这些内容,是不是很简单？</p>
<h2 id="加点样式组件让我们的app看起来像十亿美元级别的app"><a href="#加点样式组件让我们的app看起来像十亿美元级别的app" class="headerlink" title="加点样式组件让我们的app看起来像十亿美元级别的app"></a>加点样式组件让我们的app看起来像十亿美元级别的app</h2><p>使用绝对酷炫的React样式库<a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">styled-components</a> .<br>看看源代码<a href="https://github.com/esbenp/react-native-clean-form" target="_blank" rel="external">esbenp/react-native-clean-form</a></p>
<h3 id="第一步-安装react-native-clean-form"><a href="#第一步-安装react-native-clean-form" class="headerlink" title="第一步:安装react-native-clean-form"></a>第一步:安装react-native-clean-form</h3><p>使用<code>npm install —save react-native-clean-form</code>安装form元素.<br>也需要vector icon fonts.<a href="https://github.com/esbenp/react-native-clean-form#installation" target="_blank" rel="external">Readme</a></p>
<h3 id="第二步-设计酷炫的表单"><a href="#第二步-设计酷炫的表单" class="headerlink" title="第二步:设计酷炫的表单"></a>第二步:设计酷炫的表单</h3><p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe9qnc5uf1j30ku0cdaag.jpg" alt=""></p>
<p>看看代码</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="xml"> import React, </span><span class="template-variable">&#123; Component &#125;</span><span class="xml"> from 'react'</span></div><div class="line">import <span class="template-variable">&#123;</span></div><div class="line">  ActionsContainer,</div><div class="line">  Button,</div><div class="line">  FieldsContainer,</div><div class="line">  Fieldset,</div><div class="line">  Form,</div><div class="line">  FormGroup,</div><div class="line">  Label,</div><div class="line">  Input,</div><div class="line">  <span class="keyword">Select</span>,</div><div class="line">  Switch</div><div class="line">&#125;<span class="xml"> from 'react-native-clean-form'</span></div><div class="line"></div><div class="line">const countryOptions = [</div><div class="line">  <span class="template-variable">&#123;label: 'Denmark', value: 'DK'&#125;</span><span class="xml">,</span></div><div class="line">  <span class="template-variable">&#123;label: 'Germany', value: 'DE'&#125;</span><span class="xml">,</span></div><div class="line">  <span class="template-variable">&#123;label: 'United State', value: 'US'&#125;</span><span class="xml"></span></div><div class="line">]</div><div class="line"></div><div class="line">const FormView = props =&gt; (</div><div class="line">  <span class="tag">&lt;<span class="name">Form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">FieldsContainer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Fieldset</span> <span class="attr">label</span>=<span class="string">"Contact details"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"John"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Last name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Doe"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"+45 88 88 88 88"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"John"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Fieldset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Fieldset</span> <span class="attr">label</span>=<span class="string">"Shipping details"</span> <span class="attr">last</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Hejrevej 33"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>City<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Copenhagen"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>ZIP Code<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"2400"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Select</span></span></div><div class="line">              <span class="attr">name</span>=<span class="string">"country"</span></div><div class="line">              <span class="attr">label</span>=<span class="string">"Country"</span></div><div class="line">              <span class="attr">options</span>=<span class="template-variable">&#123;countryOptions&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">              <span class="attr">placeholder</span>=<span class="string">"Denmark"</span></div><div class="line">          /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span> <span class="attr">border</span>=</span><span class="template-variable">&#123;false&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Save my details<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">FieldsContainer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ActionsContainer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">"md-checkmark"</span> <span class="attr">iconPlacement</span>=<span class="string">"right"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ActionsContainer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></div><div class="line">)</div><div class="line"></div><div class="line">export default FormView</div></pre></td></tr></table></figure>
<p>如果你比较熟悉Twitter Bootstrap你可以从react-native-clean-form中看到类似的句法.好了输入<code>Input</code>,<code>Select</code>和<code>Switch</code>.这里的元素已经被包装在<code>FromGroup</code>和<code>Label</code>.此外我们也支持验证</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; reduxForm &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  ActionsContainer,</div><div class="line">  Button,</div><div class="line">  FieldsContainer,</div><div class="line">  Fieldset,</div><div class="line">  Form</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native-clean-form'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Input,</div><div class="line">  Select,</div><div class="line">  Switch</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native-clean-form/redux-form-immutable'</span></div><div class="line"><span class="keyword">import</span> &#123; View,Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line">const onSubmit = <span class="function"><span class="params">(values, dispatch)</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve)</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(values.toJS())</div><div class="line">      resolve()</div><div class="line">    &#125;, <span class="number">1500</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">const countryOptions = [</div><div class="line">  &#123;label: <span class="string">'Denmark'</span>, value: <span class="string">'DK'</span>&#125;,</div><div class="line">  &#123;label: <span class="string">'Germany'</span>, value: <span class="string">'DE'</span>&#125;,</div><div class="line">  &#123;label: <span class="string">'United State'</span>, value: <span class="string">'US'</span>&#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormView</span> <span class="keyword">extends</span> <span class="title">Component</span> &#123;</span></div><div class="line">  render() &#123;</div><div class="line">    const &#123; handleSubmit, submitting &#125; = <span class="keyword">this</span>.props</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Form&gt;</div><div class="line">        &lt;FieldsContainer&gt;</div><div class="line">          &lt;Fieldset label=<span class="string">"Contact details"</span>&gt;</div><div class="line">            &lt;Input name=<span class="string">"first_name"</span> label=<span class="string">"First name"</span> placeholder=<span class="string">"John"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"last_name"</span> label=<span class="string">"Last name"</span> placeholder=<span class="string">"Doe"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"email"</span> label=<span class="string">"Email"</span> placeholder=<span class="string">"something@domain.com"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"telephone"</span> label=<span class="string">"Phone"</span> placeholder=<span class="string">"+45 88 88 88 88"</span> /&gt;</div><div class="line">          &lt;/Fieldset&gt;</div><div class="line">          &lt;Fieldset label=<span class="string">"Shipping details"</span> last&gt;</div><div class="line">            &lt;Input name=<span class="string">"address"</span> label=<span class="string">"Address"</span> placeholder=<span class="string">"Hejrevej 33"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"city"</span> label=<span class="string">"City"</span> placeholder=<span class="string">"Copenhagen"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"zip"</span> label=<span class="string">"ZIP Code"</span> placeholder=<span class="string">"2400"</span> /&gt;</div><div class="line">            &lt;Select</div><div class="line">              name=<span class="string">"country"</span></div><div class="line">              label=<span class="string">"Country"</span></div><div class="line">              options=&#123;countryOptions&#125;</div><div class="line">              placeholder=<span class="string">"Denmark"</span></div><div class="line">            /&gt;</div><div class="line">            &lt;Switch label=<span class="string">"Save my details"</span> border=&#123;<span class="literal">false</span>&#125; name=<span class="string">"save_details"</span> /&gt;</div><div class="line">          &lt;/Fieldset&gt;</div><div class="line">        &lt;/FieldsContainer&gt;</div><div class="line">        &lt;ActionsContainer&gt;</div><div class="line">          &lt;Button icon=<span class="string">"md-checkmark"</span> iconPlacement=<span class="string">"right"</span> onPress=&#123;handleSubmit(onSubmit)&#125; submitting=&#123;submitting&#125;&gt;Save&lt;/Button&gt;</div><div class="line">        &lt;/ActionsContainer&gt;</div><div class="line">      &lt;/Form&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> reduxForm(&#123;</div><div class="line">  form: <span class="string">'Form'</span>,</div><div class="line">  validate: values =&gt; &#123;</div><div class="line">    const errors = &#123;&#125;</div><div class="line"></div><div class="line">    values = values.toJS()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.first_name) &#123;</div><div class="line">      errors.first_name = <span class="string">'First name is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.last_name) &#123;</div><div class="line">      errors.last_name = <span class="string">'Last name is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.email) &#123;</div><div class="line">      errors.email = <span class="string">'Email is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> errors</div><div class="line">  &#125;</div><div class="line">&#125;)(FormView)</div></pre></td></tr></table></figure>
<p>很简单，是吗？现在我们有了一个连接到store的好看的表单,还能支持数据验证,异步的按钮反馈.你可以在<a href="https://github.com/esbenp/react-native-clean-form" target="_blank" rel="external">repository查看更多特性</a>.</p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在React中处理表单还不怎么好弄,看看这篇文章讲的挺好的看看,试着翻译一下&lt;br&gt;  &lt;a href=&quot;http://esbenp.github.io/2017/01/06/react-native-redux-form-immutable-st
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(8)-Views</title>
    <link href="http://yoursite.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-8-Views/"/>
    <id>http://yoursite.com/2017/03/30/翻译-React-navigation导航系统-8-Views/</id>
    <published>2017-03-30T14:04:48.000Z</published>
    <updated>2017-03-30T10:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><p>Navigation 视图是接受<code>router</code>和<code>navigaion</code> 的prop的表征组件,通过<code>navigation.state</code>的设定,可以显示几个screens.<br>Navigation view是被控制的React组件,表征当前的navigation state.他们管理screen之间的切换,动画和手势.他们也持久化navigation view例如tab bars和headers</p>
<h2 id="内建的Views"><a href="#内建的Views" class="headerlink" title="内建的Views"></a>内建的Views</h2><ul>
<li><p>CardStack-代表stack在任何平台上都匹配</p>
<ul>
<li>代表一个从Card stack来的card.</li>
<li>Header-card stack的header view</li>
</ul>
</li>
<li><p>Tabs-tab切换器/页面的配置</p>
</li>
<li>Drawer-从左侧滑出的Drawer的view</li>
</ul>
<h1 id="Transitioner"><a href="#Transitioner" class="headerlink" title="Transitioner"></a>Transitioner</h1><p><code>transitioner</code>是一个React 组件帮助管理复杂动画组件之间演变的工具.它管理动画的时间调度,保留各种screen的进入离开的记录,但是它不知道具体的事件是什么,应为具体的渲染过程委托给了开发者.<br>在内部,<code>Transitioner</code>被用来实施<code>CardStack</code>,因此是<code>StackNavigator</code>.<br><code>Transiioner</code>最有用的用途是接受当前navigation的state.当routes从navigation state移除的时候,<code>Transitioner</code></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyNavView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Transitioner</span></div><div class="line">        configureTransition=&#123;<span class="keyword">this</span>._configureTransition&#125;</div><div class="line">        navigation=&#123;<span class="keyword">this</span>.props.navigation&#125;</div><div class="line">        render=&#123;<span class="keyword">this</span>._render&#125;</div><div class="line">        onTransitionStart=&#123;<span class="keyword">this</span>.onTransitionStart&#125;</div><div class="line">        onTransitionEnd=&#123;<span class="keyword">this</span>.onTransitionEnd&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="configureTransitionfunction"><a href="#configureTransitionfunction" class="headerlink" title="configureTransitionfunction"></a><code>configureTransition</code>function</h3><p>被<code>Transitioner.componentWillReceiveProps</code>,这个函数允许定制动画的参数,例如<code>延续时间</code>.这个函数返回的值将会传递进入时间序列函数,默认是<code>Animated.timing()</code>.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">_configureTransition</span>(transitionProps, prevTransitionProps) &#123;</div><div class="line">  return &#123;</div><div class="line">    // duration <span class="keyword">in</span> milliseconds, <span class="keyword">default</span>: 250</div><div class="line">    duration: <span class="number">500</span>,</div><div class="line">    // <span class="type">An</span> easing function from `<span class="type">Easing</span>`, <span class="keyword">default</span>: <span class="type">Easing</span>.inOut(<span class="type">Easing</span>.<span class="title">ease</span>)</div><div class="line">    easing: <span class="type">Easing</span>.bounce,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:<code>duration</code>和<code>easing</code>只用当时间序列函数是<code>Animated.timing</code>的时候才可以应用.我们可以根据不同的config参数来使用不同的时间函数.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> _configureTransition(transitionProps, prevTransitionProps) &#123;</div><div class="line">  <span class="class">return </span>&#123;</div><div class="line">    <span class="comment">// A timing function, default: Animated.timing.</span></div><div class="line"><span class="symbol">    timing:</span> Animated.spring,</div><div class="line">    <span class="comment">// Some parameters relevant to Animated.spring</span></div><div class="line"><span class="symbol">    friction:</span> <span class="number">1</span>,</div><div class="line"><span class="symbol">    tension:</span> <span class="number">0.5</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Flow-definition"><a href="#Flow-definition" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">configureTransition:</span> (</div><div class="line"><span class="symbol">    transitionProps:</span> NavigationTransitionProps,</div><div class="line"><span class="symbol">    prevTransitionProps:</span> ?NavigationTransitionProps,</div><div class="line">  ) =&gt; NavigationTransitionSpec,</div></pre></td></tr></table></figure>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul>
<li><code>transitionProps</code>:有当前的navigation state和props创建的当前<code>NavigationTransitionProps</code></li>
<li><code>prevTransitionProps</code>:从前一个navigation stae和props创建的前一个NavigationTransitionProps</li>
</ul>
<h3 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h3><ul>
<li>NavigationTransitionSpec类型的对象,作为参数传递进动画时间序列函数</li>
</ul>
<p><code>navigationState</code>对象<br>代表navigation state的简单对象</p>
<h3 id="实例值"><a href="#实例值" class="headerlink" title="实例值"></a>实例值</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="comment">// Index refers to the active child route in the routes array.</span></div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>,</div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'DF2FGWGAS-12'</span>, <span class="attribute">routeName</span>: <span class="string">'ContactHome'</span> &#125;,</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'DF2FGWGAS-13'</span>, <span class="attribute">routeName</span>: <span class="string">'ContactDetail'</span>, <span class="attribute">params</span>: &#123; <span class="attribute">personId</span>: <span class="number">123</span> &#125; &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Flow-definition-1"><a href="#Flow-definition-1" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="class"><span class="keyword">type</span> <span class="type">NavigationState</span> = &#123;</span></div><div class="line">  <span class="title">index</span>: <span class="title">number</span>,</div><div class="line">  <span class="title">routes</span>: <span class="type">Array</span>&lt;<span class="type">NavigationRoute</span>&gt;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>了解更多的<code>NavigationRoute</code>的类型,查看<a href="https://github.com/react-community/react-navigation/blob/master/src/TypeDefinition.js#L32" target="_blank" rel="external">flow definition</a></p>
<h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a><code>render</code>函数</h2><p>由<code>Transition.render()</code>调用.这个函数代理了<code>Transitioner</code>的实际渲染功能.在这个函数中,我们可以使用包含在<code>transitionProps</code>和<code>prevTransitionProps</code>中的参数来渲染scene,创建动画和处理手势操作.</p>
<p><code>transitionProps</code>和<code>prevTransitionProps</code>有一些重要的属性对于上面提到的一些任务是十分有用的.</p>
<ul>
<li><code>scenes:Array&lt;NavigationScene&gt;</code>-可以使用的scenes的列表</li>
<li><code>position:NavigationAnimation</code>- transitioner的navigation  state的进度索引</li>
<li><code>progress:NavigationAnimationedValue</code>-当navigation state从一个转变到另一的时候,这个值代表了演变的进度.从0-1的数值</li>
</ul>
<p>查看完整的<code>NavigationTransitionProps</code>的属性列表.查看看<a href="https://github.com/react-community/react-navigation/blob/master/src/TypeDefinition.js#L273" target="_blank" rel="external">flow definition</a></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p><code>transitionProps.scenes</code>是可以使用的scenes的列表.这个列表依赖于实施者准备怎么来列出screen.例如,可以像下面的代码来渲染cards的堆栈</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> _render(transitionProps, prevTransitionProps) &#123;</div><div class="line">  <span class="keyword">const</span> scenes = transitionProps.scenes.map(<span class="function"><span class="params">scene</span> =&gt;</span> <span class="keyword">this</span>._renderScene(transitionProps, scene));</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.stack&#125;</span>&gt;</span></span></div><div class="line">      &#123;scenes&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以使用<code>Animated.View</code>去执行演变动画.为了创建必要的动画样式属性,例如<code>透明度</code>,我们可以在<code>position</code>和<code>progress</code>中利用<code>transitionProps</code>来插值.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> _renderScene(transitionProps, <span class="built_in">scene</span>) &#123;</div><div class="line">  const &#123; <span class="built_in">position</span> &#125; = transitionProps;</div><div class="line">  const &#123; index &#125; = <span class="built_in">scene</span>;</div><div class="line">  const <span class="built_in">opacity</span> = <span class="built_in">position</span>.interpolate(&#123;</div><div class="line">    inputRange: [index-<span class="number">1</span>, index, index+<span class="number">1</span>],</div><div class="line">    outputRange: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">  &#125;);</div><div class="line">  // The prop `router` <span class="built_in">is</span> populated when we call `createNavigator`.</div><div class="line">  const Scene = this.<span class="built_in">props</span>.router.getComponent(<span class="built_in">scene</span>.route.routeName);</div><div class="line">  <span class="built_in">return</span> (</div><div class="line">    &lt;Animated.View <span class="built_in">style</span>=&#123;&#123; <span class="built_in">opacity</span> &#125;&#125;&gt;</div><div class="line">      &#123; Scene &#125;</div><div class="line">    &lt;/Animated.View&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码创建交叉渐隐的动画.<br>深入理解如何创建定制的transitions,看看这个<a href="http://www.reactnativediary.com/2016/12/20/navigation-experimental-custom-transition-1.html" target="_blank" rel="external">博客帖子</a></p>
<h3 id="Flow-definition-2"><a href="#Flow-definition-2" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="params">(transitionProps: NavigationTransitionProps, prevTransitionProps: ?NavigationTransitionProps)</span> =&gt;</span> React.Element&lt;*&gt;,</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><code>transitionProps</code>:从当前state和props创建的NavigationTransitionProps.</li>
<li><code>prevTransitionProps</code>:从之前的state和props创建的先前<code>NavigationTransitionProps</code></li>
</ul>
<h3 id="Returns-1"><a href="#Returns-1" class="headerlink" title="Returns"></a>Returns</h3><ul>
<li>React元素,用来渲染Transitioner 组件</li>
</ul>
<h2 id="onTransitionEnd函数"><a href="#onTransitionEnd函数" class="headerlink" title="onTransitionEnd函数"></a><code>onTransitionEnd</code>函数</h2><p>动画演变完成后调用一次.</p>
<h3 id="Flow-definition-3"><a href="#Flow-definition-3" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onTransitionEnd: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span></div></pre></td></tr></table></figure>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul>
<li>none<h3 id="Returns-2"><a href="#Returns-2" class="headerlink" title="Returns"></a>Returns</h3></li>
<li>none</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Views&quot;&gt;&lt;a href=&quot;#Views&quot; class=&quot;headerlink&quot; title=&quot;Views&quot;&gt;&lt;/a&gt;Views&lt;/h1&gt;&lt;p&gt;Navigation 视图是接受&lt;code&gt;router&lt;/code&gt;和&lt;code&gt;navigaion&lt;/code&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(7)-Router</title>
    <link href="http://yoursite.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-7-Router/"/>
    <id>http://yoursite.com/2017/03/30/翻译-React-navigation导航系统-7-Router/</id>
    <published>2017-03-30T09:57:00.000Z</published>
    <updated>2017-03-30T06:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Routers"><a href="#Routers" class="headerlink" title="Routers"></a>Routers</h1><blockquote>
<p>Router定义一个组件的navigation state,允许开发者定义路径和可以操作的actions.</p>
<h2 id="内建的Routers"><a href="#内建的Routers" class="headerlink" title="内建的Routers"></a>内建的Routers</h2><ul>
<li>StackRouter</li>
<li>TabRouter</li>
</ul>
</blockquote>
<h2 id="使用Routers"><a href="#使用Routers" class="headerlink" title="使用Routers"></a>使用Routers</h2><p>为了手动定制一个navigator,在组件里可以放一个静态的<code>router</code>.(使用内建的组件快速的定制一个navigator,使用<a href="https://reactnavigation.org/docs/navigators" target="_blank" rel="external">Navigator Factory</a>更容易实现).</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyNavigator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    static router = <span class="type">StackRouter</span>(routes, config);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你可以把这个组件作为另一个navigator的<code>screen</code>对待,<code>MyNavigator</code>的导航逻辑在<code>StackRouter</code>中定义.</p>
<h2 id="定制化Router"><a href="#定制化Router" class="headerlink" title="定制化Router"></a>定制化Router</h2><p>看看<code>[定制Router API 部分](https://reactnavigation.org/docs/routers/api)</code>学习<code>StackRouter</code>和<code>TabRouter</code>的API.<br>只要你愿意也可以重写router的函数.</p>
<h2 id="定制Navigation的Actions"><a href="#定制Navigation的Actions" class="headerlink" title="定制Navigation的Actions"></a>定制Navigation的Actions</h2><p>为了重写navigation的行为,你可以在<code>getStateForAction</code>中重写navigation state的逻辑,从而手动处理<code>routes</code>和<code>index</code>.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> const MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: 'Home',</div><div class="line">&#125;)</div><div class="line">MyApp.router = &#123;</div><div class="line">  ...MyApp.router,</div><div class="line">  getStateForAction(action, <span class="keyword">state</span>) &#123;</div><div class="line">    if (<span class="keyword">state</span> &amp;&amp; action.type === 'PushTwoProfiles') &#123;</div><div class="line">      const routes = [</div><div class="line">        ...<span class="keyword">state</span>.routes,</div><div class="line">        &#123;key: 'A', routeName: 'Profile', params: &#123; name: action.name1 &#125;&#125;,</div><div class="line">        &#123;key: 'B', routeName: 'Profile', params: &#123; name: action.name2 &#125;&#125;,</div><div class="line">      ];</div><div class="line">      return &#123;</div><div class="line">        ...<span class="keyword">state</span>,</div><div class="line">        routes,</div><div class="line">        index: routes.length - <span class="number">1</span>,</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    return MyApp.router.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="阻止某些Navigation的Actions"><a href="#阻止某些Navigation的Actions" class="headerlink" title="阻止某些Navigation的Actions"></a>阻止某些Navigation的Actions</h2><p>有时候根据你的route,需要阻止某些navigation的活动</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> const MyStackRouter = StackRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: 'Home',</div><div class="line">&#125;)</div><div class="line">const MyAppRouter = &#123;</div><div class="line">  ...MyStackRouter,</div><div class="line">  getStateForAction(action, <span class="keyword">state</span>) &#123;</div><div class="line">    if (</div><div class="line">      <span class="keyword">state</span> &amp;&amp;</div><div class="line">      action.type === NavigationActions.BACK &amp;&amp;</div><div class="line">      <span class="keyword">state</span>.routes[<span class="keyword">state</span>.index].params.isEditing</div><div class="line">    ) &#123;</div><div class="line">      // Returning null <span class="keyword">from</span> getStateForAction means that the action</div><div class="line">      // has been handled/blocked, but there is not a new <span class="keyword">state</span></div><div class="line">      return null;</div><div class="line">    &#125;</div><div class="line">    return MyStackRouter.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="操作定制URIs"><a href="#操作定制URIs" class="headerlink" title="操作定制URIs"></a>操作定制URIs</h2><p>或许你的app有一个独特的URI,内建的routers处理不了.你可以通过<code>getActionForPathAndParams</code>来扩展router.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> import &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> previousGetActionForPathAndParams = MyApp.router.getActionForPathAndParams</div><div class="line">Object.assign(MyApp.router, &#123;</div><div class="line">  getActionForPathAndParams(path, <span class="keyword">params</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (</div><div class="line">      path === <span class="string">'my/custom/path'</span> &amp;&amp;</div><div class="line">      <span class="keyword">params</span>.magic === <span class="string">'yes'</span></div><div class="line">    ) &#123;</div><div class="line">      <span class="comment">// returns a profile navigate action for /my/custom/path?magic=yes</span></div><div class="line">      <span class="keyword">return</span> NavigationActions.navigate(&#123;</div><div class="line">        routeName: <span class="string">'Profile'</span>,</div><div class="line">        action: NavigationActions.navigate(&#123;</div><div class="line">          <span class="comment">// This child action will get passed to the child router</span></div><div class="line">          <span class="comment">// ProfileScreen.router.getStateForAction to get the child</span></div><div class="line">          <span class="comment">// navigation state.</span></div><div class="line">          routeName: <span class="string">'Friends'</span>,</div><div class="line">        &#125;),</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> previousGetActionForPathAndParams(path, <span class="keyword">params</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="定制Router-API"><a href="#定制Router-API" class="headerlink" title="定制Router API"></a>定制Router API</h2><p>你可以童工下面的函数来构建自己的router对象,</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> const MyRouter = &#123;</div><div class="line">  getStateForAction: <span class="function"><span class="params">(action, state)</span> =&gt;</span> (&#123;&#125;),</div><div class="line">  getActionForPathAndParams: <span class="function"><span class="params">(path, params)</span> =&gt;</span> <span class="literal">null</span>,</div><div class="line">  getPathAndParamsForState: <span class="function"><span class="params">(state)</span> =&gt;</span> <span class="literal">null</span>,</div><div class="line">  getComponentForState: <span class="function"><span class="params">(state)</span> =&gt;</span> MyScreen,</div><div class="line">  getComponentForRouteName: <span class="function"><span class="params">(routeName)</span> =&gt;</span> MyScreen,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="regexp">//</span> Now, you can make a navigator <span class="keyword">by</span> putting the router <span class="literal">on</span> it:</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNavigator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></div><div class="line">  static router = MyRouter;</div><div class="line">  render() &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe4np8ce9xj313l0v9jss.jpg" alt=""></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getStateForAction(action,<span class="keyword">state</span>)</div></pre></td></tr></table></figure>
<p> 根据给定的action来定义返回的navigation sate.当一个action通过<code>props.navigation.dispatch()</code>传递,或者任何其他的助手函数被调用,例如<code>navigation.navitate()</code>的时候,这个函数将会运行.</p>
<p> 通常这个函数将会以下面的形式返回navitaion state.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>, <span class="comment">// identifies which route in the routes array is active</span></div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Each route needs a name to identify the type.</span></div><div class="line">      <span class="attribute">routeName</span>: <span class="string">'MyRouteName'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// A unique identifier for this route in the routes array:</span></div><div class="line">      <span class="attribute">key</span>: <span class="string">'myroute-123'</span>,</div><div class="line">      <span class="comment">// (used to specify the re-ordering of routes)</span></div><div class="line"></div><div class="line">      <span class="comment">// Routes can have any data, as long as key and routeName are correct</span></div><div class="line">      ...randomRouteData,</div><div class="line">    &#125;,</div><div class="line">    ..<span class="selector-class">.moreRoutes</span>,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果router已经在外部处理了acion,或者想不改变任何的navigation state就消化它,这个函数就返回<code>null</code>.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getComponentForRouterName</span><span class="params">(routeName)</span></span></div></pre></td></tr></table></figure>
<p>为给定的route name返回子组件或者navigator.<br>像这样声明一个router<code>getStateForAction</code>输出的state.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>,</div><div class="line">  routes: [</div><div class="line">    &#123; key: <span class="string">'A'</span>, routeName: <span class="string">'Foo'</span> &#125;,</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'B'</span>, routeName: <span class="string">'Bar'</span> &#125;,</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于state中的额routeName,router将会调用<code>router.getComponentForRouteName(&#39;Foo&#39;)</code>或<code>router.getComponentForRouteName(&#39;Bar&#39;)</code>来返回对应的有效组件.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getComponentForState(<span class="keyword">state</span>)</div></pre></td></tr></table></figure>
<p>从深度嵌套navigation state返回激活的组件</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getActionForPathAndParams</span></div></pre></td></tr></table></figure>
<p>返回一个可选配置的navigation action,在用户导航到这个路径并且有可选的查询参数的时候使用这个action.</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getPathAndParamsForState</span></div></pre></td></tr></table></figure>
<p>用户在app中返回同一个URL链接的点时,这个函数返回路径和参数.<br>从这个函数返回的路径和参数应该是从一个action获得的,这个action是重传进入router的<code>getActionForPathAndParams</code>的.这个action一旦通过<code>getStateForAction</code>传递,会给你返回形似的state.</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getScreenConfig</span></div></pre></td></tr></table></figure>
<p>这个函数从一个route获取navigation的可选项.必须要提供screen的当前navigation prop和被返回的选项的名字.</p>
<ul>
<li><code>navigation</code>-这是screen将会使用的navigation prop,对应在screen的route和state.Dispatch将会根据screen的上下文来触发actions.</li>
<li><code>optionName</code>-被获取的选项的名字,例如’title’</li>
</ul>
<p>在实例的视图内,或许你需要远程获取配置的标题</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> // First, prepare a navigation prop <span class="keyword">for</span> your child, or re-use one if already available.</div><div class="line">const childNavigation = addNavigationHelpers(&#123;</div><div class="line">  // In this case we use navigation.<span class="keyword">state</span>.index because we want the title <span class="keyword">for</span> the active route.</div><div class="line">  <span class="keyword">state</span>: navigation.<span class="keyword">state</span>.routes[navigation.<span class="keyword">state</span>.index],</div><div class="line">  dispatch: navigation.dispatch,</div><div class="line">&#125;)</div><div class="line">const screenTitle = this.props.router.getScreenConfig(childNavigation, 'title');</div></pre></td></tr></table></figure>
<h1 id="StackRouter"><a href="#StackRouter" class="headerlink" title="StackRouter"></a>StackRouter</h1><p>管理navigation堆栈的逻辑,包括入栈,出栈,操作路径解析创建深层次的堆栈.</p>
<p>让我们看看简单的stack router<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> const MyApp = StackRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="RouteConfig"><a href="#RouteConfig" class="headerlink" title="RouteConfig"></a>RouteConfig</h2><p>最简单的stack router期待的参数是一个config对象,这里是示例配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = StackRouter(&#123; <span class="comment">// This is the RouteConfig:</span></div><div class="line">  Home: &#123;</div><div class="line">    <span class="attr">screen</span>: HomeScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">''</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">Profile</span>: &#123;</div><div class="line">    <span class="attr">screen</span>: ProfileScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">'profile/:name'</span>,</div><div class="line">  &#125;,</div><div class="line">  Settings &#123;</div><div class="line">    <span class="comment">// This can be handy to lazily require a screen:</span></div><div class="line">    getScreen: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'Settings'</span>).default,</div><div class="line">    <span class="comment">// Note: Child navigators cannot be configured using getScreen because</span></div><div class="line">    <span class="comment">// the router will not be accessible. Navigators must be configured</span></div><div class="line">    <span class="comment">// using `screen: MyNavigator`</span></div><div class="line">    path: <span class="string">'settings'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>每一个在config中的条目有如下内容</p>
<ul>
<li><code>path</code>-设定条目的路径和参数可以在stack中被解析</li>
<li><code>screen</code>-设定screen组件或者子navigator</li>
<li><code>getScreen</code>-为screen组件设定惰性加载的设定</li>
</ul>
<h2 id="StackConfig"><a href="#StackConfig" class="headerlink" title="StackConfig"></a>StackConfig</h2><p>配置的选项也被传递进入stack router.</p>
<ul>
<li><code>initalRouteName</code>-stack首次加载的默认路由的routeName</li>
<li><code>initialRouteParams</code>-初始化route的默认参数</li>
<li><code>paths</code>-提供routeName到path配置的映射,将会重写routeConfigs里的path设置</li>
</ul>
<h2 id="Supported-Actions"><a href="#Supported-Actions" class="headerlink" title="Supported Actions"></a>Supported Actions</h2><p>stack router可以对下面的导航actions作为响应.如果有可能,router将会代理到子代router的action操作.</p>
<ul>
<li>Navigate-如果routeName和router的routerConfigs其中之一匹配,将会push一个新的route到堆栈.</li>
<li>Back-返回(props)</li>
<li>Reset-清除堆栈,提供一个新的actions创建新的navigation state</li>
<li>SetParams-screen dispatch一个action去改变当前route的参数</li>
</ul>
<h1 id="TabRouter"><a href="#TabRouter" class="headerlink" title="TabRouter"></a>TabRouter</h1><p>管理应用中的一套tabs,处理tabs之间的跳转,处理back键的操作返回到初始化的tab.<br>看看简单的tabs router<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> const MyApp = TabRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Settings: &#123; screen: SettingsScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="RouteConfig-1"><a href="#RouteConfig-1" class="headerlink" title="RouteConfig"></a>RouteConfig</h2><p>tabs router有为每一个tab的routeConfig<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = TabRouter(&#123; <span class="comment">// This is the RouteConfig:</span></div><div class="line">  Home: &#123;</div><div class="line">    <span class="attr">screen</span>: HomeScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">'main'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">Settings</span>: &#123;</div><div class="line">    <span class="comment">// This can be handy to lazily require a tab:</span></div><div class="line">    getScreen: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'./SettingsScreen'</span>).default,</div><div class="line">    <span class="comment">// Note: Child navigators cannot be configured using getScreen because</span></div><div class="line">    <span class="comment">// the router will not be accessible. Navigators must be configured</span></div><div class="line">    <span class="comment">// using `screen: MyNavigator`</span></div><div class="line">    path: <span class="string">'settings'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>config中的每一个config可能有</p>
<ul>
<li><code>config</code>-每一个tab的path</li>
<li><code>screen</code>-定制screen组件或者子代navigator</li>
<li><code>getScreen</code>-为一个screen组件设定惰性加载的设置(navigator没有这样的配置)</li>
</ul>
<h2 id="Tab-Router-Config"><a href="#Tab-Router-Config" class="headerlink" title="Tab Router Config"></a>Tab Router Config</h2><p>被传递到router的可配置选项</p>
<ul>
<li><code>initialRouteName</code>-首次加载的tab的routeName</li>
<li><code>order</code>-tabs的顺序</li>
<li><code>path</code>-提供routeName到path config的映射,映射重写routeConfig中的path设定</li>
<li><code>backBehavior</code>-点击back按钮应该返回到初始化的tab吗？如果是的话,设置<code>initialRoute</code>,否则就是<code>none</code>,默认到<code>initialRoute</code>的行为.</li>
</ul>
<h2 id="Support-Actions"><a href="#Support-Actions" class="headerlink" title="Support Actions"></a>Support Actions</h2><p>tabs router会对下面的navigation actions做出响应.如果有可能,router将代理到子代router的action.</p>
<ul>
<li>Navigate-如果和tab的routeName匹配,就会跳转到对应的tab</li>
<li>Back-如果不是第一个默认的tab,就跳转到第一个tab</li>
<li>SetParams-screen dispatch一个Action来改变当前route的state</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Routers&quot;&gt;&lt;a href=&quot;#Routers&quot; class=&quot;headerlink&quot; title=&quot;Routers&quot;&gt;&lt;/a&gt;Routers&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Router定义一个组件的navigation state,允许开发者定义
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(6)-Redux的整合实例</title>
    <link href="http://yoursite.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-6-Redux%E7%9A%84%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2017/03/30/翻译-React-navigation导航系统-6-Redux的整合实例/</id>
    <published>2017-03-29T23:42:14.000Z</published>
    <updated>2017-03-29T16:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了"><a href="#整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了" class="headerlink" title="整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看,github的例子,代码就比较全了."></a>整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看,<a href="https://github.com/react-community/react-navigation/blob/master/examples/ReduxExample/index.js" target="_blank" rel="external">github的例子</a>,代码就比较全了.</h1><p>对Redux的概念理解了这个看起来就简单一点.如果对于Redux的概念不理解,可以看我的几篇翻译文章和前面写的Redux的理解文章.<br>简书没有目录导航,不是太好看.可以看看我的<a href="https://phpsmarter.github.io" target="_blank" rel="external">博客</a>，里面有目录结构.<br>我理解其中的流程就是,</p>
<ol>
<li>React组件接受props，获取state和dispatch.</li>
<li>组件dispatch action改变navigation的state.<br>3.根据state的相应变化加载对应的screen.<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React <span class="keyword">from</span> 'react';</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  AsyncStorage,</div><div class="line">  Button,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> 'react-native';</div><div class="line">import &#123;</div><div class="line">  NavigationActions,</div><div class="line">  addNavigationHelpers,</div><div class="line">  StackNavigator,</div><div class="line">&#125; <span class="keyword">from</span> 'react-navigation';</div><div class="line">import &#123;</div><div class="line">  Provider,</div><div class="line">  connect,//redux,connect函数,负责向展示组件注入<span class="keyword">state</span>和dispatch</div><div class="line">&#125; <span class="keyword">from</span> 'react-redux';</div><div class="line">import &#123;</div><div class="line">  createStore,</div><div class="line">  combineReducers,</div><div class="line">&#125; <span class="keyword">from</span> 'redux';</div><div class="line">import &#123;</div><div class="line">  persistStore,</div><div class="line">  autoRehydrate,</div><div class="line">&#125; <span class="keyword">from</span> 'redux-persist';//redux <span class="keyword">state</span>持久化的中间件</div><div class="line"></div><div class="line">const ProfileScreen = (&#123; navigation &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">      Profile Screen</div><div class="line">    &lt;/Text&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">ProfileScreen.navigationOptions = &#123;</div><div class="line">  title: 'Profile',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const LoginScreen = (&#123; navigation &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">      Screen A</div><div class="line">    &lt;/Text&gt;</div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.instructions&#125;&gt;</span></div><div class="line">      This is great</div><div class="line">    &lt;/Text&gt;</div><div class="line">    <span class="variable">&lt;Button</span></div><div class="line">      onPress=&#123;() =&gt; navigation.dispatch(&#123; type: 'Login' &#125;)&#125;</div><div class="line">      title=<span class="string">"Log in"</span></div><div class="line">    /&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">LoginScreen.navigationOptions = &#123;</div><div class="line">  title: 'Log In',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//connect 注入<span class="keyword">state</span>和dispatch</div><div class="line">const LoginStatusMessage = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  isLoggedIn: <span class="keyword">state</span>.auth.isLoggedIn,</div><div class="line">&#125;))((&#123; isLoggedIn, dispatch &#125;) =&gt; &#123;</div><div class="line">  if (!isLoggedIn) &#123;</div><div class="line">    return <span class="variable">&lt;Text&gt;</span>Please <span class="keyword">log</span> in&lt;/Text&gt;;</div><div class="line">  &#125;</div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;View&gt;</span></div><div class="line">      <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">        &#123;'You are <span class="string">"logged in"</span> right now'&#125;</div><div class="line">      &lt;/Text&gt;</div><div class="line">      <span class="variable">&lt;Button</span></div><div class="line">        onPress=&#123;() =&gt; dispatch(NavigationActions.navigate(&#123; routeName: 'Profile' &#125;))&#125;</div><div class="line">        title=<span class="string">"Profile"</span></div><div class="line">      /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const AuthButton = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  isLoggedIn: <span class="keyword">state</span>.auth.isLoggedIn,</div><div class="line">&#125;), dispatch =&gt; (&#123;</div><div class="line">  logout: () =&gt; dispatch(&#123; type: 'Logout' &#125;),</div><div class="line">  login: () =&gt; dispatch(NavigationActions.navigate(&#123; routeName: 'Login' &#125;)),</div><div class="line">&#125;))((&#123; logout, login, isLoggedIn &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;Button</span></div><div class="line">    title=&#123;isLoggedIn ? 'Log Out' : 'Log In'&#125;</div><div class="line">    onPress=&#123;isLoggedIn ? logout : login&#125;</div><div class="line">  /&gt;</div><div class="line">));</div><div class="line"></div><div class="line">const MainScreen = () =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;LoginStatusMessage /&gt;</span></div><div class="line">    <span class="variable">&lt;AuthButton /&gt;</span></div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">MainScreen.navigationOptions = &#123;</div><div class="line">  title: 'Home Screen',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const AppNavigator = StackNavigator(&#123;</div><div class="line">  Login: &#123; screen: LoginScreen &#125;,</div><div class="line">  Main: &#123; screen: MainScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const AppWithNavigationState = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  nav: <span class="keyword">state</span>.nav,</div><div class="line">&#125;))((&#123; dispatch, nav &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;AppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch, state: nav &#125;)&#125; /&gt;</span></div><div class="line">));</div><div class="line"></div><div class="line">const initialNavState = &#123;</div><div class="line">  index: <span class="number">1</span>,</div><div class="line">  routes: [</div><div class="line">    &#123; key: 'InitA', routeName: 'Main' &#125;,</div><div class="line">    &#123; key: 'InitB', routeName: 'Login' &#125;,</div><div class="line">  ],</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const initialAuthState = &#123; isLoggedIn: false &#125;;</div><div class="line"></div><div class="line">const AppReducer = combineReducers(&#123;</div><div class="line">  nav: (<span class="keyword">state</span> = initialNavState, action) =&gt; &#123;</div><div class="line">    if (action.type === 'Login') &#123;</div><div class="line">      return AppNavigator.router.getStateForAction(NavigationActions.back(), <span class="keyword">state</span>);</div><div class="line">    &#125;</div><div class="line">    if (action.type === 'Logout') &#123;</div><div class="line">      return AppNavigator.router.getStateForAction(NavigationActions.navigate(&#123; routeName: 'Login' &#125;), <span class="keyword">state</span>);</div><div class="line">    &#125;</div><div class="line">    return AppNavigator.router.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">  auth: (<span class="keyword">state</span> = initialAuthState, action) =&gt; &#123;</div><div class="line">    if (action.type === 'Login') &#123;</div><div class="line">      return &#123; ...<span class="keyword">state</span>, isLoggedIn: true &#125;;</div><div class="line">    &#125;</div><div class="line">    if (action.type === 'Logout') &#123;</div><div class="line">      return &#123; ...<span class="keyword">state</span>, isLoggedIn: false &#125;;</div><div class="line">    &#125;</div><div class="line">    return <span class="keyword">state</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">class ReduxExampleApp extends React.Component &#123;</div><div class="line">  store = createStore(AppReducer, undefined, autoRehydrate());</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    persistStore(this.store, &#123; storage: AsyncStorage &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="variable">&lt;Provider store=&#123;this.store&#125;&gt;</span></div><div class="line">        <span class="variable">&lt;AppWithNavigationState /&gt;</span></div><div class="line">      &lt;/Provider&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '<span class="comment">#F5FCFF',</span></div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: 'center',</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: 'center',</div><div class="line">    color: '<span class="comment">#333333',</span></div><div class="line">    marginBottom: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('ReduxExample', () =&gt; ReduxExampleApp);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了&quot;&gt;&lt;a href=&quot;#整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了&quot; class=&quot;hea
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(5)-高级指南</title>
    <link href="http://yoursite.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-5-%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/03/30/翻译-React-navigation导航系统-5-高级指南/</id>
    <published>2017-03-29T16:41:19.000Z</published>
    <updated>2017-03-29T15:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Intergration"><a href="#Redux-Intergration" class="headerlink" title="Redux Intergration"></a>Redux Intergration</h1><p>为了在redux中处理app的navigation state,你可以传递你自己的<code>navigation</code> prop到一个navigator.你的navigation prop必须提供当前的state,还有就是处理navigation配置项的dispatcher.</p>
<p>使用redux,你的app state由reducer来定义.每一个navigation router都有一个reducer,叫做<code>getStateForAction</code>.下面是一在redux应用中使用navigators的简单实例:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; addNavigationHelpers &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line">const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">AppRouteConfigs</span>);</div><div class="line"></div><div class="line">const navReducer = (state, action) =&gt; &#123;</div><div class="line">  const newState = <span class="type">AppNavigator</span>.router.getStateForAction(action, state);</div><div class="line">  <span class="keyword">return</span> newState || state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const appReducer = combineReducers(&#123;</div><div class="line">  nav: navReducer,</div><div class="line">  ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="meta">@connect</span>(state =&gt; (&#123;</div><div class="line">  nav: state.nav,</div><div class="line">&#125;))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppWithNavigationState</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> navigation=&#123;addNavigationHelpers(&#123;</div><div class="line">        dispatch: <span class="keyword">this</span>.props.dispatch,</div><div class="line">        state: <span class="keyword">this</span>.props.nav,</div><div class="line">      &#125;)&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = createStore(appReducer);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Provider</span> store=&#123;store&#125;&gt;</div><div class="line">        &lt;<span class="type">AppWithNavigationState</span> /&gt;</div><div class="line">      &lt;/<span class="type">Provider</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦按照实例操作,navigation state就存储在redux的store中,这样就可以使用redux的dispatch函数来发起navigation的actions.</p>
<p>牢记在心,当一个navigator给定一个<code>navigation</code>prop,他将失去内部state的控制权.这意味着现在你来负责state的持久化,处理任何的深度链接,整合Back按钮等操作.</p>
<p>当你的navigator是巢式的时候,Navigation state自动从一个navigator传递到另一个navigator.注意,为了让子代navigator可以从父代navigator接收state,它应该定义为一个<code>screen</code>.</p>
<p>对应上面的实例,你可以定义<code>AppNavigator</code>包含一个巢式的<code>TabNavigator</code>:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"> const AppNavigator</span> = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: MyTabNavigator &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这个实例中,一旦你在<code>AppWithNavigationState</code>中<code>connect</code> <code>AppNavigator</code>到Redux,<code>MyTabNavigation</code>将会自动接入到navigation state 作为<code>navigtion</code>的prop.</p>
<h1 id="Web-Integration"><a href="#Web-Integration" class="headerlink" title="Web Integration"></a>Web Integration</h1><p>React Navigation routers工作在web环境下允许你和原生app共享导航的逻辑.绑定在<code>react-navigation</code>的视图目前只能工作在React Native下,但是在react-primitives项目中可能会有所改变.</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><a href="https://reactnavigation.org/" target="_blank" rel="external">这个网站</a>由React Navigation构建,使用了<code>createNavigation</code>和<code>TabRouter</code>.<br>看看网站的源代码<a href="https://github.com/react-community/react-navigation/blob/master/website/src/App.js" target="_blank" rel="external">app.js</a></p>
<p>app如何获得渲染参看<a href="https://github.com/react-community/react-navigation/blob/master/website/src/Server.js" target="_blank" rel="external">server.js</a>.在浏览器中,使用[BrowserAppContainer.js]来唤醒和获得渲染.</p>
<p>##更多内容,很快呈现<br>不久会有详细的教程.</p>
<h1 id="Deep-Linking"><a href="#Deep-Linking" class="headerlink" title="Deep Linking"></a>Deep Linking</h1><p>这一部分指南中,我们将设置app来处理外部URIs.让我们从SimpleApp开始<br><a href="https://reactnavigation.org/docs/intro" target="_blank" rel="external">getting start的指南</a></p>
<p>在这个示例中,我们想使用类似<code>mychat://chat/Taylor</code>的URI来打开我们的app,直接连接到Taylor的chat page.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>在前面我们定义了navigator想下面这样：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; <span class="keyword">screen: </span>HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; <span class="keyword">screen: </span>ChatScreen &#125;,</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>我们想让path类似<code>chat/Taylor</code>链接到“Chat”screen,传递<code>user</code>作为参数.我们重新定义我们的chat screen使用一个<code>path</code>来告诉router需要匹配的path和需要提取的参数.这个路径配置为<code>chat/:user</code>.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="attr">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="attr">  Chat:</span> &#123;</div><div class="line"><span class="attr">    screen:</span> ChatScreen,</div><div class="line"><span class="attr">    path:</span> <span class="string">'chat/:user'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="URI的前缀"><a href="#URI的前缀" class="headerlink" title="URI的前缀"></a>URI的前缀</h2><p>下面配置navigation container来提取app的path.当配置在顶层navigator上的时候,我们提供<code>containerOperations</code>,</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SimpleApp = StackNavigator(&#123;</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">containerOptions</span>: &#123;</div><div class="line">    <span class="comment">// on Android, the URI prefix typically contains a host in addition to scheme</span></div><div class="line">    URIPrefix: Platform.OS == <span class="string">'android'</span> ? <span class="string">'mychat://mychat/'</span> : <span class="string">'mychat://'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>基于<code>mychat://</code>URI图式配置原生的iOS app.<br>在<code>SimpleApp/ios/SimpleApp/AppleDelegate.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Add the header at the top of the file:</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTLinkingManager.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Add this above the `@end`:</span></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">  sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [RCTLinkingManager application:application openURL:url</div><div class="line">                      sourceApplication:sourceApplication annotation:annotation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode里,打开项目的<code>simpleApp/ios/SimpleApp.xcodeproj</code>.在边栏中选择项目导航到info tab.向下滑动到“URL Types”并且添加一个.在新的URL type,设定名称和url图式对应想导航到的url图式.<br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe3z3gaupxj30ui0fk74v.jpg" alt=""></p>
<p>现在可以在Xcode中点击play,或者在命令行运行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure></p>
<p>为了在iOS中测试URI,在safari中打开<code>mychat://chat/Taylor</code></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>为了在Andorid中链接外链,可以在manifest中创建一个新的intent.<br>在<code>SimpleApp/android/app/src/main/AndroidManifest.xml</code>中<code>MainActivity</code>内添加新的<code>VIEW</code>type<code>intent-filter</code>.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"mychat"</span></span></div><div class="line">          <span class="attr">android:host</span>=<span class="string">"mychat"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在,重新运行:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-android</span></div></pre></td></tr></table></figure></p>
<p>在Android中测试intent操作,运行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -W -<span class="selector-tag">a</span> android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.VIEW</span> -d <span class="string">"mychat://mychat/chat/Taylor"</span> com.simpleapp</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe3zdd1q9gg307i0dc17p.gif" alt=""></p>
<h1 id="Screen-tracking-and-analytics"><a href="#Screen-tracking-and-analytics" class="headerlink" title="Screen tracking and analytics"></a>Screen tracking and analytics</h1><p>这个实例中展示怎么做屏幕追踪并且发到Google Analytics.这个方法应用在其他的移动分析SDK也是可以的.</p>
<h2 id="Screen-tracking"><a href="#Screen-tracking" class="headerlink" title="Screen tracking"></a>Screen tracking</h2><p>当我们使用内建的navigation container,我们使用<code>onNavigationStateChange</code>来追踪screen.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> import &#123; GoogleAnalyticsTracker &#125; from <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="comment">// gets the current screen from navigation state</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentRouteName</span><span class="params">(navigationState)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!navigationState) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> route = navigationState.routes[navigationState.index];</div><div class="line">  <span class="comment">// dive into nested navigators</span></div><div class="line">  <span class="keyword">if</span> (route.routes) &#123;</div><div class="line">    <span class="keyword">return</span> getCurrentRouteName(route);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> route.routeName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> AppNavigator = StackNavigator(AppRouteConfigs);</div><div class="line"></div><div class="line">export <span class="keyword">default</span> () =&gt; (</div><div class="line">  &lt;AppNavigator</div><div class="line">    onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> currentScreen = getCurrentRouteName(currentState);</div><div class="line">      <span class="keyword">const</span> prevScreen = getCurrentRouteName(prevState);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (prevScreen !== currentScreen) &#123;</div><div class="line">        <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">        <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">        tracker.trackScreenView(currentScreen);</div><div class="line">      &#125;</div><div class="line">    &#125;&#125;</div><div class="line">  /&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="使用Redux做Screen-tracking"><a href="#使用Redux做Screen-tracking" class="headerlink" title="使用Redux做Screen tracking"></a>使用Redux做Screen tracking</h2><p>使用Redux的时候,我们可以写Redux 中间件来track screen.为了达到这个目的,我们从前面的部分重新使用<code>getCurrenRouteName</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"><span class="keyword">import</span> &#123; GoogleAnalyticsTracker &#125; <span class="keyword">from</span> <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="keyword">const</span> screenTracking = <span class="function">(<span class="params">&#123; getState &#125;</span>) =&gt;</span> next =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (</div><div class="line">    action.type !== NavigationActions.NAVIGATE</div><div class="line">    &amp;&amp; action.type !== NavigationActions.BACK</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> currentScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">const</span> result = next(action);</div><div class="line">  <span class="keyword">const</span> nextScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">if</span> (nextScreen !== currentScreen) &#123;</div><div class="line">    <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">    <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">    tracker.trackScreenView(nextScreen);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> screenTracking;</div></pre></td></tr></table></figure>
<h2 id="创建Redux-store并应用上面的中间件"><a href="#创建Redux-store并应用上面的中间件" class="headerlink" title="创建Redux store并应用上面的中间件"></a>创建Redux store并应用上面的中间件</h2><p>在创建store的时候应用这个<code>screenTracking</code>的中间件.看看Redux Integration了解细节.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> const store = createStore(</div><div class="line">  <span class="name">combineReducers</span>(&#123;</div><div class="line">    navigation: navigationReducer,</div><div class="line">    ...</div><div class="line">  &#125;),</div><div class="line">  applyMiddleware(</div><div class="line">    <span class="name">screenTracking</span>,</div><div class="line">    ...</div><div class="line">    ),</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-Intergration&quot;&gt;&lt;a href=&quot;#Redux-Intergration&quot; class=&quot;headerlink&quot; title=&quot;Redux Intergration&quot;&gt;&lt;/a&gt;Redux Intergration&lt;/h1&gt;&lt;p&gt;为了在red
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(4)</title>
    <link href="http://yoursite.com/2017/03/29/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-4/"/>
    <id>http://yoursite.com/2017/03/29/翻译-React-navigation导航系统-4/</id>
    <published>2017-03-29T07:16:17.000Z</published>
    <updated>2017-03-29T16:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigation-Actions"><a href="#Navigation-Actions" class="headerlink" title="Navigation Actions"></a>Navigation Actions</h1><p>所有的Navigation Actions都会返回一个对象,这个对象可以使用<code>navigation.dispatch</code>方法传递到router.<br><em>注意</em>：如果你想dispatch react-navigation,你应该使用这个库提供的action creators.</p>
<p>下面的actions是可以使用的:</p>
<ul>
<li><code>Navigate</code>-导航到其他的route</li>
<li><code>Reset</code>-使用新的state代替目前的state</li>
<li><code>Back</code>-返回上一个state</li>
<li><code>Set Params</code>-给定的route设置参数</li>
<li><code>Init</code>-如果state没有定义,用来初始化第一个state</li>
</ul>
<h2 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h2><p><code>Navigatie action</code>会使用<code>Navigate action</code>的结果来更新当前的state.</p>
<ul>
<li><code>routeName</code>-字符串-必选项,在app的router里注册的导航目的地的routeName.</li>
<li><code>params</code>-对象-可选项-融合进目的地route的参数</li>
<li><code>actions</code>-对象-可选项-(高级)-如果screen也是一个navigator,次级action可以在子router中运行.在文档中描述的任何actions都可以作为次级action.</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const navigateAction = NavigationActions.navigate(&#123;</div><div class="line"></div><div class="line">  routeName: <span class="string">'Profile'</span>,</div><div class="line"></div><div class="line">  params: &#123;&#125;,</div><div class="line"></div><div class="line">  action: NavigationActions.navigate(&#123; routeName: <span class="string">'SubProfileRoute'</span>&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">this.props.navigation.dispatch(navigateAction)</div></pre></td></tr></table></figure>
<h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p><code>Reset</code>action删掉所有的navigation state并且使用几个actions的结果来代替.</p>
<ul>
<li><code>index</code>—数组-必选-navigation <code>state</code>中<code>route</code>数组中激活route的index.</li>
<li><code>actions</code>-数组-必选项-Navigation Actions数组,将会替代navigation state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> resetAction = NavigationActions.reset(&#123;</div><div class="line">  <span class="attr">index</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">actions</span>: [</div><div class="line">    NavigationActions.navigate(&#123; <span class="attr">routeName</span>: <span class="string">'Profile'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="怎么使用index参数"><a href="#怎么使用index参数" class="headerlink" title="怎么使用index参数"></a>怎么使用<code>index</code>参数</h2><p><code>index</code>参数被用来定制化当前激活的route<br>例如：使用两个routes <code>Profile</code>和<code>Settings</code>给一个基础的stakc navigation设置.为了重置route到经过<code>Settings</code>的激活screen那一点,但是在堆栈中他又存放在<code>Setting</code>screen之上,你可以这么做:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const resetAction = NavigationActions.reset(&#123;</div><div class="line">  index: <span class="number">1</span>,</div><div class="line">  actions: [</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Profile'</span>&#125;),</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Settings'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line">this.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="Back"><a href="#Back" class="headerlink" title="Back"></a>Back</h2><p>返回到前一个screen并且关闭当前screen.<code>back</code>action creator接受一个可选的参数:</p>
<ul>
<li><code>key</code>-字符串或者空-可选项-如果设定了,navigation将会从设定的key返回.如果是null,navigation将返回到任何地方.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> backAction = NavigationActions.back(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'Profile'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(backAction)</div></pre></td></tr></table></figure>
<h2 id="SetParams"><a href="#SetParams" class="headerlink" title="SetParams"></a>SetParams</h2><p>当dispatching <code>setParams的时候</code>,router将会产出一个新的state,这个state是已经改变了特定route的参数,以key作为身份验证</p>
<ul>
<li><code>params</code>-对象-必选参数-融合进已经存在的route参数中的新参数</li>
<li><code>key</code>-字符串-必选参数-Route的key,应该分配给新的参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> setParamsAction = NavigationActions.setParams(&#123;</div><div class="line">  <span class="attr">params</span>: &#123; <span class="attr">title</span>: <span class="string">'Hello'</span> &#125;,</div><div class="line">  <span class="attr">key</span>: <span class="string">'screen-123'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(setParamsAction)</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h1><p>每个screen都可以配置几个方面的内容,这些内容影响到在父navigators中怎么得到展示.</p>
<h2 id="定制每一个可选项的两种方法"><a href="#定制每一个可选项的两种方法" class="headerlink" title="定制每一个可选项的两种方法"></a>定制每一个可选项的两种方法</h2><p><em>静态配置方法</em>:每一个navigation 可选项都可以被直接设定:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p><em>动态配置方法</em><br>要么就采用函数式的方法,接受参数,然后返回可选项的值.</p>
<ul>
<li><code>navigation</code>-screen的navigation prop和<code>navigation.state</code>中screen的route</li>
<li><code>childRouter</code>-如果screen是一个navigator,这个参数就是子代router.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: (navigation, childRouter) =&gt; &#123;</div><div class="line">     <span class="keyword">return</span> navigation.state.params.name + <span class="string">"'s Profile!"</span>;</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<h2 id="通用的Navigation-Options"><a href="#通用的Navigation-Options" class="headerlink" title="通用的Navigation Options"></a>通用的Navigation Options</h2><p>navigation的可选项<code>title</code>在每一个navigator之间是通用的,用来设定每一个screen的标题字符串.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>不像其他的navigation的可配置项仅仅由navigator view来使用,title 选项可以被环境变量使用来更新浏览器的标题或者app切换时候的标题.</p>
<h2 id="默认的Navigation选项"><a href="#默认的Navigation选项" class="headerlink" title="默认的Navigation选项"></a>默认的Navigation选项</h2><p>在screen中定义<code>navigationOption</code>非常普遍,但是有时候在navigator中定义<code>navitationOptions</code>也是非常有用</p>
<p>想象下面的场景:你的<code>TabNavigator</code>代表app中的一个screen.他在顶层<code>StackNavigator</code>之内:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">StackNavigator:</span></div><div class="line"> - <span class="string">route1:</span> A screen</div><div class="line"> - <span class="string">route2:</span> A TabNavigator</div></pre></td></tr></table></figure>
<p>现在<code>route2</code>是激活的,你可能会隐藏header,隐藏<code>route1</code>的header非常容易,<code>route2</code>的header应该也很容易隐藏.这就是默认Navigation Option 要做的.可以在<code>navigationOptions</code>中设定:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">TabNavigator</span>(&#123;</div><div class="line">  <span class="attribute">profile</span>: ProfileScreen,</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attribute">navigationOptions</span>: &#123;</div><div class="line">     header: &#123;</div><div class="line">       visible: false,</div><div class="line">     &#125;,</div><div class="line">   &#125;,</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>提示:你仍然可以在子代导航screen上定制<code>navigationOptions</code>.-例如,上面的<code>ProfileScreen</code>.从screen获得的<code>navigationOptions</code>会和从navigator来的配置按照键-键的方式融合在一起.无论在什么而时间,navigator和screen定义相同的配置(例如:<code>header</code>),screen会优先使用.因此,当<code>ProfileScreen</code>激活的时候,你可以使header再次可见.</p>
<p><em>扩展默认配置</em>:为了使用screen特定的properties扩展默认配置,而不是重写它,你可以像下面一样配置选项:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    header: (navigation, defaultHeader) =&gt; (&#123;</div><div class="line">      ...defaultHeader,</div><div class="line">      visible: <span class="literal">true</span>,</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递到函数的第二个参数作为在navigator中定义的<code>header</code>的默认值.</p>
<h2 id="Tab-Navigation-Options"><a href="#Tab-Navigation-Options" class="headerlink" title="Tab Navigation Options"></a>Tab Navigation Options</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: (&#123; state &#125;) =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Tab</span> <span class="type">Label</span>',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./tab-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">      visible: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>label</code>-可以是字符串或者是React组件</li>
<li><code>icon</code>-函数返回icon组件</li>
<li><code>visible</code>-true或者false,显示或者隐藏tab bar,默认是true</li>
</ul>
<h1 id="Custom-Navigation"><a href="#Custom-Navigation" class="headerlink" title="Custom Navigation"></a>Custom Navigation</h1><p>一个navigator是任何包含router的React组件.这里是一个基本navigator,使用router的API去获得激活组件来渲染<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> class MyNavigator extends React.Component &#123;</div><div class="line">  static router = MyRouter;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; <span class="keyword">state</span>, dispatch &#125; = this.props.navigation;</div><div class="line">    const &#123; routes, index &#125; = <span class="keyword">state</span>;</div><div class="line"></div><div class="line">    // Figure <span class="keyword">out</span> what <span class="keyword">to</span> render based <span class="keyword">on</span> the navigation <span class="keyword">state</span> and the router:</div><div class="line">    const Component = MyRouter.getComponentForState(<span class="keyword">state</span>);</div><div class="line"></div><div class="line">    // The <span class="keyword">state</span> of the active child screen can be found at routes[index]</div><div class="line">    let childNavigation = &#123; dispatch, <span class="keyword">state</span>: routes[index] &#125;;</div><div class="line">    // If we want, we can also tinker with the dispatch function here, <span class="keyword">to</span> <span class="keyword">limit</span></div><div class="line">    // or augment our children's actions</div><div class="line"></div><div class="line">    // Assuming our children want the convenience of calling .navigate() and so <span class="keyword">on</span>,</div><div class="line">    // we should call addNavigationHelpers <span class="keyword">to</span> augment our navigation prop:</div><div class="line">    childNavigation = addNavigationHelpers(childNavigation);</div><div class="line"></div><div class="line">    return <span class="variable">&lt;Component navigation=&#123;childNavigation&#125; /&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Navigation-Prop"><a href="#Navigation-Prop" class="headerlink" title="Navigation Prop"></a>Navigation Prop</h2><p>navigation prop传递给navigator的仅仅包含<code>state</code>和<code>dispatch</code>,这是当前的navigator的state,但是还有一个事件频道用来发送action request.<br>所有的navigators都是受控组件:他们总是显示根据<code>props.navigation.state</code>来显示,他们要改变state,唯一的办法是发送actions到<code>props.navigation.dispatch</code>.<br>Navigators可以通过定制他们的router来改变父navigators的行为.例如,当action应该从<code>router.getStateForAction</code>返回null来阻止其运行的时候.或者一个navigator可以为了定制URI的操作而改写<code>router.getActionForPathParams</code>,为了输出相对navigation action以及操作<code>router.getStateForAction</code>的action.</p>
<h2 id="Navigation-State"><a href="#Navigation-State" class="headerlink" title="Navigation State"></a>Navigation State</h2><p>传递到<code>props.navigation.state</code>的navigation state有下面的结构:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>, <span class="comment">// identifies which route in the routes array is active</span></div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Each route needs a name, which routers will use to associate each route</span></div><div class="line">      <span class="comment">// with a react component</span></div><div class="line">      <span class="attribute">routeName</span>: <span class="string">'MyRouteName'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// A unique id for this route, used to keep order in the routes array:</span></div><div class="line">      <span class="attribute">key</span>: <span class="string">'myroute-123'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Routes can have any additional data. The included routers have `params`</span></div><div class="line">      ...customRouteData,</div><div class="line">    &#125;,</div><div class="line">    ..<span class="selector-class">.moreRoutes</span>,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Navigation-Dispatchers"><a href="#Navigation-Dispatchers" class="headerlink" title="Navigation Dispatchers"></a>Navigation Dispatchers</h2><p>navigator可以dispatch navigation actions,例如Go to URI,Go back.<br>如果action被成功操作了,dispatcher将会返回true,否则就是false</p>
<h2 id="构建定制navigators的API"><a href="#构建定制navigators的API" class="headerlink" title="构建定制navigators的API"></a>构建定制navigators的API</h2><p>为了帮助开发者实施定制navigators,React Navigation提供了下面的工具<br><code>createNavigator</code><br>这个工具使用标准方法把router和navigation view合并在一起.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const MyApp = createNavigator(<span class="name">MyRouter</span>)(<span class="name">MyView</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>幕后所做的是:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyView</span> <span class="attr">router</span>=<span class="string">&#123;MyRouter&#125;</span> <span class="attr">navigation</span>=<span class="string">&#123;navigation&#125;</span> /&gt;</span></span></div><div class="line">);</div><div class="line">MyApp.router = MyRouter;</div></pre></td></tr></table></figure>
<p><code>addNavigationHelpers</code><br>接收一个拥有<code>state</code>和<code>dispatch</code>的纯navigator的prop,传递的参数是在screen navigation prop中的各种函数,例如<code>navigation.navigate()</code>和<code>navigation.goBack()</code>.这些函数是简单的助手函数帮助创建action并且发送到<code>dispatch</code>.</p>
<p><code>createNavigationContainer</code></p>
<p>如果你想让你的navigator作为顶层组件使用(没有navigation prop传入),你可以使用<code>createNavigationContainer</code>.当缺少navigtion prop的时候,这个工具使你的navigator看起来像一个顶层的导航组件.它将管理app的state,和app级别的导航特性整合在一起,例如操作进出的链接和android的返回按钮行为.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigation-Actions&quot;&gt;&lt;a href=&quot;#Navigation-Actions&quot; class=&quot;headerlink&quot; title=&quot;Navigation Actions&quot;&gt;&lt;/a&gt;Navigation Actions&lt;/h1&gt;&lt;p&gt;所有的Nav
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(3)</title>
    <link href="http://yoursite.com/2017/03/28/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-3/"/>
    <id>http://yoursite.com/2017/03/28/翻译-React-navigation导航系统-3/</id>
    <published>2017-03-28T07:48:36.000Z</published>
    <updated>2017-03-28T22:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigators"><a href="#Navigators" class="headerlink" title="Navigators"></a>Navigators</h1><p>Navigators允许你定义你的导航结构.Navigators也可以渲染普通的元素,例如你配置好的header和tab bar.<br>navigators可以是单纯的React组件.</p>
<h2 id="内建的Navigators"><a href="#内建的Navigators" class="headerlink" title="内建的Navigators"></a>内建的Navigators</h2><p><code>react-navigation</code>包含下面的几个函数帮助你创建navigators：</p>
<ul>
<li><code>StackNavigator</code>-一次渲染一个screen,在screen之间切换.当一个新的screen被打开的时候,他被放在栈顶.</li>
<li><code>TabNavigator</code>-渲染出一个tab bar让用户可以在多个screen之间切换.</li>
<li><code>DrawNavigator</code>-渲染一个抽屉,可以从屏幕左边侧滑出.</li>
</ul>
<h2 id="使用Navigators渲染screen"><a href="#使用Navigators渲染screen" class="headerlink" title="使用Navigators渲染screen"></a>使用Navigators渲染screen</h2><p>navigators实际渲染的就是React组件<br>了解怎么创建screen,读读一下内容:</p>
<ul>
<li>Screen<code>navigation</code>props允许screen分发navigation动作,例如操作另外一个screen.</li>
<li>Screen <code>navigationOptions</code>定制screen的展示方式(例如：header title,tab label)<h2 id="在顶层组件上调用导航"><a href="#在顶层组件上调用导航" class="headerlink" title="在顶层组件上调用导航"></a>在顶层组件上调用导航</h2>万一你想在同一级别的Navigation screen之间使用Navigator,你可以使用react的<code>ref</code>选项:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">SomeAppRouteConfigs</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  someEvent() &#123;</div><div class="line">    <span class="comment">// call navigate for AppNavigator here:</span></div><div class="line">    <span class="keyword">this</span>.navigator &amp;&amp; <span class="keyword">this</span>.navigator.dispatch(&#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Navigat</span>e', routeName, params &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> ref=&#123;nav =&gt; &#123; <span class="keyword">this</span>.navigator = nav; &#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:这个解决办法只能用在顶层navigator上.</p>
<h2 id="Navigation-Containers"><a href="#Navigation-Containers" class="headerlink" title="Navigation Containers"></a>Navigation Containers</h2><p>如果navigators没有props的话,他就会表现为顶层navigators.这个方式提供了一个透明的navigator container,这是顶层导航props的来源.<br>当渲染其中一个navigators的时候,navigation prop是可选的.如果没有navigation prop,container将会管理自己的导航state.他也可以使用URLs,外部链接以及整合android的back button.</p>
<p>为了使用方便,在幕后内建的navigators有这个能力,因为在幕后他们使用了<code>createNavigationContainer</code>.通常,navigators需要一个navigation prop来执行一定的功能.<br><code>onNavigationStateChange(prevState, newState)</code></p>
<p>当navigation state由顶层navigator变化管理的时候,这一点非常有用.为了达到这个目的,这个函数在每次调用的时候都会使用导航之前的state和导航之后的新state作为参数.</p>
<p><code>containerOptions</code><br>当一个navigator在顶层被使用的时候,这些选项可以来配置这个navigator.<br>如果一个navigator配置了<code>containerOptions</code>,但是也接受了<code>navigation</code>prop,会抛出错误.因为在这种情况下,navigator有两种选择,它就不知道怎么做了.</p>
<ul>
<li><code>URIPrefic</code>-app可以处理的URI前缀.在处理<code>deep link</code>的时候，可以提取路径,并且传递到router.</li>
</ul>
<h1 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h1><p>给你的app提供screen之间转变的方法,每个转变到的screen会存放在堆栈的栈顶.<br>默认情况下,StackNavigator配置有iOS和android的外观和感觉:在iOS下,新的screen从屏幕的右侧滑入,在android下,新的screen从底部淡入.iOS下也可以配置为从屏幕底部滑入.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Hom</span>e',</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Profil</span>e', &#123;name: <span class="symbol">'Luc</span>y'&#125;)&#125;</div><div class="line">        title=<span class="string">"Go to Lucy's profile"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const <span class="type">ModalStack</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Profile</span>: &#123;</div><div class="line">    path: <span class="symbol">'people</span>/:name',</div><div class="line">    screen: <span class="type">MyProfileScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="定义API"><a href="#定义API" class="headerlink" title="定义API"></a>定义API</h2><p><code>StackNavigator(Routeconfigs,StackNavigatorConfig)</code></p>
<h2 id="RouteConfigs"><a href="#RouteConfigs" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">StackNavigator(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// For each screen that you can navigate to, create a new entry like this:</span></div><div class="line">  Profile: &#123;</div><div class="line"></div><div class="line">    <span class="comment">// `ProfileScreen` is a React component that will be the main content of the screen.</span></div><div class="line">    screen: ProfileScreen,</div><div class="line">    <span class="comment">// When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: When deep linking or using react-navigation in a web app, this path is used:</span></div><div class="line">    path: <span class="string">'people/:username'</span>,</div><div class="line">    <span class="comment">// The action and route params are extracted from the path.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: Override the `navigationOptions` for the screen</span></div><div class="line">    navigationOptions: &#123;</div><div class="line">      <span class="attr">title</span>: <span class="function">(<span class="params">&#123;state&#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;state.params.username&#125;</span>'s Profile'`</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  ...MyOtherRoutes,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="StackNavigatorConfi"><a href="#StackNavigatorConfi" class="headerlink" title="StackNavigatorConfi"></a>StackNavigatorConfi</h2><p>Router的Options:</p>
<ul>
<li><code>initialRouteName</code>-设定默认的堆栈的screen.需要和route config的键之一相同.</li>
<li><code>initalRouteParams</code>-初始化route的参数</li>
<li><code>navigationOptions</code>-默认需要使用的可选参数</li>
<li><code>path</code>-覆盖route configs的路径设置</li>
</ul>
<p>可视化选项:</p>
<ul>
<li><code>mode</code>-定义渲染和切换之间的样式:<ul>
<li><code>card</code>-使用iOS和android标准的切换方法.默认值</li>
<li><code>modal</code>-使screen从底部滑动显示.仅仅在iOS下使用,Andorid下没有效果</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>headerMode</code>-定制header渲染的方法</p>
<ul>
<li><code>float</code>-切换界面的时候,用动画效果在screen的顶部渲染header</li>
<li><code>screen</code>-每一个screen都有一个header附着到头部,切换的时候有淡入和淡出的效果.andorid的基本模式</li>
<li><code>none</code>-没有header的渲染.</li>
</ul>
</li>
<li><p><code>cardStyle</code>-使用这个prop来重写或者扩展单个card的默认style</p>
</li>
<li><code>onTransitionStart</code>-当card开始切换动画的时候,这个函数被调用</li>
<li><code>onTransitionEnd</code>-当切换动画完成的时候,这个函数被调用</li>
</ul>
<h2 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line"></div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">    header: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">      // Render a button <span class="keyword">on</span> the right side of the header</div><div class="line">      // When pressed switches the screen <span class="keyword">to</span> edit mode.</div><div class="line">      right: (</div><div class="line">        <span class="variable">&lt;Button</span></div><div class="line">          title=&#123;state.params.editing ? 'Done' : 'Edit'&#125;</div><div class="line">          onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123;editing: <span class="keyword">state</span>.params.editing ? false : true&#125;)&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>stackNavigator</code>的<code>navigationOptions</code>:</p>
<ul>
<li><code>title</code>-scene的标题(字符串)</li>
<li><code>header</code>-header bar的配置对象<ul>
<li><code>visible</code>-header可视性的切换.只有当<code>headerMode</code>是<code>screen</code>的时候才可以工作</li>
<li><code>title</code>-header可以使用的字符串或者React组件,默认是scene的<code>title</code></li>
<li><code>backTitle</code>-iOS back按钮的title字符串或者<code>null</code>到disable标签,默认设定到scene的<code>title</code>.</li>
<li><code>right</code>-显示在header右侧的React组件</li>
<li><code>left</code>-同上,左侧</li>
<li><code>style</code>-header的Style对象</li>
<li><code>titleStyle</code>-title组建的Style对象</li>
<li><code>tintColor</code>-header的着色</li>
</ul>
</li>
<li><code>cardStack</code>-card stack的配置对象<ul>
<li><code>gesturesEnabled</code>-不管你是不是用手势,在iOS上是true,在android里是false.<h2 id="Navigator-Props"><a href="#Navigator-Props" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>StackNavigator(...)</code>创建的navigator组件接收两个props:<br><code>screenProps</code>-向下传递到子screen,例如:</li>
</ul>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SomeStack = StackNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;SomeStack</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>看看实例<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/SimpleStack.js" target="_blank" rel="external">SimpleStack.js</a>和<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/ModalStack.js" target="_blank" rel="external">ModalStack.js</a>,可以在本地的<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground" target="_blank" rel="external">NavigationPlayground</a>app中运行.</p>
<h1 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h1><p>通常很容易使用TabRouter来创建有几个tabs的screen.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      <span class="comment">// Note: By default the icon is only shown on iOS. Search the showIcon option below.</span></div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">26</span>,</div><div class="line">    height: <span class="number">26</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">TabNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  tabBarOptions: &#123;</div><div class="line">    activeTintColor: '#e91e63',</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="定义API-1"><a href="#定义API-1" class="headerlink" title="定义API"></a>定义API</h2><p><code>TabNavigator(RouteConfigs,TabNavigator)</code></p>
<h2 id="RouteConfigs-1"><a href="#RouteConfigs-1" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<h2 id="TabNavigatorConfig"><a href="#TabNavigatorConfig" class="headerlink" title="TabNavigatorConfig"></a>TabNavigatorConfig</h2><ul>
<li><code>tabBarComponent</code>-作为tab bar的组件.例如,<code>TabView.TabBarBottom</code>(ios的默认配置),<code>TabView.TabBarTop</code>(android的默认配置)</li>
<li><code>tabBarPosition</code>-tab bar的位置,可以是<code>top</code>和<code>bottom</code></li>
<li><code>swipeEnabled</code>-是否在tab之间滑动</li>
<li><code>animationEnabled</code>-变换tabs的时候是否开启动画效果</li>
<li><code>lazyLoad</code>-是否在需要的时候才惰性加载tabs,代替预渲染</li>
<li><code>tabBarOption</code>-配置tab bar,看下面<br>几个Options可以传递到潜在的的router,修改导航的逻辑</li>
<li><code>initialRouteName</code>-初始化时加载的tab route</li>
<li><code>order</code>-定义tabs顺序的routeName的数组</li>
<li><code>paths</code>-提供routeName到path配置的映射,重写routeConfigs里的paths设置</li>
<li><code>backBehavior</code>-back button是不是应该导致tab切换到初始的tab？入如果是的话,设定<code>initialRoute</code>,否则就是<code>none</code>.默认到<code>initialRoute</code>的行为.</li>
</ul>
<p><code>TabBarTop</code>的<code>tabBarOptions</code>设置(android默认的tab bar)</p>
<ul>
<li><code>activeTintColor</code>-激活tab的标签和icon的颜色</li>
<li><code>inactiveTintColor</code>-未激活tab的标签和icon的颜色</li>
<li><code>showIcon</code>-是否在tab中显示icon,默认是false</li>
<li><code>showLabel</code>-是否在tab显示label,默认是true</li>
<li><code>upperCaseLabel</code>-tab的label是否是大写,默认是true</li>
<li><code>pressColor</code>-material涟漪效果的颜色(Android&gt;=5.0)</li>
<li><code>pressOpacity</code>-按下tab的透明度变化(iOS和Android&lt;5.0)</li>
<li><code>scrollEnabled</code>-是否是滑动式tabs.</li>
<li><code>tabStyle</code>-tab的样式配置对象</li>
<li><code>indicatorStyle</code>-tab指示器的样式对象(tab底部的划线)</li>
<li><code>labelStyle</code>-tab label的样式对象</li>
<li><code>style</code>-tab bar的样式对象</li>
</ul>
<p>实例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tabBarOptions</span>: &#123;</div><div class="line">  <span class="attribute">labelStyle</span>: &#123;</div><div class="line">    fontSize: <span class="number">12</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="selector-tag">style</span>: &#123;</div><div class="line">    <span class="attribute">backgroundColor</span>: <span class="string">'blue'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项"><a href="#Screen导航的选项" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">   tabBar: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">     icon: (</div><div class="line">       <span class="variable">&lt;Image src=&#123;require('./my-icon.png')&#125; /&gt;</span></div><div class="line">     ),</div><div class="line">   &#125;),</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有<code>TabNavigator</code>的<code>navigationOption</code>:</p>
<ul>
<li><code>title</code>-scene的title(字符串)</li>
<li><code>tabBar</code>-tab bar的config对象:<ul>
<li><code>visible</code>-tab bar的可见性的切换</li>
<li><code>icon</code>-React组件或者函数给出<code>{focused:boolean,tintColor:string}</code>,返回一个React组件,显示在tab bar</li>
<li><code>label</code>-显示在tab bar中的tab的名字.如果定义为undefined,scene的<code>title</code>会被使用.如果要隐藏,看前面部分的<code>tabBarOption.showLabel</code>.<h2 id="Navigator-Props-1"><a href="#Navigator-Props-1" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>TabNavigator(...)</code>创建的navigator组件接收下面的props:</li>
</ul>
</li>
<li><code>screenProps</code>-向下传递额外的options给子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> TabNav = TabNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;TabNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="抽屉式导航"><a href="#抽屉式导航" class="headerlink" title="抽屉式导航"></a>抽屉式导航</h1><p>用来构建抽屉式导航<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.tabIcon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">24</span>,</div><div class="line">    height: <span class="number">24</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">DrawerNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开抽屉或者关闭抽屉,分别导航到<code>DrawerOpen</code>和<code>Drawerclose</code>.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerOpen'</span>); <span class="comment">// open drawer</span></div><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerClose'</span>); <span class="comment">// close drawer</span></div></pre></td></tr></table></figure></p>
<h2 id="定义API-2"><a href="#定义API-2" class="headerlink" title="定义API"></a>定义API</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">DrawerNavigator</span><span class="params">(RouteConfigs, DrawerNavigatorConfig)</span></span></div></pre></td></tr></table></figure>
<h2 id="RouteConfigs-2"><a href="#RouteConfigs-2" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>参看前面的内容</p>
<h2 id="DrawerNavigatonConfig"><a href="#DrawerNavigatonConfig" class="headerlink" title="DrawerNavigatonConfig"></a>DrawerNavigatonConfig</h2><ul>
<li><code>drawerWidth</code>-抽屉的宽度</li>
<li><code>drawerPosition</code>-选项是<code>left</code>和<code>right</code>.默认是<code>left</code>.</li>
<li><code>contentComponent</code>-用来渲染抽屉内容的组件,例如,navigation item.接收<code>navigation</code>prop.默认是<code>DrawerView.Items</code>.了解更多内容看下面内容.</li>
<li><code>contentOptions</code>-配置drawer的内容,看下面内容<br>几个选项传递给潜在的router,用来修改navigation的逻辑:</li>
<li><code>initialRouteName</code>-初始化route的routeName</li>
<li><code>order</code>-定义drawer item顺序的routeName数组</li>
<li><code>path</code>-提供一个routeName到path config的映射,重写掉routeConfigs中的path配置</li>
<li><code>backBehavior</code>-back按钮一定要返回到初始化的route吗？如果是的话,设置到<code>initialRoute</code>,否则就用<code>none</code>.默认到<code>initialRoute</code>的行为.<h2 id="提供定制化的contentComponent"><a href="#提供定制化的contentComponent" class="headerlink" title="提供定制化的contentComponent"></a>提供定制化的<em>contentComponent</em></h2>可以使用<code>react-navigation</code>重写默认的组件.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> CustomDrawerContentComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;style.container&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">DrawerView.Items</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container : &#123;</div><div class="line">    flex : 1,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>DrawerView.Item</code>的<code>contentOptions</code>配置</p>
<ul>
<li><code>activeTintColor</code>-激活的标签的label和icon的颜色</li>
<li><code>activeBackgroundColor</code>-激活的标签的背景颜色</li>
<li><code>inactiveTintColor</code>-未激活的标签的label和icon的颜色</li>
<li><code>inactiveBackgroundColor</code>-未激活的标签的背景颜色</li>
<li><code>style</code>-内容部分的样式对象</li>
</ul>
<p>示例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">contentOptions</span>: &#123;</div><div class="line">  <span class="attribute">activeTintColor</span>: <span class="string">'#e91e63'</span>,</div><div class="line">  style: &#123;</div><div class="line">    marginVertical: <span class="number">0</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项-1"><a href="#Screen导航的选项-1" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在组件中定义静态的<code>navigationOptions</code>.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; state &#125;) =&gt; `$&#123;state.params.name&#125;<span class="symbol">'s</span> <span class="type">Profile</span>!`,</div><div class="line"></div><div class="line">   drawer: &#123;</div><div class="line">     icon: (</div><div class="line">       &lt;<span class="type">Image</span> src=&#123;require('./my-icon.png')&#125; /&gt;</div><div class="line">     ),</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>DrawerNavigation</code> <code>navigationOption</code>配置项</p>
<ul>
<li><code>title</code>-scene的标题</li>
<li><code>drawer</code>-drawer的配置对象<ul>
<li><code>label</code>-字符串,React组件或者函数被设定<code>{fcoused:boolean,tinColor:string}</code>返回一个React组件,显示在drawer的边栏上.当label定义为undefined时,scene的``title被使用.</li>
<li><code>icon</code>-React组件或者函数被设定为<code>{fcoused:boolean,tintColor:string}</code>返回一个React元素,显示在drawer的边栏上.</li>
</ul>
</li>
</ul>
<h2 id="Navigator-的Props"><a href="#Navigator-的Props" class="headerlink" title="Navigator 的Props"></a>Navigator 的Props</h2><p>由<code>DrawerNavigator(...)</code>创建的navigator组件接受下面的props:</p>
<ul>
<li><code>screenProps</code>-向下传递额外的options到子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> DrawerNav = DrawerNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;DrawerNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Prop"><a href="#Screen-Navigation-Prop" class="headerlink" title="Screen Navigation Prop"></a>Screen Navigation Prop</h1><p>app中的每个screen都接收navigation prop 包含下面的内容:</p>
<ul>
<li><code>navigate</code>-(helper)链接的其他的screens</li>
<li><code>state</code>-screen的当前state和routes</li>
<li><code>setParam</code>-(helper)改变route的参数</li>
<li><code>goBack</code>-(helper)关闭激活的screen并且返回</li>
<li><code>dispatch</code>-发送一个action到router</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigators&quot;&gt;&lt;a href=&quot;#Navigators&quot; class=&quot;headerlink&quot; title=&quot;Navigators&quot;&gt;&lt;/a&gt;Navigators&lt;/h1&gt;&lt;p&gt;Navigators允许你定义你的导航结构.Navigators也可以渲染普
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-native" scheme="http://yoursite.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(2)</title>
    <link href="http://yoursite.com/2017/03/28/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-2/"/>
    <id>http://yoursite.com/2017/03/28/翻译-React-navigation导航系统-2/</id>
    <published>2017-03-28T00:25:36.000Z</published>
    <updated>2017-03-27T23:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二部分</p>
<h1 id="巢式导航"><a href="#巢式导航" class="headerlink" title="巢式导航"></a>巢式导航</h1><p>在移动应用中组合各种形式的导航是非常普遍的.React Navigation中的router和navigators是组合式的,如此以来可以允许我们定义非常复杂的导航系统.</p>
<h2 id="Tab-Navigator的介绍"><a href="#Tab-Navigator的介绍" class="headerlink" title="Tab Navigator的介绍"></a>Tab Navigator的介绍</h2><p> 我们在<code>App.js</code>中创建<code>TabNavigator</code>：<br>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">RecentChatsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">List</span> of recent chats&lt;/<span class="type">Text</span>&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllContactsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">List</span> of all contacts&lt;/<span class="type">Text</span>&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const <span class="type">MainScreenNavigator</span> = <span class="type">TabNavigator</span>(&#123;</div><div class="line">  <span class="type">Recent</span>: &#123; screen: <span class="type">RecentChatsScreen</span> &#125;,</div><div class="line">  <span class="type">All</span>: &#123; screen: <span class="type">AllContactsScreen</span> &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 如果<code>MainScreenNavigation</code>作为顶层的导航组件来渲染,看起来是这个样子的:<br> <img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe26v8brpug307i0dcjrv.gif" alt=""> </p>
<h2 id="在屏幕中构造一个巢式导航器"><a href="#在屏幕中构造一个巢式导航器" class="headerlink" title="在屏幕中构造一个巢式导航器"></a>在屏幕中构造一个巢式导航器</h2><p>我们想让这些tabs在app的第一屏显示,但是堆栈中的新的screen会覆盖tabs.<br>在前一步骤设置的<code>StackNavigator</code>中添加tabs作为顶级导航<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; <span class="keyword">screen: </span>MainScreenNavigator &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; <span class="keyword">screen: </span>ChatScreen &#125;,</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>因为<code>MainScreenNavigator</code>作为screen,可以传递<code>navigationOtions</code>参数:<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> MainScreenNavigator.navigationOptions = &#123;</div><div class="line">  <span class="keyword">title</span>: <span class="string">'My Chats'</span>,</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>在每一个tabs中添加链接到chat的按钮:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> &lt;Button</div><div class="line">  onPress=&#123;() =&gt; this<span class="selector-class">.props</span><span class="selector-class">.navigation</span><span class="selector-class">.navigate</span>(<span class="string">'Chat'</span>, &#123; user: <span class="string">'Lucy'</span> &#125;)&#125;</div><div class="line">  title=<span class="string">"Chat with Lucy"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>现在我们在每个导航器彼此之间做了配置,可以在导航界面之间切换.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fe2750jl3og307i0dc0x4.gif" alt=""></p>
<h1 id="配置头部"><a href="#配置头部" class="headerlink" title="配置头部"></a>配置头部</h1><p>在前面的例子中,我们用StactNavigator创建了几个screen.<br>当我们导航到chat screen,我们通过navigate 函数传递特定的参数到新的导航界面.例如,我们想给chat screen提供一个人名:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Chat'</span>, &#123; <span class="string">user:</span>  <span class="string">'Lucy'</span> &#125;);</div></pre></td></tr></table></figure></p>
<p><code>user</code>参数可以在chat screen中获取到:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; params &#125; = <span class="keyword">this</span>.props.navigation.state;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">Chat</span> <span class="keyword">with</span> &#123;params.user&#125;&lt;/<span class="type">Text</span>&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设定头部标题"><a href="#设定头部标题" class="headerlink" title="设定头部标题"></a>设定头部标题</h2><p>接着来,可以在screen 参数中配置头部的标题<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    <span class="comment">// // Title may be a simple string:</span></div><div class="line">    <span class="comment">// title: 'Hello',</span></div><div class="line">     </div><div class="line">    <span class="comment">// Or the title string may be a function of the </span></div><div class="line">    navigation prop:可以是prop的函数解析</div><div class="line">    title: (&#123; state &#125;) =&gt; `<span class="type">Chat</span> <span class="keyword">with</span> $&#123;state.params.user&#125;`</div><div class="line">  &#125;;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe27gzgg40j30h90uojra.jpg" alt=""></p>
<h2 id="添加右侧的按钮"><a href="#添加右侧的按钮" class="headerlink" title="添加右侧的按钮"></a>添加右侧的按钮</h2><p>可以在option中添加定制的右侧按钮<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = &#123;</div><div class="line">  <span class="selector-tag">header</span>: &#123;</div><div class="line">    <span class="attribute">right</span>: &lt;Button title=<span class="string">"Info"</span> /&gt;,</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe27iwdrcmj30ha0uowee.jpg" alt=""></p>
<p>和<code>title</code>一样,<code>header</code>option可以定义为prop的一个函数.让我们来基于导航参数渲染一个不同的按钮,设定为点击时调用<code>navigation.setParams</code>:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = &#123;</div><div class="line">  title: (&#123; <span class="keyword">state</span> &#125;) =&gt; &#123;</div><div class="line">    if (<span class="keyword">state</span>.params.mode === 'info') &#123;</div><div class="line">      return `$&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;'s Contact Info`;</div><div class="line">    &#125;</div><div class="line">    return `Chat with $&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;`;</div><div class="line">  &#125;,</div><div class="line">  header: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; &#123;</div><div class="line">    // The navigation prop has functions like <span class="built_in">set</span>Params, goBack, and navigate.</div><div class="line">    let right = (</div><div class="line">      <span class="variable">&lt;Button</span></div><div class="line">        title=&#123;`$&#123;state.params.user&#125;'s info`&#125;</div><div class="line">        onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123; mode: 'info' &#125;)&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">    if (<span class="keyword">state</span>.params.mode === 'info') &#123;</div><div class="line">      right = (</div><div class="line">        <span class="variable">&lt;Button</span></div><div class="line">          title="Done"</div><div class="line">          onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123; mode: '<span class="keyword">none</span>' &#125;)&#125;</div><div class="line">        /&gt;        </div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">    return &#123; right &#125;;</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>现在头部可以和screen的路由state进行交互了.<br><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe27os9kgrg307g0dc752.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二部分&lt;/p&gt;
&lt;h1 id=&quot;巢式导航&quot;&gt;&lt;a href=&quot;#巢式导航&quot; class=&quot;headerlink&quot; title=&quot;巢式导航&quot;&gt;&lt;/a&gt;巢式导航&lt;/h1&gt;&lt;p&gt;在移动应用中组合各种形式的导航是非常普遍的.React Navigation中的router和nav
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb React/JSX 编码规范</title>
    <link href="http://yoursite.com/2017/03/28/Airbnb-React-JSX-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/03/28/Airbnb-React-JSX-编码规范/</id>
    <published>2017-03-28T00:13:55.000Z</published>
    <updated>2017-03-27T16:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Airbnb-React-JSX-编码规范"><a href="#Airbnb-React-JSX-编码规范" class="headerlink" title="Airbnb React/JSX 编码规范"></a>Airbnb React/JSX 编码规范</h1><p><em>算是最合理的React/JSX编码规范之一了</em></p>
<h2 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h2><ol>
<li><a href="#basic-rules-基本规范">基本规范</a></li>
<li><a href="#创建模块">Class vs React.createClass vs stateless</a></li>
<li><a href="#mixins">Mixins</a></li>
<li><a href="#naming-命名">命名</a></li>
<li><a href="#declaration-声明模块">声明模块</a></li>
<li><a href="#alignment-代码对齐">代码对齐</a></li>
<li><a href="#quotes-单引号还是双引号">单引号还是双引号</a></li>
<li><a href="#spacing-空格">空格</a></li>
<li><a href="#props-属性">属性</a></li>
<li><a href="#refs">Refs引用</a></li>
<li><a href="#parentheses-括号">括号</a></li>
<li><a href="#tags-标签">标签</a></li>
<li><a href="#methods-函数">函数/方法</a></li>
<li><a href="#ordering-react-模块生命周期">模块生命周期</a></li>
<li><a href="#ismounted">isMounted</a></li>
</ol>
<h2 id="Basic-Rules-基本规范"><a href="#Basic-Rules-基本规范" class="headerlink" title="Basic Rules 基本规范"></a>Basic Rules 基本规范</h2><ul>
<li>每个文件只写一个模块.<ul>
<li>但是多个<a href="https://facebook.github.io/react/docs/reusable-components.html#stateless-functions" target="_blank" rel="external">无状态模块</a>可以放在单个文件中. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless" target="_blank" rel="external"><code>react/no-multi-comp</code></a>.</li>
</ul>
</li>
<li>推荐使用JSX语法.</li>
<li>不要使用 <code>React.createElement</code>，除非从一个非JSX的文件中初始化你的app.</li>
</ul>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>   Class vs React.createClass vs stateless  </p>
<ul>
<li><p>如果你的模块有内部状态或者是<code>refs</code>, 推荐使用 <code>class extends React.Component</code> 而不是 <code>React.createClass</code>.<br>eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md" target="_blank" rel="external"><code>react/prefer-es6-class</code></a> <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md" target="_blank" rel="external"><code>react/prefer-stateless-function</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> Listing = React.createClass(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你的模块没有状态或是没有引用<code>refs</code>， 推荐使用普通函数（非箭头函数）而不是类:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad (relying on function name inference is discouraged)</span></div><div class="line"><span class="keyword">const</span> Listing = <span class="function">(<span class="params">&#123; hello &#125;</span>) =&gt;</span> (</div><div class="line">  &lt;div&gt;&#123;hello&#125;&lt;/div&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listing</span>(<span class="params">&#123; hello &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h2><ul>
<li><p><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="external">不要使用 mixins</a>.</p>
<blockquote>
<p>为什么? Mixins 会增加隐式的依赖，导致命名冲突，并且会以雪球式增加复杂度。在大多数情况下Mixins可以被更好的方法替代，如：组件化，高阶组件，工具模块等。</p>
</blockquote>
</li>
</ul>
<h2 id="Naming-命名"><a href="#Naming-命名" class="headerlink" title="Naming 命名"></a>Naming 命名</h2><ul>
<li><strong>扩展名</strong>: React模块使用 <code>.jsx</code> 扩展名.</li>
<li><strong>文件名</strong>: 文件名使用帕斯卡命名. 如, <code>ReservationCard.jsx</code>.</li>
<li><p><strong>引用命名</strong>: React模块名使用帕斯卡命名，实例使用骆驼式命名. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md" target="_blank" rel="external"><code>react/jsx-pascal-case</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> reservationCard <span class="keyword">from</span> <span class="string">'./ReservationCard'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> ReservationCard <span class="keyword">from</span> <span class="string">'./ReservationCard'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> ReservationItem = &lt;ReservationCard /&gt;;</div><div class="line"></div><div class="line">// good</div><div class="line">const reservationItem = &lt;ReservationCard /&gt;;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>模块命名</strong>: 模块使用当前文件名一样的名称. 比如 <code>ReservationCard.jsx</code> 应该包含名为 <code>ReservationCard</code>的模块. 但是，如果整个文件夹是一个模块，使用 <code>index.js</code>作为入口文件，然后直接使用 <code>index.js</code> 或者文件夹名作为模块的名称:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer/Footer'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer/index'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>高阶模块命名</strong>: 对于生成一个新的模块，其中的模块名 <code>displayName</code> 应该为高阶模块名和传入模块名的组合. 例如, 高阶模块 <code>withFoo()</code>, 当传入一个 <code>Bar</code> 模块的时候， 生成的模块名 <code>displayName</code> 应该为 <code>withFoo(Bar)</code>.</p>
<blockquote>
<p>为什么？一个模块的 <code>displayName</code> 可能会在开发者工具或者错误信息中使用到，因此有一个能清楚的表达这层关系的值能帮助我们更好的理解模块发生了什么，更好的Debug.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withFoo</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">WithFoo</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">export default function withFoo(WrappedComponent) &#123;</div><div class="line">  function WithFoo(props) &#123;</div><div class="line">    return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  const wrappedComponentName = WrappedComponent.displayName</div><div class="line">    || WrappedComponent.name</div><div class="line">    || 'Component';</div><div class="line"></div><div class="line">  WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`;</div><div class="line">  return WithFoo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>属性命名</strong>: 避免使用DOM相关的属性来用作其他的用途。</p>
<blockquote>
<p>为什么？对于<code>style</code> 和 <code>className</code>这样的属性名，我们都会默认它们代表一些特殊的含义，如元素的样式，CSS class的名称。在你的应用中使用这些属性来表示其他的含义会使你的代码更难阅读，更难维护，并且可能会引起bug。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;MyComponent style=<span class="string">"fancy"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;MyComponent variant=<span class="string">"fancy"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Declaration-声明模块"><a href="#Declaration-声明模块" class="headerlink" title="Declaration 声明模块"></a>Declaration 声明模块</h2><ul>
<li><p>不要使用 <code>displayName</code> 来命名React模块，而是使用引用来命名模块， 如 class 名称.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  <span class="attr">displayName</span>: <span class="string">'ReservationCard'</span>,</div><div class="line">  <span class="comment">// stuff goes here</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ReservationCard</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Alignment-代码对齐"><a href="#Alignment-代码对齐" class="headerlink" title="Alignment 代码对齐"></a>Alignment 代码对齐</h2><ul>
<li><p>遵循以下的JSX语法缩进/格式. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md" target="_blank" rel="external"><code>react/jsx-closing-bracket-location</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo superLongParam=<span class="string">"bar"</span></div><div class="line">     anotherSuperLongParam=<span class="string">"baz"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good, 有多行属性的话, 新建一行关闭标签</span></div><div class="line">&lt;Foo</div><div class="line">  superLongParam=<span class="string">"bar"</span></div><div class="line">  anotherSuperLongParam=<span class="string">"baz"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// 若能在一行中显示, 直接写成一行</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 子元素按照常规方式缩进</span></div><div class="line">&lt;Foo</div><div class="line">  superLongParam=<span class="string">"bar"</span></div><div class="line">  anotherSuperLongParam=<span class="string">"baz"</span></div><div class="line">&gt;</div><div class="line">  &lt;Quux /&gt;</div><div class="line">&lt;/Foo&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Quotes-单引号还是双引号"><a href="#Quotes-单引号还是双引号" class="headerlink" title="Quotes 单引号还是双引号"></a>Quotes 单引号还是双引号</h2><ul>
<li><p>对于JSX属性值总是使用双引号(<code>&quot;</code>), 其他均使用单引号(<code>&#39;</code>). eslint: <a href="http://eslint.org/docs/rules/jsx-quotes" target="_blank" rel="external"><code>jsx-quotes</code></a></p>
<blockquote>
<p>为什么? HTML属性也是用双引号, 因此JSX的属性也遵循此约定.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo bar=<span class="string">'bar'</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo style=&#123;&#123; <span class="attr">left</span>: <span class="string">"20px"</span> &#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo style=&#123;&#123; <span class="attr">left</span>: <span class="string">'20px'</span> &#125;&#125; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Spacing-空格"><a href="#Spacing-空格" class="headerlink" title="Spacing 空格"></a>Spacing 空格</h2><ul>
<li><p>总是在自动关闭的标签前加一个空格，正常情况下也不需要换行. eslint: <a href="http://eslint.org/docs/rules/no-multi-spaces" target="_blank" rel="external"><code>no-multi-spaces</code></a>, <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md" target="_blank" rel="external"><code>react/jsx-space-before-closing</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo/&gt;</div><div class="line"></div><div class="line"><span class="comment">// very bad</span></div><div class="line">&lt;Foo                 /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line"> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在JSX <code>{}</code> 引用括号里两边加空格. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md" target="_blank" rel="external"><code>react/jsx-curly-spacing</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo bar=&#123; baz &#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo bar=&#123;baz&#125; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Props-属性"><a href="#Props-属性" class="headerlink" title="Props 属性"></a>Props 属性</h2><ul>
<li><p>JSX属性名使用骆驼式风格<code>camelCase</code>.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  UserName=<span class="string">"hello"</span></div><div class="line">  phone_number=&#123;<span class="number">12345678</span>&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  userName=<span class="string">"hello"</span></div><div class="line">  phoneNumber=&#123;<span class="number">12345678</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果属性值为 <code>true</code>, 可以直接省略. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md" target="_blank" rel="external"><code>react/jsx-boolean-value</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  hidden=&#123;<span class="literal">true</span>&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  hidden</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;img&gt;</code> 标签总是添加 <code>alt</code> 属性. 如果图片以presentation(感觉是以类似PPT方式显示?)方式显示，<code>alt</code> 可为空, 或者<code>&lt;img&gt;</code> 要包含<code>role=&quot;presentation&quot;</code>. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-has-alt.md" target="_blank" rel="external"><code>jsx-a11y/img-has-alt</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Me waving hello"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">""</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> role=<span class="string">"presentation"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在 <code>alt</code> 值里使用如 “image”, “photo”, or “picture”包括图片含义这样的词， 中文也一样. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md" target="_blank" rel="external"><code>jsx-a11y/img-redundant-alt</code></a></p>
<blockquote>
<p>为什么? 屏幕助读器已经把 <code>img</code> 标签标注为图片了, 所以没有必要再在 <code>alt</code> 里说明了.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Picture of me waving hello"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Me waving hello"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用有效正确的 aria <code>role</code>属性值 <a href="https://www.w3.org/TR/wai-aria/roles#role_definitions" target="_blank" rel="external">ARIA roles</a>. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md" target="_blank" rel="external"><code>jsx-a11y/aria-role</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad - not an ARIA role</span></div><div class="line">&lt;div role=<span class="string">"datepicker"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad - abstract ARIA role</span></div><div class="line">&lt;div role=<span class="string">"range"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;div role=<span class="string">"button"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在标签上使用 <code>accessKey</code> 属性. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md" target="_blank" rel="external"><code>jsx-a11y/no-access-key</code></a></p>
<blockquote>
<p>为什么? 屏幕助读器在键盘快捷键与键盘命令时造成的不统一性会导致阅读性更加复杂.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;div accessKey=<span class="string">"h"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;div /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>避免使用数组的index来作为属性<code>key</code>的值，推荐使用唯一ID. (<a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318" target="_blank" rel="external">为什么?</a>)</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&#123;todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></div><div class="line">  &lt;Todo</div><div class="line">    &#123;...todo&#125;</div><div class="line">    key=&#123;index&#125;</div><div class="line">  /&gt;</div><div class="line">)&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&#123;todos.map(<span class="function"><span class="params">todo</span> =&gt;</span> (</div><div class="line">  &lt;Todo</div><div class="line">    &#123;...todo&#125;</div><div class="line">    key=&#123;todo.id&#125;</div><div class="line">  /&gt;</div><div class="line">))&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>对于所有非必须的属性，总是手动去定义<code>defaultProps</code>属性.</p>
<blockquote>
<p>为什么? propTypes 可以作为模块的文档说明, 并且声明 defaultProps 的话意味着阅读代码的人不需要去假设一些默认值。更重要的是, 显示的声明默认属性可以让你的模块跳过属性类型的检查.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SFC</span>(<span class="params">&#123; foo, bar, children &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;</div><div class="line">&#125;</div><div class="line">SFC.propTypes = &#123;</div><div class="line">  <span class="attr">foo</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">bar</span>: PropTypes.string,</div><div class="line">  <span class="attr">children</span>: PropTypes.node,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SFC</span>(<span class="params">&#123; foo, bar &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&lt;/div&gt;;</div><div class="line">&#125;</div><div class="line">SFC.propTypes = &#123;</div><div class="line">  <span class="attr">foo</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">bar</span>: PropTypes.string,</div><div class="line">  <span class="attr">children</span>: PropTypes.node,</div><div class="line">&#125;;</div><div class="line">SFC.defaultProps = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">children</span>: <span class="literal">null</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ul>
<li><p>总是在Refs里使用回调函数. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md" target="_blank" rel="external"><code>react/no-string-refs</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  ref=<span class="string">"myRef"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  ref=&#123;(ref) =&gt; &#123; <span class="keyword">this</span>.myRef = ref; &#125;&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Parentheses-括号"><a href="#Parentheses-括号" class="headerlink" title="Parentheses 括号"></a>Parentheses 括号</h2><ul>
<li><p>将多行的JSX标签写在 <code>()</code>里. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md" target="_blank" rel="external"><code>react/jsx-wrap-multilines</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> &lt;MyComponent className="long body" foo="bar"&gt;</div><div class="line">           &lt;MyChild /&gt;</div><div class="line">         &lt;/MyComponent&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;MyComponent className="long body" foo="bar"&gt;</div><div class="line">      &lt;MyChild /&gt;</div><div class="line">    &lt;/MyComponent&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good, 单行可以不需要</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">const</span> body = &lt;div&gt;hello&lt;/div&gt;;</div><div class="line">  <span class="keyword">return</span> &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tags-标签"><a href="#Tags-标签" class="headerlink" title="Tags 标签"></a>Tags 标签</h2><ul>
<li><p>对于没有子元素的标签来说总是自己关闭标签. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md" target="_blank" rel="external"><code>react/self-closing-comp</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo className=<span class="string">"stuff"</span>&gt;&lt;/Foo&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo className=<span class="string">"stuff"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果模块有多行的属性， 关闭标签时新建一行. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md" target="_blank" rel="external"><code>react/jsx-closing-bracket-location</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  bar=<span class="string">"bar"</span></div><div class="line">  baz=<span class="string">"baz"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  bar=<span class="string">"bar"</span></div><div class="line">  baz=<span class="string">"baz"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Methods-函数"><a href="#Methods-函数" class="headerlink" title="Methods 函数"></a>Methods 函数</h2><ul>
<li><p>使用箭头函数来获取本地变量.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ItemList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;ul&gt;</div><div class="line">      &#123;props.items.map((item, index) =&gt; (</div><div class="line">        &lt;Item</div><div class="line">          key=&#123;item.key&#125;</div><div class="line">          onClick=&#123;() =&gt; doSomethingWith(item.name, index)&#125;</div><div class="line">        /&gt;</div><div class="line">      ))&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当在 <code>render()</code> 里使用事件处理方法时，提前在构造函数里把 <code>this</code> 绑定上去. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md" target="_blank" rel="external"><code>react/jsx-no-bind</code></a></p>
<blockquote>
<p>为什么? 在每次 <code>render</code> 过程中， 再调用 <code>bind</code> 都会新建一个新的函数，浪费资源.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  onClickDiv() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div onClick=&#123;this.onClickDiv.bind(this)&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line"></div><div class="line">    this.onClickDiv = this.onClickDiv.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onClickDiv() &#123;</div><div class="line">    // do stuff</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return &lt;div onClick=&#123;this.onClickDiv&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在React模块中，不要给所谓的私有函数添加 <code>_</code> 前缀，本质上它并不是私有的.</p>
<blockquote>
<p>为什么？<code>_</code> 下划线前缀在某些语言中通常被用来表示私有变量或者函数。但是不像其他的一些语言，在JS中没有原生支持所谓的私有变量，所有的变量函数都是共有的。尽管你的意图是使它私有化，在之前加上下划线并不会使这些变量私有化，并且所有的属性（包括有下划线前缀及没有前缀的）都应该被视为是共有的。了解更多详情请查看Issue <a href="https://github.com/airbnb/javascript/issues/1024" target="_blank" rel="external">#1024</a>, 和 <a href="https://github.com/airbnb/javascript/issues/490" target="_blank" rel="external">#490</a> 。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">React.createClass(&#123;</div><div class="line">  _onClickSubmit() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// other stuff</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  onClickSubmit() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// other stuff</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>render</code> 方法中总是确保 <code>return</code> 返回值. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md" target="_blank" rel="external"><code>react/require-render-return</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">render() &#123;</div><div class="line">  (&lt;div /&gt;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">render() &#123;</div><div class="line">  return (&lt;div /&gt;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Ordering-React-模块生命周期"><a href="#Ordering-React-模块生命周期" class="headerlink" title="Ordering React 模块生命周期"></a>Ordering React 模块生命周期</h2><ul>
<li><code>class extends React.Component</code> 的生命周期函数:</li>
</ul>
<ol>
<li>可选的 <code>static</code> 方法</li>
<li><code>constructor</code> 构造函数</li>
<li><code>getChildContext</code> 获取子元素内容</li>
<li><code>componentWillMount</code> 模块渲染前</li>
<li><code>componentDidMount</code> 模块渲染后</li>
<li><code>componentWillReceiveProps</code> 模块将接受新的数据</li>
<li><code>shouldComponentUpdate</code> 判断模块需不需要重新渲染</li>
<li><code>componentWillUpdate</code> 上面的方法返回 <code>true</code>， 模块将重新渲染</li>
<li><code>componentDidUpdate</code> 模块渲染结束</li>
<li><code>componentWillUnmount</code> 模块将从DOM中清除, 做一些清理任务</li>
<li><em>点击回调或者事件处理器</em> 如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></li>
<li><em><code>render</code> 里的 getter 方法</em> 如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></li>
<li><em>可选的 render 方法</em> 如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></li>
<li><code>render</code> render() 方法</li>
</ol>
<ul>
<li><p>如何定义 <code>propTypes</code>, <code>defaultProps</code>, <code>contextTypes</code>, 等等其他属性…</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> propTypes = &#123;</div><div class="line">  <span class="attr">id</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">url</span>: PropTypes.string.isRequired,</div><div class="line">  <span class="attr">text</span>: PropTypes.string,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> defaultProps = &#123;</div><div class="line">  <span class="attr">text</span>: <span class="string">'Hello World'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> methodsAreOk() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;a href=&#123;this.props.url&#125; data-id=&#123;this.props.id&#125;&gt;&#123;this.props.text&#125;&lt;/a&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Link.propTypes = propTypes;</div><div class="line">Link.defaultProps = defaultProps;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Link;</div></pre></td></tr></table></figure>
</li>
<li><p><code>React.createClass</code> 的生命周期函数，与使用class稍有不同: eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md" target="_blank" rel="external"><code>react/sort-comp</code></a></p>
</li>
</ul>
<ol>
<li><code>displayName</code> 设定模块名称</li>
<li><code>propTypes</code> 设置属性的类型</li>
<li><code>contextTypes</code> 设置上下文类型</li>
<li><code>childContextTypes</code> 设置子元素上下文类型</li>
<li><code>mixins</code> 添加一些mixins</li>
<li><code>statics</code></li>
<li><code>defaultProps</code> 设置默认的属性值</li>
<li><code>getDefaultProps</code> 获取默认属性值</li>
<li><code>getInitialState</code> 或者初始状态</li>
<li><code>getChildContext</code></li>
<li><code>componentWillMount</code></li>
<li><code>componentDidMount</code></li>
<li><code>componentWillReceiveProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>componentWillUpdate</code></li>
<li><code>componentDidUpdate</code></li>
<li><code>componentWillUnmount</code></li>
<li><em>clickHandlers or eventHandlers</em> like <code>onClickSubmit()</code> or <code>onChangeDescription()</code></li>
<li><em>getter methods for <code>render</code></em> like <code>getSelectReason()</code> or <code>getFooterContent()</code></li>
<li><em>Optional render methods</em> like <code>renderNavigation()</code> or <code>renderProfilePicture()</code></li>
<li><code>render</code></li>
</ol>
<h2 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted"></a>isMounted</h2><ul>
<li><p>不要再使用 <code>isMounted</code>. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md" target="_blank" rel="external"><code>react/no-is-mounted</code></a></p>
<blockquote>
<p>为什么? <a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html" target="_blank" rel="external"><code>isMounted</code> 反人类设计模式:()</a>, 在 ES6 classes 中无法使用， 官方将在未来的版本里删除此方法.</p>
</blockquote>
</li>
</ul>
<p><strong><a href="#内容目录">⬆ 回到顶部</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Airbnb-React-JSX-编码规范&quot;&gt;&lt;a href=&quot;#Airbnb-React-JSX-编码规范&quot; class=&quot;headerlink&quot; title=&quot;Airbnb React/JSX 编码规范&quot;&gt;&lt;/a&gt;Airbnb React/JSX 编码规范&lt;/
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation(1)</title>
    <link href="http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/"/>
    <id>http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/</id>
    <published>2017-03-27T20:26:48.000Z</published>
    <updated>2017-03-27T15:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.<br>教程可以参考<a href="https://hackernoon.com/getting-started-with-react-navigation-the-navigation-solution-for-react-native-ea3f4bd786a4#.n0pz5ev39" target="_blank" rel="external">这篇文章</a>,这个文章作者老兄和我一样很喜欢折腾.前面就参考了他的另一个导航教程,这次再来.</p>
<hr>
<p>本文是翻译的<a href="https://reactnavigation.org/docs/intro/" target="_blank" rel="external">官方文档</a>.打算翻译完<br>基本思路是有几个注册系统,如果要在app中使用导航,必须要把组件注册到对应的系统中.</p>
<h1 id="原文开始：你好！移动导航"><a href="#原文开始：你好！移动导航" class="headerlink" title="原文开始：你好！移动导航"></a>原文开始：你好！移动导航</h1><p>使用React Navigation来构建跨平台导航</p>
<h2 id="配置和安装"><a href="#配置和安装" class="headerlink" title="配置和安装"></a>配置和安装</h2><p>首先要配置React Native系统.接下来创建RN项目,添加<code>react-navigation</code></p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># Create a new React Native App</span></div><div class="line"> <span class="comment">#创建新RN APP</span></div><div class="line">react-native init SimpleApp</div><div class="line">cd SimpleApp</div><div class="line"></div><div class="line"><span class="comment"># Install the latest version of react-navigation from npm安装最新版本</span></div><div class="line">npm install --save react-navigation</div><div class="line"></div><div class="line"><span class="comment"># Run the new app运行，确保初始化正常</span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-android <span class="comment"># or:</span></span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure>
<p> <img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe1ostu6xlj30ku112jrj.jpg" alt="初始化界面"></p>
<p>为了在Android和iOS之间共享代码,删除掉<code>index.ios.js</code>和<code>index.andorid.js</code>的实际代码,使用<code>import &#39;./App&#39;</code>来实现具体的代码</p>
<p>现在来创建‘App.js’</p>
<h2 id="Stack-Navigator介绍"><a href="#Stack-Navigator介绍" class="headerlink" title="Stack Navigator介绍"></a>Stack Navigator介绍</h2><p>为了想使用<code>stack</code> navigation的概念,我们会使用<code>StactkNavigator</code>.(译注：stack就是数据结构的堆栈技术,遵循后进先出的原理).每一个<code>被</code>到导航的screen(导航画面)被放在堆栈的栈顶,返回时候,会从栈顶弹出对应的组件.先看看一个screen的情况</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其实这个代码没有实现App.js，export的模式,注意</span></div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">AppRegistry</span>,</div><div class="line">  <span class="type">Text</span>,</div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="comment">//导入stack导航组件</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="type">StackNavigator</span> &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',<span class="comment">//在导航中显示的标题内容</span></div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//这里可以是导入的其他组件</span></div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Navigation</span>!&lt;/<span class="type">Text</span>&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//进行导航的注册</span></div><div class="line">const <span class="type">SimpleApp</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123; screen: <span class="type">HomeScreen</span> &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'SimpleAp</span>p', () =&gt; <span class="type">SimpleApp</span>);</div></pre></td></tr></table></figure>
<p><code>title</code>是static<code>navigationOptions</code>里配置的标题内容,出现的界面看下面</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe1pa9cdbrj30yj1pd0t3.jpg" alt=""></p>
<h2 id="添加新的导航画面"><a href="#添加新的导航画面" class="headerlink" title="添加新的导航画面"></a>添加新的导航画面</h2><p>再添加一个<code>ChatScreen</code>画面</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>&lt;/<span class="type">Text</span>&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>HomeScreen</code>中添加一个button组件,使用<code>routeName</code> <code>Chat</code>关联到<code>ChatScreen</code>.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t')&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们正在使用从<code>screen navigation prop</code>获得的导航函数转向<code>ChatScreen</code>.但是这需要在<code>StackNavigator</code>中注册.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; screen: ChatScreen &#125;,<span class="comment">//新添加的screen</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在可以导航到ChatScreen,也可以返回了.<br><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe1pjjrpn4g307i0dc75l.gif" alt=""></p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在<code>ChatScreen</code>中硬编码标题不是好办法,可以在导航的时候传递参数.首先编辑一下<code>HomeScreen</code>组件,传递<code>name</code>参数到路由中.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t', &#123; user: <span class="symbol">'Luc</span>y' &#125;)&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以编辑<code>ChatScreen</code>组件显示的<code>name</code>参数,这个参数通过route来传递.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> class ChatScreen extends React.Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    // Nav options can be defined as a function of the navigation prop:</div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `Chat with $&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;`,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    // The screen's current route is passed <span class="keyword">in</span> <span class="keyword">to</span> `props.navigation.<span class="keyword">state</span>`:</div><div class="line">    const &#123; params &#125; = this.props.navigation.<span class="keyword">state</span>;</div><div class="line">    return (</div><div class="line">      <span class="variable">&lt;View&gt;</span></div><div class="line">        <span class="variable">&lt;Text&gt;</span>Chat with &#123;params.<span class="keyword">user</span>&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在当你导航到Chat screen的时候,可以看到名字了.在<code>HomeScreen</code>中改变<code>name</code>,看看变化.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fe1t489r4gg307i0dc75l.gif" alt=""></p>
<p>第一部分就这些.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.&lt;br&gt;教程可以参考&lt;a href=&quot;https://hackernoon.com/getting-started-with-react-n
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux- actions Readme</title>
    <link href="http://yoursite.com/2017/03/27/Redux-actions-Readme/"/>
    <id>http://yoursite.com/2017/03/27/Redux-actions-Readme/</id>
    <published>2017-03-27T10:41:40.000Z</published>
    <updated>2017-03-27T02:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a>redux-actions</h1><p><a href="https://travis-ci.org/acdlite/redux-actions" target="_blank" rel="external"><img src="https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square" alt="build status"></a></p>
<p><a href="https://nodei.co/npm/redux-actions/" target="_blank" rel="external"><img src="https://nodei.co/npm/redux-actions.png?downloads=true" alt="NPM"></a></p>
<p><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">Flux Standard Action</a> utilities for Redux.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save redux-actions</div></pre></td></tr></table></figure>
<p>The <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a> package provides a <a href="http://webpack.github.io/docs/commonjs.html" target="_blank" rel="external">CommonJS</a> build for use in Node.js, and with bundlers like <a href="http://webpack.github.io/" target="_blank" rel="external">Webpack</a> and <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>. It also includes an <a href="http://jsmodules.io/" target="_blank" rel="external">ES modules</a> build that works well with <a href="http://rollupjs.org/" target="_blank" rel="external">Rollup</a> and <a href="https://webpack.js.org" target="_blank" rel="external">Webpack2</a>‘s tree-shaking.</p>
<p>If you don’t use <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a>, you may grab the latest <a href="https://unpkg.com/redux-actions@latest/dist" target="_blank" rel="external">UMD</a> build from <a href="https://unpkg.com" target="_blank" rel="external">unpkg</a> (either a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.js" target="_blank" rel="external">development</a> or a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.min.js" target="_blank" rel="external">production</a> build). The UMD build exports a global called <code>window.ReduxActions</code> if you add it to your page via a <code>&lt;script&gt;</code> tag. We <em>don’t</em> recommend UMD builds for any serious application, as most of the libraries complementary to Redux are only available on <a href="https://www.npmjs.com/search?q=redux" target="_blank" rel="external">npm</a>.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="createAction-type-payloadCreator-Identity-metaCreator"><a href="#createAction-type-payloadCreator-Identity-metaCreator" class="headerlink" title="createAction(type, payloadCreator = Identity, ?metaCreator)"></a><code>createAction(type, payloadCreator = Identity, ?metaCreator)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps an action creator so that its return value is the payload of a Flux Standard Action.</p>
<p><code>payloadCreator</code> must be a function, <code>undefined</code>, or <code>null</code>. If <code>payloadCreator</code> is <code>undefined</code> or <code>null</code>, the identity function is used.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> increment = createAction(<span class="string">'INCREMENT'</span>, amount =&gt; amount);</div><div class="line"><span class="comment">// same as</span></div><div class="line">increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line">expect(increment(<span class="number">42</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">42</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If the payload is an instance of an <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="external">Error<br>object</a>,<br>redux-actions will automatically set <figure class="highlight plain"><figcaption><span>to true.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Example:</div><div class="line"></div><div class="line">```js</div><div class="line">const increment = createAction(&apos;INCREMENT&apos;);</div><div class="line"></div><div class="line">const error = new TypeError(&apos;not a number&apos;);</div><div class="line">expect(increment(error)).to.deep.equal(&#123;</div><div class="line">  type: &apos;INCREMENT&apos;,</div><div class="line">  payload: error,</div><div class="line">  error: true</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>createAction</code> also returns its <code>type</code> when used as type in <code>handleAction</code> or <code>handleActions</code>.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line"><span class="comment">// As parameter in handleAction:</span></div><div class="line">handleAction(increment, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// As object key in handleActions:</span></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [increment]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<p><strong>NOTE:</strong> The more correct name for this function is probably <code>createActionCreator()</code>, but that seems a bit redundant.</p>
<p>Use the identity form to create one-off actions:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createAction(<span class="string">'ADD_TODO'</span>)(<span class="string">'Use Redux'</span>);</div></pre></td></tr></table></figure>
<p><code>metaCreator</code> is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If <code>metaCreator</code> is undefined or not a function, the meta field is omitted.</p>
<h3 id="createActions-actionMap-identityActions"><a href="#createActions-actionMap-identityActions" class="headerlink" title="createActions(?actionMap, ?...identityActions)"></a><code>createActions(?actionMap, ?...identityActions)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Returns an object mapping action types to action creators. The keys of this object are camel-cased from the keys in <code>actionMap</code> and the string literals of <code>identityActions</code>; the values are the action creators.</p>
<p><code>actionMap</code> is an optional object and a recursive data structure, with action types as keys, and whose values <strong>must</strong> be either</p>
<ul>
<li>a function, which is the payload creator for that action</li>
<li>an array with <code>payload</code> and <code>meta</code> functions in that order, as in <a href="#createactiontype-payloadcreator--identity-metacreator"><code>createAction</code></a><ul>
<li><code>meta</code> is <strong>required</strong> in this case (otherwise use the function form above)</li>
</ul>
</li>
<li>an <code>actionMap</code></li>
</ul>
<p><code>identityActions</code> is an optional list of positional string arguments that are action type strings; these action types will use the identity payload creator.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; actionOne, actionTwo, actionThree &#125; = createActions(&#123;</div><div class="line">  <span class="comment">// function form; payload creator defined inline</span></div><div class="line">  ACTION_ONE: <span class="function">(<span class="params">key, value</span>) =&gt;</span> (&#123; [key]: value &#125;),</div><div class="line"></div><div class="line">  <span class="comment">// array form</span></div><div class="line">  ACTION_TWO: [</div><div class="line">    <span class="function">(<span class="params">first</span>) =&gt;</span> [first],             <span class="comment">// payload</span></div><div class="line">    (first, second) =&gt; (&#123; second &#125;) <span class="comment">// meta</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">// trailing action type string form; payload creator is the identity</span></div><div class="line">&#125;, <span class="string">'ACTION_THREE'</span>);</div><div class="line"></div><div class="line">expect(actionOne(<span class="string">'key'</span>, <span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_ONE'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionTwo(<span class="string">'first'</span>, <span class="string">'second'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_TWO'</span>,</div><div class="line">  <span class="attr">payload</span>: [<span class="string">'first'</span>],</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">second</span>: <span class="string">'second'</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionThree(<span class="number">3</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_THREE'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">3</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If <code>actionMap</code> has a recursive structure, its leaves are used as payload and meta creators, and the action type for each leaf is the combined path to that leaf:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> actionCreators = createActions(&#123;</div><div class="line">  <span class="attr">APP</span>: &#123;</div><div class="line">    <span class="attr">COUNTER</span>: &#123;</div><div class="line">      <span class="attr">INCREMENT</span>: [</div><div class="line">        <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">        amount =&gt; (&#123; <span class="attr">key</span>: <span class="string">'value'</span>, amount &#125;)</div><div class="line">      ],</div><div class="line">      <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">NOTIFY</span>: [</div><div class="line">      <span class="function">(<span class="params">username, message</span>) =&gt;</span> (&#123; <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;username&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span> &#125;),</div><div class="line">      (username, message) =&gt; (&#123; username, message &#125;)</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionCreators.app.counter.increment(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">1</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">key</span>: <span class="string">'value'</span>, <span class="attr">amount</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.counter.decrement(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/DECREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">-1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.notify(<span class="string">'yangmillstheory'</span>, <span class="string">'Hello World'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/NOTIFY'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">message</span>: <span class="string">'yangmillstheory: Hello World'</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">username</span>: <span class="string">'yangmillstheory'</span>, <span class="attr">message</span>: <span class="string">'Hello World'</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When using this form, you can pass an object with key <code>namespace</code> as the last positional argument, instead of the default <code>/</code>.</p>
<h3 id="handleAction-type-reducer-reducerMap-Identity-defaultState"><a href="#handleAction-type-reducer-reducerMap-Identity-defaultState" class="headerlink" title="handleAction(type, reducer | reducerMap = Identity, defaultState)"></a><code>handleAction(type, reducer | reducerMap = Identity, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps a reducer so that it only handles Flux Standard Actions of a certain type.</p>
<p>If a <code>reducer</code> function is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.</p>
<p>Otherwise, you can specify separate reducers for <code>next()</code> and <code>throw()</code> using the <code>reducerMap</code> form. This API is inspired by the ES6 generator interface.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleAction(<span class="string">'FETCH_DATA'</span>, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;, defaultState);</div></pre></td></tr></table></figure>
<p>If either <code>next()</code> or <code>throw()</code> are <code>undefined</code> or <code>null</code>, then the identity function is used for that reducer.</p>
<p>If the reducer argument (<code>reducer | reducerMap</code>) is <code>undefined</code>, then the identity function is used.</p>
<p>The third parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<h3 id="handleActions-reducerMap-defaultState"><a href="#handleActions-reducerMap-defaultState" class="headerlink" title="handleActions(reducerMap, defaultState)"></a><code>handleActions(reducerMap, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Creates multiple reducers using <code>handleAction()</code> and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are passed as the first parameter to <code>handleAction()</code> (the action type), and the values are passed as the second parameter (either a reducer or reducer map). The map must not be empty.</p>
<p>The second parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<p>(Internally, <code>handleActions()</code> works by applying multiple reducers in sequence using <a href="https://github.com/acdlite/reduce-reducers" target="_blank" rel="external">reduce-reducers</a>.)</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;),</div><div class="line"></div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter - action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="combineActions-types"><a href="#combineActions-types" class="headerlink" title="combineActions(...types)"></a><code>combineActions(...types)</code></h3><p>Combine any number of action types or action creators. <code>types</code> is a list of positional arguments which can be action type strings, symbols, or action creators.</p>
<p>This allows you to reduce multiple distinct actions with the same reducer.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;),</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleAction(combineActions(increment, decrement), &#123;</div><div class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">state, &#123; payload: &#123; amount &#125; &#125;</span>) =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;),</div><div class="line">  <span class="attr">throw</span>: <span class="function"><span class="params">state</span> =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: <span class="number">0</span> &#125;),</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;)</div><div class="line"></div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">11</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">9</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div></pre></td></tr></table></figure>
<p>Here’s an example using <code>handleActions</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [combineActions(increment, decrement)](state, &#123; <span class="attr">payload</span>: &#123; amount &#125; &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> &#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line"></div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, decrement(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, &#123; <span class="attr">type</span>: <span class="string">'NOT_TYPE'</span>, <span class="attr">payload</span>: <span class="number">1000</span> &#125;)).to.equal(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;);</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">15</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="Usage-with-middleware"><a href="#Usage-with-middleware" class="headerlink" title="Usage with middleware"></a>Usage with middleware</h2><p>redux-actions is handy all by itself, however, its real power comes when you combine it with middleware.</p>
<p>The identity form of <code>createAction</code> is a great way to create a single action creator that handles multiple payload types. For example, using <a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> and <a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> addTodo = createAction(<span class="string">'ADD_TODO'</span>);</div><div class="line"></div><div class="line"><span class="comment">// A single reducer...</span></div><div class="line">handleAction(<span class="string">'ADD_TODO'</span>, (state = &#123; <span class="attr">todos</span>: [] &#125;, action) =&gt; (&#123;</div><div class="line">  ...state,</div><div class="line">  <span class="attr">todos</span>: [...state.todos, action.payload]</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// ...that works with all of these forms:</span></div><div class="line"><span class="comment">// (Don't forget to use `bindActionCreators()` or equivalent.</span></div><div class="line"><span class="comment">// I've left that bit out)</span></div><div class="line">addTodo(<span class="string">'Use Redux'</span>)</div><div class="line">addTodo(<span class="built_in">Promise</span>.resolve(<span class="string">'Weep with joy'</span>));</div><div class="line">addTodo(Observable.of(</div><div class="line">  <span class="string">'Learn about middleware'</span>,</div><div class="line">  <span class="string">'Learn about higher-order stores'</span></div><div class="line">)).subscribe();</div></pre></td></tr></table></figure>
<h2 id="See-also"><a href="#See-also" class="headerlink" title="See also"></a>See also</h2><p>Use redux-actions in combination with FSA-compliant libraries.</p>
<ul>
<li><a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> - Promise middleware</li>
<li><a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a> - Includes observable middleware.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redux-actions&quot;&gt;&lt;a href=&quot;#redux-actions&quot; class=&quot;headerlink&quot; title=&quot;redux-actions&quot;&gt;&lt;/a&gt;redux-actions&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>React-Native-Immutable</title>
    <link href="http://yoursite.com/2017/03/27/React-Native-Immutable/"/>
    <id>http://yoursite.com/2017/03/27/React-Native-Immutable/</id>
    <published>2017-03-27T00:15:12.000Z</published>
    <updated>2017-03-26T16:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-native-immutable"><a href="#react-native-immutable" class="headerlink" title="react-native-immutable"></a>react-native-immutable</h1><p><strong>using immutable.js library as store with react &amp;&amp; react-native</strong></p>
<p>More info of <a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">immutable.js</a></p>
<hr>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> react-<span class="keyword">native</span>-immutable <span class="comment">--save</span></div></pre></td></tr></table></figure>
<h2 id="Useage"><a href="#Useage" class="headerlink" title="Useage"></a>Useage</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">react-native project</div><div class="line">   <span class="string">|---index.ios.js</span></div><div class="line">   <span class="string">|---App</span></div><div class="line">         <span class="string">|---Actions</span></div><div class="line">         	   <span class="string">|--- mainAction.js</span></div><div class="line">         	   <span class="string">|--- userAction.js</span></div><div class="line">         	   <span class="string">|--- articleAction.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Stores</span></div><div class="line">         	   <span class="string">|--- mainStore.js</span></div><div class="line">         	   <span class="string">|--- userStore.js</span></div><div class="line">         	   <span class="string">|--- articleStore.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Webapi</span></div></pre></td></tr></table></figure>
<h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; mixins &#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> StoreMixin = mixins.StoreMixin;</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'./App/Stores/mainStore'</span>);</div><div class="line"><span class="keyword">var</span> appAction = <span class="built_in">require</span>(<span class="string">'./App/Actions/mainAction'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">    <span class="attr">mixins</span>: [StoreMixin(appStore,<span class="string">"user"</span>,<span class="string">"article"</span>)],</div><div class="line">    <span class="attr">onChangeUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	appAction.emit(<span class="string">'onChangeUserName'</span>, <span class="string">"wilson"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state);  <span class="comment">// when store was changed, the state will change;</span></div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.username)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">        	<span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        		<span class="tag">&lt;<span class="name">Text</span> <span class="attr">onPress</span>=<span class="string">&#123;this.onChangeUserName&#125;</span>&gt;</span>Change user name<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        	<span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        )   </div><div class="line">    &#125; </div><div class="line">&#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">AppRegistry.registerComponent(<span class="string">'DEMO'</span>, () =&gt; App);</div></pre></td></tr></table></figure>
<h3 id="mainAction-js"><a href="#mainAction-js" class="headerlink" title="mainAction.js"></a>mainAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="comment">// require userAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./userAction'</span>)();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// require articleAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./articleAction'</span>)();</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Action;</div></pre></td></tr></table></figure>
<h3 id="userAction-js"><a href="#userAction-js" class="headerlink" title="userAction.js"></a>userAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'../Stores/mainStore'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更新管理员</span></div><div class="line"><span class="keyword">var</span> userAction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	Action.on(<span class="string">'onChangeUserName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">		<span class="comment">// study immutable.js visit http://facebook.github.io/immutable-js/</span></div><div class="line">    	appStore.getStore(<span class="string">"user"</span>).set(<span class="string">'name'</span>, name );</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = userAction;</div></pre></td></tr></table></figure>
<h3 id="mainStore-js"><a href="#mainStore-js" class="headerlink" title="mainStore.js"></a>mainStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Store,Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">module</span>.exports = Store(&#123;</div><div class="line">    <span class="attr">user</span>: <span class="built_in">require</span>(<span class="string">'./userStore'</span>),</div><div class="line">    <span class="attr">article</span>: <span class="built_in">require</span>(<span class="string">'./articleStore'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Use AsyncStorage if u what</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    AsyncStorage</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> db_name = <span class="string">"app_store"</span>;</div><div class="line"></div><div class="line">Action.on(<span class="string">"_updateStore"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    AsyncStorage.setItem(db_name, <span class="built_in">JSON</span>.stringify(data), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//initial Data</span></div><div class="line">AsyncStorage.getItem(db_name, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> res == <span class="literal">undefined</span> )&#123;</div><div class="line">            Action.emit(<span class="string">"_updateStore"</span>,appStore.getData());</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            appStore = Immutable.fromJS(<span class="built_in">JSON</span>.parse(res));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="userStore-js"><a href="#userStore-js" class="headerlink" title="userStore.js"></a>userStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react-native-immutable&quot;&gt;&lt;a href=&quot;#react-native-immutable&quot; class=&quot;headerlink&quot; title=&quot;react-native-immutable&quot;&gt;&lt;/a&gt;react-native-immutab
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Immutable.js-doc</title>
    <link href="http://yoursite.com/2017/03/26/Immutable-js/"/>
    <id>http://yoursite.com/2017/03/26/Immutable-js/</id>
    <published>2017-03-26T14:05:27.000Z</published>
    <updated>2017-03-26T06:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Immutable-collections-for-JavaScript"><a href="#Immutable-collections-for-JavaScript" class="headerlink" title="Immutable collections for JavaScript"></a>Immutable collections for JavaScript</h1><p><a href="https://travis-ci.org/facebook/immutable-js" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/immutable-js.svg?branch=master" alt="Build Status"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href="http://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="external">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>
<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="external">hash maps tries</a> and <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="external">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p>Immutable.js also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>
<p>Want to hear more? Watch the presentation about Immutable.js:</p>
<p><a href="https://youtu.be/I7IdS-PbEgI" target="_blank" alt="Immutable Data and React"><img src="https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg"></a></p>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install immutable</div></pre></td></tr></table></figure>
<p>Then require it into any module.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">map1.get(<span class="string">'b'</span>) <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>) <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>To use Immutable.js from a browser, download <a href="https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js" target="_blank" rel="external">dist/immutable.min.js</a><br>or use a CDN such as <a href="https://cdnjs.com/libraries/immutable" target="_blank" rel="external">CDNJS</a><br>or <a href="http://www.jsdelivr.com/#!immutable.js" target="_blank" rel="external">jsDelivr</a>.</p>
<p>Then, add it as a script tag to your page:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"immutable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or use an AMD loader (such as <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'./immutable.min.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Immutable</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If you’re using <a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a> or<br><a href="http://browserify.org/" target="_blank" rel="external">browserify</a>, the <code>immutable</code> npm module also works<br>from the browser.</p>
<h3 id="Flow-amp-TypeScript"><a href="#Flow-amp-TypeScript" class="headerlink" title="Flow &amp; TypeScript"></a>Flow &amp; TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href="https://flowtype.org/" target="_blank" rel="external">Flowtype</a> or <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Installing <code>immutable</code> via npm brings with it type definitions for Flow (v0.39.0 or higher)<br>and TypeScript (v2.1.0 or higher), so you shouldn’t need to do anything at all!</p>
<h4 id="Using-TypeScript-with-Immutable-js-v4"><a href="#Using-TypeScript-with-Immutable-js-v4" class="headerlink" title="Using TypeScript with Immutable.js v4"></a>Using TypeScript with Immutable.js v4</h4><p>Immutable.js type definitions embrace ES2015. While Immutable.js itself supports<br>legacy browsers and environments, its type definitions require TypeScript’s 2015<br>lib. Include either <code>&quot;target&quot;: &quot;es2015&quot;</code> or <code>&quot;lib&quot;: &quot;es2015&quot;</code> in your<br><code>tsconfig.json</code>, or provide <code>--target es2015</code> or <code>--lib es2015</code> to the<br><code>tsc</code> command.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">"immutable"</span>;</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h4 id="Using-TypeScript-with-Immutable-js-v3-and-earlier"><a href="#Using-TypeScript-with-Immutable-js-v3-and-earlier" class="headerlink" title="Using TypeScript with Immutable.js v3 and earlier:"></a>Using TypeScript with Immutable.js v3 and earlier:</h4><p>Previous versions of Immutable.js include a reference file which you can include<br>via relative path to the type definitions at the top of your file.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class="line"><span class="keyword">import</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class="line">map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h2 id="The-case-for-Immutability"><a href="#The-case-for-Immutability" class="headerlink" title="The case for Immutability"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>
<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>
<p>This model of data flow aligns well with the architecture of <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a><br>and especially well with an application designed using the ideas of <a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>.</p>
<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>( &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>)</div><div class="line">assert(map1.equals(map2) === <span class="literal">true</span>)</div><div class="line"><span class="keyword">const</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">assert(map1.equals(map3) === <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>Note: As a performance optimization Immutable.js attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>
<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> clone = map1;</div></pre></td></tr></table></figure>
<h2 id="JavaScript-first-API"><a href="#JavaScript-first-API" class="headerlink" title="JavaScript-first API"></a>JavaScript-first API</h2><p>While Immutable.js is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a>.</p>
<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="keyword">const</span> list3 = list2.unshift(<span class="number">0</span>);</div><div class="line"><span class="keyword">const</span> list4 = list1.concat(list2, list3);</div><div class="line">assert(list1.size === <span class="number">2</span>);</div><div class="line">assert(list2.size === <span class="number">5</span>);</div><div class="line">assert(list3.size === <span class="number">6</span>);</div><div class="line">assert(list4.size === <span class="number">13</span>);</div><div class="line">assert(list4.get(<span class="number">0</span>) === <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> found on <code>Immutable.Map</code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> alpha = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;);</div><div class="line">alpha.map(<span class="function">(<span class="params">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class="line"><span class="comment">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>
<h3 id="Accepts-raw-JavaScript-objects"><a href="#Accepts-raw-JavaScript-objects" class="headerlink" title="Accepts raw JavaScript objects."></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, Immutable.js<br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Collection</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">t</span>: <span class="number">30</span> &#125;)</div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">d</span>: <span class="number">100</span>, <span class="attr">o</span>: <span class="number">200</span>, <span class="attr">g</span>: <span class="number">300</span> &#125;</div><div class="line"><span class="keyword">const</span> map3 = map1.merge(map2, obj);</div><div class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>
<p>This is possible because Immutable.js can treat any JavaScript Array or Object<br>as a Collection. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> myObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</div><div class="line">Seq(myObject).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x).toObject();</div><div class="line"><span class="comment">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>
<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">"one"</span> &#125;</div><div class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// [ "1" ]</span></div><div class="line">obj[<span class="string">"1"</span>] <span class="comment">// "one"</span></div><div class="line">obj[<span class="number">1</span>]   <span class="comment">// "one"</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> map = fromJS(obj)</div><div class="line">map.get(<span class="string">"1"</span>) <span class="comment">// "one"</span></div><div class="line">map.get(<span class="number">1</span>)   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>
<h3 id="Converts-back-to-raw-JavaScript-objects"><a href="#Converts-back-to-raw-JavaScript-objects" class="headerlink" title="Converts back to raw JavaScript objects."></a>Converts back to raw JavaScript objects.</h3><p>All Immutable.js Collections can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Collections also implement <code>toJSON()</code> allowing them to be passed<br>to <code>JSON.stringify</code> directly.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> deep = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: List([ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]) &#125;)</div><div class="line">deep.toObject() <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class="line">deep.toArray() <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class="line">deep.toJS() <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class="line"><span class="built_in">JSON</span>.stringify(deep) <span class="comment">// '&#123;"a":1,"b":2,"c":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>
<h3 id="Embraces-ES2015"><a href="#Embraces-ES2015" class="headerlink" title="Embraces ES2015"></a>Embraces ES2015</h3><p>Immutable.js supports all JavaScript environments, including legacy<br>browsers (even IE8). However it also takes advantage of features added to<br>JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a>, the latest standard version of JavaScript, including<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol" target="_blank" rel="external">Iterators</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow Functions</a>, <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes" target="_blank" rel="external">Classes</a>, and <a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">Modules</a>. It’s inspired<br>by the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a> collections added to ES2015.</p>
<p>All examples in the Documentation are presented in ES2015. To run in all<br>browsers, they need to be translated to ES3.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015</span></div><div class="line"><span class="keyword">const</span> mapped = foo.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"><span class="comment">// ES3</span></div><div class="line"><span class="keyword">var</span> mapped = foo.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>
<h2 id="Nested-Structures"><a href="#Nested-Structures" class="headerlink" title="Nested Structures"></a>Nested Structures</h2><p>The collections in Immutable.js are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> nested = fromJS(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nested2 = nested.mergeDeep(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">6</span> &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line">nested2.getIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ]) <span class="comment">// 6</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested3 = nested2.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ], value =&gt; value + <span class="number">1</span>)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested4 = nested3.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ], list =&gt; list.push(<span class="number">6</span>))</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Lazy-Seq"><a href="#Lazy-Seq" class="headerlink" title="Lazy Seq"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the sequence methods (such as <code>map</code> and <code>filter</code>).</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>
<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>
<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> oddSquares = Seq([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ])</div><div class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</div><div class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</div></pre></td></tr></table></figure>
<p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(oddSquares.get(<span class="number">1</span>)); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> seq = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;).toSeq()</div></pre></td></tr></table></figure>
<p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seq.flip().map(<span class="function"><span class="params">key</span> =&gt;</span> key.toUpperCase()).flip().toObject();</div><div class="line"><span class="comment">// &#123; A: 1, B: 1, C: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>As well as expressing logic that would otherwise seem memory-limited:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Range &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line">Range(<span class="number">1</span>, <span class="literal">Infinity</span>)</div><div class="line">  .skip(<span class="number">1000</span>)</div><div class="line">  .map(<span class="function"><span class="params">n</span> =&gt;</span> -n)</div><div class="line">  .filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)</div><div class="line">  .take(<span class="number">2</span>)</div><div class="line">  .reduce(<span class="function">(<span class="params">r, n</span>) =&gt;</span> r * n, <span class="number">1</span>);</div><div class="line"><span class="comment">// 1006008</span></div></pre></td></tr></table></figure>
<p>Note: A Collection is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>
<h2 id="Equality-treats-Collections-as-Data"><a href="#Equality-treats-Collections-as-Data" class="headerlink" title="Equality treats Collections as Data"></a>Equality treats Collections as Data</h2><p>Immutable.js provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, is &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line">assert(map1 !== map2) <span class="comment">// two different instances</span></div><div class="line">assert(is(map1, map2)) <span class="comment">// have equivalent values</span></div><div class="line">assert(map1.equals(map2)) <span class="comment">// alternatively use the equals method</span></div></pre></td></tr></table></figure>
<p><code>Immutable.is()</code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="external">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>
<h2 id="Batching-Mutations"><a href="#Batching-Mutations" class="headerlink" title="Batching Mutations"></a>Batching Mutations</h2><blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, Immutable.js gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  Immutable.js applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.withMutations(<span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</div><div class="line">  list.push(<span class="number">4</span>).push(<span class="number">5</span>).push(<span class="number">6</span>);</div><div class="line">&#125;);</div><div class="line">assert(list1.size === <span class="number">3</span>);</div><div class="line">assert(list2.size === <span class="number">6</span>);</div></pre></td></tr></table></figure>
<p>Note: Immutable.js also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="external">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts" target="_blank" rel="external">Immutable.d.ts</a>.<br>Please contribute!</p>
<p>Also, don’t miss the <a href="https://github.com/facebook/immutable-js/wiki" target="_blank" rel="external">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">issue</a>.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>If you are using the <a href="http://chaijs.com/" target="_blank" rel="external">Chai Assertion Library</a>, <a href="https://github.com/astorije/chai-immutable" target="_blank" rel="external">Chai Immutable</a> provides a set of assertions to use against Immutable.js collections.</p>
<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>Use <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="./CONTRIBUTING.md">contribute</a>.</p>
<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>Changes are tracked as <a href="https://github.com/facebook/immutable-js/releases" target="_blank" rel="external">Github releases</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs" target="_blank" rel="external">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/" target="_blank" rel="external">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href="https://github.com/hughfdjackson/immutable" target="_blank" rel="external">this repository</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Immutable.js is <a href="https://github.com/facebook/immutable-js/blob/master/LICENSE" target="_blank" rel="external">BSD-licensed</a>. We also provide an additional <a href="https://github.com/facebook/immutable-js/blob/master/PATENTS" target="_blank" rel="external">patent grant</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Immutable-collections-for-JavaScript&quot;&gt;&lt;a href=&quot;#Immutable-collections-for-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Immutable collection
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>paserServer-Dashboard</title>
    <link href="http://yoursite.com/2017/03/26/paserServer-Dashboard/"/>
    <id>http://yoursite.com/2017/03/26/paserServer-Dashboard/</id>
    <published>2017-03-26T10:59:38.000Z</published>
    <updated>2017-03-26T03:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parse-Dashboard"><a href="#Parse-Dashboard" class="headerlink" title="Parse Dashboard"></a>Parse Dashboard</h1><p><a href="https://travis-ci.org/ParsePlatform/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-dashboard/master.svg?style=flat" alt="Build Status"></a><br><a href="https://www.npmjs.com/package/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-dashboard.svg?style=flat" alt="npm version"></a></p>
<p>Parse Dashboard is a standalone dashboard for managing your Parse apps. You can use it to manage your <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps and your apps that are running on <a href="https://Parse.com" target="_blank" rel="external">Parse.com</a>.</p>
<ul>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#local-installation">Local Installation</a><ul>
<li><a href="#configuring-parse-dashboard">Configuring Parse Dashboard</a></li>
<li><a href="#managing-multiple-apps">Managing Multiple Apps</a></li>
<li><a href="#other-configuration-options">Other Configuration Options</a></li>
</ul>
</li>
<li><a href="#running-as-express-middleware">Running as Express Middleware</a></li>
<li><a href="#deploying-parse-dashboard">Deploying Parse Dashboard</a><ul>
<li><a href="#preparing-for-deployment">Preparing for Deployment</a></li>
<li><a href="#security-considerations">Security Considerations</a><ul>
<li><a href="#configuring-basic-authentication">Configuring Basic Authentication</a></li>
<li><a href="#separating-app-access-based-on-user-identity">Separating App Access Based on User Identity</a></li>
</ul>
</li>
<li><a href="#run-with-docker">Run with Docker</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> version &gt;= 4.3 is required to run the dashboard. You also need to be using Parse Server version 2.1.4 or higher.</p>
<h1 id="Local-Installation"><a href="#Local-Installation" class="headerlink" title="Local Installation"></a>Local Installation</h1><p>Install the dashboard from <code>npm</code>.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-dashboard</div></pre></td></tr></table></figure>
<p>You can launch the dashboard for an app with a single command by supplying an app ID, master key, URL, and name like this:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">parse-dashboard </span><span class="built_in">--appId</span> <span class="string">yourAppId </span><span class="built_in">--masterKey</span> <span class="string">yourMasterKey </span><span class="built_in">--serverURL</span> <span class="string">"https://example.com/parse"</span> <span class="built_in">--appName</span> <span class="string">optionalName</span></div></pre></td></tr></table></figure>
<p>You may set the host, port and mount path by supplying the <code>--host</code>, <code>--port</code> and <code>--mountPath</code> options to parse-dashboard. You can use anything you want as the app name, or leave it out in which case the app ID will be used.</p>
<p>After starting the dashboard, you can visit <a href="http://localhost:4040" target="_blank" rel="external">http://localhost:4040</a> in your browser:</p>
<p><img src=".github/dash-shot.png" alt="Parse Dashboard"></p>
<h2 id="Configuring-Parse-Dashboard"><a href="#Configuring-Parse-Dashboard" class="headerlink" title="Configuring Parse Dashboard"></a>Configuring Parse Dashboard</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>You can also start the dashboard from the command line with a config file.  To do this, create a new file called <code>parse-dashboard-config.json</code> inside your local Parse Dashboard directory hierarchy.  The file should match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can then start the dashboard using <code>parse-dashboard --config parse-dashboard-config.json</code>.</p>
<h3 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h3><blockquote>
<p>This only works when starting the app using the <code>parse-dashboard</code> command</p>
</blockquote>
<p>There are also two methods you can use to configure the dashboard using environment variables.</p>
<h4 id="Multiple-apps"><a href="#Multiple-apps" class="headerlink" title="Multiple apps"></a>Multiple apps</h4><p>Provide the entire JSON configuration in <code>PARSE_DASHBOARD_CONFIG</code> and it will be parsed just like the config file.</p>
<h4 id="Single-app"><a href="#Single-app" class="headerlink" title="Single app"></a>Single app</h4><p>You can also define each configuration option individually.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HOST:</span> <span class="string">"0.0.0.0"</span></div><div class="line"><span class="symbol">PORT:</span> <span class="string">"4040"</span></div><div class="line"><span class="symbol">MOUNT_PATH:</span> <span class="string">"/"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_TRUST_PROXY:</span> undefined <span class="comment">// Or "1" to trust connection info from a proxy's X-Forwarded-* headers</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SERVER_URL:</span> <span class="string">"http://localhost:1337/parse"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_MASTER_KEY:</span> <span class="string">"myMasterKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_ID:</span> <span class="string">"myAppId"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_NAME:</span> <span class="string">"MyApp"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_ID:</span> <span class="string">"user1"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_PASSWORD:</span> <span class="string">"pass"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_KEY:</span> <span class="string">"sslKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_CERT:</span> <span class="string">"sslCert"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_CONFIG:</span> undefined <span class="comment">// Only for reference, it must not exist</span></div></pre></td></tr></table></figure>
<h2 id="Managing-Multiple-Apps"><a href="#Managing-Multiple-Apps" class="headerlink" title="Managing Multiple Apps"></a>Managing Multiple Apps</h2><p>Managing multiple apps from the same dashboard is also possible.  Simply add additional entries into the <code>parse-dashboard-config.json</code> file’s <code>&quot;apps&quot;</code> array.</p>
<p>You can manage self-hosted <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps, <em>and</em> apps that are hosted on <a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> from the same dashboard. In your config file, you will need to add the <code>restKey</code> and <code>javascriptKey</code> as well as the other paramaters, which you can find on <code>dashboard.parse.com</code>. Set the serverURL to <code>http://api.parse.com/1</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"https://api.parse.com/1"</span>, <span class="comment">// Hosted on Parse.com</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"javascriptKey"</span>: <span class="string">"myJavascriptKey"</span>,</div><div class="line">      <span class="string">"restKey"</span>: <span class="string">"myRestKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse.Com App"</span>,</div><div class="line">      <span class="string">"production"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>, <span class="comment">// Self-hosted Parse Server</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse Server App"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="App-Icon-Configuration"><a href="#App-Icon-Configuration" class="headerlink" title="App Icon Configuration"></a>App Icon Configuration</h2><p>Parse Dashboard supports adding an optional icon for each app, so you can identify them easier in the list. To do so, you <em>must</em> use the configuration file, define an <code>iconsFolder</code> in it, and define the <code>iconName</code> parameter for each app (including the extension). The path of the <code>iconsFolder</code> is relative to the configuration file. If you have installed ParseDashboard globally you need to use the full path as value for the <code>iconsFolder</code>. To visualize what it means, in the following example <code>icons</code> is a directory located under the same directory as the configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"My Parse Server App"</span>,</div><div class="line">      <span class="attr">"iconName"</span>: <span class="string">"MyAppIcon.png"</span>,</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"iconsFolder"</span>: <span class="string">"icons"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Other-Configuration-Options"><a href="#Other-Configuration-Options" class="headerlink" title="Other Configuration Options"></a>Other Configuration Options</h2><p>You can set <code>appNameForURL</code> in the config file for each app to control the url of your app within the dashboard. This can make it easier to use bookmarks or share links on your dashboard.</p>
<p>To change the app to production, simply set <code>production</code> to <code>true</code> in your config file. The default value is false if not specified.</p>
<h1 id="Running-as-Express-Middleware"><a href="#Running-as-Express-Middleware" class="headerlink" title="Running as Express Middleware"></a>Running as Express Middleware</h1><p>Instead of starting Parse Dashboard with the CLI, you can also run it as an <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<p>If you want to run both <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> and Parse Dashboard on the same server/port, you can run them both as express middleware:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="keyword">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> allowInsecureHTTP = <span class="keyword">false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">	<span class="comment">// Parse Server settings</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">	<span class="comment">// Parse Dashboard settings</span></div><div class="line">&#125;, allowInsecureHTTP);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Server available at /parse</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<h1 id="Deploying-Parse-Dashboard"><a href="#Deploying-Parse-Dashboard" class="headerlink" title="Deploying Parse Dashboard"></a>Deploying Parse Dashboard</h1><h2 id="Preparing-for-Deployment"><a href="#Preparing-for-Deployment" class="headerlink" title="Preparing for Deployment"></a>Preparing for Deployment</h2><p>Make sure the server URLs for your apps can be accessed by your browser. If you are deploying the dashboard, then <code>localhost</code> urls will not work.</p>
<h2 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h2><p>In order to securely deploy the dashboard without leaking your apps master key, you will need to use HTTPS and Basic Authentication.</p>
<p>The deployed dashboard detects if you are using a secure connection. If you are deploying the dashboard behind a load balancer or front-facing proxy, then the app won’t be able to detect that the connection is secure. In this case, you can start the dashboard with the <code>--trustProxy=1</code> option (or set the PARSE_DASHBOARD_TRUST_PROXY config var to 1) to rely on the X-Forwarded-* headers for the client’s connection security.  This is useful for hosting on services like Heroku, where you can trust the provided proxy headers to correctly determine whether you’re using HTTP or HTTPS.  You can also turn on this setting when using the dashboard as <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trustProxy = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"trustProxy"</span>: <span class="number">1</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Configuring-Basic-Authentication"><a href="#Configuring-Basic-Authentication" class="headerlink" title="Configuring Basic Authentication"></a>Configuring Basic Authentication</h3><p>You can configure your dashboard for Basic Authentication by adding usernames and passwords your <code>parse-dashboard-config.json</code> configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"useEncryptedPasswords"</span>: <span class="literal">true</span> | <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can store the password in either <code>plain text</code> or <code>bcrypt</code> formats. To use the <code>bcrypt</code> format, you must set the config <code>useEncryptedPasswords</code> parameter to <code>true</code>.<br>You can encrypt the password using any online bcrypt tool e.g. <a href="https://www.bcrypt-generator.com" target="_blank" rel="external">https://www.bcrypt-generator.com</a>.</p>
<h3 id="Separating-App-Access-Based-on-User-Identity"><a href="#Separating-App-Access-Based-on-User-Identity" class="headerlink" title="Separating App Access Based on User Identity"></a>Separating App Access Based on User Identity</h3><p>If you have configured your dashboard to manage multiple applications, you can restrict the management of apps based on user identity.</p>
<p>To do so, update your <code>parse-dashboard-config.json</code> configuration file to match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass1"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;, &#123;<span class="attr">"appId"</span>: <span class="string">"myAppId2"</span>&#125;]</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass2"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;]</div><div class="line">     &#125;  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The effect of such a configuration is as follows:</p>
<p>When <code>user1</code> logs in, he/she will be able to manage <code>myAppId1</code> and <code>myAppId2</code> from the dashboard.</p>
<p>When <em><code>user2</code></em>  logs in, he/she will only be able to manage <em><code>myAppId1</code></em> from the dashboard.</p>
<h2 id="Run-with-Docker"><a href="#Run-with-Docker" class="headerlink" title="Run with Docker"></a>Run with Docker</h2><p>It is easy to use it with Docker. First build the image:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t parse-dashboard .</div></pre></td></tr></table></figure>
<p>Run the image with your <code>config.json</code> mounted as a volume</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">4040</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard</div></pre></td></tr></table></figure>
<p>By default, the container will start the app at port 4040 inside the container. However, you can run custom command as well (see <code>Deploying in production</code> for custom setup).</p>
<p>In this example, we want to run the application in production mode at port 80 of the host machine.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">8080</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard --port <span class="number">8080</span></div></pre></td></tr></table></figure>
<p>If you are not familiar with Docker, <code>--port 8080</code> will be passed in as argument to the entrypoint to form the full command <code>npm start -- --port 8080</code>. The application will start at port 8080 inside the container and port <code>8080</code> will be mounted to port <code>80</code> on your host machine.</p>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Dashboard guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Parse-Dashboard&quot;&gt;&lt;a href=&quot;#Parse-Dashboard&quot; class=&quot;headerlink&quot; title=&quot;Parse Dashboard&quot;&gt;&lt;/a&gt;Parse Dashboard&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://t
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>PaserServer_readme</title>
    <link href="http://yoursite.com/2017/03/26/PaserServer-readme/"/>
    <id>http://yoursite.com/2017/03/26/PaserServer-readme/</id>
    <published>2017-03-26T10:50:57.000Z</published>
    <updated>2017-03-26T02:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src=".github/parse-server-logo.png?raw=true" alt="Parse Server logo"></p>
<p><a href="https://travis-ci.org/ParsePlatform/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-server/master.svg?style=flat" alt="Build Status"></a><br><a href="https://codecov.io/github/ParsePlatform/parse-server?branch=master" target="_blank" rel="external"><img src="https://img.shields.io/codecov/c/github/ParsePlatform/parse-server/master.svg" alt="Coverage Status"></a><br><a href="https://www.npmjs.com/package/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-server.svg?style=flat" alt="npm version"></a></p>
<p><a href="https://gitter.im/ParsePlatform/Chat" target="_blank" rel="external"><img src="https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg" alt="Join Chat"></a></p>
<p>Parse Server is an <a href="http://blog.parse.com/announcements/introducing-parse-server-and-the-database-migration-tool/" target="_blank" rel="external">open source version of the Parse backend</a> that can be deployed to any infrastructure that can run Node.js.</p>
<p>Parse Server works with the Express web application framework. It can be added to existing web applications, or run by itself.</p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>April 2016 - We created a series of video screencasts, please check them out here: <a href="http://blog.parse.com/learn/parse-server-video-series-april-2016/" target="_blank" rel="external">http://blog.parse.com/learn/parse-server-video-series-april-2016/</a></p>
<p>The fastest and easiest way to get started is to run MongoDB and Parse Server locally.</p>
<h2 id="Running-Parse-Server"><a href="#Running-Parse-Server" class="headerlink" title="Running Parse Server"></a>Running Parse Server</h2><h3 id="Locally"><a href="#Locally" class="headerlink" title="Locally"></a>Locally</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-<span class="keyword">server</span> mongodb-runner</div><div class="line">$ mongodb-runner <span class="keyword">start</span></div><div class="line">$ <span class="keyword">parse</span>-<span class="keyword">server</span> <span class="comment">--appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test</span></div></pre></td></tr></table></figure>
<h3 id="Inside-a-Docker-container"><a href="#Inside-a-Docker-container" class="headerlink" title="Inside a Docker container"></a>Inside a Docker container</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ docker build --tag <span class="built_in">parse</span>-server .</div><div class="line">$ docker <span class="keyword">run</span> --name my-mongo -d mongo</div><div class="line">$ docker <span class="keyword">run</span> --name my-<span class="built_in">parse</span>-server --link my-mongo:mongo <span class="built_in">parse</span>-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb:<span class="comment">//mongo/test</span></div><div class="line">```  </div><div class="line"></div><div class="line">You can <span class="keyword">use</span> any arbitrary <span class="keyword">string</span> as your application id <span class="keyword">and</span> master <span class="built_in">key</span>. These will be used by your clients to authenticate with the <span class="built_in">Parse</span> Server.</div><div class="line"></div><div class="line">That's it! You are now running a standalone version of <span class="built_in">Parse</span> Server on your machine.</div><div class="line"></div><div class="line">**Using a remote MongoDB?** Pass the  `--databaseURI DATABASE_URI` parameter when starting `<span class="built_in">parse</span>-server`. Learn more about configuring <span class="built_in">Parse</span> Server [here](<span class="meta">#configuration). For a full list of available options, run `parse-server --help`.</span></div><div class="line"></div><div class="line"><span class="meta">### Saving your first object</span></div><div class="line"></div><div class="line">Now that you're running <span class="built_in">Parse</span> Server, it is <span class="built_in">time</span> to <span class="keyword">save</span> your first object. We'll <span class="keyword">use</span> the [REST API](https:<span class="comment">//parse.com/docs/rest/guide), but you can easily do the same using any of the [Parse SDKs](https://parseplatform.github.io/#sdks). Run the following:</span></div><div class="line"></div><div class="line">```bash</div><div class="line">curl -X POST \</div><div class="line">-H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">-H <span class="string">"Content-Type: application/json"</span> \</div><div class="line">-d '&#123;<span class="string">"score"</span>:<span class="number">1337</span>,<span class="string">"playerName"</span>:<span class="string">"Sean Plott"</span>,<span class="string">"cheatMode"</span>:false&#125;' \</div><div class="line">http:<span class="comment">//localhost:1337/parse/classes/GameScore</span></div></pre></td></tr></table></figure>
<p>You should get a response similar to this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"objectId"</span>: <span class="string">"2ntvSpRGIK"</span>,</div><div class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-03-11T23:51:48.050Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can now retrieve this object directly (make sure to replace <code>2ntvSpRGIK</code> with the actual <code>objectId</code> you received when the object was created):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  http://localhost:1337/parse/classes/GameScore/2ntvSpRGIK</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Response</div><div class="line">&#123;</div><div class="line">  "objectId": "2ntvSpRGIK",</div><div class="line">  "score": 1337,</div><div class="line">  "playerName": "Sean Plott",</div><div class="line">  "cheatMode": false,</div><div class="line">  "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">  "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Keeping tracks of individual object ids is not ideal, however. In most cases you will want to run a query over the collection, like so:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  <span class="symbol">http:</span>/<span class="regexp">/localhost:1337/parse</span><span class="regexp">/classes/</span>GameScore</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// The response will provide all the matching objects within the `results` array:</div><div class="line">&#123;</div><div class="line">  "results": [</div><div class="line">    &#123;</div><div class="line">      "objectId": "2ntvSpRGIK",</div><div class="line">      "score": 1337,</div><div class="line">      "playerName": "Sean Plott",</div><div class="line">      "cheatMode": false,</div><div class="line">      "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">      "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To learn more about using saving and querying objects on Parse Server, check out the <a href="https://parse.com/docs" target="_blank" rel="external">Parse documentation</a>.</p>
<h3 id="Connect-your-app-to-Parse-Server"><a href="#Connect-your-app-to-Parse-Server" class="headerlink" title="Connect your app to Parse Server"></a>Connect your app to Parse Server</h3><p>Parse provides SDKs for all the major platforms. Refer to the Parse Server guide to <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#using-parse-sdks-with-parse-server" target="_blank" rel="external">learn how to connect your app to Parse Server</a>.</p>
<h2 id="Running-Parse-Server-elsewhere"><a href="#Running-Parse-Server-elsewhere" class="headerlink" title="Running Parse Server elsewhere"></a>Running Parse Server elsewhere</h2><p>Once you have a better understanding of how the project works, please refer to the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">Parse Server wiki</a> for in-depth guides to deploy Parse Server to major infrastructure providers. Read on to learn more about additional ways of running Parse Server.</p>
<h3 id="Parse-Server-Sample-Application"><a href="#Parse-Server-Sample-Application" class="headerlink" title="Parse Server Sample Application"></a>Parse Server Sample Application</h3><p>We have provided a basic <a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">Node.js application</a> that uses the Parse Server module on Express and can be easily deployed to various infrastructure providers:</p>
<ul>
<li><a href="https://devcenter.heroku.com/articles/deploying-a-parse-server-to-heroku" target="_blank" rel="external">Heroku and mLab</a></li>
<li><a href="http://mobile.awsblog.com/post/TxCD57GZLM2JR/How-to-set-up-Parse-Server-on-AWS-using-AWS-Elastic-Beanstalk" target="_blank" rel="external">AWS and Elastic Beanstalk</a></li>
<li><a href="https://medium.com/@justinbeckwith/deploying-parse-server-to-google-app-engine-6bc0b7451d50" target="_blank" rel="external">Google App Engine</a></li>
<li><a href="https://azure.microsoft.com/en-us/blog/azure-welcomes-parse-developers/" target="_blank" rel="external">Microsoft Azure</a></li>
<li><a href="https://blog.sashido.io/tag/migration/" target="_blank" rel="external">SashiDo</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-run-parse-server-on-ubuntu-14-04" target="_blank" rel="external">Digital Ocean</a></li>
<li><a href="https://github.com/cf-platform-eng/pws-parse-server" target="_blank" rel="external">Pivotal Web Services</a></li>
<li><a href="http://blog.back4app.com/2016/03/01/quick-wizard-migration/" target="_blank" rel="external">Back4app</a></li>
<li><a href="https://gomix.com/#!/project/parse-server" target="_blank" rel="external">Gomix</a></li>
</ul>
<h3 id="Parse-Server-Express"><a href="#Parse-Server-Express" class="headerlink" title="Parse Server + Express"></a>Parse Server + Express</h3><p>You can also create an instance of Parse Server, and mount it on a new or existing Express website:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="built_in">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">  <span class="attr">databaseURI</span>: <span class="string">'mongodb://localhost:27017/dev'</span>, <span class="comment">// Connection string for your MongoDB database</span></div><div class="line">  cloud: <span class="string">'/home/myApp/cloud/main.js'</span>, <span class="comment">// Absolute path to your Cloud Code</span></div><div class="line">  appId: <span class="string">'myAppId'</span>,</div><div class="line">  <span class="attr">masterKey</span>: <span class="string">'myMasterKey'</span>, <span class="comment">// Keep this key secret!</span></div><div class="line">  fileKey: <span class="string">'optionalFileKey'</span>,</div><div class="line">  <span class="attr">serverURL</span>: <span class="string">'http://localhost:1337/parse'</span> <span class="comment">// Don't forget to change to https if needed</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Serve the Parse API on the /parse URL prefix</span></div><div class="line">app.use(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line">app.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'parse-server-example running on port 1337.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>For a full list of available options, run <code>parse-server --help</code>.</p>
<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Parse Server will, by default, log:</p>
<ul>
<li>to the console</li>
<li>daily rotating files as new line delimited JSON</li>
</ul>
<p>Logs are also be viewable in Parse Dashboard.</p>
<p><strong>Want to log each request and response?</strong> Set the <code>VERBOSE</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>VERBOSE=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want logs to be in placed in other folder?</strong> Pass the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>PARSE_SERVER_LOGS_FOLDER=&#39;&lt;path-to-logs-folder&gt;&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want new line delimited JSON error logs (for consumption by CloudWatch, Google Cloud Logging, etc.)?</strong> Pass the <code>JSON_LOGS</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>JSON_LOGS=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<h1 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h1><p>The full documentation for Parse Server is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">wiki</a>. The <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide" target="_blank" rel="external">Parse Server guide</a> is a good place to get started. If you’re interested in developing for Parse Server, the <a href="https://github.com/ParsePlatform/parse-server/wiki/Development-Guide" target="_blank" rel="external">Development guide</a> will help you get set up.</p>
<h2 id="Migrating-an-Existing-Parse-App"><a href="#Migrating-an-Existing-Parse-App" class="headerlink" title="Migrating an Existing Parse App"></a>Migrating an Existing Parse App</h2><p>The hosted version of Parse will be fully retired on January 28th, 2017. If you are planning to migrate an app, you need to begin work as soon as possible. There are a few areas where Parse Server does not provide compatibility with the hosted version of Parse. Learn more in the <a href="https://parse.com/migration" target="_blank" rel="external">Migration guide</a>.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Parse Server can be configured using the following options. You may pass these as parameters when running a standalone <code>parse-server</code>, or by loading a configuration file in JSON format using <code>parse-server path/to/configuration.json</code>. If you’re using Parse Server on Express, you may also pass these to the <code>ParseServer</code> object as options.</p>
<p>For the full list of available options, run <code>parse-server --help</code>.</p>
<h4 id="Basic-options"><a href="#Basic-options" class="headerlink" title="Basic options"></a>Basic options</h4><ul>
<li><code>appId</code> <strong>(required)</strong> - The application id to host with this server instance. You can use any arbitrary string. For migrated apps, this should match your hosted Parse app.</li>
<li><code>masterKey</code> <strong>(required)</strong> - The master key to use for overriding ACL security.  You can use any arbitrary string. Keep it secret! For migrated apps, this should match your hosted Parse app.</li>
<li><code>databaseURI</code> <strong>(required)</strong> - The connection string for your database, i.e. <code>mongodb://user:pass@host.com/dbname</code>. Be sure to <a href="https://app.zencoder.com/docs/guides/getting-started/special-characters-in-usernames-and-passwords" target="_blank" rel="external">URL encode your password</a> if your password has special characters.</li>
<li><code>port</code> - The default port is 1337, specify this parameter to use a different port.</li>
<li><code>serverURL</code> - URL to your Parse Server (don’t forget to specify http:// or https://). This URL will be used when making requests to Parse Server from Cloud Code.</li>
<li><code>cloud</code> - The absolute path to your cloud code <code>main.js</code> file.</li>
<li><code>push</code> - Configuration options for APNS and GCM push. See the <a href="https://github.com/ParsePlatform/parse-server/wiki/Push" target="_blank" rel="external">Push Notifications wiki entry</a>.</li>
</ul>
<h4 id="Client-key-options"><a href="#Client-key-options" class="headerlink" title="Client key options"></a>Client key options</h4><p>The client keys used with Parse are no longer necessary with Parse Server. If you wish to still require them, perhaps to be able to refuse access to older clients, you can set the keys at initialization time. Setting any of these keys will require all requests to provide one of the configured keys.</p>
<ul>
<li><code>clientKey</code></li>
<li><code>javascriptKey</code></li>
<li><code>restAPIKey</code></li>
<li><code>dotNetKey</code></li>
</ul>
<h4 id="Advanced-options"><a href="#Advanced-options" class="headerlink" title="Advanced options"></a>Advanced options</h4><ul>
<li><code>fileKey</code> - For migrated apps, this is necessary to provide access to files already hosted on Parse.</li>
<li><code>allowClientClassCreation</code> - Set to false to disable client class creation. Defaults to true.</li>
<li><code>enableAnonymousUsers</code> - Set to false to disable anonymous users. Defaults to true.</li>
<li><code>auth</code> - Used to configure support for <a href="https://github.com/ParsePlatform/parse-server/wiki/OAuth--and-Custom-Authentication" target="_blank" rel="external">3rd party authentication</a>.</li>
<li><code>facebookAppIds</code> - An array of valid Facebook application IDs that users may authenticate with.</li>
<li><code>mountPath</code> - Mount path for the server. Defaults to <code>/parse</code>.</li>
<li><code>filesAdapter</code> - The default behavior (GridStore) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Files/FilesAdapter.js" target="_blank" rel="external"><code>FilesAdapter.js</code></a>).</li>
<li><code>maxUploadSize</code> - Max file size for uploads. Defaults to 20 MB.</li>
<li><code>loggerAdapter</code> - The default behavior/transport (File) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Logger/LoggerAdapter.js" target="_blank" rel="external"><code>LoggerAdapter.js</code></a>).</li>
<li><code>sessionLength</code> - The length of time in seconds that a session should be valid for. Defaults to 31536000 seconds (1 year).</li>
<li><code>revokeSessionOnPasswordReset</code> - When a user changes their password, either through the reset password email or while logged in, all sessions are revoked if this is true. Set to false if you don’t want to revoke sessions.</li>
<li><code>accountLockout</code> - Lock account when a malicious user is attempting to determine an account password by trial and error.</li>
<li><code>passwordPolicy</code> - Optional password policy rules to enforce.</li>
<li><code>customPages</code> - A hash with urls to override email verification links, password reset links and specify frame url for masking user-facing pages. Available keys: <code>parseFrameURL</code>, <code>invalidLink</code>, <code>choosePassword</code>, <code>passwordResetSuccess</code>, <code>verifyEmailSuccess</code>.</li>
<li><code>middleware</code> - (CLI only), a module name, function that is an express middleware. When using the CLI, the express app will load it just <strong>before</strong> mounting parse-server on the mount path. This option is useful for injecting a monitoring middleware.</li>
</ul>
<h5 id="Logging-1"><a href="#Logging-1" class="headerlink" title="Logging"></a>Logging</h5><p>Use the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code> to save your server logfiles to the specified folder.</p>
<p>Usage:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">PARSE_SERVER_LOGS_FOLDER=</span><span class="string">'&lt;path-to-logs-folder&gt;'</span> <span class="string">parse-server </span><span class="built_in">--appId</span> <span class="string">APPLICATION_ID </span><span class="built_in">--masterKey</span> <span class="string">MASTER_KEY</span></div></pre></td></tr></table></figure>
<h5 id="Email-verification-and-password-reset"><a href="#Email-verification-and-password-reset" class="headerlink" title="Email verification and password reset"></a>Email verification and password reset</h5><p>Verifying user email addresses and enabling password reset via email requires an email adapter. As part of the <code>parse-server</code> package we provide an adapter for sending email through Mailgun. To use it, sign up for Mailgun, and add this to your initialization code:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = ParseServer(&#123;</div><div class="line">  ...otherOptions,</div><div class="line">  <span class="comment">// Enable email verification</span></div><div class="line">  verifyUserEmails: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// if `verifyUserEmails` is `true` and</span></div><div class="line">  <span class="comment">//     if `emailVerifyTokenValidityDuration` is `undefined` then</span></div><div class="line">  <span class="comment">//        email verify token never expires</span></div><div class="line">  <span class="comment">//     else</span></div><div class="line">  <span class="comment">//        email verify token expires after `emailVerifyTokenValidityDuration`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// `emailVerifyTokenValidityDuration` defaults to `undefined`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// email verify token below expires in 2 hours (= 2 * 60 * 60 == 7200 seconds)</span></div><div class="line">  emailVerifyTokenValidityDuration: <span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="comment">// in seconds (2 hours = 7200 seconds)</span></div><div class="line"></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to false to allow user to login without verifying their email</span></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to true to prevent user from login if their email is not verified</span></div><div class="line">  preventLoginWithUnverifiedEmail: <span class="literal">false</span>, <span class="comment">// defaults to false</span></div><div class="line"></div><div class="line">  <span class="comment">// The public URL of your app.</span></div><div class="line">  <span class="comment">// This will appear in the link that is used to verify email addresses and reset passwords.</span></div><div class="line">  <span class="comment">// Set the mount path as it is in serverURL</span></div><div class="line">  publicServerURL: <span class="string">'https://example.com/parse'</span>,</div><div class="line">  <span class="comment">// Your apps name. This will appear in the subject and body of the emails that are sent.</span></div><div class="line">  appName: <span class="string">'Parse App'</span>,</div><div class="line">  <span class="comment">// The email adapter</span></div><div class="line">  emailAdapter: &#123;</div><div class="line">    <span class="attr">module</span>: <span class="string">'parse-server-simple-mailgun-adapter'</span>,</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="comment">// The address that your emails come from</span></div><div class="line">      fromAddress: <span class="string">'parse@example.com'</span>,</div><div class="line">      <span class="comment">// Your domain from mailgun.com</span></div><div class="line">      domain: <span class="string">'example.com'</span>,</div><div class="line">      <span class="comment">// Your API key from mailgun.com</span></div><div class="line">      apiKey: <span class="string">'key-mykey'</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// account lockout policy setting (OPTIONAL) - defaults to undefined</span></div><div class="line">  <span class="comment">// if the account lockout policy is set and there are more than `threshold` number of failed login attempts then the `login` api call returns error code `Parse.Error.OBJECT_NOT_FOUND` with error message `Your account is locked due to multiple failed login attempts. Please try again after &lt;duration&gt; minute(s)`. After `duration` minutes of no login attempts, the application will allow the user to try login again.</span></div><div class="line">  accountLockout: &#123;</div><div class="line">    <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// duration policy setting determines the number of minutes that a locked-out account remains locked out before automatically becoming unlocked. Set it to a value greater than 0 and less than 100000.</span></div><div class="line">    threshold: <span class="number">3</span>, <span class="comment">// threshold policy setting determines the number of failed sign-in attempts that will cause a user account to be locked. Set it to an integer value greater than 0 and less than 1000.</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// optional settings to enforce password policies</span></div><div class="line">  passwordPolicy: &#123;</div><div class="line">    <span class="comment">// Two optional settings to enforce strong passwords. Either one or both can be specified. </span></div><div class="line">    <span class="comment">// If both are specified, both checks must pass to accept the password</span></div><div class="line">    <span class="comment">// 1. a RegExp object or a regex string representing the pattern to enforce </span></div><div class="line">    validatorPattern: <span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.&#123;8,&#125;)/</span>, <span class="comment">// enforce password with at least 8 char with at least 1 lower case, 1 upper case and 1 digit</span></div><div class="line">    <span class="comment">// 2. a callback function to be invoked to validate the password  </span></div><div class="line">    validatorCallback: <span class="function">(<span class="params">password</span>) =&gt;</span> &#123; <span class="keyword">return</span> validatePassword(password) &#125;, </div><div class="line">    <span class="attr">doNotAllowUsername</span>: <span class="literal">true</span>, <span class="comment">// optional setting to disallow username in passwords</span></div><div class="line">    maxPasswordAge: <span class="number">90</span>, <span class="comment">// optional setting in days for password expiry. Login fails if user does not reset the password within this period after signup/last reset. </span></div><div class="line">    maxPasswordHistory: <span class="number">5</span>, <span class="comment">// optional setting to prevent reuse of previous n passwords. Maximum value that can be specified is 20. Not specifying it or specifying 0 will not enforce history.</span></div><div class="line">    <span class="comment">//optional setting to set a validity duration for password reset links (in seconds)</span></div><div class="line">    resetTokenValidityDuration: <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>, <span class="comment">// expire after 24 hours</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>You can also use other email adapters contributed by the community such as:</p>
<ul>
<li><a href="https://www.npmjs.com/package/parse-server-postmark-adapter" target="_blank" rel="external">parse-server-postmark-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-sendgrid-adapter" target="_blank" rel="external">parse-server-sendgrid-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mandrill-adapter" target="_blank" rel="external">parse-server-mandrill-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-simple-ses-adapter" target="_blank" rel="external">parse-server-simple-ses-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailgun-adapter-template" target="_blank" rel="external">parse-server-mailgun-adapter-template</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailjet-adapter" target="_blank" rel="external">parse-server-mailjet-adapter</a></li>
<li><a href="https://www.npmjs.com/package/simple-parse-smtp-adapter" target="_blank" rel="external">simple-parse-smtp-adapter</a></li>
</ul>
<h3 id="Using-environment-variables-to-configure-Parse-Server"><a href="#Using-environment-variables-to-configure-Parse-Server" class="headerlink" title="Using environment variables to configure Parse Server"></a>Using environment variables to configure Parse Server</h3><p>You may configure the Parse Server using environment variables:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PORT</div><div class="line">PARSE_SERVER_APPLICATION_ID</div><div class="line">PARSE_SERVER_MASTER_KEY</div><div class="line">PARSE_SERVER_DATABASE_URI</div><div class="line">PARSE_SERVER_URL</div><div class="line">PARSE_SERVER_CLOUD_CODE_MAIN</div></pre></td></tr></table></figure>
<p>The default port is 1337, to use a different port set the PORT environment variable:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ PORT=8080 parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</div></pre></td></tr></table></figure>
<p>For the full list of configurable environment variables, run <code>parse-server --help</code>.</p>
<h3 id="Available-Adapters"><a href="#Available-Adapters" class="headerlink" title="Available Adapters"></a>Available Adapters</h3><p><a href="https://github.com/parse-server-modules" target="_blank" rel="external">Parse Server Modules (Adapters)</a></p>
<h3 id="Configuring-File-Adapters"><a href="#Configuring-File-Adapters" class="headerlink" title="Configuring File Adapters"></a>Configuring File Adapters</h3><p>Parse Server allows developers to choose from several options when hosting files:</p>
<ul>
<li><code>GridStoreAdapter</code>, which is backed by MongoDB;</li>
<li><code>S3Adapter</code>, which is backed by <a href="https://aws.amazon.com/s3/" target="_blank" rel="external">Amazon S3</a>; or</li>
<li><code>GCSAdapter</code>, which is backed by <a href="https://cloud.google.com/storage/" target="_blank" rel="external">Google Cloud Storage</a></li>
</ul>
<p><code>GridStoreAdapter</code> is used by default and requires no setup, but if you’re interested in using S3 or Google Cloud Storage, additional configuration information is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki/Configuring-File-Adapters" target="_blank" rel="external">Parse Server wiki</a>.</p>
<h1 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h1><p>For implementation related questions or technical support, please refer to the <a href="http://stackoverflow.com/questions/tagged/parse.com" target="_blank" rel="external">Stack Overflow</a> and <a href="https://serverfault.com/tags/parse" target="_blank" rel="external">Server Fault</a> communities.</p>
<p>If you believe you’ve found an issue with Parse Server, make sure these boxes are checked before <a href="https://github.com/ParsePlatform/parse-server/issues" target="_blank" rel="external">reporting an issue</a>:</p>
<ul>
<li><p>[ ] You’ve met the <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#prerequisites" target="_blank" rel="external">prerequisites</a>.</p>
</li>
<li><p>[ ] You’re running the <a href="https://github.com/ParsePlatform/parse-server/releases" target="_blank" rel="external">latest version</a> of Parse Server.</p>
</li>
<li><p>[ ] You’ve searched through <a href="https://github.com/ParsePlatform/parse-server/issues?utf8=%E2%9C%93&amp;q=" target="_blank" rel="external">existing issues</a>. Chances are that your issue has been reported or resolved before.</p>
</li>
</ul>
<h1 id="Want-to-ride-the-bleeding-edge"><a href="#Want-to-ride-the-bleeding-edge" class="headerlink" title="Want to ride the bleeding edge?"></a>Want to ride the bleeding edge?</h1><p>The <code>latest</code> branch in this repository is automatically maintained to be the last<br>commit to <code>master</code> to pass all tests, in the same form found on npm. It is<br>recommend to use builds deployed npm for many reasons, but if you want to use<br>the latest not-yet-released version of parse-server, you can do so by depending<br>directly on this branch:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install parseplatform/parse-<span class="keyword">server</span>.git<span class="meta">#latest</span></div></pre></td></tr></table></figure>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Server guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;.github/parse-server-logo.png?raw=true&quot; alt=&quot;Parse Server logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/ParsePlatform/parse-serv
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
</feed>
