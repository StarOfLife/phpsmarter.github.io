<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-23T08:57:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试文件</title>
    <link href="http://yoursite.com/2017/03/23/new-article-2/"/>
    <id>http://yoursite.com/2017/03/23/new-article-2/</id>
    <published>2017-03-23T15:31:30.000Z</published>
    <updated>2017-03-23T08:57:15.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="testing" scheme="http://yoursite.com/categories/testing/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译-如何使用React,Redux和Immutable-js构建Todo-App</title>
    <link href="http://yoursite.com/2017/03/23/%E7%BF%BB%E8%AF%91-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8React,Redux%E5%92%8CImmutable-js%E6%9E%84%E5%BB%BATodo-App/"/>
    <id>http://yoursite.com/2017/03/23/翻译-如何使用React,Redux和Immutable-js构建Todo-App/</id>
    <published>2017-03-23T00:04:10.000Z</published>
    <updated>2017-03-23T08:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文是翻译版本,<a href="https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/" target="_blank" rel="external">原文请见</a><br><em>By Dan Prince  May 03, 2016</em></p>
</blockquote>
<p>React使用组件和单向数据流方式描述用户界面,但是React对state的处理非常的简单.这一点让我们知道,React仅仅只当于传统的<code>Model-View-Controller</code>构架的<code>View</code>层.</p>
<p>仅仅使用React也可以构建大型的app,但是很快我们会发现,要保持代码的简洁,我们需要在其他地方管理state(把state的管理独立出来).</p>
<p>没有官方管理应用state的工具,但是有几个库工作的的不错.今天我们添加两个库和React一起来构建一个简单的app.</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux是一个小型的js库,作为app的state容器.糅合了Fluc和Elm的概念.我们可以使用Redux管理任何app的state,只要我们紧扣下面的指导：</p>
<ol>
<li>我们的state保持在一个单一的store中</li>
<li>state的改变只会来自于actions</li>
</ol>
<p>Redux的核心 store是一个函数,它接收当前的application的state和一个action,合并创建一个新的application state,这个函数叫做Reducer.</p>
<p>我们的React组件负责发送actions到我们的store,反过来,如果组件需要渲染的时候,store会通知他.</p>
<h2 id="ImmutableJS"><a href="#ImmutableJS" class="headerlink" title="ImmutableJS"></a>ImmutableJS</h2><p>因为Redux不允许我们mutate程序的state,如果借助immutable数据结构模型化应用程序的state将会非常的有用.<br><code>Immutable.js</code>使用突变界面(mutative interfaces)提供一些immutable数据结构,这些界面实施时非常的高效,灵感来自于Clojure和Scala.</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们将会使用React,Redux和ImmutableJS去构建一个简单的todo list,允许我们添加todos,在完成和未完成之间切换.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">//css</div><div class="line"> html, body, input, button &#123;</div><div class="line">  font-family: Sawasdee;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__list &#123;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">  list-style-type: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item &#123;</div><div class="line">  padding: .5em .25em;</div><div class="line">  border-bottom: solid 1px #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item:hover &#123;</div><div class="line">  background: #f7f7f7;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__entry &#123;</div><div class="line">  border: solid 1px #ccc;</div><div class="line">  padding: .25em .5em;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #f3f3f3;</div><div class="line">  width: 100%;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button &#123;</div><div class="line">  border: 0;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #71B7FF;  </div><div class="line">  color: #fff;</div><div class="line">  padding: .25em .5em;</div><div class="line">  margin: .5em 0;</div><div class="line">  margin-right: .25em;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button:hover &#123;</div><div class="line">  background: #B2D8FF;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = Immutable;</div><div class="line"><span class="keyword">const</span> &#123; createStore &#125; = Redux;</div><div class="line"><span class="keyword">const</span> &#123; Provider, connect &#125; = reactRedux;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  Todo(&#123; todo &#125;) &#123;</div><div class="line">    <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  TodoList(&#123; todos, toggleTodo, addTodo &#125;) &#123;</div><div class="line">    <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> text = e.target.value;</div><div class="line">      <span class="keyword">if</span>(e.which === <span class="number">13</span> &amp;&amp; text.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        addTodo(text);</div><div class="line">        e.target.value = <span class="string">''</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> toggleClick = <span class="function">(<span class="params">id</span>) =&gt;</span> () =&gt; toggleTodo(id);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> &#123; Todo &#125; = components;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className='todo'&gt;</div><div class="line">        &lt;input type='text'</div><div class="line">               className='todo__entry'</div><div class="line">               placeholder='Add todo'</div><div class="line">               onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">        &lt;ul className='todo__list'&gt;</div><div class="line">          &#123;todos.map(t =&gt; (</div><div class="line">            &lt;li</div><div class="line">              key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">              &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          ))&#125; </div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const actions = &#123;</div><div class="line">  addTodo(text) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'ADD_TODO',</div><div class="line">      payload: &#123;</div><div class="line">        id: Math.random().toString(34).slice(2),</div><div class="line">        isDone: false,</div><div class="line">        text</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  toggleTodo(id) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'TOGGLE_TODO',</div><div class="line">      payload: id</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const init = List();</div><div class="line"></div><div class="line">const reducer = function(state=init, action) &#123;</div><div class="line">  switch(action.type) &#123;</div><div class="line">    case 'ADD_TODO':</div><div class="line">      return state.push(</div><div class="line">        Map(action.payload)</div><div class="line">      );</div><div class="line">    case 'TOGGLE_TODO':</div><div class="line">      return state.map(t =&gt; &#123;</div><div class="line">        if(t.get('id') == action.payload) &#123;</div><div class="line">          return t.update('isDone', isDone =&gt; !isDone);</div><div class="line">        &#125; else &#123;</div><div class="line">          return t;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const containers = &#123;</div><div class="line">  TodoList: connect(</div><div class="line">    function mapStateToProps(state) &#123;</div><div class="line">      return &#123;</div><div class="line">        todos: state</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    function mapDispatchToProps(dispatch) &#123;</div><div class="line">      return &#123;</div><div class="line">        toggleTodo: (id) =&gt; dispatch(actions.toggleTodo(id)),</div><div class="line">        addTodo: (text) =&gt; dispatch(actions.addTodo(text))</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  )(components.TodoList)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const &#123; TodoList &#125; = containers;</div><div class="line">const store = createStore(reducer);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    &lt;TodoList /&gt;</div><div class="line">  &lt;/Provider&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>代码在 <a href="https://github.com/sitepoint-editors/immutable-redux-todo" target="_blank" rel="external">Github</a></p>
<blockquote>
<p>可能提示build失败,<code>npm install babel-core</code>试试</p>
</blockquote>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>从创建项目📂开始,建立一个package.json文件.然后安装需要的依赖包.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> npm install --save react react-dom redux react-redux immutable</div><div class="line">npm install --save-dev webpack babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>
<hr>
<p>使用JSX和ES2015,用Babel编译代码,使用Webpack来完成这个模块绑定过程.</p>
<p>在<code>webpack.config.js</code>文件中创建Webpack配置文件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">        <span class="attr">query</span>: &#123; <span class="attr">presets</span>: [ <span class="string">'es2015'</span>, <span class="string">'react'</span> ] &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p>最后扩展一下<code>package.json</code>,添加一个npm script使用source maps编译我们的代码.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> "scripts": &#123;</div><div class="line">  "build": "webpack --debug"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每次编译代码的时候,运行<code>npm run build</code>.</p>
<h2 id="React-amp-Components"><a href="#React-amp-Components" class="headerlink" title="React&amp;Components"></a>React&amp;Components</h2><p>在实施项目之前,先创建一些傻瓜数据有很大的用处,但我们构思需要渲染的组件的时候,有一点点初步的感觉.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<hr>
<p>我们需要两个React组件<code>&lt;Todo/&gt;</code>和<code>&lt;TodoList&gt;</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/components.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todo &#125; = props;</div><div class="line">  <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos &#125; = props;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text' placeholder='Add todo' /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.id&#125; className='todo__item'&gt;</div><div class="line">            &lt;Todo todo=&#123;t&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>到了这一步,可以创建<code>index.html</code>文件来测试这些组价,添加下面的标记</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Immutable Todo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>还有一个项目的入口文件<code>src/app.js</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;dummyTodos&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>使用<code>npm run build</code>编译文件,然后在浏览器中打开index.html文件,确保运行.</p>
<h2 id="Redux-amp-ImmutableJS"><a href="#Redux-amp-ImmutableJS" class="headerlink" title="Redux&amp;ImmutableJS"></a>Redux&amp;ImmutableJS</h2><p>现在我们有了很好的UI,可以开始考虑组件最后的state.开始创建的傻瓜数据是一个很好的开端,我们可以很容易转化为ImmutableJS集合.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = List([</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure>
<hr>
<p>ImmutableJS map和Javascript的对象工作方式不同,所以我们要对组件做一点轻微的改变.property接入的地方(例如：todo.id)需要使用一个方法调用来代替(例如:<code>todo.get(‘id’)</code>).</p>
<h2 id="设计Actions"><a href="#设计Actions" class="headerlink" title="设计Actions"></a>设计Actions</h2><p>现在我们获得了数据的特征,可以考虑一下actions的更新.这个实例中,我们仅仅需要两个acions,一个是添加新的todo,另一个转换todo的状态.</p>
<p>让我们定义几个函数创建这些actions</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// src/actions.js</span></div><div class="line"></div><div class="line"><span class="comment">// succinct hack for generating passable unique ids</span></div><div class="line"><span class="keyword">const</span> uid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">34</span>).slice(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: &#123;</div><div class="line">      <span class="attr">id</span>: uid(),</div><div class="line">      <span class="attr">isDone</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">text</span>: text</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: id</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每一个action仅仅是一个有type和payload的属性对象.在我们触发action后,type属性帮助我们用payload来作什么.</p>
<h2 id="设计一个Reducer"><a href="#设计一个Reducer" class="headerlink" title="设计一个Reducer"></a>设计一个Reducer</h2><p>现在我们知道了state的特性和更新state的action,我们可以创建reducer了.仅仅提醒一下,reducer是一个接收state和action的函数,然后用来计算更新state.</p>
<p>这里是我们reducer的初始结构.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/reducer.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> init = List([]);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">todos=init, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> todos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>操作<code>ADD_TODO</code>action非常简单,可是使用<code>.push()</code>方法,返回一个新的列表,添加todo到末尾.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.push(<span class="built_in">Map</span>(action.payload));</div></pre></td></tr></table></figure>
<hr>
<p>记住要push到列表之前,要把todo对象转变为immutable map.</p>
<p>我们需要处理的稍微复杂的action是<code>TOOGLE_TODO</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.map(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">if</span>(t.get(<span class="string">'id'</span>) === action.payload) &#123;</div><div class="line">     <span class="keyword">return</span> t.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">return</span> t;</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>.map()</code>遍历列表,找到与aciton<code>id</code>匹配的todo项目.之后我们调用<code>.update()</code>方法,接收一个键和函数,然后返回一个map的新拷贝到updata函数,新拷贝中新值替换了初始值.</p>
<p>字面量版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">const</span> todo = <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'foo'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</div><div class="line">todo.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line"><span class="comment">// =&gt; &#123; id: 0, text: 'foo', isDone: true &#125;</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="把所有的东西都连系到一起"><a href="#把所有的东西都连系到一起" class="headerlink" title="把所有的东西都连系到一起"></a>把所有的东西都连系到一起</h2><p>actions和reducer准备好了,可以创建一个store,连接到我们的React组件中.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;store.getState()&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>为了保持组件和store的独立,我们使用<code>react-redux</code>帮助简化这个过程.它允许我们创建独立于store的容器,包装所有的组件,我们不需要改变先前的设计.</p>
<p>我们需要一个容器包装<code>&lt;TodoList/&gt;</code>组件,看看下面的内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/containers.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> &#123; addTodo, toggleTodo &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoList = connect(</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">)(components.TodoList);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>connect</code>函数创建容器.当我们调用<code>connect()</code>函数,传递两个函数,<code>mapStateToProps()</code>和<code>mapDispatchToProps()</code>.</p>
<p><code>mapStateToProps()</code>函数接收当前store的state作为参数,期待返回一个我们包装组件需要的对象映射.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面代码是一个包装组件根据映射map可视化的结果.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>我们也需要提供<code>mapDispatchProps</code>函数,传递store的<code>dispatch</code>方法,所以我们可以使用action creatros来dispatch actions.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">addTodo</span>: <span class="function"><span class="params">text</span> =&gt;</span> dispatch(addTodo(text)),</div><div class="line">    <span class="attr">toggleTodo</span>: <span class="function"><span class="params">id</span> =&gt;</span> dispatch(toggleTodo(id))</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>再一次实例化组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125;</div><div class="line">         addTodo=&#123;text =&gt; dispatch(addTodo(text))&#125;</div><div class="line">         toggleTodo=&#123;id =&gt; dispatch(toggleTodo(id))&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>现在我们已经把action creators映射到组件,可以从事件监听中调用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos, toggleTodo, addTodo &#125; = props;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> input = event.target;</div><div class="line">    <span class="keyword">const</span> text = input.value;</div><div class="line">    <span class="keyword">const</span> isEnterKey = (event.which == <span class="number">13</span>);</div><div class="line">    <span class="keyword">const</span> isLongEnough = text.length &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(isEnterKey &amp;&amp; isLongEnough) &#123;</div><div class="line">      input.value = <span class="string">''</span>;</div><div class="line">      addTodo(text);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> toggleClick = <span class="function"><span class="params">id</span> =&gt;</span> event =&gt; toggleTodo(id);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text'</div><div class="line">             className='todo__entry'</div><div class="line">             placeholder='Add todo'</div><div class="line">             onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">            &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>container容器自动订阅store的变化,只要的映射的props变化的时候,容器包装的组件就会重新渲染.</p>
<p>最后,需要使容器组件独立于store,使用<code>&lt;Provider/&gt;</code>组件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./containers'</span>;</div><div class="line"><span class="comment">//                          ^^^^^^^^^^</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不可否认,对于初学者来说,React和Redux的生态系统是相当复杂和令人迷惑的.<br>但是好消息是这些概念是可以可以转移的.我们仅仅粗略的接触了Redux的基础构架,但是已经足够我们学习<code>Elm 构架</code>,或者选取ClojureScript库例如：<code>Om</code>,<code>Re-frame</code>.类似的,我们仅仅看到immutable数据结构的只言片语,但是已经足够我们学习<code>Clojure</code>或者<code>Haskell</code>.</p>
<p>不管你是刚开始探索有关state的web编程开发者,还是使用javascript很长时间的开发者,基于action构架的办成和immutable数据结构变得至观重要的技能.所以现在是学习这些内容的时间了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是翻译版本,&lt;a href=&quot;https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-让我们把React-Container组合起来</title>
    <link href="http://yoursite.com/2017/03/21/%E7%BF%BB%E8%AF%91-%E8%AE%A9%E6%88%91%E4%BB%AC%E6%8A%8AReact-Container%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5/"/>
    <id>http://yoursite.com/2017/03/21/翻译-让我们把React-Container组合起来/</id>
    <published>2017-03-21T00:04:10.000Z</published>
    <updated>2017-03-23T08:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>Arunoda Susiripala</em>  <a href="https://voice.kadira.io/let-s-compose-some-react-containers-3b91b6d9b7c8#.92sjwgug1" target="_blank" rel="external">请参看原文</a></p>
</blockquote>
<p>近来(Jan,2016),自给自足的container(Redux的容器)方法在React的社区中非常的流行.他们在Realy,Redux甚至是在Meteor中广泛使用.这篇文章里我们深入container内部,了解一下怎么简便的组合containers.</p>
<h2 id="什么是Container"><a href="#什么是Container" class="headerlink" title="什么是Container?"></a>什么是Container?</h2><p>在React中,我们有props和states来管理组件的数据需求.最近有一个趋势,在组件中仅仅只通过props来接收数据和action.我们仅仅在组件内部保留state.</p>
<p>我们有时候叫这些组件为“单纯展示组件”.<br>我也不太确定谁发明的这个术语.但是我才可能是<a href="https://medium.com/@dan_abramov" target="_blank" rel="external">Dan Abramov</a>.<br>查看一下他的文章“Smart and Dumb Components”.</p>
<p>但是我认为叫做<strong><code>UI组件</code></strong>更好一点(或者仅仅叫做组件).<br>接着又另一套组件实际管理本地数据和获取远程数据.这些组件被称为<strong><code>container组件</code></strong>.Relay和Redux的React绑定是他们更流行了.</p>
<p>下面是怎么使用Reat Devtools来查看组件的视图.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-f461d4894bfc06de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="1*QhMLf9dhu-cbAxN9Gc9dtg-2.png"></p>
<p>Container(BlogPost)接收postId Props.然后他将会获取数据传递到实际UI组件中.</p>
<h2 id="Container的常规任务"><a href="#Container的常规任务" class="headerlink" title="Container的常规任务"></a>Container的常规任务</h2><p>container的主要任务是获取数据,这里面有一些事情要做,让我们看看:</p>
<ul>
<li>请求数据(调用订阅或者仅仅获取数据)</li>
<li>当数据加载的时候展示加载图片</li>
<li>一旦数据返回,把它传递到UI组件中</li>
<li>如果有错误,展示给用户</li>
<li>当props改变了,需要重新获取或者重新订阅</li>
<li>当container卸载的时候,需要清除资源.</li>
</ul>
<p>这里container有很多的任务要完成.如果你想自己做这些任务,你就不得不做一些重复的工作,发生错误的来源就由此诞生了.</p>
<h2 id="React-Komposer的介绍"><a href="#React-Komposer的介绍" class="headerlink" title="React Komposer的介绍"></a>React Komposer的介绍</h2><p>React Komposer试图帮助我们更容易的合并containers.有了它,你可以使用任何数据资源,不管你的数据是来自于Promise,Observable甚至是Meteor‘s Tracker.</p>
<h3 id="让我们看看一个简单的例子"><a href="#让我们看看一个简单的例子" class="headerlink" title="让我们看看一个简单的例子"></a>让我们看看一个简单的例子</h3><p>像下面这样创建一个<em>数字时钟</em>:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-10d84673aea28707.gif?imageMogr2/auto-orient/strip" alt="Digital clock"></p>
<p>这是一个好的实例,因为我们可以测试一个container的几乎所有的功能.开始</p>
<p>首先安装react-komposer:</p>
<p><code>npm i — save react-komposer</code></p>
<p>然后输入compose函数：<br><code>import {compose} from ‘react-komposer’;</code></p>
<p>现在需要一个UI组件去渲染时间:</p>
<p><code>const Time = ({time}) =&gt; (&lt;div&gt;{time}&lt;/div&gt;);</code></p>
<p>这是我们的组合函数:</p>
<p>获取时间的时候需要调用<code>onData</code>回调函数(这里没有实际做什么.)</p>
<p>需要调用<code>onData</code>函数多少次可以,只要程序需要.如果有错误,可以把错误信息作为<code>onData</code>的第一个值.</p>
<p>最后,我们需要返回一个清除资源的额函数.在这个实例中用他来清除setInterva的句柄.</p>
<p>好了,现在来合并一下composer:<br><code>const Clock = compose(composerFunction)(Time);</code></p>
<p>然后渲染到DOM中:<br><code>ReactDOM.render(&lt;Clock /&gt;, document.body);</code></p>
<p>现在我们得到了一个自我管理(state)的时钟.<a href="https://jsfiddle.net/arunoda/jxse2yw8/" target="_blank" rel="external">看看实际演示</a>.</p>
<p>这里有个<a href="https://jsfiddle.net/arunoda/7qy1mxc7/" target="_blank" rel="external">更复杂的版本</a>,使用props,处理错误信息.</p>
<p>你也可以改变默认加载和错误组件.查看一下<a href="https://github.com/kadirahq/react-komposer#api" target="_blank" rel="external">react-komposer 文档</a>.</p>
<p>获得好处:更容易测试</p>
<p>作为这个组件的附加效果,我们现在可以很容易测试UI代码.</p>
<ul>
<li>因为UI组件仅仅通过props接收数据(和action),是的测试很容易.</li>
<li>也可以测试组合函数的数据获取逻辑.</li>
</ul>
<h2 id="对于多种数据源的支持"><a href="#对于多种数据源的支持" class="headerlink" title="对于多种数据源的支持"></a>对于多种数据源的支持</h2><p>我已经提到过,可以使用这个组件和任何数据源一起工作,因为组合的API是通用的.我们有处理流行数据源的特定APIS.<br> 这里是:</p>
<ul>
<li><em>composeWithPromise</em>用于Promise-baseed 数据源</li>
<li><em>composeWithObservable</em>用于Rx.js Observalbe-based数据源</li>
<li><em>composeWithTracker</em>出事特殊的一些数据源.</li>
</ul>
<p>有了这些API,我们可以使用react-komposer去合并任何数据源的container.</p>
<p>看看<a href="https://github.com/kadirahq/react-komposer#using-with-xxx" target="_blank" rel="external">repo</a>,有更多的例子.</p>
<p>在你的app中使用一下react-komposer,你会喜欢上他的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Arunoda Susiripala&lt;/em&gt;  &lt;a href=&quot;https://voice.kadira.io/let-s-compose-some-react-containers-3b91b6d9b7c8#.92sjwgug1&quot; t
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>使用React,Redux,redux-sage构建图片库(翻译)</title>
    <link href="http://yoursite.com/2017/03/15/%E4%BD%BF%E7%94%A8React,Redux,redux-sage%E6%9E%84%E5%BB%BA%E5%9B%BE%E7%89%87%E5%BA%93(%E7%BF%BB%E8%AF%91)/"/>
    <id>http://yoursite.com/2017/03/15/使用React,Redux,redux-sage构建图片库(翻译)/</id>
    <published>2017-03-15T00:04:10.000Z</published>
    <updated>2017-03-23T08:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>看到这篇文章<a href="http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/" target="_blank" rel="external">build an image gallery using redux saga</a>，觉得写的不错，长短也适中.  文后有<a href="https://github.com/phpsmarter/egghead-react-redux-image-gallery/tree/comment" target="_blank" rel="external">注释版的github代码库,请使用comment分枝</a>. Flickr API可能需要有fQ的基本能力.可以使用google的翻译作为参考，这篇文章google翻译版的中文水平让我吃了一惊.<br>翻译已经完成.</p>
</blockquote>
<hr>
<p>###使用React,Redux和reudx-saga构建一个图像浏览程序(翻译)<br>Joel Hooks ,2016年3月</p>
<p>#####构建一个图片长廊</p>
<p>图像长廊是一个简单的程序，从Flicker API 加载图片URLs,允许用户查看图片详情。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-b0d03ac095f09c55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="Screen Shot 2016-03-20 at 3.42.17 PM-2.png"></p>
<p>后续我们会使用React,Redux和redux-saga.React作为核心框架，优势是虚拟dom(virtual-dom)的实现。Redux在程序内负责state的管理。最后，我们会使用redux-saga来执行javascript的异步操作步骤。</p>
<p>我们会使用ES6(箭头函数，模块，和模板字符串)，所以我们首先需要做一些项目的配置工作。</p>
<p>#####项目配置和自动化</p>
<hr>
<p>如果要开始一个React项目，须有有一系列的配置选项。对于一个简单的项目，我想把配置选项尽可能缩减。考虑到浏览器的版本问题，使用Babel把ES6编译为ES5。</p>
<p>首先使用npm init 创建一个<code>package.json</code>文件</p>
<p>package.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">  &#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"egghead-react-redux-image-gallery"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Redux Saga beginner tutorial"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"src/main.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"babel-node ./src/saga.spec.js | tap-spec"</span>,</div><div class="line">    <span class="string">"start"</span>: <span class="string">"budo ./src/main.js:build.js --dir ./src --verbose  --live -- -t babelify"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/joelhooks/egghead-react-redux-image-gallery.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"Joel Hooks &lt;joelhooks@gmail.com&gt;"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-polyfill"</span>: <span class="string">"6.3.14"</span>,</div><div class="line">    <span class="string">"react"</span>: <span class="string">"^0.14.3"</span>,</div><div class="line">    <span class="string">"react-dom"</span>: <span class="string">"^0.14.3"</span>,</div><div class="line">    <span class="string">"react-redux"</span>: <span class="string">"^4.4.1"</span>,</div><div class="line">    <span class="string">"redux"</span>: <span class="string">"^3.3.1"</span>,</div><div class="line">    <span class="string">"redux-saga"</span>: <span class="string">"^0.8.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-cli"</span>: <span class="string">"^6.1.18"</span>,</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"6.4.0"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.1.18"</span>,</div><div class="line">    <span class="string">"babel-preset-react"</span>: <span class="string">"^6.1.18"</span>,</div><div class="line">    <span class="string">"babel-preset-stage-2"</span>: <span class="string">"^6.1.18"</span>,</div><div class="line">    <span class="string">"babelify"</span>: <span class="string">"^7.2.0"</span>,</div><div class="line">    <span class="string">"browserify"</span>: <span class="string">"^13.0.0"</span>,</div><div class="line">    <span class="string">"budo"</span>: <span class="string">"^8.0.4"</span>,</div><div class="line">    <span class="string">"tap-spec"</span>: <span class="string">"^4.1.1"</span>,</div><div class="line">    <span class="string">"tape"</span>: <span class="string">"^4.2.2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p> 有了<code>package.json</code>, 可以在项目文件夹命令行运行 <code>npm install</code> 安装程序需要的依赖项。</p>
<p> .babelrc<br> <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>, <span class="string">"stage-2"</span>]</div><div class="line">   &#125; </div><div class="line">``` </div><div class="line">___</div><div class="line">这个文件告诉babel,我们将会使用ES2015(ES6),React以及ES2106的stage<span class="number">-2</span>的一些特征。</div><div class="line"></div><div class="line">`package.json`有两个标准的script脚本配置：`start`和`test`.现在我们想通过start脚本加载程序，start会使用`src`目录的一些文件，所以西药先创建`src`文件夹.在`src`文件夹添加下面的一些文：</div><div class="line">index.html</div></pre></td></tr></table></figure></p>
<p>   &lt;!doctype html&gt;</p>
<p><html></html></p>
<p><head><br>  <meta charset="utf-8"><br>  <meta name="viewport" content="width=device-width, initial-scale=1.0"><br>  <title>egghead: React Redux Image Gallery</title><br>  <link rel="stylesheet" href="styles.css"><br></head></p>
<p><body></body></p>
<div class="title"><br>  <img src="http://cloud.egghead.io/2G021h3t2K10/download/egghead-logo-head-only.svg" alt=""><br>  <h3>Egghead Image Gallery</h3><br></div>

<div id="root"></div>

<p><script type="text/javascript" src="build.js"></script><br><br><br> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line"><span class="selector-tag">main</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure></p>
<pre><code>import &quot;babel-polyfill&quot;
</code></pre><p>import React from ‘react’<br>import ReactDOM from ‘react-dom’</p>
<p>ReactDOM.render(<br>  </p><h1>Hello React!</h1>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"> <span class="selector-tag">style</span><span class="selector-class">.css</span></div></pre></td></tr></table></figure><p></p>
<pre><code>body {
font-family: Helvetica, Arial, Sans-Serif, sans-serif;
background: white;
</code></pre><p>}</p>
<p>.title {<br>    display: flex;<br>    padding: 2px;<br>}</p>
<p>.egghead {<br>    width: 30px;<br>    padding: 5px;<br>}</p>
<p>.image-gallery {<br>    width: 300px;<br>    display: flex;<br>    flex-direction: column;<br>    border: 1px solid darkgray;<br>}</p>
<p>.gallery-image {<br>    height: 250px;<br>    display: flex;<br>    align-items: center;<br>    justify-content: center;<br>}</p>
<p>.gallery-image img {<br>    width: 100%;<br>    max-height: 250px;<br>}</p>
<p>.image-scroller {<br>    display: flex;<br>    justify-content: space-around;<br>    overflow: auto;<br>    overflow-y: hidden;<br>}</p>
<p>.image-scroller img {<br>    width: 50px;<br>    height: 50px;<br>    padding: 1px;<br>    border: 1px solid black;<br>}</p>
  <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  ___</div><div class="line"></div><div class="line">`index.html`文件加载`style.css`文件提供一些基本的布局样式，同时也加载`build.js`文件，这是一个生成出来的文件.`main.js`是一个最基础的React程序，他在`index.html`的`#root`元素中渲染一个`h1`元素。创建这些文件以后，在项目文件夹中命令行运行`npm start`。在浏览器打开`http:<span class="comment">//10.11.12.1:9966`.就可以看到`index.html`中渲染的页面</span></div><div class="line"></div><div class="line">![运行加载图](http:<span class="comment">//upload-images.jianshu.io/upload_images/2044710-b24265cbe5f89d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240)</span></div><div class="line"></div><div class="line"></div><div class="line">现在我们来构建基础的`Gallery` React 组件</div><div class="line"></div><div class="line">#####在Gallery中显示一些图片</div><div class="line">___</div><div class="line"></div><div class="line"> 首先我们需要尽可能快的获得一个可以显示的图片素材.在项目文件夹中创建一个文件`Gallery.js`</div><div class="line"> Gallery.js</div></pre></td></tr></table></figure>
<pre><code>import React, {Component} from &apos;react&apos;
</code></pre><p>const flickrImages = [<br>  “<a href="https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,<br>  “<a href="https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,<br>  “<a href="https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,<br>  “<a href="https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,<br>  “<a href="https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“<br>];</p>
<p>export default class Gallery extends Component {<br>  constructor(props) {<br>    super(props);<br>    this.state = {<br>      images: flickrImages,<br>      selectedImage: flickrImages[0]<br>    }<br>  }<br>  render() {<br>    const {images, selectedImage} = this.state;<br>    return (<br>      <div classname="image-gallery"><br>        <div classname="gallery-image"><br>          <div><br>            <img src="{selectedImage}"><br>          </div><br>        </div><br>        <div classname="image-scroller"><br>          {images.map((image, index) =&gt; (<br>            <div key="{index}"><br>              <img src="{image}/"><br>            </div><br>          ))}<br>        </div><br>      </div><br>    )<br>  }<br>}<br>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">___</div><div class="line">我们直接在组件中硬编码了一个提供数据的数组，让项目尽快的工作起来.`Gallery组件`继承`Component组件`,在构造函数中创建一些组件的出事状态.最后我们利用一些样式标记渲染一下文件。`image-scroller`元素遍历(`map`方法)图片数组,生成摘要小图片。</div></pre></td></tr></table></figure></p>
<pre><code>import &quot;babel-polyfill&quot;
</code></pre><p>import React from ‘react’<br>import ReactDOM from ‘react-dom’</p>
<ul>
<li>import Gallery from ‘./Gallery’</li>
</ul>
<p>ReactDOM.render(</p>
<ul>
<li><h1>Hello React!</h1>,</li>
</ul>
<ul>
<li><p><gallery>,<br>document.getElementById(‘root’)<br>);</gallery></p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">到现在，我们使用硬编码的图片URLs(通过fickrImages)数组,第一张图片作为`selectedImage`.这些属性在`Gallery`组件的构造函数缺省配置中，通过初始状态(initial)来设定.</div><div class="line"></div><div class="line"></div><div class="line">接下来在组件中添加一个和组件进行交互操作的方法，方法具体内容是操做`setSate`.</div><div class="line">Gallery.js</div></pre></td></tr></table></figure>
<p>  export default class Gallery extends Component {<br>constructor(props) {<br> super(props);<br> this.state = {<br>   images: flickrImages,<br>   selectedImage: flickrImages[0]<br> }<br>}</p>
</li>
<li>handleThumbClick(selectedImage) {</li>
<li>this.setState({</li>
<li>selectedImage</li>
<li>})</li>
<li>}<br>render() {<br> const {images, selectedImage} = this.state;<br> return (<br>   <div classname="image-gallery"><pre><code>&lt;div className=&quot;gallery-image&quot;&gt;
  &lt;div&gt;
    &lt;img src={selectedImage} /&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div className=&quot;image-scroller&quot;&gt;
  {images.map((image, index) =&gt; (
</code></pre></div></li>
</ul>
<ul>
<li><div key="{index}"></div></li>
</ul>
<ul>
<li><p><div key="{index}" onclick="{this.handleThumbClick.bind(this,image)}"><br> <img src="{image}/"><br></div><br>))}<br><br><br>)<br>}<br>}</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">在`Gallery组件`添加`handleThumbClick`方法,任何元素都可用通过`onClick`属性调用这个方法.`image`作为第二个参数传递，元素自身作为第一个参数传递.bind方法传递javascript函数调用上下文对象是非常便捷。</div><div class="line"></div><div class="line">看起来不错!现在我们有了一些交互操作的方法，有点“APP”的意思了。截止目前，我们已经让app运行起来了，接下来要考虑怎么加载远程数据。最容易加载远程数据的地方是一个`React组件`生命周期方法,我们使用`componentDidMount`方法,通过他从`Flikr API`请求并加载一些图片.</div><div class="line"></div><div class="line">Gallery.js</div></pre></td></tr></table></figure>
<p>export default class Gallery extends Component {<br>constructor(props) {<br>super(props);<br>this.state = {<br>images: flickrImages,<br>selectedImage: flickrImages[0]<br>}<br>}</p>
</li>
<li>componentDidMount() {</li>
<li>const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;</li>
<li>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.+getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;+<br>+</li>
<li>fetch(API_ENDPOINT).then((response) =&gt; {</li>
<li>return response.json().then((json) =&gt; {</li>
<li>const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; { </li>
<li>return <code>https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg</code></li>
<li>});<br>+</li>
<li>this.setState({images, selectedImage: images[0]});</li>
<li>})</li>
<li>})</li>
<li><p>}<br>[…]</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">我们在`Gallery`类中添加了一个新的方法,通过React的`componentDidMount`生命周期方法触发Flickr图片数据的获取。</div><div class="line"></div><div class="line">在`React`组件运行的不同时间点，组件会调用不同的生命周期函数。在这段代码中，当组件被渲染到`DOM`中的时间点,`componentDidMount`函数就会被调用。需要注意的是:`Gallery`组件只有一次渲染到`DOM`的机会，所以这个函数可以提供一些初始化图片.考虑到在APP的整个生命周期中,有更多的动态组件的加载和卸载,这可能会造成一些多余的调用和无法考虑到的结果。</div><div class="line"></div><div class="line">我们使用浏览器接口(browser API)的`fetch`方法执行请求.Fetch返回一个promise对象解析`response`对象.调用`response.json()`方法,返回另一个promise对象，这就是我们实际需要的`json`格式的数据.遍历这个对象以后就可以获取图片的url地址.</div><div class="line"></div><div class="line">&gt;坦白讲，这个应用目前还很简单.我们还需要在这里花费更多的时间，还有一些基础的需求需要完成.或许我们应该在promise处理流程中添加错误处理方法,如果图片数据获取成功也需要一些处理逻辑.在这个地方，你需要发挥一些想象力考虑一下更多的逻辑.在生产实践中简单的需求是很少见的.很快,应用中就会添加更多的需求。认证,滚动橱窗,加载不同图片库的能力和图片的设置等等.仅仅这些还远远不够.</div><div class="line"></div><div class="line">我们已经使用`React`构建了一个加载图片库的程序。接下来我们需要考虑到随着程序功能的添加，到底需要哪些基础的模式.首先考虑到的一个问题就是要把应用的状态(state)控制从`Gallery`组件中分离出来.</div><div class="line"></div><div class="line">我们通过引入`Redux`来完成应用的状态管理工作。</div><div class="line"></div><div class="line">#####使用`Redux`来管理状态</div><div class="line">___</div><div class="line">在你的应用中只要使用了`setState`方法都会让一个组件从无状态变为有状态的组件.糟糕的是这个方法会导致应用中出现一些令人困惑的代码,这些代码会在应用中到处蔓延。</div><div class="line"></div><div class="line">`Flux`构架来减轻这个问题.`Flux`把逻辑(logic)和状态(state)迁移到`Store`中.应用中的动作(`Actions`)被`Dispatch`的时候,`Stores`</div><div class="line">会做相应的更新.`Stores`的更新会触发`View`根据新状态的渲染.</div><div class="line"></div><div class="line">那么我们为什么要舍弃`Flux`?他竟然还是“官方”构建的.</div><div class="line">好吧！`Redux`是基于`Flux`构架的,但是他有一些独特的优势.下面是Dan Abramov(Redux创建者)的一些话：</div><div class="line">&gt;Redux和Flux没有什么不同.总体来讲他们是相同的构架,但是Redux通过功能组合把Flux使用回调注册的复杂点给屏蔽掉了.</div><div class="line">两个构架从更本上讲没有什么不同，但是我发现Redux使一些在Flux比较难实现的逻辑更容易实现.</div><div class="line"></div><div class="line"></div><div class="line">[Redux文档](http:<span class="comment">//cn.redux.js.org/index.html)非常棒.</span></div><div class="line">如果你还没有读过代码的卡通教程或者Dan的系列文章.赶快去看看吧！</div><div class="line"></div><div class="line">#####启动Redux</div><div class="line"></div><div class="line">第一件需要做的事事初始化`Redux`,让他在我们的程序中运行起来.现在不需要做安装工作，刚开始运行`npm install`的时候已经安装好了依赖项，我们需要做一些导入和配置工作.</div><div class="line">**reducer函数是Redux的大脑.** 每当应用分发(或派遣,dispatch)一个操作(action)的时候,`reducer`函数会接受操作(action)并且依据这个动作(action)创建`reducer`自己的`state`.因为`reducers`是纯函数，他们可以组合到一起，创建应用的`一个完整state`.让我们在`src`中创建一个简单的reducer:</div><div class="line">reducer.js</div></pre></td></tr></table></figure>
<p>export default function images(state, action) {<br>   console.log(state, action)<br>   return state;<br>}</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"> 一个reducer函数接受两个参数(arguments).</div><div class="line">   <span class="number">1</span>. [x] `<span class="keyword">state</span>`-这个数据代表应用的状态(<span class="keyword">state</span>).reducer函数使用这个状态来构建一个reducer自己可以管理的状态.如果状态没有发生改变,reducer会返回输入的状态.</div><div class="line">   <span class="number">2</span>. [x]  `action`-这是触发reducer的事件.Actions通过store派发(dispatch),由reducer处理.action需要一个`type`属性来告诉reducer怎么处理<span class="keyword">state</span>.</div><div class="line"></div><div class="line">目前,`images` reuducer在终端中打印出日志记录，表明工作流程是正常的，可以做接下来的工作了.为了使用reducer，需要在`main.js`中做一些配置工作:</div><div class="line">main.js</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import “babel-polyfill”;</p>
<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>
<p>import Gallery from ‘./Gallery’;</p>
<ul>
<li>import { createStore } from ‘redux’</li>
<li><p>import reducer from ‘./reducer’</p>
</li>
<li><p>const store = createStore(reducer);</p>
</li>
<li><p>import {Provider} from ‘react-redux’;</p>
</li>
</ul>
<p>ReactDOM.render(</p>
<ul>
<li><provider store="{store}"> <gallery></gallery></provider></li>
<li><p>,<br>document.getElementById(‘root’)<br>);<br>}</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"> </div><div class="line"> 我们从`Redux`库中导入`createStore`组件.`creatStore`用来创建Redux的store.大多数情况下,我们不会和store直接交互,store在Redux中做幕后管理工作.</div><div class="line"></div><div class="line"> 也需要导入刚才创建的reducer函数,以便于他可以被发送到store.</div><div class="line"> 我们将通过`createStore(reducer)`操作，利用reducer来配置应用的store.这个示例仅仅只有一个reducer,但是`createStore`可以接收多个reducer作为参数.稍后我们会看到这一点.</div><div class="line"> </div><div class="line"> 最后我们导入高度集成化的组件`Provider`,这个组件用来包装`Gallery`,以便于我们在应用中使用Redux.我们需要把刚刚创建的store传递给`Provider`.你也可以不使用`Provider`,实际上Redux可以不需要React.但是我们将会使用`Provider`,因为他非常便于使用.</div><div class="line"> </div><div class="line"> </div><div class="line"></div><div class="line">![打印日志](http:<span class="comment">//upload-images.jianshu.io/upload_images/2044710-6667a047b669d287.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320)</span></div><div class="line"></div><div class="line"> 这张图可能有点古怪，但是展示了Redux的一个有意思的地方.所有的reducers接收在应用中的全部actions(动作或操作).在这个例子中我们可以看到Redux自己派发的一个`action`.</div><div class="line"> #####连接Gallery组件</div><div class="line"> </div><div class="line"> 借助Redux,我们将使用”connected”和“un-connected”组件.一个`connected`组件被连线到store.`connected`组件使控制动作事件(controls action event)和store协作起来.通常,一个`connected`组件有子组件,子组件具有单纯的接收输入和渲染功能，当数据更新时执行调用.这个子组件就是unconnected组件.</div><div class="line"> &gt;提示:当Rect和Redux配合是工作的非常好,但是Redux不是非要和React在一起才能工作.没有React,Redux其实可以和其他框架配合使用.</div><div class="line"> </div><div class="line"> </div><div class="line">在应用中需要关联`React组件`和`Redux Store` 的时候，`react-redux`提供了便捷的包装器.我们把react-redux添加进`Gallery`中</div><div class="line">,从而使`Gallery`成为首要的关联组件.</div><div class="line"></div><div class="line">Gallery.js</div></pre></td></tr></table></figure>
<p>import React, {Component} from ‘react’<br>+import {connect} from ‘react-redux’;</p>
</li>
</ul>
<p>-export default class Gallery extends Component {<br>+export class Gallery extends Component {<br>  constructor(props) {<br>    super(props);</p>
<ul>
<li><p>console.log(props);<br>this.state = {<br> images: []<br>}<br>}<br>componentDidMount() {<br>const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;<br>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>
<p>fetch(API_ENDPOINT).then((response) =&gt; {<br> return response.json().then((json) =&gt; {<br>   const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; {</p>
<pre><code>return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`
</code></pre><p>   });</p>
<p>   this.setState({images, selectedImage: images[0]});<br> })<br>})<br>}<br>handleThumbClick(selectedImage) {<br>this.setState({<br> selectedImage<br>})<br>}<br>render() {<br>const {images, selectedImage} = this.state;<br>return (<br> <div classname="image-gallery"><br>   <div classname="gallery-image"></div></div></p>
<pre><code>&lt;div&gt;
  &lt;img src={selectedImage} /&gt;
&lt;/div&gt;
</code></pre><p>   <br>   <div classname="image-scroller"></div></p>
<pre><code>{images.map((image, index) =&gt; (
  &lt;div key={index} onClick={this.handleThumbClick.bind(this,image)}&gt;
    &lt;img src={image}/&gt;
  &lt;/div&gt;
))}
</code></pre><p>   <br> <br>)<br>}<br>}</p>
</li>
</ul>
<p>+export default connect()(Gallery)<br> <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">从`react-redux`导入`connect`函数,可以在导出组件的时候把他变为链接组件(connected component).请注意,`connect()(Gallery)`代码把`Gallery`组件放在第二个形参中,这是因为`connect()`返回一个函数，这个函数接受一个React组件作为参数(argument).调用`connect()`函数时需要配置项.后面我们将会传递配置我们应用的actions和state参数.</div><div class="line">我们也把`connect`作为默认配置到处模块.这一点非常重要！现在当我们`<span class="keyword">import</span> Gallery`的时候,就不是一个单纯的React组件了,而是一个和Redux关联的组件了.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">![](http:<span class="comment">//upload-images.jianshu.io/upload_images/2044710-72a9136f9b481bf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/620)</span></div><div class="line"></div><div class="line">如果你观察我们添加进构造器的`console.log`的输出,就可以看到`Gallery`组件的属性现在包括了一个`dispatch`函数.这个地方是`connect`为我们的应用修改的,这个改动赋予了组件把自己的动作对象(action objects)`派发`到`reducers`的能力.</div></pre></td></tr></table></figure></p>
<pre><code>export class Gallery extends Component {
</code></pre><p>  constructor(props) {<br>    super(props);</p>
<ul>
<li>this.props.dispatch({type: ‘TEST’});<br>this.state = {<br> images: []<br>}<br>}<br>[…]<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">我们可以在组件的构造器中调用派发功能.你可以在开发者的终端中看到来自reducer的日志声明.看到声明表示我们已经派发了第一个action!.Actions是一个单一的javascript对象,必需有`type`属性.Actions可以拥有任意数量和种类的其他属性.但是`type`可以让reducers理解这些动作到底是做什么用的(意译，意思是只有拥有type属性，reducers才知道对<span class="keyword">state</span>做什么样的修改).</div></pre></td></tr></table></figure>
</li>
</ul>
<p>export default function images(state, action) {</p>
<ul>
<li>console.log(state, action)</li>
</ul>
<ul>
<li>switch(action.type) {</li>
<li>case ‘TEST’:</li>
<li>console.log(‘THIS IS ONLY A TEST’)</li>
<li><p>}<br>return state;<br>}</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"></div><div class="line">总的reducers使用`switch代码块`过滤有关的消息,`Switch`语句使用actions的type属性,当一个`action`和`<span class="keyword">case</span>`分支吻合以后,相应的单个reducer就会执行他的具体工作.</div><div class="line"></div><div class="line">我们的应用现在关联到接收的动作.现在我们需要把`Redux`-`Store`提供的`state`关联到应用中.</div><div class="line"></div><div class="line">####默认的应用状态(state)</div><div class="line">reducer.js</div></pre></td></tr></table></figure>
<p>const defaultState = {<br>images: []<br>}</p>
</li>
</ul>
<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘TEST’:</p>
<ul>
<li>console.log(‘THIS IS ONLY A TEST’)</li>
</ul>
<ul>
<li>console.log(state, action)</li>
<li>return state;</li>
<li>default:</li>
<li>return state;<br>}</li>
</ul>
<ul>
<li><p>return state;<br>}</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> 我们创建一个`<span class="keyword">default</span>State`对象,这个对象返回一个空数组作为images的属性.我们把`images`函数的参数`<span class="keyword">state</span>`设置为默认.如果在test分支中输出日志,将会看到<span class="keyword">state</span>不是undefined(空数组不是undefined)!reducer需要返回应用的当前<span class="keyword">state</span>.这点很重要!现在我们没有做任何改变,所以仅仅返回<span class="keyword">state</span>.注意我们在`case`中添加了<span class="keyword">default</span>分支,reducer必须要返回一个<span class="keyword">state</span>.</div><div class="line"> </div><div class="line">在`Gallery`组件中，我们也可以把<span class="keyword">state</span>做一定的映射(map)以后再连接到应用.</div></pre></td></tr></table></figure>
<p>import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>
</li>
</ul>
<p>export class Gallery extends Component {<br>  constructor(props) {<br>    super(props);<br>    this.props.dispatch({type: ‘TEST’});</p>
<ul>
<li>console.log(props);</li>
</ul>
<ul>
<li>this.state = {</li>
<li>images: []</li>
<li>}<br>}</li>
<li>componentDidMount() {</li>
<li>const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;</li>
<li>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.-getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;-<br>-</li>
<li>fetch(API_ENDPOINT).then((response) =&gt; {</li>
<li>return response.json().then((json) =&gt; {</li>
<li>const images = json.photos.photo.map(({farm, server, id, secret}) =&gt; { </li>
<li>return <code>https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg</code></li>
<li>});<br>-</li>
<li>this.setState({images, selectedImage: images[0]});</li>
<li>})</li>
<li>})</li>
<li>}</li>
<li>handleThumbClick(selectedImage) {</li>
<li>this.setState({</li>
<li>selectedImage</li>
<li>})</li>
<li>}<br>render() {</li>
<li>const {images, selectedImage} = this.state;</li>
</ul>
<ul>
<li>const {images, selectedImage} = this.props;<br>return (<br> <div classname="image-gallery"><br>   <div classname="gallery-image"><pre><code>&lt;div&gt;
  &lt;img src={selectedImage} /&gt;
&lt;/div&gt;
</code></pre>   </div><br>   <div classname="image-scroller"><pre><code>{images.map((image, index) =&gt; (
</code></pre></div></div></li>
</ul>
<ul>
<li><div key="{index}" onclick="{this.handleThumbClick.bind(this,image)}"></div></li>
</ul>
<ul>
<li><div key="{index}"><br> <img src="{image}/"><br></div><br>))}<br><br><br>)<br>}<br>}</li>
</ul>
<p>+function mapStateToProps(state) {</p>
<ul>
<li>return {</li>
<li>images: state.images</li>
<li>selectedImage: state.selectedImage</li>
<li>}<br>+}</li>
</ul>
<p>-export default connect()(Gallery)<br>+export default connect(mapStateToProps)(Gallery)</p>
 <figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line"> 我们将移除连接组件中的所有图片加载和交互逻辑代码,如果你注意看`Gallery`组件的底部代码,你会注意到，我们创建了一个`mapStateToProps`函数,接收一个`<span class="keyword">state</span>`作为参数,返回一个对象,把`<span class="keyword">state</span>.images`映射为`images`属性.`mapStateToProps`做为参数传递给`connect`.</div><div class="line"> 正如名字暗示的一样,`mapStateToProps`函数接收当前应用的<span class="keyword">state</span>,然后把<span class="keyword">state</span>转变为组件的属性(propertys).如果在构造器中输出props,将会看到images数组是`reducer`返回的默认<span class="keyword">state</span>.</div></pre></td></tr></table></figure>
<p>   const defaultState = {</p>
<ul>
<li>images: []</li>
</ul>
<ul>
<li>images: [</li>
<li>“<a href="https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,</li>
<li>“<a href="https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,</li>
<li>“<a href="https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,</li>
<li>“<a href="https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,</li>
<li>“<a href="https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“</li>
<li>],</li>
<li>selectedImage: “<a href="https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</li>
</ul>
<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘TEST’:<br>      console.log(state, action)<br>      return state;<br>    default:<br>      return state;<br>  }<br>}<br>  <figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line">如果在`<span class="keyword">default</span>State`中更新images数组,你将可以看到一些图片重新出现在gallery中!现在当用户点击缩略图的时候,我们可以反馈选择动作,返回对应的大图.</div><div class="line"></div><div class="line"><span class="comment">####更新state</span></div><div class="line">怎么操作才能根据新选择的图片更新<span class="keyword">state</span>?</div><div class="line">需要配置reducer监听`IMAGE_SELECTED`动作,借助action携带的信息(payload,有的文章翻译为载荷,载荷怎么理解？手机载荷就是声音，短信和流量数据。如果是卡车就是拉的货物,如果是客车就乘载的乘客,action的载荷就是要让reducer明白你要干什么，需要什么)来更新<span class="keyword">state</span>.</div></pre></td></tr></table></figure></p>
<p>  const defaultState = {<br>  images: [<br>    “<a href="https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“,<br>    “<a href="https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1581/25283151224_50f8da511e.jpg</a>“,<br>    “<a href="https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1653/25265109363_f204ea7b54.jpg</a>“,<br>    “<a href="https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1571/25911417225_a74c8041b0.jpg</a>“,<br>    “<a href="https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1450/25888412766_44745cbca3.jpg</a>“<br>  ],<br>  selectedImage: “<a href="https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg" target="_blank" rel="external">https://farm2.staticflickr.com/1553/25266806624_fdd55cecbc.jpg</a>“<br>}</p>
<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {</p>
<ul>
<li>case ‘TEST’:<br>case ‘IMAGE_SELECTED’:</li>
<li>return state;</li>
</ul>
<ul>
<li><p>return {…state, selectedImage: action.image};<br>default:<br>return state;<br>}<br>}</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">现在reducer已经准备接收`IMAGE_SELECTED` action了.在`IMAGE_SELECTED`分支选项内,我们在展开(spreading,ES6的对象操作方法),并重写`selectedImage`属性后,返回一个新state对象.了解更多的`...state`对象操作可以看`ruanyifeng`的书.</div></pre></td></tr></table></figure>
<p>import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>
</li>
</ul>
<p>export class Gallery extends Component {</p>
<ul>
<li>constructor(props) {</li>
<li>super(props);</li>
<li>this.props.dispatch({type: ‘TEST’});</li>
<li>console.log(props);</li>
<li>}<br>render() {</li>
<li>const {images, selectedImage} = this.props;</li>
</ul>
<ul>
<li><p>const {images, selectedImage, dispatch} = this.props;</p>
<p>return (<br> <div classname="image-gallery"><br>   <div classname="gallery-image"></div></div></p>
<pre><code>&lt;div&gt;
  &lt;img src={selectedImage} /&gt;
&lt;/div&gt;
</code></pre><p>   <br>   <div classname="image-scroller"></div></p>
<pre><code>{images.map((image, index) =&gt; (
</code></pre></li>
</ul>
<ul>
<li><div key="{index}"></div></li>
</ul>
<ul>
<li><div key="{index}" onclick="{()" ==""> dispatch({type:’IMAGE_SELECTED’, image})}&gt;<br> <img src="{image}/"><br></div><br>))}<br><br><br>)<br>}<br>}</li>
</ul>
<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>
<p>export default connect(mapStateToProps)(Gallery)<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"> 在`Gallery`组件中,我们将会在组件的属性中定义`dispatch`在`onClick`函数体中调用他,现在我们从便利角度考虑把他们放在一起,但是两者功能是一样的.一旦我们点击了缩略图,他将会通过reducer更新大图.</div><div class="line">使用dispatch可以很方便的创建通用actions,但是很快我们会需要重用命名好的actions.为了这样做,可以使用”action creators”.</div><div class="line"></div><div class="line">####Action Creators</div><div class="line">Action creators函数返回配置好的action对象.我们在`action.js`中添加第一个action creator.</div><div class="line"></div><div class="line">action.js</div></pre></td></tr></table></figure></p>
<p> export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;</p>
<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}<br> <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">这个方法经过<span class="keyword">export</span>以后,可以直接在任何需要创建`selectImage` action地方导入!`selectImage`是纯函数，只能返回数据.他接收一个image作为参数,把image添加到action对象中，并返回.</div><div class="line"></div><div class="line">&gt;注意:我们正在返回一个单纯的javascript object,但是`image`的属性可能很古怪，如果你以前没有碰到这样的样式.从ES6的角度出发,如果你给一个对象传递一个类似这样的属性,隐含的意思是把`image:<span class="string">'任何image包含的值'</span>`添加到最终返回的对象.超级好用!</div></pre></td></tr></table></figure></p>
<p> import  * as GalleryActions from ‘./actions.js’;<br>[…]<br>onClick={() =&gt; dispatch(GalleryActions.selectImage(image))}<br> <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">this isn’t much than just using `dispatchti` though.</div><div class="line"></div><div class="line">幸运的是,这个模式很普遍,Redux在`bindActionCreators`函数里提供了一个更好的办法来完成这个功能.</div></pre></td></tr></table></figure></p>
<p> import React, {Component} from ‘react’<br>import {connect} from ‘react-redux’;</p>
<ul>
<li><p>import {bindActionCreators} from ‘redux’;</p>
</li>
<li><p>import  * as GalleryActions from ‘./actions.js’;</p>
</li>
</ul>
<p>export class Gallery extends Component {<br>  constructor(props) {<br>    super(props);<br>    this.props.dispatch({type: ‘TEST’});<br>    console.log(props);<br>  }<br>  handleThumbClick(selectedImage) {<br>    this.setState({<br>      selectedImage<br>    })<br>  }<br>  render() {</p>
<ul>
<li>const {images, selectedImage, dispatch} = this.props;</li>
</ul>
<ul>
<li>const {images, selectedImage, selectImage} = this.props;<br>return (<br> <div classname="image-gallery"><br>   <div classname="gallery-image"><pre><code>&lt;div&gt;
  &lt;img src={selectedImage} /&gt;
&lt;/div&gt;
</code></pre>   </div><br>   <div classname="image-scroller"><pre><code>{images.map((image, index) =&gt; (
</code></pre></div></div></li>
</ul>
<ul>
<li><div key="{index}" onclick="{()" ==""> dispatch({type:’IMAGE_SELECTED’, image})}&gt;</div></li>
</ul>
<ul>
<li><div key="{index}" onclick="{()" ==""> selectImage(image)}&gt;<br> <img src="{image}/"><br></div><br>))}<br><br><br>)<br>}<br>}</li>
</ul>
<p>function mapStateToProps(state) {<br>  return {<br>    images: state.images,<br>    selectedImage: state.selectedImage<br>  }<br>}</p>
<p>+function mapActionCreatorsToProps(dispatch) {</p>
<ul>
<li>return bindActionCreators(GalleryActions, dispatch);<br>+}</li>
</ul>
<p>-export default connect(mapStateToProps)(Gallery)<br>+export default connect(mapStateToProps, mapActionCreatorsToProps)(Gallery)<br> <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"> 我们已经添加了`mapActionCreatorsToProps`函数,他接收`dispatch`函数作为参数.返回`bindActionCreators`的调用结果,`GalleryActions`作为`bindActionCreators`的参数.现在如果你输出属性日志,就看不到`dispatch`作为参数,`selectImage`直接可以使用了.(这里相当于对dispatch和action进行了包装).</div><div class="line"> </div><div class="line"> 现在回顾一下,我们做了几件事:</div><div class="line"> - 创建了一个reducer包含应用的默认初始状态(initial state),并且监听actions的执行.</div><div class="line"> - 创建了一个store,把reducer具体化,提供一个分发器(dispatcher)可以分发action.</div><div class="line"> - 把我们的Gallery组件关联到store的state.</div><div class="line"> - 把store的state映射为属性(property)，传递给Gallery.</div><div class="line"> - 映射一个动作创建器,Gallery可以简单的调用`selectImage(image)`,分发动作,应用状态将会更新.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">那么，我们怎么才能使用这些模式从远程资源加载数据呢？</div><div class="line"></div><div class="line">这个过程将会非常有趣!</div><div class="line"></div><div class="line">####异步活动？</div><div class="line"></div><div class="line">---</div><div class="line">你可能在参加函数式编程的时候听说过”副作用”(side effects)这个名词,side effects是发生在应用的范围之外的东西.在我们舒适的肥皂泡里,side effect根本不是问题,但是当我们要到达一个远程资源,肥皂泡就被穿透了.有些事情我们就控制不了了,我们必须接受这个事实.(根据这段话，side effect 翻译为意想不到的事情，出乎意料的不受控制的事情更好)</div><div class="line"></div><div class="line">在Redux里,reducer没有Side effects.这意味着reducers不处理我们应用中的异步活动.我们不能使用reducers加载远程数据,因为reducers是纯函数,没有side effects.</div><div class="line"></div><div class="line">Redux很棒,如果你的应用里没有任何异步活动，你可以停下来,不用再往下看了.</div><div class="line">如果你创建的应用比较大,可能你会从服务端加载数据,这时,当然要使用异步方式.</div><div class="line"></div><div class="line">&gt;**注意**： Redux其中一个最酷的地方是他非常小巧.他试图解决有限范围内的问题.大多数的应用需要解决很多问题!万幸,Reduc提供中间件概念,中间件存在于action-&gt;reducer-&gt;store的三角关系中,通过中间件的方式,可以导入诸如远程数据异步加载类似的功能.</div><div class="line"></div><div class="line"></div><div class="line">其中一个方法是使用`thunks`对象,在Redux中有 redux-thunk 中间件.Thunks非常厉害，但是可能会导致actions的序列很复杂,测试起来也是很大的挑战.</div><div class="line"></div><div class="line">考虑到我们的 图片浏览程序.当应用加载是,需要做:</div><div class="line">- 从服务器请求图片数组</div><div class="line">- 当图片加载完毕,显示提示消息</div><div class="line">- 当远程数据返回以后,选择初始图片显示</div><div class="line">- 处理可能出现的错误</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">这些事件都要在用户点击应用里的任何元素之前完成!</div><div class="line">我们该怎么做呢？</div><div class="line">redux-saga就是为此而诞生,为我们的应用提供绝佳的服务.</div><div class="line"></div><div class="line">redux-sage</div><div class="line">___</div><div class="line">redux-sage可以在Redux应用中操作异步actions.他提供中间件和趁手的方法使构建复杂的异步操作流程轻而易举.</div><div class="line"></div><div class="line">一个saga是一个Generator(生成器),Generator函数是ES2015新添加的特性.可能是你第一次遇到Generator函数,这样你会觉得有点古怪,可以参考(ruanyifeng文章).不要苦恼，如果你对此仍然很抓耳挠腮.使用redux-sage你不需要javascript异步编程的博士学位.</div><div class="line"></div><div class="line">因为使用了generators的缘故,我们能创建一个顺序执行的命令序列，用来描述复杂的异步操作流程(workflows).整个图片的加载流程序列如下：</div></pre></td></tr></table></figure></p>
<p>   export function* loadImages() {<br>  try {<br>    const images = yield call(fetchImages);<br>    yield put({type: ‘IMAGES_LOADED’, images})<br>    yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>  } catch(error) {<br>    yield put({type: ‘IMAGE_LOAD_FAILURE’, error})<br>  }<br>}</p>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield call(loadImages);<br>  }<br>}<br>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   ___</div><div class="line">   </div><div class="line">####第一个saga</div><div class="line"></div><div class="line">我们将开始一个简单的saga实例,然后配置他连接到我们的应用.在`src`创建一个文件</div><div class="line">`saga.js`</div></pre></td></tr></table></figure></p>
<p>   export function* sayHello() {<br>  console.log(‘hello’);<br>}<br>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">我们的saga是一个简单的generator函数.函数后面的`*`作为标志,他也被叫做”super star”.</div><div class="line"></div><div class="line">现在在`main.js`文件中导入新函数,并且执行他.</div></pre></td></tr></table></figure></p>
<p>  import “babel-polyfill”;</p>
<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>
<p>import Gallery from ‘./Gallery’;</p>
<p>import { createStore } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>
<p>+import {sayHello} from ‘./sagas’;<br>+sayHello();</p>
<p>const store = createStore(reducer);</p>
<p>ReactDOM.render(<br>  <provider store="{store}"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line">不管你盯住终端多长时间,“hello”永远不会出现.</div><div class="line">这是因为`sayHello`是一个generator！Generator 不会立即执行.如果你把代码该为`sayHello().next();`你的“hello”就出现了.不用担心,我们不会总是调用`next`.正如Redux,redux-saga用来消除应用开发中的痛苦.</div><div class="line"></div><div class="line">配置 redux-sage</div><div class="line">___</div></pre></td></tr></table></figure></p>
<p>   import “babel-polyfill”;</p>
<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>
<p>import Gallery from ‘./Gallery’;</p>
<p>-import { createStore } from ‘redux’<br>+import { createStore, applyMiddleware } from ‘redux’<br>+import createSagaMiddleware from ‘redux-saga’<br>import {Provider} from ‘react-redux’;<br>import reducer from ‘./reducer’</p>
<p>import {sayHello} from ‘./sagas’;<br>-sayHello()</p>
<p>-const store = createStore(reducer);<br>+const store = createStore(</p>
<ul>
<li>reducer,</li>
<li>applyMiddleware(createSagaMiddleware(sayHello))<br>+);</li>
</ul>
<p>ReactDOM.render(<br>  <provider store="{store}"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  ___</div><div class="line">  我们已从Redux导入了`applyMiddleware`函数.从redux-saga导入`createSagaMiddleware`函数.当我们创建store的时候,我们需要通过中间件提供Redux需要的功能.在这个实例中,我们会调用`applyMiddleware`函数,这个函数返回`createSagaMiddleware(sayHello)`的结果.在幕后,redux-saga加载`sayHello`函数,仪式性的调用`next`函数.</div><div class="line">  </div><div class="line">  应该可以在终端中看到提示消息了.</div><div class="line">  现在让我们构建加载图片的saga</div><div class="line">  </div><div class="line">####通过Saga加载图片数据</div><div class="line">___</div><div class="line">我们将删除出sayHello saga,使用`loadImages` saga</div></pre></td></tr></table></figure></p>
<p>  -export function* sayHello() {</p>
<ul>
<li>console.log(‘hello’);<br>-}</li>
</ul>
<p>+export function* loadImages() {</p>
<ul>
<li>console.log(‘load some images please’)<br>+}<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">不要忘了更新`main.js`</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import “babel-polyfill”;</p>
<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>
<p>import Gallery from ‘./Gallery’;</p>
<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>
<p>-import {sayHello} from ‘./sagas’;<br>+import {loadImages} from ‘./sagas’;</p>
<p>const store = createStore(<br>  reducer,</p>
<ul>
<li>applyMiddleware(createSagaMiddleware(sayHello))</li>
</ul>
<ul>
<li>applyMiddleware(createSagaMiddleware(loadImages))<br>);</li>
</ul>
<p>ReactDOM.render(<br>  <provider store="{store}"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br>  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">现在saga已经加载,在`saga.js`中添加`fetchImages`方法</div></pre></td></tr></table></figure></p>
<pre><code>const API_KEY = &apos;a46a979f39c49975dbdd23b378e6d3d5&apos;;
</code></pre><p>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>
<p>const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href="https://farm${farm}.staticflickr.com/${server}/${id}" target="_blank" rel="external">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};</p>
<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br>   <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line"></div><div class="line"> `fetchImages`方法返回一个promise对象.我们将调用`fetchImages`,但是现在我们要使用`yield`关键字.通过黑暗艺术和巫术,generators理解Promise对象,正如终端输出的日志显示,我们已经收获了一个图片URLs的数组.看看`loadImages`的代码,他看起来像是典型的同步操作代码.`yield`关键字是秘制调味酱,让我们的代码用同步格式执行异步操作活动.</div><div class="line"> ___</div><div class="line"> </div><div class="line"> ####封装我们的异步API请求.</div><div class="line"> </div><div class="line"> 首先来定义一下需要使用的api.他没有什么特殊的地方,实际上他和早先加载Flickr images的代码是相同的.我们创建`flickr.js`文件</div></pre></td></tr></table></figure></p>
<p>   const API_KEY = ‘a46a979f39c49975dbdd23b378e6d3d5’;<br>const API_ENDPOINT = <code>https://api.flickr.com/services/rest/?method=flickr.interestingness.getList&amp;api_key=${API_KEY}&amp;format=json&amp;nojsoncallback=1&amp;per_page=5</code>;</p>
<p>export const fetchImages = () =&gt; {<br>  return fetch(API<em>ENDPOINT).then(function (response) {<br>    return response.json().then(function (json) {<br>      return json.photos.photo.map(<br>        ({farm, server, id, secret}) =&gt; `<a href="https://farm${farm}.staticflickr.com/${server}/${id}" target="_blank" rel="external">https://farm${farm}.staticflickr.com/${server}/${id}</a></em>${secret}.jpg`<br>      );<br>    })<br>  })<br>};<br> <figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ___</div><div class="line"> </div><div class="line"></div><div class="line">严格意义上来说,不需要这么做,但是这会带来一定的好处.我们处在应用的边缘(boundaries <span class="keyword">of</span> our application,意思是说在这里的代码可能是很多和远程服务器交互的代码，可能逻辑会很复杂),事情都有点乱.通过封装和远程API交互的逻辑,我们的代码将会很整洁,很容易更新.如果需要抹掉图片服务也会出奇的简单.</div><div class="line"></div><div class="line">我们的`saga.js`看起来是这个样子：</div></pre></td></tr></table></figure></p>
<p>  import {fetchImages} from ‘./flickr’;</p>
<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  console.log(images)<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">我们仍然需要在saga外获取数据,并且进入应用的state(使用异步获取的远程数据更新state).为了处理这个问题,我们将使用”effects”.</div><div class="line"></div><div class="line">####从saga来更新应用</div><div class="line"></div><div class="line">我们可以通过`dispatch`或者store作为参数来调用saga,但是这个方法时间一长就会给人造成些许的困扰.我们选择采用redux-saga提供的`put`方法.</div><div class="line">首先我们更新`reducer.js`操作一个新的action类型`IMAGES_LOADED`.</div></pre></td></tr></table></figure></p>
<p>const defaultState = {</p>
<ul>
<li>images: []<br>}</li>
</ul>
<p>export default function images(state = defaultState, action) {<br>  switch(action.type) {<br>    case ‘IMAGE_SELECTED’:<br>      return {…state, selectedImage: action.image};</p>
<ul>
<li>case ‘IMAGES_LOADED’:</li>
<li><p>return {…state, images: action.images};<br>default:<br>return state;<br>}<br>}     </p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">___</div><div class="line">我们添加了新的分支,并从`<span class="keyword">default</span>State`中删除了硬编码的URLs数据.`IMAGES_LOADED`分支现在返回一个更新的<span class="keyword">state</span>,包含action的image数据.</div><div class="line">下一步我们更新saga:</div></pre></td></tr></table></figure>
<p>import {fetchImages} from ‘./flickr’;<br>+import {put} from ‘redux-saga/effects’;</p>
</li>
</ul>
<p>export function* loadImages() {<br>  const images = yield fetchImages();</p>
<ul>
<li>yield put({type: ‘IMAGES_LOADED’, images})<br>}<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line"></div><div class="line">导入`put`以后,我们在`loadImages`添加另外一行.他`yield` `put`函数调用的返回结果.在幕后,redux-saga 分发这些动作,reducer接收到了消息!</div><div class="line">	   怎样才能使用特定类型的action来触发一个saga?</div><div class="line">	   </div><div class="line">####使用actions来触发saga工作流</div><div class="line">___</div><div class="line">Sagas变得越来越有用,因为我们有能力使用redux actions来触发工作流.当我们这样做,saga会在我们的应用中表现出更大的能力.首先我们创建一个新的saga.`watchForLoadImages`.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import {fetchImages} from ‘./flickr’;<br>-import {put} from ‘redux-saga/effects’;<br>+import {put, take} from ‘redux-saga/effects’;</p>
<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})<br>}</p>
<p>+export function* watchForLoadImages() {</p>
<ul>
<li>while(true) {</li>
<li>yield take(‘LOAD_IMAGES’);</li>
<li>yield loadImages();</li>
<li>}<br>+}   <figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">  ___</div><div class="line">新的saga使用的是<span class="keyword">while</span>来保持一直激活和等待调用状态.在循环的内部,我们生成(<span class="keyword">yield</span>)一个redux<span class="params">-sage</span>调用方法:<span class="string">`take`</span>.<span class="keyword">Take</span>方法监听任何类型的actions,他也会使saga接受下一个<span class="keyword">yield</span>.在上面的例子中我们调用了一个方法<span class="string">`loadImages`</span>,初始化图片加载.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import “babel-polyfill”;</p>
<p>import React from ‘react’;<br>import ReactDOM from ‘react-dom’;</p>
<p>import Gallery from ‘./Gallery’;</p>
<p>import { createStore, applyMiddleware } from ‘redux’<br>import {Provider} from ‘react-redux’;<br>import createSagaMiddleware from ‘redux-saga’<br>import reducer from ‘./reducer’</p>
<p>-import {loadImages} from ‘./sagas’;<br>+import {loadImages} from ‘./watchForLoadImages’;</p>
<p>const store = createStore(<br>  reducer,</p>
<ul>
<li>applyMiddleware(createSagaMiddleware(loadImages))</li>
</ul>
<ul>
<li>applyMiddleware(createSagaMiddleware(watchForLoadImages))<br>);</li>
</ul>
<p>ReactDOM.render(<br>  <provider store="{store}"><br>    <gallery><br>  </gallery></provider>,<br>  document.getElementById(‘root’)<br>);<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">更新了`main.js`以后,应用不再加载图片,我们需要在action creators中添加`loadImages`的`action`.</div></pre></td></tr></table></figure></p>
<p>export const IMAGE_SELECTED = ‘IMAGE_SELECTED’;<br>+const LOAD_IMAGES = ‘LOAD_IMAGES’;</p>
<p>export function selectImage(image) {<br>  return {<br>    type: IMAGE_SELECTED,<br>    image<br>  }<br>}</p>
<p>+export function loadImages() {</p>
<ul>
<li>return {</li>
<li>type: LOAD_IMAGES</li>
<li>}<br>+}<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">因为我们已经绑定了action creators(Action创建器),我们只需要在`Gallery`组件中调用这个action就可以了.</div><div class="line"></div><div class="line">####block(阻塞)和no-blocking(非阻塞)效应</div><div class="line">现在我们的引用工作的足够好了,但是可能还有更多的问题需要考虑.`watchForLoadImages` saga包含 block effects.那么这到底是什么意思呢？这意味着在工作流中我们只能执行一次`LOAD_IMAGES`!在诸如我们现在构建的小型应用一样,这一点不太明显,实际上我们也仅仅加载了一次图片集.</div><div class="line">实际上，普遍的做法是使用`fork` effect 代替  `yield` 来加载图片</div><div class="line">.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>
<ul>
<li>yield loadImages();</li>
</ul>
<ul>
<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">___</div><div class="line">使用`fork`助手(helper)函数,`watchForLoadImages`就变成了非阻塞saga了,再也不用考虑他是不是以前掉用过.redux-sagas 提供两个helpers,`takeEvery`和`takeLastest`（takeEvery监听多次action，不考虑是不是同一种action type,takeLatest只处理同一种action type的最后一次调用）.</div><div class="line">####选择默认的图片</div><div class="line">Sagas按照队列来执行acitons,所以添加更多的saga也很容易.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>
<p>export function* loadImages() {<br>  const images = yield fetchImages();<br>  yield put({type: ‘IMAGES_LOADED’, images})</p>
<ul>
<li>yield put({type: ‘IMAGE_SELECTED’, image: images[0]})<br>}</li>
</ul>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">在 `loadImages`工作流上,我们可以yield put函数调用,action type是`IMAGE_SELECTED`.发送我们选择的图片(在这个例子中，发送的仅仅是图片的url的字符串).</div><div class="line">####错误处理</div><div class="line">如果在saga循环内部出现错误,我们要考虑提醒应用做出合理的回应.所有流程包装到try/catch语句块里就可以实现,捕获错误以后`put`一个提示信息作为`IMAGE_LOAD_FAILURE` action的内容.</div></pre></td></tr></table></figure></p>
<p>import {fetchImages} from ‘./flickr’;<br>import {put, take, fork} from ‘redux-saga/effects’;</p>
<p>export function* loadImages() {</p>
<ul>
<li>try {<br> const images = yield fetchImages();<br> yield put({type: ‘IMAGES_LOADED’, images})<br> yield put({type: ‘IMAGE_SELECTED’, image: images[0]})</li>
<li>} catch(error) {</li>
<li>yield put({type: ‘IMAGE_LOAD_FAILURE’, error})</li>
<li>}<br>}</li>
</ul>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);<br>    yield fork(loadImages);<br>  }<br>}<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">___</span></div><div class="line"><span class="section">####Sagas的测试</span></div><div class="line"><span class="emphasis">___</span></div><div class="line">在应用中使用Redux,测试变得相当的舒服. 看看我们的[<span class="string">鹅蛋头系列课程</span>](<span class="link">https://egghead.io/series/react-testing-cookbook</span>),可以了解到很多React的测试技术.</div><div class="line">使用Redux-saga在棒的一个方面就是异步代码测试很容易.测试javascript异步代码真是一件苦差事.有了saga,我们不需要跳出引用的核心代码.Saga把javascript的痛点都抹掉了.是不是意味着我们要写更多的测试?对的.</div><div class="line"></div><div class="line">我们会使用<span class="code">`tape`</span>组件,首先做一些配置工作.</div></pre></td></tr></table></figure></p>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<p>  assert.end();<br>});<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">添加所有需要的组件,现在我们添加一个测试.这个测试接收一个名称和一个函数作为形参.在测试的函数体内部代码块,我们创建了一个saga生成器代码实例.在这个实例里面我们尅是测试saga的每一个动作.</div></pre></td></tr></table></figure></p>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<ul>
<li>assert.deepEqual(</li>
<li>generator.next().value,</li>
<li>false,</li>
<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>
<li><p>);</p>
<p>assert.end();<br>});</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">`assert.deepEqual`方法接收两个值,检查一下他们是不是深度相同(js对象的概念).第一行代码是`generator.next().value`的调用,这个调用使生成器从暂停中恢复,得到值.下一个值单单是一个`false`.我想看到他失败,最后一个参数描述了测试期待的行为.</div><div class="line">在项目文件夹中命令行运行`npm test`看看结果:</div></pre></td></tr></table></figure>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
</li>
</ul>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<ul>
<li>assert.deepEqual(</li>
<li>generator.next().value,</li>
<li>false,</li>
<li>‘watchForLoadImages should be waiting for LOAD_IMAGES action’</li>
<li><p>);</p>
<p>assert.end();<br>});</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">测试结果和预期的一样失败,结果有点意思.实际的结论是`&#123;TAKE:<span class="string">'LOAD_IMAGES'</span>&#125;`,这是我们调用`take(<span class="string">'LOAD_IMAGES'</span>)`受到的结果.实际上,我们的saga’可以yield一个对象来代替调用`take`.但是`take`添加了一些代码,让我们少敲些代码.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<p>  assert.deepEqual(<br>    generator.next().value,</p>
<ul>
<li>false</li>
</ul>
<ul>
<li><p>take(‘LOAD_IMAGES’),<br>‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>);</p>
<p>assert.end();<br>});</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">我们简单的调用`take`函数,就可以得到期待的结果了.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>
<ul>
<li>assert.deepEqual(</li>
<li>gen.next().value,</li>
<li>false,</li>
<li>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’</li>
<li><p>);</p>
<p>assert.end();<br>});</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">下一个测试使我们确信`loadImages`saga在流程的下一个阶段会被自动调用.</div><div class="line">我们需要一个 false来检查结果.</div><div class="line">更新一下saga代码,yield一个`loadImages` saga:</div></pre></td></tr></table></figure>
</li>
</ul>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>
<ul>
<li>yield loadImages();</li>
</ul>
<ul>
<li>yield fork(loadImages); //be sure to import it!<br>}<br>}<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">___</span></div><div class="line">现在运行测试,将会看到下面结果：</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received"><a href="#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received" class="headerlink" title="✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { _invoke: [Function: invoke] }<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">哼！`&#123; _invoke: [Function: invoke] &#125;`绝对不是我们yield take想要的结果.</div><div class="line">有问题.幸运的是redux-saga可以使用诸如`fork`一样的`effects`来解决这个问题.`fork`,`take`和其他的effect方法返容易满足测试要求的简单对象.这些effects返回的对象是一个指导redux-saga进行任务执行的集合.这一点对于测试来说非常的优雅,因为我们不用担心类似远程服务请求的副作用.有了redux-saga,我们把注意点放到请求执行的命令上.</div><div class="line">下面让我们更新一下saga,再一次使用`fork`.</div></pre></td></tr></table></figure></p>
<p>export function* watchForLoadImages() {<br>  while(true) {<br>    yield take(‘LOAD_IMAGES’);</p>
<ul>
<li>yield loadImages();</li>
</ul>
<ul>
<li><p>yield fork(loadImages);</p>
<p>}<br>}</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">___</div><div class="line">这里使用`yield fork(loadImages)`直接代替`loadImages`.需要注意的是我们还没有执行`loadImages`,而是作为参数传递给`fork`.</div><div class="line">再次运行`npm test`.</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1"><a href="#✖-watchForLoadImages-should-call-loadImages-after-LOAD-IMAGES-action-is-received-1" class="headerlink" title="✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received"></a>✖ watchForLoadImages should call loadImages after LOAD_IMAGES action is received</h2><p>  operator: deepEqual<br>  expected: |-<br>    false<br>  actual: |-<br>    { FORK: { args: [], context: null, fn: [Function: loadImages] } }<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">结果得到了一个单纯对象而不是一个函数调用.函数在浏览器端也同时加载了,但是我们现在可以轻松的在saga 工作流里测试这个步骤.</div></pre></td></tr></table></figure></p>
<p>import test from ‘tape’;<br>import {put, take} from ‘redux-saga/effects’<br>import {watchForLoadImages, loadImages} from ‘./sagas’;<br>import {fetchImages} from ‘./flickr’;</p>
<p>test(‘watchForLoadImages’, assert =&gt; {<br>  const generator = watchForLoadImages();</p>
<p>  assert.deepEqual(<br>    generator.next().value,<br>    take(‘LOAD_IMAGES’),<br>    ‘watchForLoadImages should be waiting for LOAD_IMAGES action’<br>  );</p>
<p>  assert.deepEqual(<br>    generator.next().value,</p>
<ul>
<li>false,</li>
</ul>
<ul>
<li><p>yield fork(loadImages),<br>‘watchForLoadImages should call loadImages after LOAD_IMAGES action is received’<br>);</p>
<p>assert.end();<br>});</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">___</div><div class="line">测试`loadImages`saga是一样的,只需要把`yield fetchImages`更新为`yield fork(fetchImages)`.</div></pre></td></tr></table></figure>
</li>
</ul>
<p>test(‘loadImages’, assert =&gt; {<br>  const gen = loadImages();</p>
<p>  assert.deepEqual(<br>    gen.next().value,<br>    call(fetchImages),<br>    ‘loadImages should call the fetchImages api’<br>  );</p>
<p>  const images = [0];</p>
<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGES_LOADED’, images}),<br>    ‘loadImages should dispatch an IMAGES_LOADED action with the images’<br>  );</p>
<p>  assert.deepEqual(<br>    gen.next(images).value,<br>    put({type: ‘IMAGE_SELECTED’, image: images[0]}),<br>    ‘loadImages should dispatch an IMAGE_SELECTED action with the first image’<br>  );</p>
<p>  const error = ‘error’;</p>
<p>  assert.deepEqual(<br>    gen.throw(error).value,<br>    put({type: ‘IMAGE_LOAD_FAILURE’, error}),<br>    ‘loadImages should dispatch an IMAGE_LOAD_FAILURE if an error is thrown’<br>  );</p>
<p>  assert.end();<br>});<br>```</p>
<hr>
<p>特别注意最后一个<code>assert</code>.这个断言测试使用异常捕获代替生成器函数的next方法.另一个非常酷的地方是：可以传值.注意看代码,我们创建了<code>images</code>常量,并且传递到next函数.saga可以在接下来的任务序列中使用传递的值.<br> 太棒了,这种方法是测试异步编程的程序员梦寐以求的技术.</p>
<p> #####接下来做什么？</p>
<hr>
<p> 你可以<a href="https://github.com/joelhooks/egghead-react-redux-image-gallery" target="_blank" rel="external">fork一下这个例子的代码</a>.</p>
<p> 如果你想扩充这个应用,可以做一下几个方面的工作.</p>
<ul>
<li>做一个幻灯显示下一张要显示的图片</li>
<li>允许使用者搜索Flickr图片</li>
<li>添加其他提供图片的API</li>
<li>允许用户选择喜欢的API进行搜索.</li>
</ul>
<p>我们仅仅和生成器碰了一下面,但是即便如此,希望在联合使用redux-saga library,Redux和React的时候给你一些帮助.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看到这篇文章&lt;a href=&quot;http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-使用React构建你的App</title>
    <link href="http://yoursite.com/2017/03/12/%E7%BF%BB%E8%AF%91-%E4%BD%BF%E7%94%A8React%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84App/"/>
    <id>http://yoursite.com/2017/03/12/翻译-使用React构建你的App/</id>
    <published>2017-03-12T00:04:10.000Z</published>
    <updated>2017-03-23T08:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章时间有点久远,翻译试试看.但是本篇文章对于React的渲染工作原理讲的比较好,使用一个游戏引擎的渲染方式来类比解释React的数据流程,值得学习. <a href="http://konkle.us/architecting-your-app-react-part-1/" target="_blank" rel="external">原文在这里</a></p>
</blockquote>
<p>去年五月(2013年5月),Facebook发布了构建前端组件库的开源软件-React.React对于浏览器和app的结构来说有点异类.但是经过这段时间,开发者逐渐看到了一些优势,React也因此获取了很多的人气.React最为相助的额特征是引入了virtual-DOM方法,virtual-DOM使实际的浏览器的DOM变化减到最低,DOM的渲染性能大幅提高.</p>
<p>React并不是完整的MVC框架,React实际是MVC的加强版(这点,真是雪中送炭,一直都对这个框架到底是不是MVC而心存疑虑).很多开发者选择React作为MVC框架的延伸,例如Backbone.React本身并没有路由和数据同步的内容,所以你可以很容易的使用喜欢的工具来完成类似的功能.React也可以在其他的应用中管理一部分特定的组件.但是如果在应用的界面上全面使用React,发挥的功能会更大.</p>
<p>#####尽可能的避免DOM<br>React作为javascript的一个类,提供virtual-DOM实施方案.这意味着你可以频繁的更新你的应用程序的元素树,但是实际上没有发生浏览器的DOM操作.由于使用了现代的引擎,Javascript的速度相当快.实际由于引擎的速度很快,当每一次数据更新的时候,渲染应用程序的所有元素都是可以的,减少了实时元素操作和双向数据绑定的需求.React周期性的比较virtual-DOM和浏览器DOM,仅仅做出最有必要的DOM同步.</p>
<p>#####单向数据流<br>当HTML元素的渲染花销大幅度降低以后,你现在需要花费更多的的方法来管理你的界面.放弃错综复杂的就地更新元素操作和数据变化中的的多个state的同步,你可以把状态放在一个地方,基于集中的state来描述你的界面.只要状态以改变,React的组件就可以进行更新操作.<br>当你的整个应用都基于这个思想来设计,你可以把immutable 数据从顶层组件传递给子组件,然后执行自顶向下的应用更新.React从根本上改变了你对应用的思路,而且经常会简化应用的设计.</p>
<p>#####浏览器作为渲染引擎<br>这一点是对MVC框架非常激进的改变,它强调使用双向数据绑定,尽可能多自动就地重新渲染.当我刚开始了解React的时候,我还不是太确定.转折点是我看了一个Pete Hunt的视频:比较React和Doom3渲染引擎.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a1553d287e86aebb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="doom3的渲染示意图"><br>在图表中,游戏的sate经过底层的图形代码导入前端逻辑和抽象层.这个操作会创建一个“场景中间表示层”(scene intermediate representation),这个表示层表现出用户应该看到的内容.这个表示层会传递给”backend”(后端),后端接收表示层内容,随之转换为OpenGL操作,OpenGL使用图形卡(电脑显卡)渲染出内容.React的工作原理和Doom3的渲染方式是一样的.(doom3是早期一款比较著名的第一人称射击游戏,这里使用doom3的图形渲染方式来说明React的工作方式).</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-73a98731bc9d6411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="React组件渲染"></p>
<p>当程序的state由于浏览器或者实时事件发生变化,React程序接收这些变化,并且传递给组件们,接着使用virtual-DOM方式生成中间表示层.浏览器的DOM并不会发生立即的变化.然而React会周期性的接收virtual DOM,计算出必要的DOM操作.这一点和游戏引擎接受场景中间表示层,决定是否使用OpenGL渲染场景类似.React是接收DOM,把它渲染到用户屏幕上.(可见两者渲染的思路是一样的,React使用了浏览器来做这个工作).</p>
<p>浏览器和游戏引擎一样,最慢的部分实际是中间表示层到屏幕的渲染部分.你可以对virtual-DOM做出许多细小的改变,React优化了这个部分,所以不会因此而牺牲渲染的性能.</p>
<p>#####更多的资源<br>在第二部分,我将会演示怎么把React的设计哲学付诸实践.我会分享怎么更具不同的功能责任,渲染一个由小组件组成的顶级组件的界面.我也会演示怎么在React应用中整合路由功能和数据同步功能.</p>
<p>如果你想了解更多的React内容,想知道它是怎么工作的,看看下面的资源列表.</p>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">React主页</a></li>
<li><a href="http://facebook.github.io/react/docs/videos.html" target="_blank" rel="external">视频</a></li>
<li><a href="http://facebook.github.io/react/docs/examples.html" target="_blank" rel="external">实例</a></li>
<li><a href="https://groups.google.com/forum/#!forum/reactjs" target="_blank" rel="external">React Google Group</a></li>
<li>#reactjs on Freenode-官方 IRC频道,比较活跃</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章时间有点久远,翻译试试看.但是本篇文章对于React的渲染工作原理讲的比较好,使用一个游戏引擎的渲染方式来类比解释React的数据流程,值得学习. &lt;a href=&quot;http://konkle.us/architecting-your-ap
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-Redux的中间件-Reselect</title>
    <link href="http://yoursite.com/2017/03/09/%E7%BF%BB%E8%AF%91-Redux%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6-Reselect/"/>
    <id>http://yoursite.com/2017/03/09/翻译-Redux的中间件-Reselect/</id>
    <published>2017-03-09T00:04:10.000Z</published>
    <updated>2017-03-23T08:54:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>本文是翻译Redux的一个中间件文档.Redux是React的一个数据层,React组件的state有关逻辑处理都被单独放到Redux中来进行,在state的操作流程中衍生了很多中间件,Reselect这个中间件要解决的问题是:`在组件交互操作的时候,state发生变化的时候如何减少渲染的压力.在Reselect中间中使用了缓存机制,这个机制可以在javascript的模式设计中刚看到介绍,这里就不详细说了.</strong>仅供参考,以原文为准.</p>
<hr>
<p>一旦redux从react的数据层来理解，很多问题都似乎找到了理论依据，所谓名正言顺。在web框架中都会用数据库做数据持久层，在查表的时候会为了效率做缓存，reselect是同样的目的。React的组件有自己的特殊性，遇到特殊的特性的时候需要有特殊的处理<br>方法.</p>
</blockquote>
<p>以下是译文内容,<a href="https://github.com/reactjs/reselect" target="_blank" rel="external">原文请参见</a></p>
<hr>
<blockquote>
<p>“selector”是一个简单的Redux库,灵感来源于<code>NuclearJS</code>.</p>
<ul>
<li>Selector可以计算衍生的数据,可以让Redux做到存储尽可能少的state。</li>
<li>Selector比较高效,只有在某个参数发生变化的时候才发生计算过程.</li>
<li>Selector是可以组合的,他们可以作为输入,传递到其他的selector.</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个例子不必太在意,后面会有详细的介绍</span></div><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> shopItemsSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.items</div><div class="line"><span class="keyword">const</span> taxPercentSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.shop.taxPercent</div><div class="line"></div><div class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</div><div class="line">  shopItemsSelector,</div><div class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> taxSelector = createSelector(</div><div class="line">  subtotalSelector,</div><div class="line">  taxPercentSelector,</div><div class="line">  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / <span class="number">100</span>)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> totalSelector = createSelector(</div><div class="line">  subtotalSelector,</div><div class="line">  taxSelector,</div><div class="line">  (subtotal, tax) =&gt; (&#123; <span class="attr">total</span>: subtotal + tax &#125;)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">let</span> exampleState = &#123;</div><div class="line">  <span class="attr">shop</span>: &#123;</div><div class="line">    <span class="attr">taxPercent</span>: <span class="number">8</span>,</div><div class="line">    <span class="attr">items</span>: [</div><div class="line">      &#123; <span class="attr">name</span>: <span class="string">'apple'</span>, <span class="attr">value</span>: <span class="number">1.20</span> &#125;,</div><div class="line">      &#123; <span class="attr">name</span>: <span class="string">'orange'</span>, <span class="attr">value</span>: <span class="number">0.95</span> &#125;,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(subtotalSelector(exampleState)) <span class="comment">// 2.15</span></div><div class="line"><span class="built_in">console</span>.log(taxSelector(exampleState))      <span class="comment">// 0.172</span></div><div class="line"><span class="built_in">console</span>.log(totalSelector(exampleState))    <span class="comment">// &#123; total: 2.322 &#125;</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#安装">Installation</a></li>
<li><a href="#实例">实例</a><ul>
<li><a href="#motivation-for-memoized-selectors">Motivation for Memoized Selectors</a></li>
<li><a href="#creating-a-memoized-selector">Creating a Memoized Selector</a></li>
<li><a href="#composing-selectors">Composing Selectors</a></li>
<li><a href="#connecting-a-selector-to-the-redux-store">Connecting a Selector to the Redux Store</a></li>
<li><a href="#accessing-react-props-in-selectors">Accessing React Props in Selectors</a></li>
<li><a href="#sharing-selectors-with-props-across-multiple-components">Sharing Selectors with Props Across Multiple Components</a></li>
</ul>
</li>
<li><a href="#api">API</a><ul>
<li><a href="#createselectorinputselectors--inputselectors-resultfunc"><code>createSelector</code></a></li>
<li><a href="#defaultmemoizefunc-equalitycheck--defaultequalitycheck"><code>defaultMemoize</code></a></li>
<li><a href="#createselectorcreatormemoize-memoizeoptions"><code>createSelectorCreator</code></a></li>
<li><a href="#createstructuredselectorinputselectors-selectorcreator--createselector"><code>createStructuredSelector</code></a></li>
</ul>
</li>
<li><p><a href="#faq">FAQ</a></p>
<ul>
<li><a href="#q-why-isnt-my-selector-recomputing-when-the-input-state-changes">Why isn’t my selector recomputing when the input state changes?</a></li>
<li><a href="#q-why-is-my-selector-recomputing-when-the-input-state-stays-the-same">Why is my selector recomputing when the input state stays the same?</a></li>
<li><a href="#q-can-i-use-reselect-without-redux">Can I use Reselect without Redux?</a></li>
<li><a href="#q-the-default-memoization-function-is-no-good-can-i-use-a-different-one">The default memoization function is no good, can I use a different one?</a></li>
<li><a href="#q-how-do-i-test-a-selector">How do I test a selector?</a></li>
<li><a href="#q-how-do-i-create-a-selector-that-takes-an-argument">How do I create a selector that takes an argument? </a></li>
<li><a href="#q-how-do-i-use-reselect-with-immutablejs">How do I use Reselect with Immutable.js?</a></li>
<li><a href="#q-can-i-share-a-selector-across-multiple-components">Can I share a selector across multiple components?</a></li>
<li><a href="#q-are-there-typescript-typings">Are there TypeScript typings?</a></li>
<li><a href="#q-how-can-i-make-a-curried-selector">How can I make a curried selector?</a></li>
</ul>
</li>
<li><p><a href="#related-projects">Related Projects</a></p>
</li>
<li><a href="#license">License</a><br>##安装<br><code>npm install reselect</code></li>
</ul>
<p>##实例</p>
<p>###缓存Selcectos的动机</p>
<blockquote>
<p>实例是基于 <a href="http://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="external">Redux Todos List example</a>.</p>
</blockquote>
<h4 id="containers-VisibleTodoList-js"><a href="#containers-VisibleTodoList-js" class="headerlink" title="containers/VisibleTodoList.js"></a><code>containers/VisibleTodoList.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span></div><div class="line"></div><div class="line"><span class="comment">//下面这段代码是根据过滤器的state来改变日程state的函数</span></div><div class="line"><span class="keyword">const</span> getVisibleTodos = <span class="function">(<span class="params">todos, filter</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">switch</span> (filter) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</div><div class="line">      <span class="keyword">return</span> todos</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">      <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">//todos是根据过滤函数返回的state，传入两个实参</span></div><div class="line">    todos: getVisibleTodos(state.todos, state.visibilityFilter)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//mapDispatchToProps来传递dispatch的方法</span></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">onTodoClick</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</div><div class="line">      dispatch(toggleTodo(id))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用Redux的connect函数注入state,到TodoList组件</span></div><div class="line"><span class="keyword">const</span> VisibleTodoList = connect(</div><div class="line">  mapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(TodoList)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> VisibleTodoList</div></pre></td></tr></table></figure>
<hr>
<p>在上面的例子中,<code>mapStateToProps</code>调用<code>getVisibleTodos</code>去计算<code>todos</code>.这个函数设计的是相当好的,但是有个缺点：<code>todos</code>在每一次组件更新的时候都会重新计算.如果state树的结构比较大,或者计算比较昂贵,每一次组件更新的时候都进行计算的话,将会导致性能问题.<code>Reselect</code>能够帮助redux来避免不必要的重新计算过程.</p>
<p>###创建一个缓存Selector<br>我们可以使用记忆缓存selector代替<code>getVisibleTodos</code>,如果<code>state.todos</code>和<code>state.visibilityFilter</code>发生变化,他会重新计算<code>state</code>,但是发生在其他部分的state变化,就不会重新计算.</p>
<p>Reslect提供一个函数<code>createSelector</code>来创建一个记忆selectors.<code>createSelector</code>接受一个<code>input-selectors</code>和一个变换函数作为参数.如果Redux的state发生改变造成<code>input-selector</code>的值发生改变,selector会调用变换函数,依据<code>input-selector</code>做参数,返回一个结果.如果<code>input-selector</code>返回的结果和前面的一样,那么就会直接返回有关state,会省略变换函数的调用.</p>
<p>下面我们定义一个记忆selector<code>getVisibleTodos</code>替代非记忆的版本</p>
<h4 id="selectors-index-js"><a href="#selectors-index-js" class="headerlink" title="selectors/index.js"></a><code>selectors/index.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> getVisibilityFilter = <span class="function">(<span class="params">state</span>) =&gt;</span> state.visibilityFilter</div><div class="line"><span class="keyword">const</span> getTodos = <span class="function">(<span class="params">state</span>) =&gt;</span> state.todos</div><div class="line"><span class="comment">//下面的函数是经过包装的</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getVisibleTodos = createSelector(</div><div class="line">  [ getVisibilityFilter, getTodos ],</div><div class="line">  (visibilityFilter, todos) =&gt; &#123;</div><div class="line">    <span class="keyword">switch</span> (visibilityFilter) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'SHOW_ALL'</span>:</div><div class="line">        <span class="keyword">return</span> todos</div><div class="line">      <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">        <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.completed)</div><div class="line">      <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">        <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.completed)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>上面的的实例中,<code>getVisibilityfilter</code>和<code>getTodos</code>是input-selectors.这两个函数是普通的非记忆selector函数,因为他们没有变换他们select的数据.<code>getVisibleTodos</code>另一方面是一个记忆selector.他接收<code>getVisibilityfilter</code>和<code>getTodos</code>作为input-selectors,并且作为一个变换函数计算筛选的todo list.</p>
<p>###聚合selectors</p>
<p>一个记忆性selector本身也可以作为另一个记忆性selector的input-selector.这里<code>getVisibleTodos</code>可以作为input-selector作为关键字筛选的input-selector:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> getKeyword = <span class="function">(<span class="params">state</span>) =&gt;</span> state.keyword</div><div class="line"></div><div class="line"><span class="keyword">const</span> getVisibleTodosFilteredByKeyword = createSelector(</div><div class="line">  [ getVisibleTodos, getKeyword ],</div><div class="line">  (visibleTodos, keyword) =&gt; visibleTodos.filter(</div><div class="line">    <span class="function"><span class="params">todo</span> =&gt;</span> todo.text.indexOf(keyword) &gt; <span class="number">-1</span></div><div class="line">  )</div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p>###连接一个Selector到Redux Store<br>如果你正在使用 <a href="https://github.com/reactjs/react-redux" target="_blank" rel="external">React Redux</a>, 你可以直接传递selector到 <code>mapStateToProps()</code>:</p>
<h4 id="containers-VisibleTodoList-js-1"><a href="#containers-VisibleTodoList-js-1" class="headerlink" title="containers/VisibleTodoList.js"></a><code>containers/VisibleTodoList.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span></div><div class="line"><span class="keyword">import</span> &#123; getVisibleTodos &#125; <span class="keyword">from</span> <span class="string">'../selectors'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">todos</span>: getVisibleTodos(state)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">onTodoClick</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</div><div class="line">      dispatch(toggleTodo(id))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> VisibleTodoList = connect(</div><div class="line">  mapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(TodoList)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> VisibleTodoList</div></pre></td></tr></table></figure>
<hr>
<p>###在React Props中接入Selectors</p>
<blockquote>
<p>这一部分我们假设程序将会有一个扩展,我们允许selector支持多todo List.请注意如果要完全实施这个扩展,reducers,components,actions等等都需要作出改变.这些内容和主题不是太相关,所以这里就省略掉了.</p>
</blockquote>
<p>目前为止,我们仅仅看到selectors接收store的state作为一个参数,其实一个selector叶可以接受props.</p>
<p>这里是一个<code>App</code>组件,渲染出三个<code>VisibleTodoList</code>组件,每一个组件有<code>ListId</code>属性.</p>
<h4 id="components-App-js"><a href="#components-App-js" class="headerlink" title="components/App.js"></a><code>components/App.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span></div><div class="line"><span class="keyword">import</span> AddTodo <span class="keyword">from</span> <span class="string">'../containers/AddTodo'</span></div><div class="line"><span class="keyword">import</span> VisibleTodoList <span class="keyword">from</span> <span class="string">'../containers/VisibleTodoList'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;VisibleTodoList listId="1" /&gt;</div><div class="line">    &lt;VisibleTodoList listId="2" /&gt;</div><div class="line">    &lt;VisibleTodoList listId="3" /&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>每一个<code>VisibleTodoList</code>container应该根据各自的<code>listId</code>属性获取state的不同部分.所以我们修改一下<code>getVisibilityFilter</code>和<code>getTodos</code>,便于接受一个属性参数</p>
<h4 id="selectors-todoSelectors-js"><a href="#selectors-todoSelectors-js" class="headerlink" title="selectors/todoSelectors.js"></a><code>selectors/todoSelectors.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> getVisibilityFilter = <span class="function">(<span class="params">state, props</span>) =&gt;</span></div><div class="line">  state.todoLists[props.listId].visibilityFilter</div><div class="line"></div><div class="line"><span class="keyword">const</span> getTodos = <span class="function">(<span class="params">state, props</span>) =&gt;</span></div><div class="line">  state.todoLists[props.listId].todos <span class="comment">//这里是为二维数组了</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> getVisibleTodos = createSelector(</div><div class="line">  [ getVisibilityFilter, getTodos ],</div><div class="line">  (visibilityFilter, todos) =&gt; &#123;</div><div class="line">    <span class="keyword">switch</span> (visibilityFilter) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">        <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed)</div><div class="line">      <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">        <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.completed)</div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> todos</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> getVisibleTodos</div></pre></td></tr></table></figure>
<hr>
<p><code>props</code>可以从<code>mapStateToProps</code>传递到<code>getVisibleTodos</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">todos</span>: getVisibleTodos(state, props)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>现在<code>getVisibleTodos</code>可以获取<code>props</code>,每一部分似乎都工作的不错.</p>
<p><em>**但是还有个问题</em><br>当<code>getVisibleTodos</code>selector和<code>VisibleTodoList</code>container的多个实例一起工作的时候,记忆功能就不能正常的运行:</p>
<h4 id="containers-VisibleTodoList-js-2"><a href="#containers-VisibleTodoList-js-2" class="headerlink" title="containers/VisibleTodoList.js"></a><code>containers/VisibleTodoList.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span></div><div class="line"><span class="keyword">import</span> &#123; getVisibleTodos &#125; <span class="keyword">from</span> <span class="string">'../selectors'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="comment">// WARNING: THE FOLLOWING SELECTOR DOES NOT CORRECTLY MEMOIZE</span></div><div class="line">    <span class="comment">//⚠️下面的selector不能正确的记忆</span></div><div class="line">    todos: getVisibleTodos(state, props)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">onTodoClick</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</div><div class="line">      dispatch(toggleTodo(id))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> VisibleTodoList = connect(</div><div class="line">  mapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(TodoList)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> VisibleTodoList</div></pre></td></tr></table></figure>
<hr>
<p>使用<code>createSelector</code>创建的selector时候,如果他的参数集合和上一次的参数机会是一样的,仅仅返回缓存的值.如果我们交替渲染<code>&lt;VisibleTodoList listId=&quot;1&quot; /&gt;</code> 和<code>&lt;VisibleTodoList listId=&quot;2&quot; /&gt;</code>时,共享的selector将会交替接受<code>{listId：1}</code>和<code>{listId:2}</code>作为他的props的参数.这将会导致每一次调用的时候的参数都不同,因此selector每次都会重新来计算而不是返回缓存的值.下一部分我们将会介绍怎么解决这个问题.</p>
<p>###跨越多个组件使用selectors共性props</p>
<blockquote>
<p>这一部分的实例需要React Redux v4.3.0或者更高版本的支持.</p>
</blockquote>
<p>在多个<code>VisibleTodoList</code>组件中共享selector,同时还要<strong>保持</strong>记忆性,每一个组件的实例需要他们自己的selector备份.</p>
<p>现在让我们创建一个函数<code>makeGetVisibleTodos</code>,这个函数每次调用的时候返回一个新的<code>getVisibleTodos</code>的拷贝:</p>
<h4 id="selectors-todoSelectors-js-1"><a href="#selectors-todoSelectors-js-1" class="headerlink" title="selectors/todoSelectors.js"></a><code>selectors/todoSelectors.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> getVisibilityFilter = <span class="function">(<span class="params">state, props</span>) =&gt;</span></div><div class="line">  state.todoLists[props.listId].visibilityFilter</div><div class="line"></div><div class="line"><span class="keyword">const</span> getTodos = <span class="function">(<span class="params">state, props</span>) =&gt;</span></div><div class="line">  state.todoLists[props.listId].todos</div><div class="line"></div><div class="line"><span class="keyword">const</span> makeGetVisibleTodos = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> createSelector(</div><div class="line">    [ getVisibilityFilter, getTodos ],</div><div class="line">    (visibilityFilter, todos) =&gt; &#123;</div><div class="line">      <span class="keyword">switch</span> (visibilityFilter) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'SHOW_COMPLETED'</span>:</div><div class="line">          <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed)</div><div class="line">        <span class="keyword">case</span> <span class="string">'SHOW_ACTIVE'</span>:</div><div class="line">          <span class="keyword">return</span> todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.completed)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          <span class="keyword">return</span> todos</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeGetVisibleTodos</div></pre></td></tr></table></figure>
<hr>
<p>我们也需要设置给每一个组件的实例他们各自获取私有的selector方法.<code>mapStateToProps</code>的<code>connect</code>函数可以帮助完成这个功能.</p>
<p><em>**如果<code>mapStateToProps</code>提供给<code>connect</code>不返回一个对象而是一个函数,他就可以被用来为每个组件container创建一个私有的<code>mapStateProps</code>函数.</em></p>
<p>在下面的实例中,<code>mapStateProps</code>创建一个新的<code>getVisibleTodos</code>selector,他返回一个<code>mapStateToProps</code>函数,这个函数能够接入新的selector.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> makeMapStateToProps = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> getVisibleTodos = makeGetVisibleTodos()</div><div class="line">  <span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">todos</span>: getVisibleTodos(state, props)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> mapStateToProps</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>如果我们把<code>makeMapStateToprops</code>传递到<code>connect</code>,每一个<code>visibleTodoList</code>container将会获得各自的含有私有<code>getVisibleTodos</code>selector的<code>mapStateToProps</code>的函数.这样一来记忆就正常了,不管<code>VisibleTodoList</code>containers的渲染顺序怎么样.</p>
<h4 id="containers-VisibleTodoList-js-3"><a href="#containers-VisibleTodoList-js-3" class="headerlink" title="containers/VisibleTodoList.js"></a><code>containers/VisibleTodoList.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"><span class="keyword">import</span> &#123; toggleTodo &#125; <span class="keyword">from</span> <span class="string">'../actions'</span></div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../components/TodoList'</span></div><div class="line"><span class="keyword">import</span> &#123; makeGetVisibleTodos &#125; <span class="keyword">from</span> <span class="string">'../selectors'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> makeMapStateToProps = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> getVisibleTodos = makeGetVisibleTodos()</div><div class="line">  <span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">todos</span>: getVisibleTodos(state, props)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> mapStateToProps</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">onTodoClick</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</div><div class="line">      dispatch(toggleTodo(id))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> VisibleTodoList = connect(</div><div class="line">  makeMapStateToProps,</div><div class="line">  mapDispatchToProps</div><div class="line">)(TodoList)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> VisibleTodoList</div></pre></td></tr></table></figure>
<hr>
<p>##API</p>
<p>###createSelector(…inputSelectors|[inputSelectors],resultFunc)</p>
<p>接受一个或者多个selectors,或者一个selectors数组,计算他们的值并且作为参数传递给<code>resultFunc</code>.</p>
<p><code>createSelector</code>通过判断input-selector之前调用和之后调用的返回值的全等于(===,这个地方英文文献叫reference equality,引用等于,这个单词是本质,中文没有翻译出来).经过<code>createSelector</code>创建的selector应该是immutable(不变的).</p>
<p>经过<code>createSelector</code>创建的Selectors有一个缓存,大小是1.这意味着当一个input-selector变化的时候,他们总是会重新计算state,因为Selector仅仅存储每一个input-selector前一个值.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySelector = createSelector(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.values.value1,</div><div class="line">  state =&gt; state.values.value2,</div><div class="line">  (value1, value2) =&gt; value1 + value2</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// You can also pass an array of selectors</span></div><div class="line"><span class="comment">//可以出传递一个selector数组</span></div><div class="line"><span class="keyword">const</span> totalSelector = createSelector(</div><div class="line">  [</div><div class="line">    <span class="function"><span class="params">state</span> =&gt;</span> state.values.value1,</div><div class="line">    state =&gt; state.values.value2</div><div class="line">  ],</div><div class="line">  (value1, value2) =&gt; value1 + value2</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>在selector内部获取一个组件的props非常有用.当一个selector通过<code>connect</code>函数连接到一个组件上,组件的属性作为第二个参数传递给selector:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> abSelector = <span class="function">(<span class="params">state, props</span>) =&gt;</span> state.a * props.b</div><div class="line"></div><div class="line"><span class="comment">// props only (ignoring state argument)</span></div><div class="line"><span class="keyword">const</span> cSelector =  <span class="function">(<span class="params">_, props</span>) =&gt;</span> props.c</div><div class="line"></div><div class="line"><span class="comment">// state only (props argument omitted as not required)</span></div><div class="line"><span class="keyword">const</span> dSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.d</div><div class="line"></div><div class="line"><span class="keyword">const</span> totalSelector = createSelector(</div><div class="line">  abSelector,</div><div class="line">  cSelector,</div><div class="line">  dSelector,</div><div class="line">  (ab, c, d) =&gt; (&#123;</div><div class="line">    <span class="attr">total</span>: ab + c + d</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p>###defaultMemoize(func, equalityCheck = defaultEqualityCheck)</p>
<p><code>defaultMemoize</code>能记住通过func传递的参数.这是<code>createSelector</code>使用的记忆函数.</p>
<p><code>defaultMemoize</code> 通过调用<code>equalityCheck</code>函数来决定一个参数是否已经发生改变.因为<code>defaultMemoize</code>设计出来就是和immutable数据一起使用,默认的<code>equalityCheck</code>使用引用全等于来判断变化:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultEqualityCheck</span>(<span class="params">currentVal, previousVal</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> currentVal === previousVal</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><code>defaultMemoize</code>和<code>createSelectorCreator</code>去<a href="#配置-equalitycheck-for-defaultmemoize">配置<code>equalityCheck</code>函数</a>.</p>
<p>###createSelectorCreator(memoize,…memoizeOptions)</p>
<p><code>createSelectorCreator</code>用来配置定制版本的<code>createSelector</code>.</p>
<p><code>memoize</code>参数是一个有记忆功能的函数,来代替<code>defaultMemoize</code>.<br><code>…memoizeOption</code>展开的参数是0或者更多的配置选项,这些参数传递给<code>memoizeFunc</code>.selectors<code>resultFunc</code>作为第一个参数传递给<code>memoize</code>,<code>memoizeOptions</code>作为第二个参数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> customSelectorCreator = createSelectorCreator(</div><div class="line">  customMemoize, <span class="comment">// function to be used to memoize resultFunc,记忆resultFunc</span></div><div class="line">  option1, <span class="comment">// option1 will be passed as second argument to customMemoize 第二个惨呼</span></div><div class="line">  option2, <span class="comment">// option2 will be passed as third argument to customMemoize 第三个参数</span></div><div class="line">  option3 <span class="comment">// option3 will be passed as fourth argument to customMemoize   第四个参数</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> customSelector = customSelectorCreator(</div><div class="line">  input1,</div><div class="line">  input2,</div><div class="line">  resultFunc <span class="comment">// resultFunc will be passed as first argument to customMemoize  作为第一个参数传递给customMomize</span></div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>在<code>customSelecotr</code>内部滴啊用memoize的函数的代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">customMemoize(resultFunc, option1, option2, option3)</div></pre></td></tr></table></figure></p>
<hr>
<p>下面是几个可能会用到的<code>createSelectorCreator</code>的实例:</p>
<p>####为<code>defaultMemoize</code>配置<code>equalityCheck</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelectorCreator, defaultMemoize &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'lodash.isEqual'</span></div><div class="line"></div><div class="line"><span class="comment">// create a "selector creator" that uses lodash.isEqual instead of ===</span></div><div class="line"><span class="keyword">const</span> createDeepEqualSelector = createSelectorCreator(</div><div class="line">  defaultMemoize,</div><div class="line">  isEqual</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// use the new "selector creator" to create a selector</span></div><div class="line"><span class="keyword">const</span> mySelector = createDeepEqualSelector(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.values.filter(<span class="function"><span class="params">val</span> =&gt;</span> val &lt; <span class="number">5</span>),</div><div class="line">  values =&gt; values.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>####使用loadsh的memoize函数来缓存未绑定的缓存.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelectorCreator &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"><span class="keyword">import</span> memoize <span class="keyword">from</span> <span class="string">'lodash.memoize'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> called = <span class="number">0</span></div><div class="line"><span class="keyword">const</span> hashFn = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.reduce(</div><div class="line">  <span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + <span class="string">'-'</span> + <span class="built_in">JSON</span>.stringify(val),</div><div class="line">  <span class="string">''</span></div><div class="line">)</div><div class="line"><span class="keyword">const</span> customSelectorCreator = createSelectorCreator(memoize, hashFn)</div><div class="line"><span class="keyword">const</span> selector = customSelectorCreator(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.a,</div><div class="line">  state =&gt; state.b,</div><div class="line">  (a, b) =&gt; &#123;</div><div class="line">    called++</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<h3 id="createStructuredSelector-inputSelectors-selectorCreator-createSelector"><a href="#createStructuredSelector-inputSelectors-selectorCreator-createSelector" class="headerlink" title="createStructuredSelector({inputSelectors}, selectorCreator = createSelector)"></a>createStructuredSelector({inputSelectors}, selectorCreator = createSelector)</h3><p>如果在普通的模式下使用<code>createStructuredSelector</code>函数可以提升便利性.传递到<code>connect</code>的selector装饰者(这是js设计模式的概念,可以参考相关的书籍)接受他的input-selectors,并且在一个对象内映射到一个键上.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySelectorA = <span class="function"><span class="params">state</span> =&gt;</span> state.a</div><div class="line"><span class="keyword">const</span> mySelectorB = <span class="function"><span class="params">state</span> =&gt;</span> state.b</div><div class="line"></div><div class="line"><span class="comment">// The result function in the following selector</span></div><div class="line"><span class="comment">// is simply building an object from the input selectors 由selectors构建的一个对象</span></div><div class="line"><span class="keyword">const</span> structuredSelector = createSelector(</div><div class="line">   mySelectorA,</div><div class="line">   mySelectorB,</div><div class="line">   mySelectorC,</div><div class="line">   (a, b, c) =&gt; (&#123;</div><div class="line">     a,</div><div class="line">     b,</div><div class="line">     c</div><div class="line">   &#125;)</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p><code>createStructuredSelector</code>接受一个对象,这个对象的属性是input-selectors,函数返回一个结构性的selector.这个结构性的selector返回一个对象,对象的键和<code>inputSelectors</code>的参数是相同的,但是使用selectors代替了其中的值.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mySelectorA = <span class="function"><span class="params">state</span> =&gt;</span> state.a</div><div class="line"><span class="keyword">const</span> mySelectorB = <span class="function"><span class="params">state</span> =&gt;</span> state.b</div><div class="line"></div><div class="line"><span class="keyword">const</span> structuredSelector = createStructuredSelector(&#123;</div><div class="line">  <span class="attr">x</span>: mySelectorA,</div><div class="line">  <span class="attr">y</span>: mySelectorB</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> result = structuredSelector(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;) <span class="comment">// will produce &#123; x: 1, y: 2 &#125;</span></div></pre></td></tr></table></figure>
<hr>
<p>结构性的selectors可以是嵌套式的:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nestedSelector = createStructuredSelector(&#123;</div><div class="line">  <span class="attr">subA</span>: createStructuredSelector(&#123;</div><div class="line">    selectorA,</div><div class="line">    selectorB</div><div class="line">  &#125;),</div><div class="line">  <span class="attr">subB</span>: createStructuredSelector(&#123;</div><div class="line">    selectorC,</div><div class="line">    selectorD</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p>##FAQ</p>
<h3 id="Q-为什么当输入的state发生改变的时候-selector不重新计算？"><a href="#Q-为什么当输入的state发生改变的时候-selector不重新计算？" class="headerlink" title="Q:为什么当输入的state发生改变的时候,selector不重新计算？"></a>Q:为什么当输入的state发生改变的时候,selector不重新计算？</h3><p>A:检查一下你的记忆韩式是不是和你的state更新函数相兼容(例如:如果你正在使用Redux).例如:使用<code>createSelector</code>创建的selector总是创建一个新的对象,原来期待的是更新一个已经存在的对象.<code>createSelector</code>使用(===)检测输入是否改变,因此如果改变一个已经存在的对象没有触发selector重新计算的原因是改变一个对象的时候没有触发相关的检测.提示：如果你正在使用Redux,改变一个state对象的<a href="http://redux.js.org/docs/Troubleshooting.html" target="_blank" rel="external">错误可能有</a>.</p>
<p>下面的实例定义了一个selector可以决定数组的第一个todo项目是不是已经被完成:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> isFirstTodoCompleteSelector = createSelector(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.todos[<span class="number">0</span>],</div><div class="line">  todo =&gt; todo &amp;&amp; todo.completed</div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p>下面的state更新函数和<code>isFirstTodoCompleteSelector</code><strong>将不会</strong>正常工作工作:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> COMPLETE_ALL:</div><div class="line">    <span class="keyword">const</span> areAllMarked = state.every(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed)</div><div class="line">    <span class="comment">// BAD: mutating an existing object</span></div><div class="line">    <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</div><div class="line">      todo.completed = !areAllMarked</div><div class="line">      <span class="keyword">return</span> todo</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面的state更新函数和<code>isFirstTodoComplete</code>一起<strong>可以</strong>正常工作.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> COMPLETE_ALL:</div><div class="line">    <span class="keyword">const</span> areAllMarked = state.every(<span class="function"><span class="params">todo</span> =&gt;</span> todo.completed)</div><div class="line">    <span class="comment">// GOOD: returning a new object each time with Object.assign</span></div><div class="line">    <span class="keyword">return</span> state.map(<span class="function"><span class="params">todo</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, todo, &#123;</div><div class="line">      <span class="attr">completed</span>: !areAllMarked</div><div class="line">    &#125;))</div><div class="line"></div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>如果你没有使用Redux,但是有使用mutable数据的需求,你可以使用<code>createSelectorCreator</code>代替默认的记忆函数,并且使用不同的等值检测函数.请参看<a href="#use-memoize-function-from-lodash-for-an-unbounded-cache">这里</a> 和 <a href="#customize-equalitycheck-for-defaultmemoize">这里</a>作为参考.</p>
<p>###Q:为什么input state没有改变的时候,selector还是会重新计算?</p>
<p>A: 检查一下你的记忆函数和你你的state更新函数是不是兼容(如果是使用Redux的时候,看看reducer).例如:使用每一次更新的时候,不管值是不是发生改变,<code>createSelector</code>创建的selector总是会收到一个新的对象.<code>createSelector</code>函数使用(<code>===</code>)检测input的变化,由此可知如果每次都返回一个新对象,表示selector总是在每次更新的时候重新计算.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; REMOVE_OLD &#125; <span class="keyword">from</span> <span class="string">'../constants/ActionTypes'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">text</span>: <span class="string">'Use Redux'</span>,</div><div class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">id</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">timestamp</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> REMOVE_OLD:</div><div class="line">    <span class="keyword">return</span> state.filter(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> todo.timestamp + <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> &gt; <span class="built_in">Date</span>.now()</div><div class="line">    &#125;)</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面的selector在每一次REMOVE_OLD调用的时候,都会重新计算,因为Array.filter总是返回一个新对象.但是在大多数情况下,REMOVE_OLD action都不会改变todo列表,所以重新计算是不必要的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> todosSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.todos</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> visibleTodosSelector = createSelector(</div><div class="line">  todosSelector,</div><div class="line">  (todos) =&gt; &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>你可以通过state更新函数返回一个新对象来减少不必要的重计算操作,这个对象执行深度等值检测,只有深度不相同的时候才返回新对象.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; REMOVE_OLD &#125; <span class="keyword">from</span> <span class="string">'../constants/ActionTypes'</span></div><div class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'lodash.isEqual'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">text</span>: <span class="string">'Use Redux'</span>,</div><div class="line">    <span class="attr">completed</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">id</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">timestamp</span>: <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = initialState, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">  <span class="keyword">case</span> REMOVE_OLD:</div><div class="line">    <span class="keyword">const</span> updatedState =  state.filter(<span class="function"><span class="params">todo</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> todo.timestamp + <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span> &gt; <span class="built_in">Date</span>.now()</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> isEqual(updatedState, state) ? state : updatedState</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> state</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>替代的方法是,在selector中使用深度检测方法替代默认的<code>equalityCheck</code>函数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelectorCreator, defaultMemoize &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"><span class="keyword">import</span> isEqual <span class="keyword">from</span> <span class="string">'lodash.isEqual'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> todosSelector = <span class="function"><span class="params">state</span> =&gt;</span> state.todos</div><div class="line"></div><div class="line"><span class="comment">// create a "selector creator" that uses lodash.isEqual instead of ===</span></div><div class="line"><span class="keyword">const</span> createDeepEqualSelector = createSelectorCreator(</div><div class="line">  defaultMemoize,</div><div class="line">  isEqual</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// use the new "selector creator" to create a selector</span></div><div class="line"><span class="keyword">const</span> mySelector = createDeepEqualSelector(</div><div class="line">  todosSelector,</div><div class="line">  (todos) =&gt; &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>检查<code>equalityCheck</code>函数的更替或者在state更新函数中做深度检测并不总是比重计算的花销小.如果每次重计算的花销总是比较小,可能的原因是Reselect没有通过<code>connect</code>函数传递<code>mapStateProps</code>单纯对象的原因.</p>
<h3 id="Q-没有Redux的情况下可以使用Reselect吗？"><a href="#Q-没有Redux的情况下可以使用Reselect吗？" class="headerlink" title="Q:没有Redux的情况下可以使用Reselect吗？"></a>Q:没有Redux的情况下可以使用Reselect吗？</h3><p>A:可以.Reselect没有其他任何的依赖包,因此尽管他设计的和Redux比较搭配,但是独立使用也是可以的.目前的版本在传统的Flux APP下使用是比较成功的.</p>
<blockquote>
<p>如果你使用<code>createSelector</code>创建的selectors,需要确保他的参数是immutable的.</p>
<p>看<a href="#createselectorinputselectors--inputselectors-resultfunc">这里</a></p>
</blockquote>
<h3 id="Q-怎么才能创建一个接收参数的selector"><a href="#Q-怎么才能创建一个接收参数的selector" class="headerlink" title="Q:怎么才能创建一个接收参数的selector."></a>Q:怎么才能创建一个接收参数的selector.</h3><p>A:Reselect没有支持创建接收参数的selectors,但是这里有一些实现类似函数功能的建议.</p>
<p>如果参数不是动态的,你可以使用工厂函数:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> expensiveItemSelectorFactory = <span class="function"><span class="params">minValue</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> createSelector(</div><div class="line">    shopItemsSelector,</div><div class="line">    items =&gt; items.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.value &gt; minValue)</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> subtotalSelector = createSelector(</div><div class="line">  expensiveItemSelectorFactory(<span class="number">200</span>),</div><div class="line">  items =&gt; items.reduce(<span class="function">(<span class="params">acc, item</span>) =&gt;</span> acc + item.value, <span class="number">0</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>总的达成共识<a href="https://github.com/reactjs/reselect/issues/38" target="_blank" rel="external">看这里</a>和<a href="https://github.com/optimizely/nuclear-js/issues/14" target="_blank" rel="external">超越 neclear-js</a>是:如果一个selector需要动态的参数,那么参数应该是store中的state.如果你决定好了在应用中使用动态参数,像下面这样返回一个记忆函数是比较合适的:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createSelector &#125; <span class="keyword">from</span> <span class="string">'reselect'</span></div><div class="line"><span class="keyword">import</span> memoize <span class="keyword">from</span> <span class="string">'lodash.memoize'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> expensiveSelector = createSelector(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.items,</div><div class="line">  items =&gt; memoize(</div><div class="line">    <span class="function"><span class="params">minValue</span> =&gt;</span> items.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.value &gt; minValue)</div><div class="line">  )</div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> expensiveFilter = expensiveSelector(state)</div><div class="line"></div><div class="line"><span class="keyword">const</span> slightlyExpensive = expensiveFilter(<span class="number">100</span>)</div><div class="line"><span class="keyword">const</span> veryExpensive = expensiveFilter(<span class="number">1000000</span>)</div></pre></td></tr></table></figure>
<hr>
<h3 id="Q：默认的记忆函数不太好-我能用个其他的吗？"><a href="#Q：默认的记忆函数不太好-我能用个其他的吗？" class="headerlink" title="Q：默认的记忆函数不太好,我能用个其他的吗？"></a>Q：默认的记忆函数不太好,我能用个其他的吗？</h3><p>A: 我认为这个记忆韩式工作的还可以,但是如果你需要一个其他的韩式也是可以的.<br>可以看看这个<a href="#customize-equalitycheck-for-defaultmemoize">例子</a></p>
<h3 id="Q-怎么才能测试一个selector"><a href="#Q-怎么才能测试一个selector" class="headerlink" title="Q:怎么才能测试一个selector?"></a>Q:怎么才能测试一个selector?</h3><p>A:对于一个给定的input,一个selector总是产出相同的结果.基于这个原因,做单元测试是非常简单的.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> selector = createSelector(</div><div class="line">  <span class="function"><span class="params">state</span> =&gt;</span> state.a,</div><div class="line">  state =&gt; state.b,</div><div class="line">  (a, b) =&gt; (&#123;</div><div class="line">    <span class="attr">c</span>: a * <span class="number">2</span>,</div><div class="line">    <span class="attr">d</span>: b * <span class="number">3</span></div><div class="line">  &#125;)</div><div class="line">)</div><div class="line"></div><div class="line">test(<span class="string">"selector unit test"</span>, () =&gt; &#123;</div><div class="line">  assert.deepEqual(selector(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;), &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">6</span> &#125;)</div><div class="line">  assert.deepEqual(selector(&#123; <span class="attr">a</span>: <span class="number">2</span>, <span class="attr">b</span>: <span class="number">3</span> &#125;), &#123; <span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">9</span> &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p>在state更新函数调用的时候同时检测selector的记忆函数的功能也是非常有用的(例如 使用Redux的时候检查reducer).每一个selector都有一个<code>recomputations</code>方法返回重新计算的次数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">suite(<span class="string">'selector'</span>, () =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> state = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> (</div><div class="line">    &#123;</div><div class="line">      <span class="attr">a</span>: action(state.a),</div><div class="line">      <span class="attr">b</span>: action(state.b)</div><div class="line">    &#125;</div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="keyword">const</span> selector = createSelector(</div><div class="line">    <span class="function"><span class="params">state</span> =&gt;</span> state.a,</div><div class="line">    state =&gt; state.b,</div><div class="line">    (a, b) =&gt; (&#123;</div><div class="line">      <span class="attr">c</span>: a * <span class="number">2</span>,</div><div class="line">      <span class="attr">d</span>: b * <span class="number">3</span></div><div class="line">    &#125;)</div><div class="line">  )</div><div class="line"></div><div class="line">  <span class="keyword">const</span> plusOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span></div><div class="line">  <span class="keyword">const</span> id = <span class="function"><span class="params">x</span> =&gt;</span> x</div><div class="line"></div><div class="line">  test(<span class="string">"selector unit test"</span>, () =&gt; &#123;</div><div class="line">    state = reducer(state, plusOne)</div><div class="line">    assert.deepEqual(selector(state), &#123; <span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">9</span> &#125;)</div><div class="line">    state = reducer(state, id)</div><div class="line">    assert.deepEqual(selector(state), &#123; <span class="attr">c</span>: <span class="number">4</span>, <span class="attr">d</span>: <span class="number">9</span> &#125;)</div><div class="line">    assert.equal(selector.recomputations(), <span class="number">1</span>)</div><div class="line">    state = reducer(state, plusOne)</div><div class="line">    assert.deepEqual(selector(state), &#123; <span class="attr">c</span>: <span class="number">6</span>, <span class="attr">d</span>: <span class="number">12</span> &#125;)</div><div class="line">    assert.equal(selector.recomputations(), <span class="number">2</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<hr>
<p>另外,selectors保留了最后一个函数调用结果的引用,这个引用作为<code>.resultFunc</code>.如果你已经聚合了其他的selectors,这个函数引用可以帮助你测试每一个selector,不需要从state中解耦测试.</p>
<p>例如如果你的selectors集合像下面这样:<br><strong>selectors.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> firstSelector = createSelector( ... )</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> secondSelector = createSelector( ... )</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> thirdSelector = createSelector( ... )</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> myComposedSelector = createSelector(</div><div class="line">  firstSelector,</div><div class="line">  secondSelector,</div><div class="line">  thirdSelector,</div><div class="line">  (first, second, third) =&gt; first * second &lt; third</div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p>单元测试就像下面这样:<br><strong>test/selectors.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// tests for the first three selectors...</span></div><div class="line">test(<span class="string">"firstSelector unit test"</span>, () =&gt; &#123; ... &#125;)</div><div class="line">test(<span class="string">"secondSelector unit test"</span>, () =&gt; &#123; ... &#125;)</div><div class="line">test(<span class="string">"thirdSelector unit test"</span>, () =&gt; &#123; ... &#125;)</div><div class="line"></div><div class="line"><span class="comment">// We have already tested the previous</span></div><div class="line"><span class="comment">// three selector outputs so we can just call `.resultFunc`</span></div><div class="line"><span class="comment">// with the values we want to test directly:</span></div><div class="line">test(<span class="string">"myComposedSelector unit test"</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// here instead of calling selector()</span></div><div class="line">  <span class="comment">// we just call selector.resultFunc()</span></div><div class="line">  assert(selector.resultFunc(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="literal">true</span>)</div><div class="line">  assert(selector.resultFunc(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>), <span class="literal">false</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p>最后,每一个selector有一个<code>resetRecomputations</code>方法,重置recomputations方法为0,这个参数的意图是在面对复杂的selector的时候,需要很多独立的测试,你不需要管理复杂的手工计算,或者为每一个测试创建”傻瓜”selector.</p>
<h3 id="Q-Reselect怎么和Immutble-js一起使用"><a href="#Q-Reselect怎么和Immutble-js一起使用" class="headerlink" title="Q:Reselect怎么和Immutble.js一起使用?"></a>Q:Reselect怎么和Immutble.js一起使用?</h3><p>A:<code>creatSelector</code>创建的Selectors应该可以和Immutable.js数据结构一起完美的工作.<br>如果你的selector正在重计算,并且你认为state没有发生变化,一定要确保知道哪一个Immutable.js更新方法,这个方法只要一更新<strong>总是</strong>返回新对象.哪一个方法只有<strong>集合实际发生变化的时候</strong>才返回新对象.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Immutable <span class="keyword">from</span> <span class="string">'immutable'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> myMap = Immutable.Map(&#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">c</span>: <span class="number">3</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"> <span class="comment">// set, merge and others only return a new obj when update changes collection</span></div><div class="line"><span class="keyword">let</span> newMap = myMap.set(<span class="string">'a'</span>, <span class="number">1</span>)</div><div class="line">assert.equal(myMap, newMap)</div><div class="line">newMap = myMap.merge(&#123; <span class="string">'a'</span>, <span class="number">1</span> &#125;)</div><div class="line">assert.equal(myMap, newMap)</div><div class="line"><span class="comment">// map, reduce, filter and others always return a new obj</span></div><div class="line">newMap = myMap.map(<span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">1</span>)</div><div class="line">assert.notEqual(myMap, newMap)</div></pre></td></tr></table></figure>
<hr>
<p>如果一个操作导致的selector更新总是返回一个新对象,可能会发生不必要的重计算.<a href="#q-why-is-my-selector-recomputing-when-the-input-state-stays-the-same">看这里</a>.这是一个关于pros的讨论,使用深全等于来检测例如<code>immutable.js</code>来减少不必要的重计算过程.</p>
<h3 id="Q-可以在多个组件之间共享selector吗？"><a href="#Q-可以在多个组件之间共享selector吗？" class="headerlink" title="Q:可以在多个组件之间共享selector吗？"></a>Q:可以在多个组件之间共享selector吗？</h3><p>A: 使用<code>createSelector</code>创建的Selector的缓存的大小只有1.这个设定使得多个组件的实例之间的参数不同,跨组件共享selector变得不合适.这里也有几种办法来解决这个问题:</p>
<ul>
<li>使用工程函数方法,为每一个组件实例创建一个新的selector.这里有一个内建的工厂方法,React Redux v4.3或者更高版本可以使用. <a href="#sharing-selectors-with-props-across-multiple-components">看这里</a></li>
<li>创建一个缓存尺寸大于1的定制selector.</li>
</ul>
<h3 id="Q-有TypeScript的类型吗？"><a href="#Q-有TypeScript的类型吗？" class="headerlink" title="Q:有TypeScript的类型吗？"></a>Q:有TypeScript的类型吗？</h3><p>A: 是的！他们包含在<code>package.json</code>里.可以很好的工作.</p>
<h3 id="Q：怎么构建一个柯里化selector"><a href="#Q：怎么构建一个柯里化selector" class="headerlink" title="Q：怎么构建一个柯里化selector?"></a>Q：怎么构建一个<a href="https://github.com/hemanth/functional-programming-jargon#currying" target="_blank" rel="external">柯里化</a>selector?</h3><p>A：尝试一些这里<a href="https://github.com/reactjs/reselect/issues/159#issuecomment-238724788" target="_blank" rel="external">助手函数</a>,由<a href="https://github.com/MattSPalmer" target="_blank" rel="external">MattSPalmer</a>提供</p>
<h2 id="有关的项目"><a href="#有关的项目" class="headerlink" title="有关的项目"></a>有关的项目</h2><h3 id="reselect-map"><a href="#reselect-map" class="headerlink" title="reselect-map"></a><a href="https://github.com/HeyImAlex/reselect-map" target="_blank" rel="external">reselect-map</a></h3><p>因为Reselect不可能保证缓存你所有的需求,在做<strong>非常昂贵的计算</strong>的时候,这个方法比较有用.查看一下reselect-maps readme</p>
<p><strong>reselect-map的优化措施仅仅使用在一些小的案例中,如果你不确定是不是需要他,就不要使用它</strong>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本文是翻译Redux的一个中间件文档.Redux是React的一个数据层,React组件的state有关逻辑处理都被单独放到Redux中来进行,在state的操作流程中衍生了很多中间件,Reselect这个中间件要解决的问题是:`在
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译--Redux-Saga--未来是1975年</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91--Redux-Saga--%E6%9C%AA%E6%9D%A5%E6%98%AF1975%E5%B9%B4/"/>
    <id>http://yoursite.com/2017/03/08/翻译--Redux-Saga--未来是1975年/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>24 SEPTEMBER 2016</p>
<blockquote>
<p><a href="https://ohyayanotherblog.ghost.io/redux-saga-clock/" target="_blank" rel="external">原文在这里</a></p>
</blockquote>
<p>(这个文章是有关Redux-saga三部曲的第一部分,<a href="https://ohyayanotherblog.ghost.io/redux-saga-hello-world/" target="_blank" rel="external">第二部分</a>,<a href="https://ohyayanotherblog.ghost.io/redux-saga-finishing-the-clock-demo-app/" target="_blank" rel="external">第三部分</a>.我们会构建一个抽象的时钟)</p>
<hr>
<p><a href="http://www.jianshu.com/p/6f8678a6ad78" target="_blank" rel="external">第一部分译文请见</a>，<br><a href="http://www.jianshu.com/p/fad0136e77c0" target="_blank" rel="external">第二部分译文请见</a>，<br><a href="http://www.jianshu.com/p/88fc4236b505" target="_blank" rel="external">第三部分译文请见</a>.</p>
<hr>
<p>我的观点是:React/Redux组合是目前最好的前端技术栈.这两个库是相互依存的,因为React可以是纯函数,功能是:<code>state=&gt;view</code>,React仅仅关注怎么根据state来渲染内容,Redux也是纯函数,功能是:<code>action=&gt;state</code>,Redux作为控制app state的单一资源(译者观点:这个地方的state,需要更加开阔眼界,并不是仅仅是UI的状态,组件需要的远程数据也可以是state的一部分,如此以来,Redux的意义就更加凸显出来).即便是拥有如此先进的技术,你最终也会发现,app的控制流代码被一位闲逛的流浪汉搞得好像是一团烂泥.在实际的应用中,最复杂的控制流代码通常包含异步代码,异步代码和其他时序的代码总是协同工作.</p>
<ul>
<li>“当POST请求返回时,转到下一页或者显示错误信息.”</li>
<li>“当移动设备的电力降到5%一下的时候,显示一条⚠️信息.”</li>
<li>“十秒钟以后,隐藏模态框.”</li>
<li>“但我的直属领导在附近晃荡的时候,从FB切换到JIRA.”(译者：这肯定是个幽默)</li>
</ul>
<p>在一些app中,这些“无家可归”的代码开始骚骚扰有礼貌的邻居.(译者:后面这段没有翻译出来,意思是异步代码会把同步代码搞得一团糟.)</p>
<p>###与无家可归者战斗<br>javascript库Redux-saga是为Redux设计的一个中间件,为异步操作提供了解决办法:把数据流中的异步代码使用生成器代码块(generator)隔离起来,generator的yield描述一些代码块:<code>effects</code>,这些<code>effects</code>火灾控制流的某个给定点发生作用.</p>
<p>Saga作为异步代码的收容所,接纳app的异步代码块.saga严重依赖生成器函数,因此我们在正式学习Redux-saga之前,需要了解一下生成器函数.在这个文章中,我们会涉及到内在的合理原因和使用Redux-saga的好处,接着我会教你一些必要的背景知识.好了,到底什么是generator,我们为什么需要他？</p>
<p>wiki关于generators的解释下面这个内容</p>
<blockquote>
<p>生成器非常类似于返回一个数组的函数,在生成器内有可以被调用的参数,生成器是一系列的值.然而与返回一个数组的函数一次返回整个数组不同,生成器函数一次只返回一个值.一句话,生成器函数看起来就是一个函数,但是行为像是一个遍历器.</p>
</blockquote>
<p>我觉得从上面这段话根本就没有学到任何东西,那么看看下面这段</p>
<blockquote>
<p>生成器概念首次提出是在1975年(译者:题目就是来源于此),作为CLU语言的字符串操作特征,现在Python,C#,Ruby中都可以使用,在javascript的ES6版本中也会加入,在CLU和C#中生成器叫做iterators,在Ruby中叫做enumerators.</p>
</blockquote>
<p>所以生成器函数的概念是比较老也是广为所知的概念,但是直到最近才加入ECMAScript.但是为什么现在在javascript中要关注它呢？</p>
<p>javascript的运行环境让我们成为了非常不幸的程序员,在浏览器内部仅仅只有一个单线程事件循环模型.我们所有的代码都在同一个线程中执行,因此在javascript程序员的脑袋里一定要牢固的植入一个概念,永远永远不要阻塞代码执行,因为阻塞的代码块将会终端其他所有的其他代码的执行.在非阻塞情况下,我们有各种办法来处理异步代码执行,其实都是各种形式的回调函数的注册方法.回调函数是每一个javascript开发者必须熟练掌握的内容,如果你还不了解回调函数和promises对象,在开始下面内容之前要了解一下.否则的话你看到生成器的时候会疯掉的.</p>
<p>时刻记住,不要暂停代码执行,让我们看看ES6生成器的实现.你也可以读读收到高度评价的<a href="http://www.2ality.com/2015/03/es6-generators.html" target="_blank" rel="external">2ality Blog</a>,</p>
<blockquote>
<p>生成器是ECMAScript6的新特征,生成器可以暂停和恢复执行.这个特点对于遍历器和异步编程都大有帮助.<br>这都是什么鬼话.他只说生成器是“可以暂停和恢复的函数!!”我们被允许,鼓励在生成器内暂停和恢复代码执行.这一点完全和不要阻塞代码执行不一样.现在我们已经有了一个编程构架允许我们编写可以暂停和恢复执行的代码.这就是为什么生成器函数成为一个js异步编程进化的里程碑.</p>
</blockquote>
<h3 id="ES6生成器摘要"><a href="#ES6生成器摘要" class="headerlink" title="ES6生成器摘要"></a>ES6生成器摘要</h3><p>你不需要具有博士学位才可以使用Redux-saga,但是基础知识还是需要的.下面的内容是ES6生成器绝对的精华部分:</p>
<ul>
<li>一个generator函数以<code>function *</code>(“function star”)开始,看起来像下面的样子:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFunc</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="comment">// code goes here </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>generator函数返回一个generator</li>
<li>generator不是一个函数,该死的.看起来像是generator函数返回的一个特殊对象:<code>let genObj=genFunc()</code></li>
<li>在generator中可以使用<code>yield</code>终止一个generator的执行.</li>
<li>不要忘了那个✨符号 <code>function* example(){yield &#39;scheibe&#39;}</code></li>
<li><p>不能使用<code>new</code>关键字来调用一个generator函数.我们可以一直调用generator函数,他总是返回一个新的generator对象,函数体执行会中断,直到我们调用<code>next</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">genFunc</span> (<span class="params"></span>) </span>&#123; <span class="keyword">yield</span> <span class="string">'hi'</span> &#125;  </div><div class="line">  <span class="keyword">let</span> genObj1 = genFunc()</div><div class="line">  <span class="keyword">let</span> genObj2 = genFunc()</div><div class="line">  genObj1.next()</div><div class="line">  &#123;<span class="attr">value</span>: <span class="string">"hi"</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">  genObj1.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</div><div class="line">  genObj2.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="string">"hi"</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>从上面的代码可以看到,当我们调用<code>next</code>方法像这样<code>genObj.next()</code>,直到下一个<code>yield</code>关键字的时候才可以执行,接着返回<code>yield</code>的表达式形式,格式为<code>{value:any,done:boolean}</code>,“any”是yield的值,”done”告诉我们generator还有没有剩下的代码需要yield.</p>
</li>
<li>下一次返回的时候,generator从这个点继续执行.但是你是监听不到这个过程的.</li>
<li>如果整个generator完成,如果再执行<code>next()</code>调用,将返回<code>{value:undefined,}</code>.</li>
<li>也可以通过参数传值到generator:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">test</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'FIRST STEP'</span>)</div><div class="line">    <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'SECOND STEP'</span>)</div><div class="line">    <span class="keyword">yield</span> x * <span class="number">2</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&gt; <span class="keyword">let</span> gen = test()</div><div class="line">&gt; gen.next()</div><div class="line"><span class="comment">// executes until the first yield, sends out its value and waits</span></div><div class="line">FIRST STEP  </div><div class="line">&#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">gen.next(<span class="number">29</span>)  </div><div class="line"><span class="comment">// sends in 29 to the first yield, which is waiting, assigns it to x, then executes until the next yield and sends out its value</span></div><div class="line">SECOND STEP  </div><div class="line">&#123; <span class="attr">value</span>: <span class="number">58</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">gen.next(<span class="number">2</span>)  </div><div class="line"><span class="comment">// paused at the second yield, we execute up until the first yield again, the value passed to next gets thrown away since we didn't assign it to anything</span></div><div class="line">FIRST STEP  </div><div class="line">&#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">gen.next()  </div><div class="line"><span class="comment">// sends in no value to the paused first yield (undefined), and executes until the second yield, sending out the result of its operand expression</span></div><div class="line">SECOND STEP  </div><div class="line">&#123; <span class="attr">value</span>: <span class="literal">NaN</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>所以<code>next</code>可以被分为三个步骤:1.可以传递一个值到目前挂起的yield 2.返回下一个yield的操作符 3.在yield中挂起</li>
</ul>
<p>好了,确实有很多的东西要消化,但是现在你已经知道怎么传递一个值到generator.你或许会想着慢慢研究这些代码直到搞清楚每件事.确保调用<code>next</code>的时候,记住三个步骤.最好能记住这些步骤.这些步骤不仅仅对于理解generator,Redux和Saga很关键,如果我们写测试saga代码的时候,这些步骤也变得非常有用.最终的两个结论:</p>
<ul>
<li><strong>只能在generator函数中yield,在回调函数中是不行的.例如下面的代码是错误的：</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genFunc</span> (<span class="params"></span>) </span>&#123; [<span class="number">1</span>, <span class="number">2</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="keyword">yield</span> x) &#125;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>可以使用yield*把控制权传递到另一个generator：</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">yield</span>* bar()</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&gt; <span class="keyword">let</span> gen = foo()</div><div class="line">&gt; gen.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">&gt; gen.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="number">2</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">&gt; gen.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="number">3</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</div><div class="line">&gt; gen.next()</div><div class="line">&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</div></pre></td></tr></table></figure>
<hr>
<p>我期望你能重新读读上面的列表项的内容,在浏览器的console中练习一下generators代码.如果你对这些代码熟悉了以后,就可以准备开始Redux Saga app了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;24 SEPTEMBER 2016&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://ohyayanotherblog.ghost.io/redux-saga-clock/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文在这里&lt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>本地Node-js服务器作为api服务器的解决办法</title>
    <link href="http://yoursite.com/2017/03/08/%E6%9C%AC%E5%9C%B0Node-js%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%9C%E4%B8%BAapi%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/08/本地Node-js服务器作为api服务器的解决办法/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在看react-native教程的时候，遇到要在手机端调试，需要api服务器，但是由于Node.js自己就作为服务器，没有apache怎么解决这个问题，用apache和nginx也可以解决，但是有点复杂，我们就使用node已有的模块解决这个问题.<br>概念:电脑的地址有两个，一个是本地环回地址，就是127.0.0.1或localhost,这个地址本机以外是不能访问的，还有一个地址是路由器或交换机分配的ip地址，这个地址其他电脑可以访问。<br>在node.js中要把ip地址转为本地环回地址才可以访问。原理就是这样。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//服务器端的代码</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// set up handlebars view engine</span></div><div class="line"><span class="keyword">var</span> handlebars = <span class="built_in">require</span>(<span class="string">'express3-handlebars'</span>)</div><div class="line">	.create(&#123; <span class="attr">defaultLayout</span>:<span class="string">'main'</span> &#125;);</div><div class="line">app.engine(<span class="string">'handlebars'</span>, handlebars.engine);</div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'handlebars'</span>);</div><div class="line"></div><div class="line">app.set(<span class="string">'port'</span>, process.env.PORT || <span class="number">3000</span>);</div><div class="line"></div><div class="line">app.use(express.static(__dirname + <span class="string">'/public'</span>));</div><div class="line"></div><div class="line"><span class="keyword">var</span> fortuneCookies = [</div><div class="line">	<span class="string">"Conquer your fears or they will conquer you."</span>,</div><div class="line">	<span class="string">"Rivers need springs."</span>,</div><div class="line">	<span class="string">"Do not fear what you don't know."</span>,</div><div class="line">	<span class="string">"You will have a pleasant surprise."</span>,</div><div class="line">	<span class="string">"Whenever possible, keep it simple."</span>,</div><div class="line">];</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">	res.render(<span class="string">'home'</span>);</div><div class="line">&#125;);</div><div class="line">app.get(<span class="string">'/about'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> randomFortune = </div><div class="line">		fortuneCookies[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * fortuneCookies.length)];</div><div class="line">	res.render(<span class="string">'about'</span>, &#123; <span class="attr">fortune</span>: randomFortune &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 404 catch-all handler (middleware)</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</div><div class="line">	res.status(<span class="number">404</span>);</div><div class="line">	res.render(<span class="string">'404'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 500 error handler (middleware)</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.error(err.stack);</div><div class="line">	res.status(<span class="number">500</span>);</div><div class="line">	res.render(<span class="string">'500'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(app.get(<span class="string">'port'</span>), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log( <span class="string">'Express started on http://localhost:'</span> + </div><div class="line">    app.get(<span class="string">'port'</span>) + <span class="string">'; press Ctrl-C to terminate.'</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<p>上面这段代码在127.0.0.1:3000端口启动一个本地服务器,但是在手机端是不能访问的.</p>
<p>我们再启动另一个node.js服务器来解决这个问题.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//proxy.js</span></div><div class="line">   <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>), </div><div class="line">         httpProxy = <span class="built_in">require</span>(<span class="string">'http-proxy'</span>);  <span class="comment">//引入这个模块</span></div><div class="line">  </div><div class="line"><span class="comment">// 新建一个代理 Proxy Server 对象  </span></div><div class="line"><span class="keyword">var</span> proxy = httpProxy.createProxyServer(&#123;&#125;);  </div><div class="line">  </div><div class="line"><span class="comment">// 捕获异常  </span></div><div class="line">proxy.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, req, res</span>) </span>&#123;  </div><div class="line">  res.writeHead(<span class="number">500</span>, &#123;  </div><div class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>  </div><div class="line">  &#125;);  </div><div class="line">  res.end(<span class="string">'Something went wrong. And we are reporting a custom error message.'</span>);  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line"><span class="comment">// 另外新建一个 HTTP 80 端口的服务器，也就是常规 Node 创建 HTTP 服务器的方法。  </span></div><div class="line"><span class="comment">// 在每次请求中，调用 proxy.web(req, res config) 方法进行请求分发  </span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">  <span class="comment">// 在这里可以自定义你的路由分发  </span></div><div class="line">  <span class="keyword">var</span> host = req.headers.host, ip = req.headers[<span class="string">'x-forwarded-for'</span>] || req.connection.remoteAddress;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"client ip:"</span> + ip + <span class="string">", host:"</span> + host);  </div><div class="line">    </div><div class="line">  <span class="keyword">switch</span>(host)&#123;  <span class="comment">//意思是监听下面的ip地址,如果匹配就转到</span></div><div class="line"><span class="comment">//127.0.0.1:3000地址</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'192.168.0.101:8080'</span>:    <span class="comment">//监听这个地址</span></div><div class="line">   <span class="comment">//这个地址在window上用ipconfig查看,mac/linux用ifconfig查看</span></div><div class="line">   </div><div class="line">    <span class="keyword">case</span> <span class="string">'bbs.aaaa.com'</span>:  </div><div class="line">        proxy.web(req, res, &#123; <span class="attr">target</span>: <span class="string">'http://127.0.0.1:3000'</span> &#125;);  <span class="comment">//转到这个地址</span></div><div class="line">    <span class="keyword">break</span>;  </div><div class="line">    </div><div class="line">    <span class="keyword">default</span>:  </div><div class="line">        res.writeHead(<span class="number">200</span>, &#123;  </div><div class="line">            <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>  </div><div class="line">        &#125;);  </div><div class="line">        res.end(<span class="string">'Welcome to my server!'</span>);  </div><div class="line">  &#125;  </div><div class="line">&#125;);  </div><div class="line">  </div><div class="line"><span class="built_in">console</span>.log(<span class="string">"listening on port 8080"</span>)  </div><div class="line">server.listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p>
<p>node proxy.js 以后启动了proxy服务器.可以通过电脑的ip地址访问127.0.0.1的api路由了。</p>
<p>如果是使用nginx也可以达到要求，<br>在mac上使用homebrew包管理相当方便<br> bash下  安装 brew install nginx<br>                启动 brew services start nginx<br>  如果安装了atom编辑器<br>  bash在 直接  atom /usr/local/etc/nginx/nginx.conf 打开配置文件本分以后做出修改</p>
<p>下面是nginx.conf的配置文件</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//nginx.conf</span></div><div class="line"></div><div class="line"> #原来的文件另存后。直接使用下面内容替换nginx.<span class="keyword">conf</span>的内容</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line">http &#123;</div><div class="line">    <span class="keyword">include</span>       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  '<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="string">"$request"</span> '</div><div class="line">    #                  '<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="string">"$http_referer"</span> '</div><div class="line">    #                  '<span class="string">"$http_user_agent"</span> <span class="string">"$http_x_forwarded_for"</span>';</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    sendfile        <span class="keyword">on</span>;</div><div class="line">    #tcp_nopush     <span class="keyword">on</span>;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen 8080;  #监听80880端口</div><div class="line">        server_name www.penguu.com 192.168.1.100;  #这里是真机要访问的地址。</div><div class="line">        # <span class="keyword">Mac</span> 通过终端 ifconfig 查看。比如我查看的就是192.168.1.100</div><div class="line">        #手机访问的接口就是 192.168.1.100:8080</div><div class="line">        #实际在23行监听的端口可以是80端口，由于浏览器默认就是80端口。但是在<span class="keyword">mac</span>中有权限问题。所#以就使用8080端口</div><div class="line">        # address_book中的service中的地址也要修改路径是</div><div class="line">        # <span class="keyword">view</span>/service.js-&gt;host,修改为 192.168.1.100：8080</div><div class="line"></div><div class="line">        #access_log /<span class="keyword">var</span>/<span class="keyword">log</span>/nginx/<span class="keyword">test</span>.<span class="keyword">log</span>;</div><div class="line">        location / &#123;</div><div class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">            proxy_set_header X-Forwarded-<span class="keyword">For</span> <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">            proxy_set_header Host  <span class="variable">$http_host</span>;</div><div class="line">            proxy_set_header X-Nginx-Proxy true;</div><div class="line">            proxy_set_header Connection <span class="string">""</span>;</div><div class="line">            proxy_pass      http:<span class="comment">//127.0.0.1:3000;  # address_book的 server地址，就是本地node.js服务器的ip地址</span></div><div class="line">            #node.js默认就是127.0.0.1 ，port:3000是在<span class="keyword">app</span>.js中设定的。可以修改。</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在看react-native教程的时候，遇到要在手机端调试，需要api服务器，但是由于Node.js自己就作为服务器，没有apache怎么解决这个问题，用apache和nginx也可以解决，但是有点复杂，我们就使用node已有的模块解决这个问题.&lt;
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>使用React,Redux,redux-sage构建图片库(翻译)</title>
    <link href="http://yoursite.com/2017/03/08/Getting%20Started%20with%20React,%20Redux%20and%20Immutable:%20a%20Test-Driven%20Tutorial%20(Part%202)%20/"/>
    <id>http://yoursite.com/2017/03/08/Getting Started with React, Redux and Immutable: a Test-Driven Tutorial (Part 2) /</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻译版本,<a href="http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/" target="_blank" rel="external">原文请见</a></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fds4960hm8j30xc0b4weu.jpg" alt="Image由[egghead.io提供](http://egghead.io/)"></p>
<p>这是第二部分的内容.</p>
<p>在第一部分,我们罗列了app的UI,开发和单元测试的基础.</p>
<p>我们看到了app的state通过React的<code>props</code>向下传递到单个的组件,用户的actions声明为回调函数,因此app的逻辑和UI分离开来了.</p>
<h2 id="Redux的工作流介绍"><a href="#Redux的工作流介绍" class="headerlink" title="Redux的工作流介绍"></a>Redux的工作流介绍</h2><p>在这一点上,我们的UI是没有交互操作的:尽管我们已经测试了如果一个item如果被设定为<code>completed</code>,它将给文本划线,但是这里还没有方法邀请用户来完成它:</p>
<ol>
<li>state tree通过<code>props</code>定义了UI和action回调函数.</li>
<li>用户的actions,例如点击,被发送到action creator,action被它范式化.</li>
<li>redux action被传递到reducer实现实际的app逻辑</li>
<li>reducer更新state tree,dispatch state到store.</li>
<li>UI根据store里的新state tree来更新UI</li>
</ol>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdua9bq152j30f10870sn.jpg" alt="Redux working flos"></p>
<h2 id="设定初始化state"><a href="#设定初始化state" class="headerlink" title="设定初始化state"></a>设定初始化state</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/be48d4d610b3438aeb1dfcd07d317b3c72fbdb3e" target="_blank" rel="external">这部分的代码提交在这里</a></p>
<p>我们的第一个action将会允许我们在Redux store里正确的设置初始化state<br>,我们将会创建store.</p>
<p>Redux中的action是一个信息的载体(payload).action由一个JSON对象有一个<code>type</code>属性,描述action到底是做什么的,还有一部分是app需要的信息.在我们的实例中,type被设定为<code>SET_STATE</code>,我们可以添加一个state对象包含需要的state:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">  <span class="attribute">state</span>: &#123;</div><div class="line">    <span class="attribute">todos</span>: [</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">1</span>, <span class="attribute">text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">2</span>, <span class="attribute">text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">3</span>, <span class="attribute">text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attribute">filter</span>: <span class="string">'all'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个action会被dispatch到一个reducer,reducer角色的是识别和实施和action对应的逻辑代码.</p>
<p>让我们为reducer来写单元测试代码<br><code>test/reducer_spec.js</code><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="title">import</span> &#123;List, <span class="built_in">Map</span>, fromJS&#125; from <span class="string">'immutable'</span>;</div><div class="line"><span class="title">import</span> &#123;expect&#125; from <span class="string">'chai'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> reducer from <span class="string">'../src/reducer'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">'handles SET_STATE'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attribute">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">      <span class="attribute">state</span>: <span class="built_in">Map</span>(&#123;</div><div class="line">        <span class="attribute">todos</span>: List.of(</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 1, text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 2, text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 3, text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'completed'</span>&#125;)</div><div class="line">        )</div><div class="line">      &#125;)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line"></div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attribute">todos</span>: [</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 1, text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 2, text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 3, text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>为了方便一点,<code>state</code>使用单纯JS对象,而不是使用Immutable数据结构.让我们的reducer来处理转变.最后,reducer将会优雅的处理<code>undefined</code>初始化state:<br><code>test/reducer_spec.js</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles SET_STATE with plain JS payload'</span>, () =&gt; &#123;</div><div class="line">    const initialState = Map();</div><div class="line">    const action = &#123;</div><div class="line"><span class="symbol">      type:</span> <span class="string">'SET_STATE'</span>,</div><div class="line"><span class="symbol">      state:</span> &#123;</div><div class="line"><span class="symbol">        todos:</span> [</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    const nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line"><span class="symbol">      todos:</span> [</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles SET_STATE without initial state'</span>, () =&gt; &#123;</div><div class="line">    const action = &#123;</div><div class="line"><span class="symbol">      type:</span> <span class="string">'SET_STATE'</span>,</div><div class="line"><span class="symbol">      state:</span> &#123;</div><div class="line"><span class="symbol">        todos:</span> [</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    const nextState = reducer(undefined, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line"><span class="symbol">      todos:</span> [</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们的reducer将会匹配接收的actions的<code>type</code>,如果type是<code>SET_STATE</code>,当前的state和action运载的state融合在一起:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state, newState</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.merge(newState);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们不得不把reducer连接到我们的app,所以当app启动初始化state.这里实际是第一次使用Redux库,安装一下<br><code>npm install —save redux@3.3.1 react-redux@4.4.1</code></p>
<p><code>src/index.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> &#123;TodoAppContainer&#125; <span class="keyword">from</span> <span class="string">'./components/TodoApp'</span>;</div><div class="line"></div><div class="line"><span class="comment">// We instantiate a new Redux store</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"><span class="comment">// We dispatch the SET_STATE action holding the desired state</span></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attr">filter</span>: <span class="string">'all'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'../node_modules/todomvc-app-css/index.css'</span>);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="comment">// We wrap our app in a Provider component to pass the store down to the components</span></div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TodoAppContainer</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>如果你看看上面的代码段,你可以注意到我们的<code>TodoApp</code>组件实际是被<code>TodoAppContainer</code>代替.在Redux里,有两种类型的组件:展示组件和容器.我推荐你阅读一下由Dan Abramov(Redux的作者)写作的<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.e5z2vws8e" target="_blank" rel="external">高信息量的文章</a>,强调了展示组件和容器的差异性.</p>
<p>如果我想总结得快一点,我将引用<a href="http://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="external">Redux 文档</a>的内容：</p>
<p>“展示组件是关于事件的样子(模板和样式),容器组件是关于事情是怎么工作的(数据获取,state更新)”.</p>
<p>所以我们创建store,传递给<code>TodoAppContainer</code>.然而为了子组件可以使用store,我们把state映射成为React组件<code>TodoApp</code>的<code>props</code>.<br><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">todos</span>: state.get(<span class="string">'todos'</span>),</div><div class="line">    <span class="attr">filter</span>: state.get(<span class="string">'filter'</span>)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoAppContainer = connect(mapStateToProps)(TodoApp);</div></pre></td></tr></table></figure></p>
<p>如果你在浏览器中重新加载app,你应该可以看到它初始化和之前一样,不过现在使用Redux tools.</p>
<h2 id="Redux-dev-工具"><a href="#Redux-dev-工具" class="headerlink" title="Redux dev 工具"></a>Redux dev 工具</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/9e82a2bf7ffaea5d0fda6af361a126517aecc115" target="_blank" rel="external">这一部分的提交代码</a></p>
<p>现在我们已经配置了redux store和reducer.我们可以配置Redux dev tools来展现数据流开发.</p>
<p>首先,获取<a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="external">Redux dev tools Chrome extension</a></p>
<p>dev tools可以在Store创建的时候可以加载.</p>
<p><code>src/index.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> &#123;compose, createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> createStoreDevTools = compose(</div><div class="line">  <span class="built_in">window</span>.devToolsExtension ? <span class="built_in">window</span>.devToolsExtension() : <span class="function"><span class="params">f</span> =&gt;</span> f</div><div class="line">)(createStore);</div><div class="line"><span class="keyword">const</span> store = createStoreDevTools(reducer);</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdubya02s9j31cy0v6dgk.jpg" alt="Redux dev tools"></p>
<p>重新加载app,点击Redux图标,有了.</p>
<p>有三个不同的监视器可以使用:Diff监视器,日志监视器,Slider监视器.</p>
<h2 id="使用Action-Creators配置我们的actions"><a href="#使用Action-Creators配置我们的actions" class="headerlink" title="使用Action Creators配置我们的actions"></a>使用Action Creators配置我们的actions</h2><p>切换item的不同状态.</p>
<p><a href="https://github.com/phacks/redux-todomvc/commit/7a2dc0963684b569c11f92e41a324324dfb21bdc" target="_blank" rel="external">这部分的提交代码在这里</a></p>
<p>下一步是允许用户在<code>active</code>和<code>completed</code>之前切换状态：<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>, fromJS&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../src/reducer'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles TOGGLE_COMPLETE by changing the status from active to completed'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles TOGGLE_COMPLETE by changing the status from completed to active'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>为了通过这些测试,我们更新reducer:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="comment">// We find the index associated with the itemId</span></div><div class="line">  <span class="keyword">const</span> itemIndex = state.get(<span class="string">'todos'</span>).findIndex(</div><div class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">  );</div><div class="line">  <span class="comment">// We update the todo at this index</span></div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .update(<span class="string">'status'</span>, status =&gt; status === <span class="string">'active'</span> ? <span class="string">'completed'</span> : <span class="string">'active'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// We update the state to account for the modified todo</span></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_COMPLETE'</span>:</div><div class="line">      <span class="keyword">return</span> toggleComplete(state, action.itemId);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>和<code>SET_STATE</code>的action同一个地方,我们需要让<code>TodoAppContainer</code>组件感知到action,所以<code>toggleComplete</code>回调函数会被传递到<code>TodoItem</code>组件(实际调用函数的地方).</p>
<p>在Redux中,有标准的方法来做这件事：Action Creators.</p>
<p>action creators是简单的函数,返回合适的action，这些韩式是React的<code>props</code>的一些映射之一.<br>让我们创建第一个action creator:<br><code>src/action_creators.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在,尽管<code>TodoAppcontainer</code>组件中的<code>connect</code>函数的调用可以用来获取store,我们告诉组件使用映射<code>props</code>的回调函数:<br><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'../action_creators'</span>;</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      // ...</div><div class="line">        // We use the spread operator for better lisibility</div><div class="line">        <span class="tag">&lt;<span class="name">TodoList</span>  &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></div><div class="line">      // ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export const TodoAppContainer = connect(mapStateToProps, actionCreators)(TodoApp);</div></pre></td></tr></table></figure></p>
<p>重启你的webserver,刷新一下你的浏览器:当当.在条目上点击现在可以切换它的状态.如果你查看Redux dev tools,你可以看到触发的action和后继的更新.</p>
<h2 id="改变目前的过滤器"><a href="#改变目前的过滤器" class="headerlink" title="改变目前的过滤器"></a>改变目前的过滤器</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/3949d4f38912e4b6b8e60fc4c553614d4076028c" target="_blank" rel="external">相关代码在在这里</a></p>
<p>现在每件事情都已经配置完毕,写其他的action是件小事.我们继续创建你希望的<code>CHANGE_FILTER</code>action,改变当前state的filter,由此仅仅显示过滤过的条目.<br>开始创建action creator：<br><code>src/action_creators.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CHANGE_FILTER'</span>,</div><div class="line">    filter</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在写reducer的单元测试:<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles CHANGE_FILTER by changing the filter'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ],</div><div class="line">      <span class="attr">filter</span>: <span class="string">'all'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CHANGE_FILTER'</span>,</div><div class="line">      <span class="attr">filter</span>: <span class="string">'active'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ],</div><div class="line">      <span class="attr">filter</span>: <span class="string">'active'</span></div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>关联的reducer函数:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFilter</span>(<span class="params">state, filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.set(<span class="string">'filter'</span>, filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_COMPLETE'</span>:</div><div class="line">      <span class="keyword">return</span> toggleComplete(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'CHANGE_FILTER'</span>:</div><div class="line">      <span class="keyword">return</span> changeFilter(state, action.filter);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们把<code>changeFilter</code>回调函数传递给<code>TodoTools</code>组件:<br><code>TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"todoapp"</span>&gt;</span></div><div class="line">        // ...</div><div class="line">        <span class="tag">&lt;<span class="name">TodoTools</span> <span class="attr">changeFilter</span>=<span class="string">&#123;this.props.changeFilter&#125;</span></span></div><div class="line">                   <span class="attr">filter</span>=<span class="string">&#123;this.props.filter&#125;</span></div><div class="line">                   <span class="attr">nbActiveItems</span>=<span class="string">&#123;this.getNbActiveItems()&#125;</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>完成了,第一个filter selector工作完美</p>
<h2 id="Item编辑"><a href="#Item编辑" class="headerlink" title="Item编辑"></a>Item编辑</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/2a7b1138f778524d4aa7eac193c995258d28c5a3" target="_blank" rel="external">代码在这里</a><br> 当用户编辑一个条目,实际上是两个actions触发的三个可能性:</p>
<ul>
<li>用户输入编辑模式:<code>EDIT_ITEM</code></li>
<li>用户退出编辑模式(不保存变化):<code>CANCEL_EDITING</code></li>
<li>用户验证他的编辑(保存变化):<code>DONE_EDITING</code></li>
</ul>
<p>我们可以为三个actions编写action creators：<br><code>src/action_creators.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">editItem</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'EDIT_ITEM'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelEditing</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CANCEL_EDITING'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doneEditing</span>(<span class="params">itemId, newText</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'DONE_EDITING'</span>,</div><div class="line">    itemId,</div><div class="line">    newText</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在为这些actions编写单元测试:<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles EDIT_ITEM by setting editing to true'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'EDIT_ITEM'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles CANCEL_EDITING by setting editing to false'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CANCEL_EDITING'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles DONE_EDITING by setting by updating the text'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'DONE_EDITING'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">newText</span>: <span class="string">'Redux'</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在我们可以开发reducer函数,实际操作三个actions:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findItemIndex</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.get(<span class="string">'todos'</span>).findIndex(</div><div class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// We can refactor the toggleComplete function to use findItemIndex</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .update(<span class="string">'status'</span>, status =&gt; status === <span class="string">'active'</span> ? <span class="string">'completed'</span> : <span class="string">'active'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">editItem</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelEditing</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">false</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doneEditing</span>(<span class="params">state, itemId, newText</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">false</span>)</div><div class="line">    .set(<span class="string">'text'</span>, newText);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'EDIT_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> editItem(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'CANCEL_EDITING'</span>:</div><div class="line">      <span class="keyword">return</span> cancelEditing(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'DONE_EDITING'</span>:</div><div class="line">      <span class="keyword">return</span> doneEditing(state, action.itemId, action.newText);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="清除完成-添加和删除条目"><a href="#清除完成-添加和删除条目" class="headerlink" title="清除完成,添加和删除条目"></a>清除完成,添加和删除条目</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/c89059a6767903fdf8b9827209f92e1f7385bdb7" target="_blank" rel="external">代码在这里</a></p>
<p>三个剩下的action是:</p>
<ol>
<li><code>CLEAR_COMPLETED</code>,在<code>TodoTools</code>组件中触发,从列表中清除完成的条目</li>
<li><code>ADD_ITEM</code>,在<code>TodoHeader</code>中触发,根据用户的的输入文本来添加条目</li>
<li><code>DELETE_ITEM</code>,相似<code>TodoItem</code>中调用,删除一个条目</li>
</ol>
<p>我们现在使用的工作流是:添加action creators,单元测试reducer和代码逻辑,最终通过props传递回调函数:<br><code>src/action_creators.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearCompleted</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CLEAR_COMPLETED'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'DELETE_ITEM'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles CLEAR_COMPLETED by removing all the completed items'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CLEAR_COMPLETED'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles ADD_ITEM by adding the item'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,</div><div class="line">      <span class="attr">text</span>: <span class="string">'Redux'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles DELETE_ITEM by removing the item'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'DELETE_ITEM'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearCompleted</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>,</div><div class="line">    (todos) =&gt; todos.filterNot(</div><div class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'status'</span>) === <span class="string">'completed'</span></div><div class="line">    )</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">state, text</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemId = state.get(<span class="string">'todos'</span>).reduce(<span class="function">(<span class="params">maxId, item</span>) =&gt;</span> <span class="built_in">Math</span>.max(maxId,item.get(<span class="string">'id'</span>)), <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">  <span class="keyword">const</span> newItem = <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: itemId, <span class="attr">text</span>: text, <span class="attr">status</span>: <span class="string">'active'</span>&#125;);</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, (todos) =&gt; todos.push(newItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>,</div><div class="line">    (todos) =&gt; todos.filterNot(</div><div class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">    )</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'CLEAR_COMPLETED'</span>:</div><div class="line">      <span class="keyword">return</span> clearCompleted(state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> addItem(state, action.text);</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> deleteItem(state, action.itemId);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;</div><div class="line">      &lt;section className="todoapp"&gt;</div><div class="line">        // We pass down the addItem callback</div><div class="line">        &lt;TodoHeader addItem=&#123;this.props.addItem&#125;/&gt;</div><div class="line">        &lt;TodoList &#123;...this.props&#125; /&gt;</div><div class="line">        // We pass down the clearCompleted callback</div><div class="line">        &lt;TodoTools changeFilter=&#123;this.props.changeFilter&#125;</div><div class="line">                    filter=&#123;this.props.filter&#125;</div><div class="line">                    nbActiveItems=&#123;this.getNbActiveItems()&#125;</div><div class="line">                    clearCompleted=&#123;this.props.clearCompleted&#125;/&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">      &lt;Footer /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我们的TodoMVC app现在完成了.</p>
<h2 id="包装起来"><a href="#包装起来" class="headerlink" title="包装起来"></a>包装起来</h2><p>这我们的测试驱动的React,Redux&amp;Immutable 技术栈</p>
<p>如果你想了解更多内容,有更多的事情等着你去挖掘<br>例如:</p>
<ul>
<li><a href="https://github.com/reactjs/react-router-redux" target="_blank" rel="external">React Redux router</a>创建完全的单页面应用</li>
<li>是由Redux在后台同构Redux,看这<a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html" target="_blank" rel="external">1教程</a>,<a href="https://blog.diacode.com/trello-clone-with-phoenix-and-react-pt-1" target="_blank" rel="external">2教程</a></li>
<li><a href="https://github.com/Ghirro/gambit" target="_blank" rel="external">Gambie</a>,简单的包装器简化到API的连接</li>
<li><a href="https://egghead.io/series/getting-started-with-redux" target="_blank" rel="external">系列视频</a>,作者是Dan Abramov(Redux的创建者)</li>
<li>Redux <a href="http://redux.js.org/docs/introduction/Ecosystem.html" target="_blank" rel="external">网站上更多的内容</a>!</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译版本,&lt;a href=&quot;http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/&quot; target=&quot;_b
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译-Immutable-js,持久化数据结构和结构共享</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91-Immutable-js,%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%BB%93%E6%9E%84%E5%85%B1%E4%BA%AB/"/>
    <id>http://yoursite.com/2017/03/08/翻译-Immutable-js,持久化数据结构和结构共享/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>为什么要用Immutable.js来代替Javascript的对象</em></p>
<blockquote>
<p>翻译版本,<a href="https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.inlzpjxr8" target="_blank" rel="external">原文请见</a></p>
<hr>
<p>把你的数据看成是不可变的会带来很多的好处.实际上在React背后有个原则:React的元素是不可变的.你可能也会对学习不可变App构架有很大兴趣.</p>
</blockquote>
<p>但是使用Immutable.js的好处是:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span> (<span class="params">todos, id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> todos.update(id,</div><div class="line">    (todo) =&gt; todo.update(<span class="string">'completed'</span>,<span class="comment">//update是immutable的方法</span></div><div class="line">      (completed) =&gt; !completed</div><div class="line">    )</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>跳过使用普通的Javascript对象(把他们看作为immutable,可以选则使用例如seamless-immutable之类的助手函数),像这样？:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span> (<span class="params">todos, id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123; &#125;, todos, &#123;</div><div class="line">    [id]: <span class="built_in">Object</span>.assign(&#123; &#125;, todos[id], &#123;</div><div class="line">      <span class="attr">completed</span>: !todos[id].completed</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Using updeep</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span> (<span class="params">todos, id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> u(&#123;</div><div class="line">    [id]: &#123;</div><div class="line">      <span class="attr">completed</span>: <span class="function">(<span class="params">completed</span>) =&gt;</span> !completed</div><div class="line">    &#125;</div><div class="line">  &#125;, todos)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="一个非常大的对象…"><a href="#一个非常大的对象…" class="headerlink" title="一个非常大的对象…"></a>一个非常大的对象…</h3><p>让我们假设todo list 里面有100,00个任务:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> todos = &#123;</div><div class="line">  ⋮</div><div class="line">  t79444dae: &#123; <span class="attr">title</span>: <span class="string">'Task 50001'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t7eaf70c3</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50002'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t2fd2ffa0</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50003'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t6321775c</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50004'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t2148bf88</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50005'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t9e37b9b6</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50006'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">tb5b1b6ae</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50007'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">tfe88b26d</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50008'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  ⋮</div><div class="line">  (<span class="number">100</span>,<span class="number">000</span> items)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>我刚刚完成第50005件任务.<br>现在我想把它标记位完成.</p>
<h3 id="使用普通Javascript-对象"><a href="#使用普通Javascript-对象" class="headerlink" title="使用普通Javascript 对象"></a>使用普通Javascript 对象</h3><p><code>var nextState=toggleTodo(todos,&#39;t2148bf88&#39;)</code></p>
<p>这个单一的操作哟花费134ms来运行.</p>
<p>为什么？因为当你使用<code>Object.assign</code>,Javascript的浅复制拷贝每一个源的每个属性到目的地.一次一个.</p>
<p>我们有100,000个todos,所以意味着有100,000个属性要拷贝.<br>这就是为什么要花这么长的时间.</p>
<hr>
<h3 id="为什么要这么做？"><a href="#为什么要这么做？" class="headerlink" title="为什么要这么做？"></a>为什么要这么做？</h3><p>在Javascript中,对象默认是可以突变(mutable)的.<br>当你克隆一个对象,Javascript有每一个属性的拷贝,所以两个对象变得完全分离的.看下图<br><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdobo2he6bj312w0i2dgz.jpg" alt="100,000个属性被(浅)复制到目的地"></p>
<p>这就允许你在拷贝以后改变任何对象的属性,对象之间也不会相互影响.甚至在把这些对象处理为不可变(immutable),Javascript也还是按照mutable来处理.</p>
<hr>
<h3 id="使用Immutable-js"><a href="#使用Immutable-js" class="headerlink" title="使用Immutable.js"></a>使用Immutable.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> todos = Immutable.fromJS(&#123;</div><div class="line">  ⋮</div><div class="line">  t79444dae: &#123; <span class="attr">title</span>: <span class="string">'Task 50001'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t7eaf70c3</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50002'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t2fd2ffa0</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50003'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t6321775c</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50004'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t2148bf88</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50005'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">t9e37b9b6</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50006'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">tb5b1b6ae</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50007'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  <span class="attr">tfe88b26d</span>: &#123; <span class="attr">title</span>: <span class="string">'Task 50008'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</div><div class="line">  ⋮</div><div class="line">  (<span class="number">100</span>,<span class="number">000</span> items)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<p>使用<code>Immutable.Map</code>来代表我们的数据,更新第50005条任务<br><code>var nextState=toggleTodo(todos,&#39;t2148bf88&#39;)</code></p>
<p>这个操作仅花费1.2ms时间去运行.速度提升了100倍以上！</p>
<p>为什么会这么快？</p>
<h3 id="持久数据结构"><a href="#持久数据结构" class="headerlink" title="持久数据结构"></a>持久数据结构</h3><p>持久数据结构(Persistent data structures)强力限制所有的操作都要返回数据结构的新版本,保持原数据结构的完整性,不能更改原数据结构.</p>
<p>这一点暗示所有的持久化数据都是不可变的.</p>
<p>在这个给定的限制下,实现持久化数据结构的库可以进行很好的优化,因为这些库知道我们不会改变我们的数据.</p>
<p>让我们看一个优化</p>
<h3 id="使用tries来优化"><a href="#使用tries来优化" class="headerlink" title="使用tries来优化"></a>使用tries来优化</h3><p>为了直观一点,试一个小例子</p>
<p>想象存储一个键-值映射:</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdocl8z802j304d08fglh.jpg" alt=""></p>
<p>我们可以把这个数据结构存储到单一的Javascirpt对象中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> data = &#123;</div><div class="line">  <span class="attr">to</span>: <span class="number">7</span>,</div><div class="line">  <span class="attr">tea</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">ted</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">ten</span>: <span class="number">12</span>,</div><div class="line">  <span class="attr">A</span>: <span class="number">15</span>,</div><div class="line">  <span class="attr">i</span>: <span class="number">11</span>,</div><div class="line">  <span class="attr">in</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">inn</span>: <span class="number">9</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是我们怎么才能创建一个trie来代替js的对象呢？他的结构看起来是这个样子的：<br><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fdocnlha2cj30eo0bhdg5.jpg" alt=""></p>
<p>基本上你可根据图上的路径从root开始获取到你需要的值.</p>
<p>如果你从root开始找<code>data.in</code>,根据标记<code>i</code>和<code>n</code>的路径.可以找到包含<code>5</code>的节点.</p>
<p>那么,怎么修改呢？</p>
<p>让我们思考一下把键<code>tea</code>的值从<code>3</code>改为<code>14</code>.</p>
<p>我们可以创建一个新的trie，尽可能的使用存在的节点.</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdocttxa1tj30cq0a7mxf.jpg" alt=""></p>
<p>老的树形结构仍然存在,而且没有变化.在实例中你可以保留一个引用</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdocuasnscj30f00clwf2.jpg" alt=""></p>
<p>在上图中如绿色部分所示,我们仅仅只需要更新4个节点来更新这个数.其他的节点是可以重新利用的。</p>
<p>下面这个图展示Immutable.js怎么实施<code>Immutable.Map</code>.创建一个每个节点有32个分支的树.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fdodbub78oj30h20cpab6.jpg" alt="Immutable.Map的实施"></p>
<p> 当我们更新一个单个项目,仅仅只要一些节点需要被重新创建.</p>
<p> Immutable.js借助crazy advanced techniques保持树形结构的紧凑,根据各种子树的各种属性来创建多种类型的节点.</p>
<p> <img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdoe03ud5ej30h907wt9c.jpg" alt=""></p>
<h3 id="并不总是如此…"><a href="#并不总是如此…" class="headerlink" title="并不总是如此…"></a>并不总是如此…</h3><p> 不要把本问的本意理解为“你总是需要Immutable.js“.不是这个意思,我只是想强调一下他的好处.解释一下为什么推荐要使用他.</p>
<p>  数据结构是很重要的,但是当我编写软件的时候,我首先要尝试最简单的方式.我过去使用数组和对象,之后当我需要速度提升的时候,我使用Immutable.js,或者是在我遇到到我需要他的时候.在只要少数的条目,还有小的对象和集合的时候,我就不会使用Immutable.js.</p>
<h2 id="是不是意思是我可能会返回去并且在后面在改变"><a href="#是不是意思是我可能会返回去并且在后面在改变" class="headerlink" title="是不是意思是我可能会返回去并且在后面在改变?"></a>是不是意思是我可能会返回去并且在后面在改变?</h2><p>  对！非常好！如果你的数据接入是通过单一,组织良好的模块.例如:</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// -- Todos.js --</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> empty = &#123; &#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">todos, id, todo</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123; &#125;, todos, &#123; [id]: todo &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getById</span> (<span class="params">todos, id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> todos[id]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>估计所有的应用代码总是要使用这个模块来获取数据.当你想改变内含的数据结构时,你仅仅需要更新这个文件.</p>
<p>这个我们叫做”实体模块“,封装了代表整个软件系统的所有内容.这个概念来自”Clean Architecture“.我计划以后来写写这个问题.</p>
<h2 id="不要把应用的逻辑和数据结构耦合在一起"><a href="#不要把应用的逻辑和数据结构耦合在一起" class="headerlink" title="不要把应用的逻辑和数据结构耦合在一起"></a><code>不要把应用的逻辑和数据结构耦合在一起</code></h2><p>我很了解应用逻辑和数据结构不耦合在一起的艰难之处.这是因为我们不知道在未来数据怎么来获取.</p>
<p>例如:我们的todo app现在管理着100,000任务.我们改为使用Immytable.js.现在每个部分都足够好和足够快.</p>
<p>突然需求来了:”任务要有一个安排者”.(类似老师布置作业给学生),”用户应该可以看到任务是谁给安排的”.</p>
<pre><code class="js"> <span class="function"><span class="keyword">function</span> <span class="title">findByAssigneeAsArray</span> (<span class="params">todos, assigneeId</span>) </span>{
  <span class="keyword">return</span> todos.filter(
    <span class="function">(<span class="params">task</span>) =&gt;</span> Task.containsAssignee(task, assigneeId)
  ).toArray()
}
</code></pre>
<hr>
<p>用户开始抱怨app变慢了,分析揭示上面这个函数是个大问题.</p>
<p>使用上面这段代码需要序列搜索100，000任务.这样做怎么能快的起来？</p>
<h3 id="要优化这个案例-我们需要改变内在的数据结构"><a href="#要优化这个案例-我们需要改变内在的数据结构" class="headerlink" title="要优化这个案例,我们需要改变内在的数据结构"></a>要优化这个案例,我们需要改变内在的数据结构</h3><p>这需要保持一个反向的查询表,连接任务安排人和任务列表的TaksID.这个优化的修改实例来自于<code>[Taskworld](https://taskworld.com/)</code>.</p>
<p>如果我们的reducer/selector/view代码和数据结构直接连系在一起,要做出这样的改变非常难.</p>
<p>所以,如果我们想快速迭代,我们需要确保很容易做出修改.从开始就保持代码整洁,书写测试,建立持续集成.</p>
<h3 id="感谢阅读！"><a href="#感谢阅读！" class="headerlink" title="感谢阅读！"></a>感谢阅读！</h3><p> 更多的讨论在<a href="https://www.reddit.com/r/reactjs/comments/5h7pqz/persistent_data_structures_and_structural_sharing/" target="_blank" rel="external">Reddit</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;为什么要用Immutable.js来代替Javascript的对象&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;翻译版本,&lt;a href=&quot;https://medium.com/@dtinth/immutable-js-persistent-data-stru
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>-翻译-Redux-Saga-完成时钟演示App</title>
    <link href="http://yoursite.com/2017/03/08/-%E7%BF%BB%E8%AF%91-Redux-Saga-%E5%AE%8C%E6%88%90%E6%97%B6%E9%92%9F%E6%BC%94%E7%A4%BAApp/"/>
    <id>http://yoursite.com/2017/03/08/-翻译-Redux-Saga-完成时钟演示App/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:44:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>翻译版本，<a href="http://ohyayanotherblog.ghost.io/redux-saga-finishing-the-clock-demo-app/" target="_blank" rel="external">原文请见</a><br><em>14 NOVEMBER 2016</em></p>
</blockquote>
<p>##实现Saga代码<br>这篇文章是三篇关于Redux Saga系列文章的第三篇,也是最后一篇.在第一部分我们先对有关的概念进行了热身.在第二部分,我们和Redux关系推进到了另一个高度.我们把Saga付诸实施.在最后一篇文章,我们把最后一部分内容写完.如果你没有克隆app repo，可以在这个<a href="https://github.com/granmoe/redux-saga-clock-tutorial" target="_blank" rel="external">地址克隆</a>,如果不想看这个repo,想直接跳到最终的app代码,可以<a href="https://github.com/granmoe/redux-saga-clock.git" target="_blank" rel="external">看这个repo</a>.   <a href="https://granmoe.github.io/redux-saga-clock/" target="_blank" rel="external">live demo看这里</a>.</p>
<hr>
<p><a href="http://www.jianshu.com/p/6f8678a6ad78" target="_blank" rel="external">第一部分译文请见</a>，<br><a href="http://www.jianshu.com/p/fad0136e77c0" target="_blank" rel="external">第二部分译文请见</a>，<br><a href="http://www.jianshu.com/p/88fc4236b505" target="_blank" rel="external">第三部分译文请见</a>.</p>
<hr>
<h2 id="What’s-my-name-agian"><a href="#What’s-my-name-agian" class="headerlink" title="What’s my name agian?"></a>What’s my name agian?</h2><p>在上一篇文章中,我们设计了基础但是有点幼稚的需求,创建了很初级时钟,可以对用户的交互操作做出一些响应.(译者：后面有几句似乎和技术没有太大关系,我就没有翻译了.请参见原文).</p>
<p>我们决定只使用最小化的redux state值有一个字段“milliseconds”来代表时钟的时间.因为我们的时钟需要向前,向后,重置,所以创建了相应的redux action去执行增,减,重置actions,这些actions可以改变state.<br>当我们进入某些saga code代码,创建一个saga监听三个actions(开始,暂停,回拨),只有收到相应action的时候,输出日志内容.最后,我们的目标是把日志输出替换成时钟实际运行的流程,例如每一秒种发送一个递减的action,因此app state的异步操作需要好好的设计.最后我们创建一个简单的React组件,可以让我们根据期望的saga代码的工作流程测试redux和saga action,观察state的更新.</p>
<p>现在我们来完成这件事,我们想给朋友留下深刻的印象,看上去有意思一点,所以会使用一些非常酷的SVG技术,当时间增加的时候,时钟可以画出一些图形.但是最重要的是使用Saga可以是app唱歌,跳舞.开始编码.</p>
<p>##实现Saga<br>我们的duck.js是非常小的,实际上仅仅需要很少几行代码去完成saga/redux.目前为止我们的duck代码是这样的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">yield</span> takeLatest([<span class="string">'start-clock'</span>, <span class="string">'pause-clock'</span>, <span class="string">'rewind-clock'</span>], handleClockAction)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Pushed this action to handleClockAction: '</span>, type)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>正如我们上一篇文章所讨论的,<code>takeLatest</code>将会监听action type数组中的任何一个action type,当每次发送的action和action type之一匹配的时候,会运行另一个流程(在我们的app中,是<code>handleClockAction</code>).<code>takeLatest</code>也会取消之前的运行流程,他也会传递整个action对象,我们可以在<code>handleClockAction</code>使用这个对象.</p>
<p>现在让我们考虑一下整个app应该怎么工作.所有的实际流程都是在<code>handelClockAction</code>中,在三个saga actions中,每一个action我们都做一些不同的工作.深入到代码的基础构架中.使用<code>if/else if</code>代码块替换<code>handleClockAction</code>的单行代码.这个代码块为每个action type提供分支判断逻辑,并且输出一些文本日志,验证代码的正确性.</p>
<p>给你几秒钟,耐心等待一下.</p>
<p>好了,下面的是我的<code>handelClockAction</code>的实际样子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if else if代码块进行分支判断执行流程</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock forward here.`</span>)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock backwards here.`</span>)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'pause-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. Guess what needs to be done here?`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>现在运行app(npm start),转到localhost:8080,打开javascript终端,测试一些saga actions(他们和SVG图下面的按钮是连接在一起的).我们可以看到每次action执行时,有相应的日志输出.</p>
<p>当我们开始clock action,我们想让时钟每100毫秒递增一次.为了这样做,从saga导入助手函数”delay”.编辑redux-saga文件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; delay, takeLatest &#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span></div></pre></td></tr></table></figure>
<hr>
<p>delay非常简单，功能不言自明.它接收一个参数,毫秒数,然后暂停执行对应的时间.例如<code>yield delay(50)</code>.在<code>if/else if</code>代码块中添加一些逻辑代码,每1000ms,输出日志.请记住,你需要这个过程无限制的重复.我们可以使用非常简单的原生javascript代码控制流来实现.我想让你先猜猜怎么实现.</p>
<p>不要偷看.</p>
<p>花点时间考虑一下.</p>
<p>好了,下面是我的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;<span class="comment">//就是这个while(true)语句保持始终运行</span></div><div class="line">      <span class="keyword">yield</span> delay(<span class="number">1000</span>)</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock forward here.`</span>)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock backwards here.`</span>)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'pause-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. Guess what needs to be done here?`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>在这一点上,打开js终端,查看日志输出,可以得到直观的信息.你将看到,start clock action暂停100毫秒,然后输出一些日志信息,之后无限地重复这个过程.注意一个关键事实,无论什么时间我们的<code>takeLatest</code>函数接收到匹配的action的时候,它会退出当前运行的<code>handleClockAction</code>.如果是暂停的action,什么事情也不做,但是还是要退出当前任何的action,猜猜我们应该怎么做？删除一点代码！暂停的时钟将会自动开始工作,因为<code>takeLatest</code>会退出当前的<code>handleClockAction</code>,不管时钟是向前还是向后运行,时钟都会停止.<br>确信你理解<code>takeLatest</code>的关键特性.在<code>handleClockAction</code>中做出合适的改变.应该想下面这样做:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(<span class="number">1000</span>)</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock forward here.`</span>)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock backwards here.`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>现在让我们在循环内真正的dispatch一个action.<br>（旁白：我们没有实际dispatch一个action，仅仅请求中间件来做这件事,暂时不要担心,我后面会解释清楚的.)</p>
<p>在Saga里面dispatch一个action,我们要使用<code>put</code> side effects,添加一行代码到duck文件里.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; put &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></div></pre></td></tr></table></figure>
<hr>
<p>通过<code>put</code>请求一个dispatch的action,简单的使用<code>yield put({ type: &#39;hi&#39;, data: &#39;I am an action&#39; })</code>就可以了.意思是在<code>put</code>里,可以调用一个action creator 返回一个单纯对象,像这样<code>yield put(someAction())</code>.(在javascript中函数的参数会立即求值).还记得我们在开始创建的那些redux action吗？我们要使用一个,转到while循环,试试<code>put</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(<span class="number">1000</span>)</div><div class="line">      <span class="keyword">yield</span> put(incrementMilliseconds())<span class="comment">//注意这一句</span></div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`Received <span class="subst">$&#123;type&#125;</span>. We need to run the clock backwards here.`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>在你的浏览器里试试.注意在SVG下面的时钟时间是递增的.</p>
<p>为了让时钟后退,可以重用start 时钟的大部分代码.</p>
<p>下面是回退的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(<span class="number">1000</span>)</div><div class="line">      <span class="keyword">yield</span> put(incrementMilliseconds())</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(<span class="number">1000</span>)</div><div class="line">      <span class="keyword">yield</span> put(decrementMilliseconds())<span class="comment">//递减</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>现在测试一下所有的saga actions,确保每件事情都工作正常.如果工作不正常,那绝对是你的错,不是我的错.开个玩笑.(译者:后面几句没有翻译)</p>
<p>激动人心的时刻是运行saga代码并且通过实验学到的了一些东西.一个提示：<code>delay</code>是阻塞的,其他的effect语句都是非阻塞的.试着使用<code>for</code>循环.要么把<code>while</code>条件改为false.我们已经放弃了promise的世界,现在我们可以使用这些简单的,可预测的,原生的javascript来表现出所有的控制流语句.</p>
<p>好了,把saga代码恢复到上面的样子.</p>
<p>做好了上面的恢复,我的saga代码已经完成,可以操作了(注意事项：在最终版本上,我已经把代码重新组织了一下,以便于阅读).</p>
<h2 id="Saga’s的方式处理异步操作"><a href="#Saga’s的方式处理异步操作" class="headerlink" title="Saga’s的方式处理异步操作"></a>Saga’s的方式处理异步操作</h2><p>好了.现在让我们再做一些事情,让我们谈谈代码是怎么工作的.Redux Saga中核心的概念是:我们实际没有像dispatch一个action到store一样执行异步操作.替代方法是:我们yield异步操作到saga middleware,然后middleware执行他们.简单的说,我们给Saga一个指示,告诉他我们希望发生什么.这些异步操作描述是遵循标准generator输出的单纯对象:<code>{value:any,done:boolean}</code>,这和我们在第一部分看到的完全一样.<br>例如,<code>yield put</code>发送一个对象到中间件,这个中间件包含一个action对象,可以dispatch一些内容给我们(译者:这个地方有点绕,其实是在异步操作完成以后,需要再次dispatch返回的结果,从而改变state，这样我们的组件才可以根据state的改变来渲染效果,例如从远程资源请求数据,通常都需要把整个操作分成几步来完成,每一步要改变不同的state,在dispatch中再dispatch)这样定义异步数据流有很多好处,其中之一是可测试性.我们可以很简单的在每一个side effect返回中间件的时候创建断言(继续关注后续的内容,有测试的深入介绍)</p>
<p> 我们应该遵循redux-saga的最佳实践,做些小小的更新,从redux-saga/effects中导入<code>call</code>,把<code>yield delay(100)</code>改为<code>yield call(delay,100)</code>.因为我们只想返回side-effects到saga中间件,saga提供了<code>call</code>effect把non-effects转变为effects.与仅仅yield<code>delay</code>自己(promise对象)不同,我们通过<code>call</code>把<code>delay</code>转变为effect,然后yield它.所有的non-effect都应该做相同的处理.<code>call</code>的语法调用一个函数,并且传递参数列表.例如:<code>yield call(fetch,url,options)</code>.最后,注意,<code>call</code>可以被promise对象,generators,或者函数使用.</p>
<h2 id="代码不要太丑陋"><a href="#代码不要太丑陋" class="headerlink" title="代码不要太丑陋"></a>代码不要太丑陋</h2><p> 我们需要创建一个文件作为app的配置,包含一些常量.为什么不叫做“config.js”在/src目录下创建,粘贴下面的内容.</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">const</span> MAX_RADIUS = <span class="number">40</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> hands = [  </div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">144000</span>, <span class="attr">maxTicks</span>: <span class="number">1</span> &#125;,</div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">36000</span>, <span class="attr">maxTicks</span>: <span class="number">4</span> &#125;,</div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">12000</span>, <span class="attr">maxTicks</span>: <span class="number">3</span> &#125;,</div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">2000</span>, <span class="attr">maxTicks</span>: <span class="number">6</span> &#125;,</div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">400</span>, <span class="attr">maxTicks</span>: <span class="number">5</span> &#125;,</div><div class="line">  &#123; <span class="attr">ms</span>: <span class="number">100</span>, <span class="attr">maxTicks</span>: <span class="number">4</span> &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> STROKE_WIDTH = MAX_RADIUS / hands.length</div><div class="line"></div><div class="line">hands = hands.map(<span class="function">(<span class="params">hand, idx</span>) =&gt;</span> &#123;  </div><div class="line">  <span class="keyword">const</span> radius = STROKE_WIDTH * (hands.length - idx)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    ...hand,</div><div class="line">    radius,</div><div class="line">    <span class="attr">circumference</span>: <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius,</div><div class="line">    <span class="attr">alpha</span>: <span class="number">1</span> - idx / hands.length</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> CLOCK_HANDS = hands</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> MINIMUM_MS = <span class="number">100</span></div></pre></td></tr></table></figure>
<hr>
<p> 这里面都有什么内容？让我解释一下,它是一组常量和计算量,描述SVG的外观.<br> 我不会详细讲这个内容,不是这里的重点.</p>
<p> 好了,现在我们的saga代码已经就绪,我们也定义了所有SVG需要的配置文件.再更新一下SVG内容,好完成app.jsx的代码.</p>
<p> ##完成 HIM<br> 下面是目前的app.jsx代码<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>  </div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; incrementMilliseconds, decrementMilliseconds, resetClock, startClock, pauseClock, rewindClock &#125; <span class="keyword">from</span> <span class="string">'duck'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  </div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">const</span> &#123;</div><div class="line">      milliseconds,</div><div class="line">      incrementMilliseconds,</div><div class="line">      decrementMilliseconds,</div><div class="line">      resetClock,</div><div class="line">      startClock,</div><div class="line">      pauseClock,</div><div class="line">      rewindClock</div><div class="line">    &#125; = <span class="keyword">this</span>.props</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">incrementMilliseconds</span> &#125; <span class="attr">onDoubleClick</span>=<span class="string">&#123;</span> <span class="attr">resetClock</span> &#125; <span class="attr">onMouseLeave</span>=<span class="string">&#123;</span> <span class="attr">decrementMilliseconds</span> &#125;</span></div><div class="line">          <span class="attr">className</span>=<span class="string">"clock"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">&#123;</span> <span class="attr">30</span> &#125; <span class="attr">stroke</span>=<span class="string">&#123;</span> '<span class="attr">rgba</span>(<span class="attr">1</span>,<span class="attr">1</span>,<span class="attr">1</span>,<span class="attr">1</span>)' &#125; <span class="attr">fill</span>=<span class="string">"orange"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; milliseconds &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">startClock</span> &#125;&gt;</span>Start Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">pauseClock</span> &#125;&gt;</span>Pause Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">rewindClock</span> &#125;&gt;</span>Rewind Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default connect(state =&gt; (&#123;  </div><div class="line">  milliseconds: state.milliseconds</div><div class="line">&#125;), (&#123;</div><div class="line">  incrementMilliseconds,</div><div class="line">  decrementMilliseconds,</div><div class="line">  resetClock,</div><div class="line">  startClock,</div><div class="line">  pauseClock,</div><div class="line">  rewindClock</div><div class="line">&#125;))(Clock)</div></pre></td></tr></table></figure></p>
<hr>
<p> 我们需要导入conifg内容,通过props传递到组件.删除一些不必要的导入文件.不再直接调用特定的actions,因为我们仅仅在saga中发出action.更新一下代码.<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>  </div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; startClock, rewindClock, pauseClock, resetClock &#125; <span class="keyword">from</span> <span class="string">'duck'</span>  </div><div class="line"><span class="keyword">import</span> &#123; CLOCK_HANDS, STROKE_WIDTH &#125; <span class="keyword">from</span> <span class="string">'config'</span></div></pre></td></tr></table></figure></p>
<hr>
<p> 现在我们有了数据,可以在SVG内画出漂亮的圆环.简单点的说我们使用同心圆代表小时/分钟/秒.时间流逝的时候,改变每一个圆环的长度.为了做SVG图片,使用了一些小技巧<a href="https://css-tricks.com/svg-line-animation-works/" target="_blank" rel="external">CSS Trick blog post</a></p>
<p> 我们不再通过props手段传递millseconds字段.每次更新milliseconds时,我们计算每一个时钟指针的位置.这像是烦人的数学计算.基本上我们遍历每一个指针,然后在下一个指针重复同样的过程,(时针就减掉小时的整倍好秒数,分钟和秒一样处理),把剩余的时间传递给下去.最小的指针对应的最小的精度单位,100ms(config.js中的MAXIMUM_MS),更新你的<code>connect</code></p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function"><span class="params">state</span> =&gt;</span> &#123;  </div><div class="line">  <span class="keyword">const</span> currentTime = state.milliseconds</div><div class="line">  <span class="keyword">let</span> remainingTime = currentTime</div><div class="line"></div><div class="line">  <span class="keyword">const</span> getTicks = <span class="function">(<span class="params">hands, timeRemaining</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> [hand, ...tailHands] = hands</div><div class="line">    hand.ticks = <span class="built_in">Math</span>.floor(timeRemaining / hand.ms)</div><div class="line">    <span class="keyword">return</span> tailHands.length ? [hand, ...getTicks(tailHands, timeRemaining % hand.ms)] : [hand]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> hands = getTicks(CLOCK_HANDS, remainingTime)</div><div class="line">    .map(<span class="function">(<span class="params">hand, idx</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> offset = state.milliseconds &gt;= hand.ms ? <span class="number">1</span> : <span class="number">0</span></div><div class="line">      <span class="keyword">const</span> position = hand.circumference - ((hand.ticks + offset) / hand.maxTicks * hand.circumference)</div><div class="line"></div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...hand,</div><div class="line">        position</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    hands</div><div class="line">  &#125;</div><div class="line">&#125;, (&#123;</div><div class="line">  startClock,</div><div class="line">  rewindClock,</div><div class="line">  resetClock,</div><div class="line">  pauseClock</div><div class="line">&#125;))(Clock)</div></pre></td></tr></table></figure>
<hr>
<p> 现在我们需要在组件中导入新的<code>指针</code>属性.在渲染方法中给props解构赋值:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">render () &#123;  </div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  hands,</div><div class="line">  startClock,</div><div class="line">  rewindClock,</div><div class="line">  resetClock,</div><div class="line">  pauseClock</div><div class="line">&#125; = <span class="keyword">this</span>.props</div></pre></td></tr></table></figure>
<hr>
<p> 为了最终版本,我们做一下最终的改变.我们更新SVG,启动<code>onMouseEnter</code>,回退<code>onMouseLeave</code>,暂停<code>onClick</code>.添加一下这些变化.</p>
<p> （译者：这一段也不翻了,原作者要喝伏特加).</p>
<p>  做好了吧,现在我们在SVG内创建同心圆,遍历<code>hands</code>并且创建<code>&lt;circle&gt;</code>SVG元素,使用我们的计算值设置每个指针的半径,位置和透明度.</p>
<p>  这是最终的更新,下面是<code>render()</code>函数返回的内容：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">return</span> (  </div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onMouseEnter</span>=<span class="string">&#123;</span> <span class="attr">startClock</span> &#125; <span class="attr">onMouseLeave</span>=<span class="string">&#123;</span> <span class="attr">rewindClock</span> &#125; <span class="attr">onDoubleClick</span>=<span class="string">&#123;</span> <span class="attr">resetClock</span> &#125;</span></span></div><div class="line">    <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">pauseClock</span> &#125; <span class="attr">className</span>=<span class="string">"clock"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</div><div class="line">    &#123; hands.map((hand, index) =&gt; &#123;</div><div class="line">      const &#123; radius, circumference, position, alpha &#125; = hand</div><div class="line">      return (</div><div class="line">        <span class="tag">&lt;<span class="name">circle</span> <span class="attr">key</span>=<span class="string">&#123;</span> <span class="attr">index</span> &#125; <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">&#123;</span> <span class="attr">radius</span> &#125; <span class="attr">stroke</span>=<span class="string">&#123;</span> `<span class="attr">rgba</span>(<span class="attr">1</span>,<span class="attr">1</span>,<span class="attr">1</span>,$&#123;<span class="attr">alpha</span>&#125;)` &#125; <span class="attr">fill</span>=<span class="string">"none"</span></span></div><div class="line">          <span class="attr">strokeWidth</span>=<span class="string">&#123;</span> <span class="attr">STROKE_WIDTH</span> &#125; <span class="attr">strokeDasharray</span>=<span class="string">&#123;</span> <span class="attr">circumference</span> &#125; <span class="attr">strokeDashoffset</span>=<span class="string">&#123;</span> <span class="attr">position</span> &#125; /&gt;</div><div class="line">      )</div><div class="line">    &#125;) &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<hr>
<p> 忘了件事情,返回duck.js文件,从config导入MINIMUM_MS:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; MINIMUM_MS &#125; <span class="keyword">from</span> <span class="string">'config'</span></div></pre></td></tr></table></figure>
<hr>
<p> 现在在delay函数调用时使用<code>MINIMUM_MS</code>替换<code>1000</code>.<br> 时钟每100ms就会滴答一下:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (type === <span class="string">'start-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(MINIMUM_MS)</div><div class="line">      <span class="keyword">yield</span> put(incrementMilliseconds())</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'rewind-clock'</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">yield</span> delay(MINIMUM_MS)</div><div class="line">      <span class="keyword">yield</span> put(decrementMilliseconds())</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p> 看看在saga中控制流程的逻辑有多容易？</p>
<h2 id="给你的时钟上发条"><a href="#给你的时钟上发条" class="headerlink" title="给你的时钟上发条"></a>给你的时钟上发条</h2><p> 现在给这段代码拧发条,<code>npm start</code>,浏览器中打开localhost:8080.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a754703b38f36735.gif?imageMogr2/auto-orient/strip" alt="redux-saga-clock.gif"></p>
<p> 这是一个能暂停,恢复,向前,向后和重置.看上去也很酷.</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p> 感谢阅读这个教程,我们涉及到了js generator和Redux saga的有关内容.我希望能帮助你理解怎么使用Redux Saga,同时还有使用的好处和背后的合理性.</p>
<p> 如果你想了解更多的Redux Saga的内容,这里还有一些很好的教程.下面是我开始学习redux saga的时候帮助我入门的内容.</p>
<ul>
<li><a href="http://yelouafi.github.io/redux-saga/docs/introduction/BeginnerTutorial.html" target="_blank" rel="external">Redux的官方文档</a>是无价之宝</li>
<li><a href="http://wecodetheweb.com/2016/01/23/handling-async-in-redux-with-sagas/" target="_blank" rel="external">Niels Gerritsen’s的Redux Saga入门教程</a>.这是我最开始学习Redux saga的教程之一,结构很清晰,帮助我跨国一些概念障碍.</li>
<li><a href="http://joelhooks.com/blog/2016/03/20/build-an-image-gallery-using-redux-saga" target="_blank" rel="external">Joel Hooks的教程</a></li>
<li><a href="http://jaysoo.ca/2016/01/03/managing-processes-in-redux-using-sagas/" target="_blank" rel="external">Jack Hsu的文章</a>.我的实例实际是这个教程的扩展.</li>
</ul>
<p>我也喜欢下面的文章,解密generators,激励我写这篇文章,没有这两个文章,我都不知道generators讲的是什么玩意.</p>
<ul>
<li><a href="https://davidwalsh.name/es6-generators" target="_blank" rel="external">David Walsh的博客,关于ES6 generator的内容,作者是kyle Simpson</a></li>
<li><a href="http://www.2ality.com/2015/03/es6-generators.html2ality" target="_blank" rel="external">Axel Rauschmeyer的ES6 generators的文章</a></li>
</ul>
<p>感谢阅读!</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译版本，&lt;a href=&quot;http://ohyayanotherblog.ghost.io/redux-saga-finishing-the-clock-demo-app/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文请见
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-Redux-Saga-hello，world!</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91-Redux-Saga-hello%EF%BC%8Cworld!/"/>
    <id>http://yoursite.com/2017/03/08/翻译-Redux-Saga-hello，world!/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>12 OCTOBER 2016</p>
<blockquote>
<p>这是翻译版本,<a href="https://ohyayanotherblog.ghost.io/redux-saga-hello-world/" target="_blank" rel="external">原文请见</a></p>
</blockquote>
<hr>
<p><a href="http://www.jianshu.com/p/6f8678a6ad78" target="_blank" rel="external">第一部分译文请见</a>，<br><a href="http://www.jianshu.com/p/fad0136e77c0" target="_blank" rel="external">第二部分译文请见</a>，<br><a href="http://www.jianshu.com/p/88fc4236b505" target="_blank" rel="external">第三部分译文请见</a>.</p>
<hr>
<p>##简单的Redux Saga 模板</p>
<p>在这个文章中,我们将完成完整的React/Redux/Redux Saga app,并且来看看为什么要这样做.</p>
<p>我已经创建了一个app的模板作为本文的起点,我们没有必要关注一些开发的细节,因为这些细节不是本系列文章的重点(我假设你已经了解React,Redux以及与此相关的开发工具.)但是我仍然会简单强调一些内容,以便于你对项目依赖包和配置有一些基础的了解.你可能是个高手,或者是个不折不扣的菜鸟(是菜鸟也没有关系)如果你不关心这些基础内容,直接跳到那副图片,看看后面的内容.</p>
<p>第一步,克隆repo,并且安装依赖包:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//原文的repo不能运行了,下面的repo是验证过的</span></div><div class="line">  git clone https:<span class="comment">//github.com/granmoe/redux-saga-clock-tutorial.git  </span></div><div class="line">cd redux-saga-clock-tutorial  </div><div class="line">npm i</div></pre></td></tr></table></figure></p>
<hr>
<p>好了做完上面的工作,使用你喜欢的编辑器打开项目,让我们先看看里面有些什么内容.<br>在我们的package.json文件中每个元素都是非常标准的,但是要注意,如果要对付不支持ES2015标砖的浏览器,需要引入babel-polyfill包.这个包必须在redux-saga之前引入(译者:redux-saga使用了ES2015的技术，所以要先获得支持才可以).</p>
<p>你也可以注意到,在package.json中有ESLint依赖包,因为我发现这个依赖包是开发中的无价之宝.</p>
<p>下面是我们的babel配置,在.babelrc文件中:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>, <span class="string">"stage-2"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>我已经决定使用es2015,react和stage-2.</p>
<p>我还想讲讲.eslintrc文件,但是我实在是不想让你看到想睡觉.</p>
<p>webpack和index.html文件没讲,但是这里估计没有人会对这两个文件感兴趣.</p>
<p>#开始进入正题吧<br><img src="http://upload-images.jianshu.io/upload_images/2044710-6a256c33dfea1ba8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="patrick Stewart McKellan Elmo.jpg"><br> app的入口文件是main.jsx:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> <span class="string">'babel-polyfill'</span> <span class="comment">// generator support  </span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>  </div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>  </div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'app.jsx'</span>  </div><div class="line"><span class="keyword">import</span> initStore <span class="keyword">from</span> <span class="string">'store'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> store = initStore()</div><div class="line"></div><div class="line">ReactDOM.render(  </div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;</span> <span class="attr">store</span> &#125;&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div></pre></td></tr></table></figure>
<hr>
<p> 这里我们导入一些依赖项(包括babel-polyfill),导入根组件,redux store的配置,实例化store,然后在经过Provider class包装的”app”div的中使用ReactDOM渲染出根组件,这样以来,在app中所有组件树种的react组件都可以很容易的接入到我们的store实例.</p>
<p> 查看store.js,代码中我们使用saga middleware来配置我们的store:</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">const</span> sagaMiddleware = createSagaMiddleware()</div><div class="line"></div><div class="line">  <span class="keyword">const</span> store = createStore(</div><div class="line">    rootReducer,</div><div class="line">    applyMiddleware(sagaMiddleware)</div><div class="line">  )</div><div class="line"></div><div class="line">  sagaMiddleware.run(rootSaga)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> store</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p> 首先我们使用<code>createSagaMiddleware</code>方法来创建middleware实例.接下来,把根reducer和middleware传递到<code>createStore</code>,这就创建了一个redux store.然后把我们app的root saga传递进saga middleware.这一步一定要在redux store实例化以后再执行.<code>rootSaga</code>是顶级generator,这个generator负责代理其他所有的generators的工作(马上会看到.)</p>
<p> ##上面都是些什么见鬼的代码,你个王八蛋(译者:原意直接翻译啊)<br> 其实我们已经有了有趣的东西,我们的代码基本上依赖两个文件.”app.jsx”是一个react组件,可以根据app的state和基于DOM事件系统的actions来返回渲染的html标记.”duck.js”包含单纯对象actions和reducer,这两个函数一起工作描述出怎么修改state.其中也包含了所有的控制流代码,控制流代码描述了整个app的处理过程.如果你很熟悉标准的鸭子模型,我仅仅修改了鸭子模型,让他很容易包含saga代码.让我们使用鸭子模块来工作吧.</p>
<p>  我们将会创建一个可以控制的时钟.开始来想想app需要的最精简的sate结构.在任何时间我们要询问app的状态是”现在几点了？”所有我们需要存储的就是单个的数字.现在让我们来看看怎么改变这个状态.好的,我们我们将制作一个时钟,用户可以向前,向后,暂停和重置.这里的构想意味着我们表征时间的代码逻辑需要增,减,什么也不做,重置到0.什么事也不做意味着不需要sate发生改变,所以我们留下增加,减少,重置.我们要显示时间的毫秒数,因此app的state就定为”毫秒数”.</p>
<p>  正如上面所讲的,我们在redux代码中使用鸭子模型,如果你不喜欢这样做,可以分割成三个文件.<br>  让我们看看duck.js中的第一部分,<code>saga actions</code>.</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> &#123; takeLatest &#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span></div><div class="line"><span class="keyword">const</span> initialState = &#123;  </div><div class="line">  <span class="attr">milliseconds</span>: <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span> (<span class="params">currentState = initialState, action</span>) </span>&#123;  </div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'reset-clock'</span>:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...currentState,</div><div class="line">        <span class="attr">milliseconds</span>: <span class="number">0</span></div><div class="line">      &#125;</div><div class="line">    <span class="keyword">case</span> <span class="string">'increment-milliseconds'</span>:</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...currentState,</div><div class="line">        <span class="attr">milliseconds</span>: currentState.milliseconds + <span class="number">100</span></div><div class="line">      &#125;</div><div class="line">    <span class="keyword">case</span> <span class="string">'decrement-milliseconds'</span>:</div><div class="line">      <span class="keyword">if</span> (!currentState.milliseconds) &#123; <span class="keyword">return</span> currentState &#125;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        ...currentState,</div><div class="line">        <span class="attr">milliseconds</span>: currentState.milliseconds - <span class="number">100</span></div><div class="line">      &#125;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> currentState</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> resetClock = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'reset-clock'</span> &#125;) </div><div class="line"> </div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> incrementMilliseconds = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'increment-milliseconds'</span> &#125;)  </div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> decrementMilliseconds = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'decrement-milliseconds'</span> &#125;)</div></pre></td></tr></table></figure>
<hr>
<p> 上面这段代码很简单.首先由我们需求字段的起始state,接着有一个reducer,reducer实际上操作actions,它基于action type对state做出合适的修饰,之后创建新的state。最后我们export(模块模式)一些可以在其他地方调用的<code>单纯action对象</code>.(马上我们会在saga中导入action对象之一).示例代码总是这么这么的整洁.</p>
<p> 现在我们需要实现一下app的流程.在处理过程中,什么状态需要输入？这个问题的另一个问法是:app在某个特定的时间应该做什么工作？我们的时钟可以向前,向后,暂停.为了在这几个过程中相互转变,我们需要三个action,开始时钟,拨回时间,暂停时钟.</p>
<p> 从代码<code>//saga actions</code>开始,看看duck模块的剩余部分.我们已经创建了三个actions,我们的root saga在收到某个action的时候,会启动一个傻瓜处理流程.现在在代码里傻瓜处理流程只是打印一下action的名字.后续我们会开始根据action type处理具体的增,减,休眠流程.这里是duck.js的saga代码.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// saga actions</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> startClock = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'start-clock'</span> &#125;)  </div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> pauseClock = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'pause-clock'</span> &#125;)  </div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> rewindClock = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">'rewind-clock'</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// saga</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">yield</span> takeLatest([<span class="string">'start-clock'</span>, <span class="string">'pause-clock'</span>, <span class="string">'rewind-clock'</span>], handleClockAction)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">handleClockAction</span> (<span class="params">&#123; type &#125;</span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Pushed this action to handleClockAction: '</span>, type)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p> actions(严格上讲,根据术语来说应该是叫“action creators”,但是无所谓,只要你理解具体的意义就可以)应该看起来和其他的redux actions类似.但是这些action在我们的reducer中不能得到处理.如果保持仅仅在saga代码附近保留这些actions,这里的acions仅仅触发saga.做到这一点,会避免action和根据这些action做出的state修改的代码混杂在一起.显而易见,saga action仍然通脱<code>connect</code>函数绑定到store实例,并且输入到组件里.</p>
<p> 现在解释一下这个文件里奇怪的saga.你还记得<code>rootSaga</code>被传递到saga中间件,对吗？坦率讲,你可能也不知道,但是这也没关系.每次我们发出一个action,action会被推送到经过<code>sagaMiddleware.run(generator)</code>包装的generator.这就意味着,每个generator都有机会响应action,在我们的实例中,<code>rootSaga</code>遇到匹配的action type的时候才会做出响应.我们正在使用从Redux Saga获取的<code>takeLatest</code>助手函数完成这个工作.<code>takeLatest</code>接收任何与action type数组匹配的action,然后接着传递他,启动一个<code>handleClockAcion</code>流程,传递进action.<code>takeLatest</code>意思是直接收最新的action，如果现在还有正在运行的<code>handleClockAction</code>的话,在新的action开始之前,当前的这个处理流程需要先退出.<code>handleClockAction</code>,本质上是在后台启动,允许<code>rootSaga</code>保持运行状态,即使<code>handleClockAction</code>仍在运行,也可以接受下一个匹配的action.</p>
<p> 注意我们使用的<code>yield</code>关键词,回想一下,<code>yield</code>在generator中发出和接收值.在任何时间,我们<code>yield</code>一个Redux Saga助手或者effect的时候,我们就正在和Saga middleware进行通讯.在我们的上面的实例中,Redux Saga等待匹配发送到saga的action.后面我们还会更进一步深入讨论.<br> 我希望你至少对这个流程有一点感觉.我认为可能在测试过程中(译者：这里的意思是实际运行代码的过程，并不是代码的测试过程)你对这个流程更清楚一点.所以让我们看看React组件中怎么和用户进行交互的过程.<br> 在组件这一点看,“app.jsx”是非常简单的react组件.让我们看个仔细.</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>  </div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; incrementMilliseconds, decrementMilliseconds, resetClock, startClock, pauseClock, rewindClock &#125; <span class="keyword">from</span> <span class="string">'duck'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  </div><div class="line">  render () &#123;</div><div class="line">    <span class="keyword">const</span> &#123;</div><div class="line">      milliseconds,</div><div class="line">      incrementMilliseconds,</div><div class="line">      decrementMilliseconds,</div><div class="line">      resetClock,</div><div class="line">      startClock,</div><div class="line">      pauseClock,</div><div class="line">      rewindClock</div><div class="line">    &#125; = <span class="keyword">this</span>.props</div><div class="line"></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">incrementMilliseconds</span> &#125; <span class="attr">onDoubleClick</span>=<span class="string">&#123;</span> <span class="attr">resetClock</span> &#125; <span class="attr">onMouseLeave</span>=<span class="string">&#123;</span> <span class="attr">decrementMilliseconds</span> &#125;</span></div><div class="line">          <span class="attr">className</span>=<span class="string">"clock"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> <span class="attr">width</span>=<span class="string">"500"</span>&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">r</span>=<span class="string">&#123;</span> <span class="attr">30</span> &#125; <span class="attr">stroke</span>=<span class="string">&#123;</span> '<span class="attr">rgba</span>(<span class="attr">1</span>,<span class="attr">1</span>,<span class="attr">1</span>,<span class="attr">1</span>)' &#125; <span class="attr">fill</span>=<span class="string">"orange"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; milliseconds &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">startClock</span> &#125;&gt;</span>Start Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">pauseClock</span> &#125;&gt;</span>Pause Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">rewindClock</span> &#125;&gt;</span>Rewind Clock<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default connect(state =&gt; (&#123;  </div><div class="line">  milliseconds: state.milliseconds</div><div class="line">&#125;), (&#123;</div><div class="line">  incrementMilliseconds,</div><div class="line">  decrementMilliseconds,</div><div class="line">  resetClock,</div><div class="line">  startClock,</div><div class="line">  pauseClock,</div><div class="line">  rewindClock</div><div class="line">&#125;))(Clock)</div></pre></td></tr></table></figure>
<hr>
<p> 通过使用connect高内聚组件,我们可以从store的state获取一个字段,并作为props传递进入组件.我们也通过一个对象传递四个action creators.Redux把这个对象绑定到store实例中,确保我们在组件中调用这几个action的时候,他们可以正确的被dispatch.<br>  在我们的渲染中,我们返回一个<code>&lt;div&gt;</code>,这个元素中有一个SVG(后续中将会比较关键).SVG有一些事件操作句柄,这些操作句柄将会dispatch state修饰actions.接下来,会有一个<code>&lt;p&gt;</code>元素依据app的state来显示当前时间.最后我们有几个<code>&lt;button&gt;</code>s 连接到saga的actions.<br>  上面的代码都就位以后,我们就试着运行一下app,验证一下基础构架和actions的工作情况.</p>
<p>  ##到底能工作吗？<br>  回到你的终端,运行<code>npm start</code>.现在输入localhost:8080,在浏览器中打开devtools,检查一下js 终端.当你点击buttons的时候,会看到saga actions的日志输出.现在试着在SVG上点击,鼠标一定,双击action.你可以看到毫秒文本的更新.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-740c183a8fff53ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480" alt="app的界面"></p>
<p>  真好啊,我们创建了一个Redux Saga app的模板结构,了解了怎么使用<code>takeLatest</code>.还可以在终端中输出一些日志信息.棒！<br>  在下一篇文章中,我们会完成整个时钟的实施,得到一些非常酷的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;12 OCTOBER 2016&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是翻译版本,&lt;a href=&quot;https://ohyayanotherblog.ghost.io/redux-saga-hello-world/&quot; target=&quot;_blank&quot; rel=&quot;exter
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-使用Reselect改进React和Redux程序性能</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91-%E4%BD%BF%E7%94%A8Reselect%E6%94%B9%E8%BF%9BReact%E5%92%8CRedux%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2017/03/08/翻译-使用Reselect改进React和Redux程序性能/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:50:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>Written by Neil Fenton16 June 2016</em><br>  <a href="http://blog.rangle.io/react-and-redux-performance-with-reselect/" target="_blank" rel="external">原文请见</a></p>
</blockquote>
<p> <img src="https://ww2.sinaimg.cn/large/006tKfTcly1fdnldaaddyg31040g4747.gif" alt="图1"></p>
<p>React和Redux组合是非常棒的,当他们两个一起使用时,可以帮助我们在程序结构中分离关注点.即使React易用性非常强,但是总会遇到高性能需求的时间.</p>
<p>在React中最昂贵的操作就是渲染回路.当组件检测到输入的变化,渲染回路就会被触发(译注：这里的意思的组件的action会改变redux的state,变回最终又回到组件了).</p>
<p>当我们初次开始React程序的时候,我们不会担心渲染回路的花销问题.但是当我们的UI变得复杂的时候,我们需要考虑这一点.React提供了一些工具让我们能劫持渲染回路,如果渲染看上去不必要,我们就可以使用工具来阻止重渲染的发生.为了这么做,我们要敲入<code>componentShouldUpdate</code>生命周期事件,返回一个布尔值,通知组件是否应该进行更新.这是以<code>PureRenderMixin</code>作为基础,它比较输入的props和state和先前的props和state,如果两者相等就返回false.</p>
<p> 这个生命周期事件和Immutable集合一起可以实实在在的改进性能,因为我们可以很容易的决定是渲染还是不渲染组件.<br> 不幸的是,仅此而已.</p>
<p> 考虑到紧接着的问题:我们构建一个购物车,有三个输入类型：</p>
<ul>
<li>购物车里的货物</li>
<li>货物的数量</li>
<li>相应的税率(基于州或者省)</li>
</ul>
<p>问题是无论只要输入的状态一改变(新货物加入,数量的变化,选择州的变哈),每一个部分都要被重新计算和渲染.如果我们的购物车里有几百个东西,你可以想象一下这将会是一个很大的性能问题.改变税率肯能会触发购物车的重新计算,但是是不应该发生的.税率的变化仅仅会影响衍生的数据.仅仅总数,税的总数应该发生变化,并且发生后继的更新.接下来我们看看怎么修复这个问题.(译注：这段的意思是如果税率变化,在UI组件中是不应该发生渲染的,只有几个地方需要发生变化)</p>
<h2 id="Reselect前来救援"><a href="#Reselect前来救援" class="headerlink" title="Reselect前来救援"></a>Reselect前来救援</h2><p>Reselect用来记忆selectors的库.我们定义的selectors是作为函数获取Redux state的某一部分.使用记忆能力,我们可以组织不必要的衍生数据的重渲染和计算过程,由此加速了我们的app.</p>
<p>考虑下面这个示例:<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnmmp9vlrj30nr0we75c.jpg" alt=""></p>
<p>如果我们有几百甚至上千个条目,渲染购物车中的所有项目花费会非常的大,即使是税率的变化.用户每一次搜索的他的购物车的时候,我们是否应该一遍一遍的重计算？我们可以使用记忆性的selectors来阻止昂贵的计算过程.使用记忆selectors,如果Redux中的state的树很大,我们也不用担心没吃state变化的计算问题.我们也可以在前端增加额外的灵活性,把这些selectors分散到单个的组件中.</p>
<p>现在看看一个使用Reselect的简单selector:<br><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fdnrzja9zgj30nk080q31.jpg" alt="selector using Reselect"></p>
<p> 在上面的实例中,我们把item的获取函数分成两个函数,第一个函数(第3行)简单的额获取购物车中所有的items,第二个函数代表一个记忆性selector.Reselect暴露了<code>createSelector</code>API,我们可以借此创建一个记忆性的selector.这个意思是<code>getItemWithTotals</code>在第一次函数运行的时候将会进行运算.如果同一个函数再次被调用,但是输入值(<code>getItems</code>的值)没有变化,函数将会返回一个缓存(cached)的计算结果.如果items被修改了(例如：item添加,数量的变化,任何事情操作了<code>getItems</code>的结果),函数将会再次执行.</p>
<p> 这是一个非常有力的概念,允许我们在一个组件的state需要重计算的时候,完全的优化应该被渲染的组件.这意味着我们不在担心<code>getItems</code>和后继的每一次中价格的计算,但操作的时候,不会影响state的执行.</p>
<p> 我们继续这个方式来创建四个衍生数据的selectors.包括小计,税额总计和总价格.<br> <img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdnshe7qxtj30ng0es0t4.jpg" alt="四个selectors"></p>
<h2 id="使用selector"><a href="#使用selector" class="headerlink" title="使用selector"></a>使用selector</h2><p>  selectors代码完成以后,让我们看看怎么在组件中使用<code>getItemWithTitals</code>selector:</p>
<p>  <img src="https://ww3.sinaimg.cn/large/006tKfTcly1fdnskl1pn9j30s8106gms.jpg" alt=""></p>
<p>   现在我们有了有了一个组件,仅仅感知购物车中的items.这是一个不错的方式因为它和总计和小计没有任何关联.他不是可以重用的组件,但是是性能非常好的组件.和这个组件无关的变化不会引起额外的重渲染.</p>
<p>   这个方式应用到其他的购物车上意味着我们将会有一个组件负责显示小计,总计和税额计算.</p>
<p>   早一点在应用中使用这些优化措施意味着未来需要修正性能问题的时候做的工作就比较少.我建议尽可能早的使用reselect.在组件之外使用Selectors意味着我们可以容易的测试这些数据衍生计算.在Redux中使用简单的模拟数据,基于提供的数据测试期待的输出结果.</p>
<p> 进一步了解这些概念,参考<a href="https://github.com/neilff/react-redux-performance" target="_blank" rel="external">demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Written by Neil Fenton16 June 2016&lt;/em&gt;&lt;br&gt;  &lt;a href=&quot;http://blog.rangle.io/react-and-redux-performance-with-reselect/&quot; 
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-开启React,Redux和Immutable之旅-测试驱动教程(part2)</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91-%E5%BC%80%E5%90%AFReact,Redux%E5%92%8CImmutable%E4%B9%8B%E6%97%85-%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E6%95%99%E7%A8%8B(part2)/"/>
    <id>http://yoursite.com/2017/03/08/翻译-开启React,Redux和Immutable之旅-测试驱动教程(part2)/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻译版本,<a href="http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/" target="_blank" rel="external">原文请见</a></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fds4960hm8j30xc0b4weu.jpg" alt="Image由[egghead.io提供](http://egghead.io/)"></p>
<p>这是第二部分的内容.</p>
<p>在第一部分,我们罗列了app的UI,开发和单元测试的基础.</p>
<p>我们看到了app的state通过React的<code>props</code>向下传递到单个的组件,用户的actions声明为回调函数,因此app的逻辑和UI分离开来了.</p>
<h2 id="Redux的工作流介绍"><a href="#Redux的工作流介绍" class="headerlink" title="Redux的工作流介绍"></a>Redux的工作流介绍</h2><p>在这一点上,我们的UI是没有交互操作的:尽管我们已经测试了如果一个item如果被设定为<code>completed</code>,它将给文本划线,但是这里还没有方法邀请用户来完成它:</p>
<ol>
<li>state tree通过<code>props</code>定义了UI和action回调函数.</li>
<li>用户的actions,例如点击,被发送到action creator,action被它范式化.</li>
<li>redux action被传递到reducer实现实际的app逻辑</li>
<li>reducer更新state tree,dispatch state到store.</li>
<li>UI根据store里的新state tree来更新UI</li>
</ol>
<p><img src="https://ww3.sinaimg.cn/large/006tNc79ly1fdua9bq152j30f10870sn.jpg" alt="Redux working flos"></p>
<h2 id="设定初始化state"><a href="#设定初始化state" class="headerlink" title="设定初始化state"></a>设定初始化state</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/be48d4d610b3438aeb1dfcd07d317b3c72fbdb3e" target="_blank" rel="external">这部分的代码提交在这里</a></p>
<p>我们的第一个action将会允许我们在Redux store里正确的设置初始化state<br>,我们将会创建store.</p>
<p>Redux中的action是一个信息的载体(payload).action由一个JSON对象有一个<code>type</code>属性,描述action到底是做什么的,还有一部分是app需要的信息.在我们的实例中,type被设定为<code>SET_STATE</code>,我们可以添加一个state对象包含需要的state:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">  <span class="attribute">state</span>: &#123;</div><div class="line">    <span class="attribute">todos</span>: [</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">1</span>, <span class="attribute">text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">2</span>, <span class="attribute">text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">      &#123;<span class="attribute">id</span>: <span class="number">3</span>, <span class="attribute">text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>, <span class="attribute">editing</span>: false&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attribute">filter</span>: <span class="string">'all'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个action会被dispatch到一个reducer,reducer角色的是识别和实施和action对应的逻辑代码.</p>
<p>让我们为reducer来写单元测试代码<br><code>test/reducer_spec.js</code><br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="title">import</span> &#123;List, <span class="built_in">Map</span>, fromJS&#125; from <span class="string">'immutable'</span>;</div><div class="line"><span class="title">import</span> &#123;expect&#125; from <span class="string">'chai'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> reducer from <span class="string">'../src/reducer'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">'handles SET_STATE'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = <span class="built_in">Map</span>();</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attribute">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">      <span class="attribute">state</span>: <span class="built_in">Map</span>(&#123;</div><div class="line">        <span class="attribute">todos</span>: List.of(</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 1, text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 2, text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">          <span class="built_in">Map</span>(&#123;<span class="attribute">id:</span><span class="string"> 3, text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'completed'</span>&#125;)</div><div class="line">        )</div><div class="line">      &#125;)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line"></div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attribute">todos</span>: [</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 1, text</span>: <span class="string">'React'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 2, text</span>: <span class="string">'Redux'</span>, <span class="attribute">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attribute">id:</span><span class="string"> 3, text</span>: <span class="string">'Immutable'</span>, <span class="attribute">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>为了方便一点,<code>state</code>使用单纯JS对象,而不是使用Immutable数据结构.让我们的reducer来处理转变.最后,reducer将会优雅的处理<code>undefined</code>初始化state:<br><code>test/reducer_spec.js</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles SET_STATE with plain JS payload'</span>, () =&gt; &#123;</div><div class="line">    const initialState = Map();</div><div class="line">    const action = &#123;</div><div class="line"><span class="symbol">      type:</span> <span class="string">'SET_STATE'</span>,</div><div class="line"><span class="symbol">      state:</span> &#123;</div><div class="line"><span class="symbol">        todos:</span> [</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    const nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line"><span class="symbol">      todos:</span> [</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles SET_STATE without initial state'</span>, () =&gt; &#123;</div><div class="line">    const action = &#123;</div><div class="line"><span class="symbol">      type:</span> <span class="string">'SET_STATE'</span>,</div><div class="line"><span class="symbol">      state:</span> &#123;</div><div class="line"><span class="symbol">        todos:</span> [</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">          &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    const nextState = reducer(undefined, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line"><span class="symbol">      todos:</span> [</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">1</span>, <span class="string">text:</span> <span class="string">'React'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">2</span>, <span class="string">text:</span> <span class="string">'Redux'</span>, <span class="string">status:</span> <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="string">id:</span> <span class="number">3</span>, <span class="string">text:</span> <span class="string">'Immutable'</span>, <span class="string">status:</span> <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们的reducer将会匹配接收的actions的<code>type</code>,如果type是<code>SET_STATE</code>,当前的state和action运载的state融合在一起:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;<span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">state, newState</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.merge(newState);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们不得不把reducer连接到我们的app,所以当app启动初始化state.这里实际是第一次使用Redux库,安装一下<br><code>npm install —save redux@3.3.1 react-redux@4.4.1</code></p>
<p><code>src/index.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> &#123;TodoAppContainer&#125; <span class="keyword">from</span> <span class="string">'./components/TodoApp'</span>;</div><div class="line"></div><div class="line"><span class="comment">// We instantiate a new Redux store</span></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"><span class="comment">// We dispatch the SET_STATE action holding the desired state</span></div><div class="line">store.dispatch(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'SET_STATE'</span>,</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">todos</span>: [</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">    ],</div><div class="line">    <span class="attr">filter</span>: <span class="string">'all'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'../node_modules/todomvc-app-css/index.css'</span>);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="comment">// We wrap our app in a Provider component to pass the store down to the components</span></div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">TodoAppContainer</span> /&gt;</span></span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>如果你看看上面的代码段,你可以注意到我们的<code>TodoApp</code>组件实际是被<code>TodoAppContainer</code>代替.在Redux里,有两种类型的组件:展示组件和容器.我推荐你阅读一下由Dan Abramov(Redux的作者)写作的<a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.e5z2vws8e" target="_blank" rel="external">高信息量的文章</a>,强调了展示组件和容器的差异性.</p>
<p>如果我想总结得快一点,我将引用<a href="http://redux.js.org/docs/basics/UsageWithReact.html" target="_blank" rel="external">Redux 文档</a>的内容：</p>
<p>“展示组件是关于事件的样子(模板和样式),容器组件是关于事情是怎么工作的(数据获取,state更新)”.</p>
<p>所以我们创建store,传递给<code>TodoAppContainer</code>.然而为了子组件可以使用store,我们把state映射成为React组件<code>TodoApp</code>的<code>props</code>.<br><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">todos</span>: state.get(<span class="string">'todos'</span>),</div><div class="line">    <span class="attr">filter</span>: state.get(<span class="string">'filter'</span>)</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoAppContainer = connect(mapStateToProps)(TodoApp);</div></pre></td></tr></table></figure></p>
<p>如果你在浏览器中重新加载app,你应该可以看到它初始化和之前一样,不过现在使用Redux tools.</p>
<h2 id="Redux-dev-工具"><a href="#Redux-dev-工具" class="headerlink" title="Redux dev 工具"></a>Redux dev 工具</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/9e82a2bf7ffaea5d0fda6af361a126517aecc115" target="_blank" rel="external">这一部分的提交代码</a></p>
<p>现在我们已经配置了redux store和reducer.我们可以配置Redux dev tools来展现数据流开发.</p>
<p>首先,获取<a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="external">Redux dev tools Chrome extension</a></p>
<p>dev tools可以在Store创建的时候可以加载.</p>
<p><code>src/index.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> &#123;compose, createStore&#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> createStoreDevTools = compose(</div><div class="line">  <span class="built_in">window</span>.devToolsExtension ? <span class="built_in">window</span>.devToolsExtension() : <span class="function"><span class="params">f</span> =&gt;</span> f</div><div class="line">)(createStore);</div><div class="line"><span class="keyword">const</span> store = createStoreDevTools(reducer);</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdubya02s9j31cy0v6dgk.jpg" alt="Redux dev tools"></p>
<p>重新加载app,点击Redux图标,有了.</p>
<p>有三个不同的监视器可以使用:Diff监视器,日志监视器,Slider监视器.</p>
<h2 id="使用Action-Creators配置我们的actions"><a href="#使用Action-Creators配置我们的actions" class="headerlink" title="使用Action Creators配置我们的actions"></a>使用Action Creators配置我们的actions</h2><p>切换item的不同状态.</p>
<p><a href="https://github.com/phacks/redux-todomvc/commit/7a2dc0963684b569c11f92e41a324324dfb21bdc" target="_blank" rel="external">这部分的提交代码在这里</a></p>
<p>下一步是允许用户在<code>active</code>和<code>completed</code>之前切换状态：<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>, fromJS&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'../src/reducer'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles TOGGLE_COMPLETE by changing the status from active to completed'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles TOGGLE_COMPLETE by changing the status from completed to active'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">3</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>为了通过这些测试,我们更新reducer:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="comment">// We find the index associated with the itemId</span></div><div class="line">  <span class="keyword">const</span> itemIndex = state.get(<span class="string">'todos'</span>).findIndex(</div><div class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">  );</div><div class="line">  <span class="comment">// We update the todo at this index</span></div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .update(<span class="string">'status'</span>, status =&gt; status === <span class="string">'active'</span> ? <span class="string">'completed'</span> : <span class="string">'active'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// We update the state to account for the modified todo</span></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_COMPLETE'</span>:</div><div class="line">      <span class="keyword">return</span> toggleComplete(state, action.itemId);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>和<code>SET_STATE</code>的action同一个地方,我们需要让<code>TodoAppContainer</code>组件感知到action,所以<code>toggleComplete</code>回调函数会被传递到<code>TodoItem</code>组件(实际调用函数的地方).</p>
<p>在Redux中,有标准的方法来做这件事：Action Creators.</p>
<p>action creators是简单的函数,返回合适的action，这些韩式是React的<code>props</code>的一些映射之一.<br>让我们创建第一个action creator:<br><code>src/action_creators.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'TOGGLE_COMPLETE'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在,尽管<code>TodoAppcontainer</code>组件中的<code>connect</code>函数的调用可以用来获取store,我们告诉组件使用映射<code>props</code>的回调函数:<br><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">'../action_creators'</span>;</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      // ...</div><div class="line">        // We use the spread operator for better lisibility</div><div class="line">        <span class="tag">&lt;<span class="name">TodoList</span>  &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></div><div class="line">      // ...</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export const TodoAppContainer = connect(mapStateToProps, actionCreators)(TodoApp);</div></pre></td></tr></table></figure></p>
<p>重启你的webserver,刷新一下你的浏览器:当当.在条目上点击现在可以切换它的状态.如果你查看Redux dev tools,你可以看到触发的action和后继的更新.</p>
<h2 id="改变目前的过滤器"><a href="#改变目前的过滤器" class="headerlink" title="改变目前的过滤器"></a>改变目前的过滤器</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/3949d4f38912e4b6b8e60fc4c553614d4076028c" target="_blank" rel="external">相关代码在在这里</a></p>
<p>现在每件事情都已经配置完毕,写其他的action是件小事.我们继续创建你希望的<code>CHANGE_FILTER</code>action,改变当前state的filter,由此仅仅显示过滤过的条目.<br>开始创建action creator：<br><code>src/action_creators.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeFilter</span>(<span class="params">filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CHANGE_FILTER'</span>,</div><div class="line">    filter</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在写reducer的单元测试:<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles CHANGE_FILTER by changing the filter'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ],</div><div class="line">      <span class="attr">filter</span>: <span class="string">'all'</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CHANGE_FILTER'</span>,</div><div class="line">      <span class="attr">filter</span>: <span class="string">'active'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ],</div><div class="line">      <span class="attr">filter</span>: <span class="string">'active'</span></div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>关联的reducer函数:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFilter</span>(<span class="params">state, filter</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.set(<span class="string">'filter'</span>, filter);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SET_STATE'</span>:</div><div class="line">      <span class="keyword">return</span> setState(state, action.state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_COMPLETE'</span>:</div><div class="line">      <span class="keyword">return</span> toggleComplete(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'CHANGE_FILTER'</span>:</div><div class="line">      <span class="keyword">return</span> changeFilter(state, action.filter);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后我们把<code>changeFilter</code>回调函数传递给<code>TodoTools</code>组件:<br><code>TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"todoapp"</span>&gt;</span></div><div class="line">        // ...</div><div class="line">        <span class="tag">&lt;<span class="name">TodoTools</span> <span class="attr">changeFilter</span>=<span class="string">&#123;this.props.changeFilter&#125;</span></span></div><div class="line">                   <span class="attr">filter</span>=<span class="string">&#123;this.props.filter&#125;</span></div><div class="line">                   <span class="attr">nbActiveItems</span>=<span class="string">&#123;this.getNbActiveItems()&#125;</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>完成了,第一个filter selector工作完美</p>
<h2 id="Item编辑"><a href="#Item编辑" class="headerlink" title="Item编辑"></a>Item编辑</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/2a7b1138f778524d4aa7eac193c995258d28c5a3" target="_blank" rel="external">代码在这里</a><br> 当用户编辑一个条目,实际上是两个actions触发的三个可能性:</p>
<ul>
<li>用户输入编辑模式:<code>EDIT_ITEM</code></li>
<li>用户退出编辑模式(不保存变化):<code>CANCEL_EDITING</code></li>
<li>用户验证他的编辑(保存变化):<code>DONE_EDITING</code></li>
</ul>
<p>我们可以为三个actions编写action creators：<br><code>src/action_creators.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">editItem</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'EDIT_ITEM'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">cancelEditing</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CANCEL_EDITING'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">doneEditing</span>(<span class="params">itemId, newText</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'DONE_EDITING'</span>,</div><div class="line">    itemId,</div><div class="line">    newText</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在为这些actions编写单元测试:<br><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles EDIT_ITEM by setting editing to true'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'EDIT_ITEM'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles CANCEL_EDITING by setting editing to false'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CANCEL_EDITING'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles DONE_EDITING by setting by updating the text'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">true</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'DONE_EDITING'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">1</span>,</div><div class="line">      <span class="attr">newText</span>: <span class="string">'Redux'</span>,</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在我们可以开发reducer函数,实际操作三个actions:<br><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findItemIndex</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.get(<span class="string">'todos'</span>).findIndex(</div><div class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// We can refactor the toggleComplete function to use findItemIndex</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleComplete</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .update(<span class="string">'status'</span>, status =&gt; status === <span class="string">'active'</span> ? <span class="string">'completed'</span> : <span class="string">'active'</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">editItem</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">true</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelEditing</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">false</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doneEditing</span>(<span class="params">state, itemId, newText</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemIndex = findItemIndex(state, itemId);</div><div class="line">  <span class="keyword">const</span> updatedItem = state.get(<span class="string">'todos'</span>)</div><div class="line">    .get(itemIndex)</div><div class="line">    .set(<span class="string">'editing'</span>, <span class="literal">false</span>)</div><div class="line">    .set(<span class="string">'text'</span>, newText);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, todos =&gt; todos.set(itemIndex, updatedItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'EDIT_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> editItem(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'CANCEL_EDITING'</span>:</div><div class="line">      <span class="keyword">return</span> cancelEditing(state, action.itemId);</div><div class="line">    <span class="keyword">case</span> <span class="string">'DONE_EDITING'</span>:</div><div class="line">      <span class="keyword">return</span> doneEditing(state, action.itemId, action.newText);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="清除完成-添加和删除条目"><a href="#清除完成-添加和删除条目" class="headerlink" title="清除完成,添加和删除条目"></a>清除完成,添加和删除条目</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/c89059a6767903fdf8b9827209f92e1f7385bdb7" target="_blank" rel="external">代码在这里</a></p>
<p>三个剩下的action是:</p>
<ol>
<li><code>CLEAR_COMPLETED</code>,在<code>TodoTools</code>组件中触发,从列表中清除完成的条目</li>
<li><code>ADD_ITEM</code>,在<code>TodoHeader</code>中触发,根据用户的的输入文本来添加条目</li>
<li><code>DELETE_ITEM</code>,相似<code>TodoItem</code>中调用,删除一个条目</li>
</ol>
<p>我们现在使用的工作流是:添加action creators,单元测试reducer和代码逻辑,最终通过props传递回调函数:<br><code>src/action_creators.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearCompleted</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'CLEAR_COMPLETED'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,</div><div class="line">    text</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'DELETE_ITEM'</span>,</div><div class="line">    itemId</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>test/reducer_spec.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'reducer'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'handles CLEAR_COMPLETED by removing all the completed items'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'CLEAR_COMPLETED'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles ADD_ITEM by adding the item'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'ADD_ITEM'</span>,</div><div class="line">      <span class="attr">text</span>: <span class="string">'Redux'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'handles DELETE_ITEM by removing the item'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> initialState = fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">const</span> action = &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'DELETE_ITEM'</span>,</div><div class="line">      <span class="attr">itemId</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> nextState = reducer(initialState, action);</div><div class="line">    expect(nextState).to.equal(fromJS(&#123;</div><div class="line">      <span class="attr">todos</span>: [</div><div class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;,</div><div class="line">      ]</div><div class="line">    &#125;));</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>src/reducer.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearCompleted</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>,</div><div class="line">    (todos) =&gt; todos.filterNot(</div><div class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'status'</span>) === <span class="string">'completed'</span></div><div class="line">    )</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">state, text</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> itemId = state.get(<span class="string">'todos'</span>).reduce(<span class="function">(<span class="params">maxId, item</span>) =&gt;</span> <span class="built_in">Math</span>.max(maxId,item.get(<span class="string">'id'</span>)), <span class="number">0</span>) + <span class="number">1</span>;</div><div class="line">  <span class="keyword">const</span> newItem = <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: itemId, <span class="attr">text</span>: text, <span class="attr">status</span>: <span class="string">'active'</span>&#125;);</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>, (todos) =&gt; todos.push(newItem));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteItem</span>(<span class="params">state, itemId</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.update(<span class="string">'todos'</span>,</div><div class="line">    (todos) =&gt; todos.filterNot(</div><div class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'id'</span>) === itemId</div><div class="line">    )</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">state = Map(</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'CLEAR_COMPLETED'</span>:</div><div class="line">      <span class="keyword">return</span> clearCompleted(state);</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> addItem(state, action.text);</div><div class="line">    <span class="keyword">case</span> <span class="string">'DELETE_ITEM'</span>:</div><div class="line">      <span class="keyword">return</span> deleteItem(state, action.itemId);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;</div><div class="line">      &lt;section className="todoapp"&gt;</div><div class="line">        // We pass down the addItem callback</div><div class="line">        &lt;TodoHeader addItem=&#123;this.props.addItem&#125;/&gt;</div><div class="line">        &lt;TodoList &#123;...this.props&#125; /&gt;</div><div class="line">        // We pass down the clearCompleted callback</div><div class="line">        &lt;TodoTools changeFilter=&#123;this.props.changeFilter&#125;</div><div class="line">                    filter=&#123;this.props.filter&#125;</div><div class="line">                    nbActiveItems=&#123;this.getNbActiveItems()&#125;</div><div class="line">                    clearCompleted=&#123;this.props.clearCompleted&#125;/&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">      &lt;Footer /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我们的TodoMVC app现在完成了.</p>
<h2 id="包装起来"><a href="#包装起来" class="headerlink" title="包装起来"></a>包装起来</h2><p>这我们的测试驱动的React,Redux&amp;Immutable 技术栈</p>
<p>如果你想了解更多内容,有更多的事情等着你去挖掘<br>例如:</p>
<ul>
<li><a href="https://github.com/reactjs/react-router-redux" target="_blank" rel="external">React Redux router</a>创建完全的单页面应用</li>
<li>是由Redux在后台同构Redux,看这<a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html" target="_blank" rel="external">1教程</a>,<a href="https://blog.diacode.com/trello-clone-with-phoenix-and-react-pt-1" target="_blank" rel="external">2教程</a></li>
<li><a href="https://github.com/Ghirro/gambit" target="_blank" rel="external">Gambie</a>,简单的包装器简化到API的连接</li>
<li><a href="https://egghead.io/series/getting-started-with-redux" target="_blank" rel="external">系列视频</a>,作者是Dan Abramov(Redux的创建者)</li>
<li>Redux <a href="http://redux.js.org/docs/introduction/Ecosystem.html" target="_blank" rel="external">网站上更多的内容</a>!</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译版本,&lt;a href=&quot;http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/&quot; target=&quot;_b
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-开启React,Redux和Immutable之旅-测试驱动教程(part1)</title>
    <link href="http://yoursite.com/2017/03/08/%E7%BF%BB%E8%AF%91-%E5%BC%80%E5%90%AFReact,Redux%E5%92%8CImmutable%E4%B9%8B%E6%97%85-%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E6%95%99%E7%A8%8B(part1)/"/>
    <id>http://yoursite.com/2017/03/08/翻译-开启React,Redux和Immutable之旅-测试驱动教程(part1)/</id>
    <published>2017-03-08T00:04:10.000Z</published>
    <updated>2017-03-23T08:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>翻译版本,<a href="http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-1/" target="_blank" rel="external">原文请见,第一部分</a>,<a href="http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/" target="_blank" rel="external">第二部分</a></p>
</blockquote>
<p><img src="http://www.theodo.fr/uploads/blog//2016/03/course_banner.png" alt="Image 提供：[egghead.io](http://egghead.io/)"></p>
<p>几周以前,我正在漫无目的的浏览<a href="http://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>,读到一篇关于Redux的头条新闻,Redux的内容我是了解,但是另一个谈到的问题<code>javascript fatigue</code>(JavaScript 疲劳)已经困扰我了,所以我没有太关心,知道读到Redux的几个特征.</p>
<ul>
<li>强化了函数式编程,确保app行为的可预测性</li>
<li>允许app的同构,客户端和服务端的大多数逻辑都可以共享</li>
<li>时间旅行的debugger?有可能吗？</li>
</ul>
<p>Redux似乎是React程序state管理的优雅方法,再者谁说的时间旅行不可能？所以我读了<a href="http://news.ycombinator.com/" target="_blank" rel="external">文档</a>和一篇非常精彩的教程<a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html" target="_blank" rel="external">@teropa:A Comprehensive Guide to Test-First Development with Redux,React,and Immutable</a>(这一篇也是我写作的主要灵感来源).</p>
<p>我喜欢Redux,代码非常优雅,debugger令人疯狂的伟大.我的意思是-看看这个<img src="http://upload-images.jianshu.io/upload_images/2044710-b8baec21ab99e70b.gif?imageMogr2/auto-orient/strip" alt="todo-action"></p>
<p>接下来的教程第一部分希望引导你理解Redux运行的原则.教程的目的仅限于(客户端,没有同构,是比较简单的app)保持教程的简明扼要.如果你想发掘的更深一点,我仅建议你阅读上面提高的那个教程.对比版的Github repo在<a href="https://github.com/phacks/redux-todomvc" target="_blank" rel="external">这里</a>,共享代码贴合教程的步骤.如果你对代码或者教程有任何问题和建议,最好能留下留言.</p>
<p>编辑按:文章已经更新为ES2015版的句法.</p>
<h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><p>为了符合教程的目的,我们将建一个经典的<a href="http://todomvc.com/" target="_blank" rel="external">TodoMVC</a>,为了记录需要,需求如下：</p>
<ul>
<li>每一个todo可以激活或者完成</li>
<li>可以添加,编辑,删除一个todo</li>
<li>可以根据它的status来过滤筛选todos</li>
<li>激活的todos的数目显示在底部</li>
<li>完成的Todo理解可以删除</li>
</ul>
<h2 id="Reudux和Immutable：使用函数编程去营救"><a href="#Reudux和Immutable：使用函数编程去营救" class="headerlink" title="Reudux和Immutable：使用函数编程去营救"></a>Reudux和Immutable：使用函数编程去营救</h2><p>回到几个月前,我正在开发一个webapp包含仪表板. 随着app的成长,我们注意到越来越多的有害的bugs,藏在代码角落里,很难发现.类似:“如果你要导航到这一页,点击按钮,然后回到主页,喝一杯咖啡,回到这一页然后点击两次,奇怪的事情发生了.”这些bug的来源要么是异步操作(side effects)或者逻辑:一个action可能在app中有意想不到的影响,这个有时候我们还发现不了.</p>
<p>这就是Redux之所以存在的威力:整个app的state是一个单一的数据结构,state tree.这一点意思是说：在任何时刻,展示给用户的内容仅仅是state tree结果,这就是单一来源的真相(用户界面的显示内容是由state tree来决定的).每一个action接收state,应用相应的修改(例如,添加一个todo),输出更新的state tree.更新的结果渲染展示给用户.里面没有模糊的异步操作,没有变量的引用引起的不经意的修改.这个步骤使得app有了更好的结构,分离关注点,dubugging也更好用了.</p>
<p><a href="https://facebook.github.io/immutable-js" target="_blank" rel="external"><em>Immutable</em></a>是有Facebook开发的助手函数库,提供一些工具去创建和操作immutable数据结构.尽管在Redux也不是一定要使用它,但是它通过禁止对象的修改,强化了函数式编程方法.有了immutable,当我们想更新一个对象,实际上我们修改的是一个新创建的的对象,原先的对象保持不变.</p>
<p>这里是“<a href="https://facebook.github.io/immutable-js" target="_blank" rel="external">Immutable文档</a>”里面的例子:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>);</div><div class="line">assert(map1 === map2); <span class="comment">// no change</span></div><div class="line"><span class="keyword">var</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">assert(map1 !== map3); <span class="comment">// change</span></div></pre></td></tr></table></figure>
<p>我们更新了<code>map1</code>的一个值,<code>map1</code>对象保持不变,一个新的对象<code>map3</code>被创建了.</p>
<p>Immutable在store中被用来储存我们的app的state tree.很快我们会看到Immutable提供了一下操作对象的简单和有效的方法.</p>
<h2 id="配置项目"><a href="#配置项目" class="headerlink" title="配置项目"></a>配置项目</h2><p>声明:一些配置有@terops的教程启发.</p>
<p>注意事项:推荐使用Node.js&gt;=4.0.0.你可以使用nvm(node version manager)来切换不同的node.js的版本.</p>
<p><a href="https://github.com/phacks/redux-todomvc/commit/9e2d23ca16980566d9fcaeebbf198031ec55d42f" target="_blank" rel="external">这里是比较版本的提交</a></p>
<p>开始配置项目:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">mkdir</span> redux-todomvc</div><div class="line"><span class="keyword">cd</span> redux-todomvc</div><div class="line">npm init -<span class="built_in">y</span></div></pre></td></tr></table></figure>
<p>项目的目录结构如下:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├── dist</div><div class="line">│   ├── bundle<span class="selector-class">.js</span></div><div class="line">│   └── index<span class="selector-class">.html</span></div><div class="line">├── node_modules</div><div class="line">├── package<span class="selector-class">.json</span></div><div class="line">├── src</div><div class="line">├── test</div><div class="line">└── webpack<span class="selector-class">.config</span><span class="selector-class">.js</span></div></pre></td></tr></table></figure>
<p>首先创建一个简单的HTML页面,用来运行我们的app<br><code>dist/index.html</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>React TodoMVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>有了这个文件,我们写一个简单的脚本文件看看包安装的情况<br><code>src/index.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello world !'</span>);</div></pre></td></tr></table></figure>
<p>我们将会使用[Webpack]来打包成为<code>bundle.js</code>文件.Webpack的特性是速度,容易配置,大部分是热更新的.代码的更新不需要重新加载,意味着app的state保持热加载.</p>
<p>让我们安装webpack:</p>
<p><code>npm install —save-dev webpack@1.12.14 webpack-dev-server@1.14.1</code></p>
<p>app使用ES2015的语法,带来一些优异的特性和一些语法糖.如果你想了解更多的ES2015内容,这个<a href="https://github.com/DrkSephy/es6-cheatsheet" target="_blank" rel="external">recap</a>是一个不错的资源.</p>
<p>Babel用来把ES2015的语法改变为普通的JS语法:<br><code>npm install —save-dev babel-core@6.5.2 babel-loader@6.2.4 babel-preset-es2015@6.5.0</code></p>
<p>我们将使用JSX语法编写React组件,所以让我们安装Babel React package：<br><code>npm install —save-dev babel-preset-react@6.5.0</code></p>
<p>配置webpack输出源文件:<br><code>package.json</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="string">"babel"</span>: &#123;</div><div class="line">  <span class="string">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"react"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: [</div><div class="line">    <span class="string">'./src/index.js'</span></div><div class="line">  ],</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [&#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">'babel'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">'/dist'</span>,</div><div class="line">    <span class="attr">publicPath</span>: <span class="string">'/'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devServer</span>: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">'./dist'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在添加React和React热加载组件到项目中:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save react@0.14.7 react-dom@0.14.7</div><div class="line">npm install --save-dev react-hot-loader@1.3.0</div></pre></td></tr></table></figure></p>
<p>为了让热加载能运行,webpack.config.js文件中要做一些修改.</p>
<p><code>webpack.config.js</code><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// Requiring the webpack lib</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: [</div><div class="line">    <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>, <span class="comment">// Setting the URL for the hot reload</span></div><div class="line">    <span class="string">'webpack/hot/only-dev-server'</span>, <span class="comment">// Reload only the dev server</span></div><div class="line">    <span class="string">'./src/index.js'</span></div><div class="line">  ],</div><div class="line">  <span class="keyword">module</span>: &#123;</div><div class="line">    loaders: [&#123;</div><div class="line">      test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">      exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      loader: <span class="string">'react-hot!babel'</span> <span class="comment">// Include the react-hot loader</span></div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  resolve: &#123;</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.jsx'</span>]</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: __dirname + <span class="string">'/dist'</span>,</div><div class="line">    publicPath: <span class="string">'/'</span>,</div><div class="line">    filename: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  devServer: &#123;</div><div class="line">    contentBase: <span class="string">'./dist'</span>,</div><div class="line">    hot: <span class="literal">true</span> <span class="comment">// Activate hot loading</span></div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">// Wire in the hot loading plugin</span></div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="配置单元测试框架"><a href="#配置单元测试框架" class="headerlink" title="配置单元测试框架"></a>配置单元测试框架</h3><p>我们将使用Mocha和Chai来进行测试工作.这两个工具广泛的被使用,他们的输出内容对于测试驱动开发非常的好.Chai-immutable是一个chai插件,用来处理immutable数据结构.</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save immutable@<span class="number">3.7</span><span class="number">.6</span></div><div class="line">npm install --save-dev mocha@<span class="number">2.4</span><span class="number">.5</span> chai@<span class="number">3.5</span><span class="number">.0</span> chai-immutable@<span class="number">1.5</span><span class="number">.3</span></div></pre></td></tr></table></figure>
<p>在我们的例子中,我们不会依赖浏览器为基础的测试运行器例如Karma-替代方案是我们使用jsdom库,它将会使用纯javascirpt创建一个假DOM,这样做让我们的测试更加快速.</p>
<p><code>npm install —save-dev jsdom@8.0.4</code></p>
<p>我们也需要为测试写一个启动脚本,要考虑到下面的内容.</p>
<ul>
<li>模拟<code>document</code>和<code>window</code>对象,通常是由浏览器提供</li>
<li>通过<code>chia-immutable</code>告诉chai组件我们要使用immutable数据结构</li>
</ul>
<p><code>test/setup.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> jsdom <span class="keyword">from</span> <span class="string">'jsdom'</span>;</div><div class="line"><span class="keyword">import</span> chai <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> chaiImmutable <span class="keyword">from</span> <span class="string">'chai-immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> doc = jsdom.jsdom(<span class="string">'&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;'</span>);</div><div class="line"><span class="keyword">const</span> win = doc.defaultView;</div><div class="line"></div><div class="line">global.document = doc;</div><div class="line">global.window = win;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.keys(<span class="built_in">window</span>).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (!(key <span class="keyword">in</span> global)) &#123;</div><div class="line">    global[key] = <span class="built_in">window</span>[key];</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">chai.use(chaiImmutable);</div></pre></td></tr></table></figure>
<p>更新一下<code>npm test</code>脚本<br><code>package.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> "scripts": &#123;</div><div class="line">  "test": "mocha --compilers js:babel-core/register --require ./test/setup.js 'test/**/*.@(js|jsx)'",</div><div class="line">  "test:watch": "npm run test -- --watch --watch-extensions jsx"</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p><code>npm run test:watch</code>命令在windows操作系统下似乎不能工作.</p>
<p>现在,如果我们运行<code>npm run test:watch</code>,所有test目录里的<code>.js</code>,<code>.jsx</code>文件在更新自身或者源文件的时候,将会运行mocha测试.</p>
<p>配置完成了：我们可以在终端中运行<code>webpack-dev-server</code>,打开另一个终端,<code>npm run test:watch</code>.在浏览器中打开<a href="localhost:8080" target="_blank" rel="external">localhost:8080</a>.检查<code>hello world!</code>是否出现在终端中.</p>
<h2 id="构建state-tree"><a href="#构建state-tree" class="headerlink" title="构建state tree"></a>构建state tree</h2><p>之前提到过,state tree是能提供app所有信息的数据结构.这个结构需要在实际开发之前经过深思熟虑,因为它将影响一些代码的结构和交互作用.</p>
<p>作为示例,我们app是一个TODO list由几个条目组合而成</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdtq17eheyj30c70600sj.jpg" alt="state tree 1"><br>每一个条目有一个文本,为了便于操作,设一个id,此外每个item有两个状态之一:活动或者完成：最后一个条目需要一个可编辑的状态(当用户想编辑的文本的时候),<br>所以我们需要保持下面的数据结构:<br><img src="https://ww2.sinaimg.cn/large/006tNc79ly1fdtqcw4ofzj30jy083jra.jpg" alt="state tree 2"></p>
<p>也有可能基于他们的状态进行筛选,所以我们天剑<code>filter</code>条目来获取最终的state tree:<br><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fdtqcvvz68j30p60ar748.jpg" alt="sate tree 3"></p>
<h2 id="创建UI"><a href="#创建UI" class="headerlink" title="创建UI"></a>创建UI</h2><p>首先我们把app分解为下面的组件:</p>
<ul>
<li><code>TodoHeader</code>组件是创建新todo的输入组件</li>
<li><code>TodoList</code>组件是todo的列表</li>
<li><code>todoItem</code>是一个todo</li>
<li><code>todoInput</code>是编辑todo的输入框</li>
<li><code>TodoTools</code>是显示未完成的条目数量,过滤器和清除完成的按钮</li>
<li><code>footer</code>是显示信息的,没有具体的逻辑</li>
</ul>
<p>我们也创建<code>TodoApp</code>组件组织所有的其他组件.</p>
<p>首次运行我们的组件</p>
<p><em>提示:</em><a href="https://github.com/phacks/redux-todomvc/commit/d1d2a56a8d2b4f898ed8fdf20f55e7f7f11ad6ad" target="_blank" rel="external">运行这个版本</a></p>
<p>正如我们所见的,我们将会把所有组件放到合并成一个<code>TodoApp</code>组件.所以让我们添加组件到<code>index.html</code>文件的<code>#app</code>DIV中:<br><code>src/index.jsx</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> TodoApp <span class="keyword">from</span> <span class="string">'./components/TodoApp'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> todos = List.of(</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;)</div><div class="line">);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoApp</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<p>因为我们在<code>index.jsx</code>文件中使用JSX语法,需要在wabpack中扩展<code>.jsx</code>.修改如下:<br><code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> entry: [</div><div class="line">  <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</div><div class="line">  <span class="string">'webpack/hot/only-dev-server'</span>,</div><div class="line">  <span class="string">'./src/index.jsx'</span> <span class="comment">// Change the index file extension</span></div><div class="line">],</div></pre></td></tr></table></figure></p>
<h2 id="编写todo-list-UI"><a href="#编写todo-list-UI" class="headerlink" title="编写todo list UI"></a>编写todo list UI</h2><p>现在我们编写第一版本的<code>TodoApp</code>组件,用来显示todo项目列表:<br><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  getItems() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.todos || [];</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"todoapp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">            &#123;this.getItems().map(item =&gt;</div><div class="line">              <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"active"</span> <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></div><div class="line">                         <span class="attr">className</span>=<span class="string">"toggle"</span> /&gt;</div><div class="line">                  <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"todo"</span>&gt;</span></div><div class="line">                    &#123;item.get('text')&#125;</div><div class="line">                  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">                  <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">              <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            )&#125;</div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>要记住两件事情:<br>第一个,如果你看到的结果不太好,修复它,我们将会使用<a href="https://github.com/tastejs/todomvc-app-css" target="_blank" rel="external">todomvc-app-css</a>包来补充一些需要的样式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save todomvc-app-css@<span class="number">2.0</span><span class="number">.4</span></div><div class="line">npm install style-loader@<span class="number">0.13</span><span class="number">.0</span> css-loader@<span class="number">0.23</span><span class="number">.1</span> --save-dev</div></pre></td></tr></table></figure></p>
<p>我们需要告诉webpack去加载css 样式文件:<br><code>webpack.config.js</code><br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">module</span>: &#123;</div><div class="line">  loaders: [&#123;</div><div class="line">    test: <span class="regexp">/\.jsx?$/</span>,</div><div class="line">    exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">    loader: <span class="string">'react-hot!babel'</span></div><div class="line">  &#125;, &#123;</div><div class="line">    test: <span class="regexp">/\.css$/</span>,</div><div class="line">    loader: <span class="string">'style!css'</span> <span class="comment">// We add the css loader</span></div><div class="line">  &#125;]</div><div class="line">&#125;,</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure></p>
<p>然后在<code>inde.jsx</code>文件中添加样式:<br><code>src/index.jsx</code><br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="function"><span class="title">require</span>(<span class="params">'../node_modules/todomvc-app-css/index.css'</span>)</span>;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;TodoApp todos=&#123;todos&#125; /&gt;,</div><div class="line">  document.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>第二件事是:代码似乎很复杂,这就是我们为什么要创建两个或者多个组件的原因:<code>TodoList</code>和<code>TodoItem</code>将会分别关注条目列表和单个的条目.</p>
<p><a href="https://github.com/phacks/redux-todomvc/commit/90fe2cc5f8e1c20546c702b91230369c896b9b81" target="_blank" rel="external">这一部分的提交代码</a></p>
<p><code>src/components/TodoApp.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'./TodoList'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"todoapp"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;this.props.todos&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在<code>TodoList</code>组件中根据获取的props为每一个条目显示一个<code>TodoItem</code>组件.</p>
<p><code>src/components/TodoList.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./TodoItem'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">        &#123;this.props.todos.map(item =&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</span></div><div class="line">                    <span class="attr">text</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125; /&gt;</div><div class="line">        )&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>src/components/TodoItem.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"todo"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></div><div class="line">               <span class="attr">className</span>=<span class="string">"toggle"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"todo"</span>&gt;</span></div><div class="line">          &#123;this.props.text&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在我们深入用户的交互操作之前,我们先在组件<code>TodoItem</code>中添加一个input用于编辑<br><code>src/componensts/TodoItem.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> TextInput <span class="keyword">from</span> <span class="string">'./TextInput'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">"todo"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></div><div class="line">               <span class="attr">className</span>=<span class="string">"toggle"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"todo"</span>&gt;</span></div><div class="line">          &#123;this.props.text&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> /&gt;</span> // We add the TextInput component</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>TextInput</code>组件如下<br><code>src/compoents/TextInput.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">"edit"</span></span></span></div><div class="line">                  <span class="attr">autoFocus</span>=<span class="string">&#123;true&#125;</span></div><div class="line">                  <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="”纯“组件的好处：PureRenderMixin"><a href="#”纯“组件的好处：PureRenderMixin" class="headerlink" title="”纯“组件的好处：PureRenderMixin"></a>”纯“组件的好处：PureRenderMixin</h2><p><a href="https://github.com/phacks/redux-todomvc/commit/d9a60c94ba194f63a21df0d2e5d1e6d6a2cca506" target="_blank" rel="external">这部分的提交代码</a></p>
<p>除了允许函数式编程的样式,我们的UI是单纯的,可以使用<code>PureRenderMixin</code>来提升速度,正如<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">React 文档</a>:<br>如果你的React的组件渲染函数是”纯“(换句话就是,如果使用相同的porps和state,总是会渲染出同样的结果),你可以使用mixin在同一个案例转给你来提升性能.</p>
<p>正如<a href="https://facebook.github.io/react/docs/pure-render-mixin.html" target="_blank" rel="external">React文档</a>(我们也会在第二部分看到<code>TodoApp</code>组件有额外的角色会阻止<code>PureRenderMixin</code>的使用)展示的mixin也非常容易的添加到我们的子组件中:<br><code>npm install --save react-addons-pure-render-mixin@0.14.7</code><br><code>src/components/TodoList.jsc</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> PureRenderMixin <span class="keyword">from</span> <span class="string">'react-addons-pure-render-mixin'</span></div><div class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'./TodoItem'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>src/components/TodoItem/jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> PureRenderMixin <span class="keyword">from</span> <span class="string">'react-addons-pure-render-mixin'</span></div><div class="line"><span class="keyword">import</span> TextInput <span class="keyword">from</span> <span class="string">'./TextInput'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>src/components/TextInput.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> PureRenderMixin <span class="keyword">from</span> <span class="string">'react-addons-pure-render-mixin'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TextInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="在list组件中处理用户的actions"><a href="#在list组件中处理用户的actions" class="headerlink" title="在list组件中处理用户的actions"></a>在list组件中处理用户的actions</h2><p>好了,现在我们配置好了list组件.然而我们没有考虑添加用户的actions和怎么添加进去组件.</p>
<h3 id="props的力量"><a href="#props的力量" class="headerlink" title="props的力量"></a>props的力量</h3><p>在React中,<code>props</code>对象是当我们实例化一个容器(container)的时候,通过设定的attributes来设定.例如,如果我们实例化一个<code>TodoItem</code>元素:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TodoItem <span class="built_in">text</span>=&#123;'Text <span class="keyword">of</span> <span class="keyword">the</span> <span class="built_in">item</span>'&#125; /&gt;</div></pre></td></tr></table></figure></p>
<p>然后我们在<code>TodoItem</code>组件中获取<code>this.props.text</code>变量:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// in TodoItem.jsx</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.text);</div><div class="line"><span class="comment">// outputs 'Text of the item'</span></div></pre></td></tr></table></figure></p>
<p>Redux构架中强化使用<code>props</code>.基础的原理是state几乎都存在于他的props里面.换一种说法：对于同样一组props,两个元素的实例应该输出完全一样的结果.正如之前我们看到的,整个app的state都包含在一个state tree中:意思是说,state tree 如果通过<code>props</code>的方式传递到组件,将会完整和可预期的决定app的视觉输出.</p>
<h3 id="TodoList组件"><a href="#TodoList组件" class="headerlink" title="TodoList组件"></a>TodoList组件</h3><p><a href="https://github.com/phacks/redux-todomvc/commit/69707f07b6e9cbca7558cb85fcabff54615c1737" target="_blank" rel="external">这一部分的代码修改</a></p>
<p>在这一部分和接下来的一部分,我们将会了解一个测试优先的方法.</p>
<p>为了帮助我们测试组件,React库提供了<code>TestUtils</code>工具插件,有一下方法:</p>
<ul>
<li><code>renderIntoDocument</code>,渲染组件到附加的DOM节点</li>
<li><code>scryRenderDOMComponentsWIthTag</code>,使用提供的标签(例如<code>li</code>,<code>input</code>)在DOM中找到所有的组件实例.</li>
<li><code>scryRederDOMComponentsWithClass</code>,同上使用的是类</li>
<li><code>Simulate</code>,模拟用户的actions(例如 点击,按键,文本输入…)</li>
</ul>
<p><code>TestUtils</code>插件没有包含在<code>react</code>包中,所以需要单独安装<br><code>npm install --save-dev react-addons-test-utils@0.14.7</code></p>
<p> 我们的第一个测试将确保<code>Todolist</code>组件中,如果<code>filter</code>props被设置为<code>active</code>,将会展示所有的活动条目:<br> <code>test/components/TodoList_spec.jsx</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> TestUtils <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</div><div class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">'../../src/components/TodoList'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> &#123;List, <span class="built_in">Map</span>&#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;renderIntoDocument,</div><div class="line">       scryRenderedDOMComponentsWithTag&#125; = TestUtils;</div><div class="line"></div><div class="line">describe(<span class="string">'TodoList'</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'renders a list with only the active items if the filter is active'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> todos = List.of(</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;)</div><div class="line">    );</div><div class="line">    <span class="keyword">const</span> filter = <span class="string">'active'</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">filter</span>=<span class="string">&#123;filter&#125;</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> /&gt;</span></span></div><div class="line">    );</div><div class="line">    const items = scryRenderedDOMComponentsWithTag(component, 'li');</div><div class="line"></div><div class="line">    expect(items.length).to.equal(2);</div><div class="line">    expect(items[0].textContent).to.contain('React');</div><div class="line">    expect(items[1].textContent).to.contain('Redux');</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们可以看到测试失败了,期待的是两个活动条目,但是实际上是三个.这是再正常不过的了,因为我们没有编写实际筛选的逻辑:<br><code>src/components/TodoList.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// Filters the items according to their status</span></div><div class="line">  getItems() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.todos) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.props.todos.filter(</div><div class="line">        <span class="function">(<span class="params">item</span>) =&gt;</span> item.get(<span class="string">'status'</span>) === <span class="keyword">this</span>.props.filter</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">        // Only the filtered items are displayed</div><div class="line">        &#123;this.getItems().map(item =&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</span></div><div class="line">                    <span class="attr">text</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125; /&gt;</div><div class="line">        )&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>  第一个测试通过了.别停下来,让我们添加筛选器:<code>all</code>和<code>completed:</code><br>  <code>test/components/TodoList_spec.js</code><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'TodoList'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'renders a list with only completed items if the filter is completed'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> todos = List.of(</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>&#125;),</div><div class="line">      <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>&#125;)</div><div class="line">    );</div><div class="line">    <span class="keyword">const</span> filter = <span class="string">'completed'</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      &lt;TodoList filter=&#123;filter&#125; todos=&#123;todos&#125; /&gt;</div><div class="line">    );</div><div class="line">    const items = scryRenderedDOMComponentsWithTag(component, 'li');</div><div class="line"></div><div class="line">    expect(items.length).to.equal(1);</div><div class="line">    expect(items[0].textContent).to.contain('Immutable');</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it('renders a list with all the items', () =&gt; &#123;</div><div class="line">    const todos = List.of(</div><div class="line">      Map(&#123;id: 1, text: 'React', status: 'active'&#125;),</div><div class="line">      Map(&#123;id: 2, text: 'Redux', status: 'active'&#125;),</div><div class="line">      Map(&#123;id: 3, text: 'Immutable', status: 'completed'&#125;)</div><div class="line">    );</div><div class="line">    const filter = 'all';</div><div class="line">    const component = renderIntoDocument(</div><div class="line">      &lt;TodoList filter=&#123;filter&#125; todos=&#123;todos&#125; /&gt;</div><div class="line">    );</div><div class="line">    const items = scryRenderedDOMComponentsWithTag(component, 'li');</div><div class="line"></div><div class="line">    expect(items.length).to.equal(3);</div><div class="line">    expect(items[0].textContent).to.contain('React');</div><div class="line">    expect(items[1].textContent).to.contain('Redux');</div><div class="line">    expect(items[2].textContent).to.contain('Immutable');</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>  第三个测试失败了,因为<code>all</code>筛选器更新组件的逻辑稍稍有点不同<br>  <code>src/components/TodoList.jsx</code><br>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// ...</span></div><div class="line">export <span class="keyword">default</span> React.Component &#123;</div><div class="line">  <span class="comment">// Filters the items according to their status</span></div><div class="line">  getItems() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.todos) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.props.todos.filter(</div><div class="line">        (item) =&gt; <span class="keyword">this</span>.props.filter === <span class="string">'all'</span> || item.<span class="keyword">get</span>(<span class="string">'status'</span>) === <span class="keyword">this</span>.props.filter</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [];</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在这一点上,我们知道显示在app中的条目都是经过<code>filter</code>属性过滤的.如果在浏览器中看看结果,没有显示任何条目,因为我们还没有设置：<br><code>src/index.jsx</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// ...</span></div><div class="line"><span class="keyword">const</span> todos = List.of(</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">'React'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">'Redux'</span>, <span class="attr">status</span>: <span class="string">'active'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">'Immutable'</span>, <span class="attr">status</span>: <span class="string">'completed'</span>, <span class="attr">editing</span>: <span class="literal">false</span>&#125;)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">const</span> filter = <span class="string">'all'</span>;</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'../node_modules/todomvc-app-css/index.css'</span>)</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoApp</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;</span> <span class="attr">filter</span> = <span class="string">&#123;filter&#125;/</span>&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p><code>src/components/TodoApp.jsx</code></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span> ...</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;</div><div class="line">      &lt;section className=<span class="string">"todoapp"</span>&gt;</div><div class="line">        <span class="regexp">//</span> We pass the filter props down to the TodoList component</div><div class="line">        &lt;TodoList todos=&#123;<span class="keyword">this</span>.props.todos&#125; filter=&#123;<span class="keyword">this</span>.props.filter&#125;/&gt;</div><div class="line">      &lt;/section&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">```<span class="javascript"> </span></div><div class="line">使用在<span class="string">`index.jsc`</span>文件中声明的<span class="string">`filter`</span>常量过滤以后,我们的条目重新出现了.</div><div class="line"></div><div class="line">### TodoItem component</div><div class="line">[这部分的代码修改](https:<span class="comment">//github.com/phacks/redux-todomvc/commit/71d2835620f4ba6f3fc3665327f13ec4fba62eee)</span></div><div class="line"></div><div class="line">现在,让我们关注一下<span class="string">`TodoItem`</span>组件.首先,我们想确信<span class="string">`TodoItem`</span>组件真正渲染一个条目.我们也想测试一下还没有测试的特性,就是当一个条目完成的时候,他的文本中间有一条线</div><div class="line"><span class="string">`test/components/TodoItem_spec.js`</span></div><div class="line"> ```js</div><div class="line">  <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> TestUtils <span class="keyword">from</span> <span class="string">'react-addons-test-utils'</span>;</div><div class="line"><span class="keyword">import</span> TodoItem <span class="keyword">from</span> <span class="string">'../../src/components/TodoItem'</span>;</div><div class="line"><span class="keyword">import</span> &#123;expect&#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"></div><div class="line">const &#123;renderIntoDocument,</div><div class="line">       scryRenderedDOMComponentsWithTag&#125; = TestUtils;</div><div class="line"></div><div class="line">describe(<span class="string">'TodoItem'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  it(<span class="string">'renders an item'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    const text = <span class="string">'React'</span>;</div><div class="line">    const component = renderIntoDocument(</div><div class="line">      &lt;TodoItem text=&#123;text&#125; /&gt;</div><div class="line">    );</div><div class="line">    const todo = scryRenderedDOMComponentsWithTag(component, <span class="string">'li'</span>);</div><div class="line"></div><div class="line">    expect(todo.length).to.equal(<span class="number">1</span>);</div><div class="line">    expect(todo[<span class="number">0</span>].textContent).to.contain(<span class="string">'React'</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">'strikes through the item if it is completed'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    const text = <span class="string">'React'</span>;</div><div class="line">    const component = renderIntoDocument(</div><div class="line">      &lt;TodoItem text=&#123;text&#125; isCompleted=&#123;<span class="literal">true</span>&#125;/&gt;</div><div class="line">    );</div><div class="line">    const todo = scryRenderedDOMComponentsWithTag(component, <span class="string">'li'</span>);</div><div class="line"></div><div class="line">    expect(todo[<span class="number">0</span>].classList.contains(<span class="string">'completed'</span>)).to.equal(<span class="literal">true</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 为了使第二个测试通过,如果条目的状态是<code>complete</code>我们使用了类<code>complete</code>,它将会通过props传递向下传递.我们将会使用<code>classnames</code>包来操作我们的DOM类.<br> <code>npm install —save classnames</code></p>
<p><code>src/components/TodoItem.jsx</code></p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="comment">// We need to import the classNames object</span></div><div class="line"><span class="keyword">import</span> classNames <span class="keyword">from</span> <span class="string">'classnames'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> TextInput <span class="keyword">from</span> <span class="string">'./TextInput'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">var</span> itemClass = classNames(&#123;</div><div class="line">      <span class="string">'todo'</span>: <span class="literal">true</span>,</div><div class="line">      <span class="string">'completed'</span>: <span class="keyword">this</span>.props.isCompleted</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span>&gt;</span></span></div><div class="line">      // ...</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一个item在编辑的时候外观应该看起来不一样,由<code>isEditing</code>props来包裹.<br><code>test/components/TodoItem_spec.js</code><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'TodoItem'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line"></div><div class="line">  it(<span class="string">'should look different when editing'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> text = <span class="string">'React'</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">text</span>=<span class="string">&#123;text&#125;</span> <span class="attr">isEditing</span>=<span class="string">&#123;true&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">    const todo = scryRenderedDOMComponentsWithTag(component, 'li');</div><div class="line"></div><div class="line">    expect(todo[0].classList.contains('editing')).to.equal(true);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 为了使测试通过,我们仅仅需要更新<code>itemClass</code>对象:<br> <code>src/components/TodoItem.jsx</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">var</span> itemClass = classNames(&#123;</div><div class="line">      <span class="string">'todo'</span>: <span class="literal">true</span>,</div><div class="line">      <span class="string">'completed'</span>: <span class="keyword">this</span>.props.isCompleted,</div><div class="line">      <span class="string">'editing'</span>: <span class="keyword">this</span>.props.isEditing</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span>&gt;</span></span></div><div class="line">      // ...</div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p> 条目左侧的checkbox如果条目完成,应该标记位checked:<br> <code>test/components/TodoItem_spec.js</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'TodoItem'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line"></div><div class="line">  it(<span class="string">'should be checked if the item is completed'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> text = <span class="string">'React'</span>;</div><div class="line">    <span class="keyword">const</span> text2 = <span class="string">'Redux'</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      &lt;TodoItem text=&#123;text&#125; isCompleted=&#123;true&#125;/&gt;,</div><div class="line">      &lt;TodoItem text=&#123;text2&#125; isCompleted=&#123;false&#125;/&gt;</div><div class="line">    );</div><div class="line">    const input = scryRenderedDOMComponentsWithTag(component, 'input');</div><div class="line">    expect(input[0].checked).to.equal(true);</div><div class="line">    expect(input[1].checked).to.equal(false);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> React有个设定checkbox输入state的方法:<code>defaultChecked</code>.<br> <code>src/components/TodoItem.jsx</code><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></div><div class="line">               <span class="attr">className</span>=<span class="string">"toggle"</span></div><div class="line">               <span class="attr">defaultChecked</span>=<span class="string">&#123;this.props.isCompleted&#125;/</span>&gt;</div><div class="line">        // ...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>  我们也从<code>TodoList</code>组件向下传递<code>isCompleted</code>和<code>isEditing</code>props.<br>  <code>src/components/TodoList.jsx</code><br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="comment">// This function checks whether an item is completed</span></div><div class="line">  isCompleted(item) &#123;</div><div class="line">    <span class="keyword">return</span> item.get(<span class="string">'status'</span>) === <span class="string">'completed'</span>;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">        &#123;this.getItems().map(item =&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</span></div><div class="line">                    <span class="attr">text</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</div><div class="line">                    // <span class="attr">We</span> <span class="attr">pass</span> <span class="attr">down</span> <span class="attr">the</span> <span class="attr">info</span> <span class="attr">on</span> <span class="attr">completion</span> <span class="attr">and</span> <span class="attr">editing</span></div><div class="line">                    <span class="attr">isCompleted</span>=<span class="string">&#123;this.isCompleted(item)&#125;</span></div><div class="line">                    <span class="attr">isEditing</span>=<span class="string">&#123;item.get(</span>'<span class="attr">editing</span>')&#125; /&gt;</div><div class="line">        )&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>截止目前,我们已经能够在组件中反映出state：例如,完成的条目将会被划线.然而一个webapp将会处理诸如点击按钮的操作.在Redux的模式中,这个操作也通过<code>porps</code>来执行,稍稍特殊的是通过在props中传递回调函数来完成.通过这种方式,我们再次把UI和App的逻辑处理分离开:组件根本不需要知道按钮点击的操作具体是什么,仅仅是点击触发了一些事情.</p>
<p>为了描述这个原理,我们将会测试如果用户点击了delete按钮(红色X),<code>delteItem</code>函数将会被调用.</p>
<p> <a href="https://github.com/phacks/redux-todomvc/commit/b3a6851e8a9f65f1c44e66046bedd1db18c19a48" target="_blank" rel="external">这部分的代码修改</a> </p>
<p> <code>test/components/TodoItem_spec.jsx</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">  / ...</div><div class="line"><span class="comment">// The Simulate helper allows us to simulate a user clicking</span></div><div class="line"><span class="keyword">const</span> &#123;renderIntoDocument,</div><div class="line">       scryRenderedDOMComponentsWithTag,</div><div class="line">       Simulate&#125; = TestUtils;</div><div class="line"></div><div class="line">describe(<span class="string">'TodoItem'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'invokes callback when the delete button is clicked'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> text = <span class="string">'React'</span>;</div><div class="line">    <span class="keyword">var</span> deleted = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// We define a mock deleteItem function</span></div><div class="line">    <span class="keyword">const</span> deleteItem = <span class="function"><span class="params">()</span> =&gt;</span> deleted = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">text</span>=<span class="string">&#123;text&#125;</span> <span class="attr">deleteItem</span>=<span class="string">&#123;deleteItem&#125;/</span>&gt;</span></span></div><div class="line">    );</div><div class="line">    const buttons = scryRenderedDOMComponentsWithTag(component, 'button');</div><div class="line">    Simulate.click(buttons[0]);</div><div class="line"></div><div class="line">    // We verify that the deleteItem function has been called</div><div class="line">    expect(deleted).to.equal(true);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 为了是这个测试通过,我们必须在delete按钮声明一个<code>onClick</code>句柄,他将会调用经过props传递的<code>deleteItem</code>函数.</p>
<p> <code>src/components/TodoItem.jsx</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">        // ...</div><div class="line">        // The onClick handler will call the deleteItem function given in the props</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"destroy"</span></span></div><div class="line">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt; this.props.deleteItem(this.props.id)&#125;&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p> 重要的一点:实际删除的逻辑还没有实施,这个将是Redux的主要作用.<br> 在同一个model,我们可以测试和实施下面的特性:</p>
<ul>
<li>点击checkbox将会调用<code>toggleComplete</code>函数</li>
<li>双击条目标签,将会调用<code>editItem</code>函数</li>
</ul>
<p><code>test/components/TodoItem_spec.js</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line">describe(<span class="string">'TodoItem'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  it(<span class="string">'invokes callback when checkbox is clicked'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> text = <span class="string">'React'</span>;</div><div class="line">    <span class="keyword">var</span> isChecked = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">const</span> toggleComplete = <span class="function"><span class="params">()</span> =&gt;</span> isChecked = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">const</span> component = renderIntoDocument(</div><div class="line">      &lt;TodoItem text=&#123;text&#125; toggleComplete=&#123;toggleComplete&#125;/&gt;</div><div class="line">    );</div><div class="line">    const checkboxes = scryRenderedDOMComponentsWithTag(component, 'input');</div><div class="line">    Simulate.click(checkboxes[0]);</div><div class="line"></div><div class="line">    expect(isChecked).to.equal(true);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it('calls a callback when text is double clicked', () =&gt; &#123;</div><div class="line">    var text = 'React';</div><div class="line">    const editItem = () =&gt; text = 'Redux';</div><div class="line">    const component = renderIntoDocument(</div><div class="line">      &lt;TodoItem text=&#123;text&#125; editItem=&#123;editItem&#125;/&gt;</div><div class="line">    );</div><div class="line">    const label = component.refs.text</div><div class="line">    Simulate.doubleClick(label);</div><div class="line"></div><div class="line">    expect(text).to.equal('Redux');</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> <code>src/compoents/TodoItem.jsx</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line">render() &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;itemClass&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"view"</span>&gt;</span></div><div class="line">      // We add an onClick handler on the checkbox</div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span></span></div><div class="line">             <span class="attr">className</span>=<span class="string">"toggle"</span></div><div class="line">             <span class="attr">defaultChecked</span>=<span class="string">&#123;this.props.isCompleted&#125;</span></div><div class="line">             <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt; this.props.toggleComplete(this.props.id)&#125;/&gt;</div><div class="line">      // We add a ref attribute to the label to facilitate the testing</div><div class="line">      // The onDoubleClick handler is unsurprisingly called on double clicks</div><div class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">"todo"</span></span></div><div class="line">             <span class="attr">ref</span>=<span class="string">"text"</span></div><div class="line">             <span class="attr">onDoubleClick</span>=<span class="string">&#123;()</span> =&gt; this.props.editItem(this.props.id)&#125;&gt;</div><div class="line">        &#123;this.props.text&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">"destroy"</span></span></div><div class="line">              <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt; this.props.deleteItem(this.props.id)&#125;&gt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextInput</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p> 我们也从<code>TodoList</code>组件借助props向下传递<code>editItem</code>,<code>deleteItem</code>和<code>toggleComplete</code>函数.<br> <code>src/components/TodoList.jsx</code><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// ...</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">"main"</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">"todo-list"</span>&gt;</span></div><div class="line">          &#123;this.getItems().map(item =&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">key</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</span></div><div class="line">                      <span class="attr">text</span>=<span class="string">&#123;item.get(</span>'<span class="attr">text</span>')&#125;</div><div class="line">                      <span class="attr">isCompleted</span>=<span class="string">&#123;this.isCompleted(item)&#125;</span></div><div class="line">                      <span class="attr">isEditing</span>=<span class="string">&#123;item.get(</span>'<span class="attr">editing</span>')&#125;</div><div class="line">                      // <span class="attr">We</span> <span class="attr">pass</span> <span class="attr">down</span> <span class="attr">the</span> <span class="attr">callback</span> <span class="attr">functions</span></div><div class="line">                      <span class="attr">toggleComplete</span>=<span class="string">&#123;this.props.toggleComplete&#125;</span></div><div class="line">                      <span class="attr">deleteItem</span>=<span class="string">&#123;this.props.deleteItem&#125;</span></div><div class="line">                      <span class="attr">editItem</span>=<span class="string">&#123;this.props.editItem&#125;/</span>&gt;</div><div class="line">          )&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="配置其他组件"><a href="#配置其他组件" class="headerlink" title="配置其他组件"></a>配置其他组件</h2><p>现在,你可能对流程有些熟悉了.为了让本文不要太长,我邀请你看看组件的代码,<br><code>TextInput</code>(<a href="https://github.com/phacks/redux-todomvc/commit/8550a95fc589ecaa184367bb907c8dfeffc29d2f" target="_blank" rel="external">相关提交</a>),<code>TodoHeader</code>(<a href="https://github.com/phacks/redux-todomvc/commit/cc97354bab0a0369f0c39b34ff24b44084a75ebb" target="_blank" rel="external">相关提交</a>),<code>Todotools</code>和<code>Footer</code>(<a href="https://github.com/phacks/redux-todomvc/commit/237dbc36135427f3b5398f19fcc09ecb1e26d895" target="_blank" rel="external">相关提交</a>)组件.如果你有任何问题，请留下评论,或着在repo的issue中留下评论.</p>
<p> 你可能主要到一些函数,例如<code>editItem</code>,<code>toggleComplete</code>诸如此类的,还没有被定义.这些内容将会在教程的下一部分作为Redux actions的组成来定义,所以如果遇到错误,不要担心.</p>
<h2 id="包装起来"><a href="#包装起来" class="headerlink" title="包装起来"></a>包装起来</h2><p> 在这篇文章中,我已经演示了我的第一个React,Redux和Immutable webapp.我们的UI是模块化的.完全通过测试,准备和实际的app逻辑联系起来.怎么来连接？这些傻瓜组件什么都不知道,怎么让我们可以写出时间旅行的app?</p>
<p> <a href="http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-2/" target="_blank" rel="external">教程的第二部分在这里</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;翻译版本,&lt;a href=&quot;http://www.theodo.fr/blog/2016/03/getting-started-with-react-redux-and-immutable-a-test-driven-tutorial-part-1
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-重新思考Redux</title>
    <link href="http://yoursite.com/2017/03/03/%E7%BF%BB%E8%AF%91-%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83Redux/"/>
    <id>http://yoursite.com/2017/03/03/翻译-重新思考Redux/</id>
    <published>2017-03-03T00:04:10.000Z</published>
    <updated>2017-03-23T08:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>Arunoda Susiripala  <a href="https://voice.kadira.io/rethinking-redux-f1e96daba60c#.svx11tv8l" target="_blank" rel="external">参看原文</a>,这篇文章发布有些时间了,但仍然是很好的学习资料,而且在随着学习和了解的深入,许多有意思的想法得到证实,那感觉真是很好.比如我前面诞生了一个想法,redux就是一个数据层啊!可以借助数据库的思想来学习,包括其中诞生的一些中间思想.在这篇文章有有了新的发现,在Meteor的state管理方法直接使用了<code>minimongo cache</code>的名字,名字里的含义不言自明了.就是这些小点慢慢使我的学习过程更加深入.当然也有一些新的想法,有兴趣的往下看看.<br>   Dec 22, 2015</em></p>
<hr>
<p>   #重新思考Redux<br>   Redux是非常好的框架.这篇文章既不是Redux的扩充也不是要创建一个新的Flux库,这里是对Redux模式的重新思考.</p>
</blockquote>
<h3 id="什么是Redux"><a href="#什么是Redux" class="headerlink" title="什么是Redux?"></a>什么是Redux?</h3><p>   在我们讨论新内容之前,让我们先看看Redux是什么.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-078a8427c21f15a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="Redux flow pic"></p>
<ul>
<li>本质上,Redux是我们的app里存储客户端state的地方.</li>
<li>一些actions可以改变state.</li>
<li><p>我们使用纯函数来监听所有的actions并且使用当前的state作为上下文去创建新的state.这个函数叫reducer.<br>(之所以叫纯函数,是因为它不会突变state,而且它也没有任何异步操作.)</p>
</li>
<li><p>有很多订阅者监听着他们需要修改的state.</p>
</li>
</ul>
<p>如果你是Redux新手,看看这些由<a href="https://egghead.io/series/getting-started-with-redux" target="_blank" rel="external">Redux创建者发布的视频</a></p>
<p>我以前和你一样,但是我现在喜欢Redux.</p>
<h2 id="为什么是Redux"><a href="#为什么是Redux" class="headerlink" title="为什么是Redux?"></a>为什么是Redux?</h2><p>现在有足够的理由使用React构建app.我们可以使用父子数据流,Meteor的Tracker based system,Relay或者Mobservable.</p>
<p>这些方法对于简单app(或者中型app应用)来说还是挺好的.但是一旦app规模变大,极有可能会丧失app的控制权.</p>
<blockquote>
<p>我之所以这么说是从我两次重构kandira UI的经验来的,那个过程太痛苦了.</p>
</blockquote>
<p>能和Redux很高工作的构架就是Redux.</p>
<p>Redux是一个简单概念,它采用了一些函数式编程的概念(实际上来自Elm)和Flux的构架.</p>
<p>有了Redux,</p>
<ul>
<li>我们的state是可以预期的,在app中也是这样</li>
<li>app的大部分是纯函数,UI也是纯函数.所以很容易测试.</li>
<li>Redux是一个简单的库,所以没有任何魔法.</li>
<li>Redux里的模式被很多开发者使用.所有你可以依据很好的生态系统.</li>
</ul>
<p>上面这些观点就是我认为Redux非常重要的原因.</p>
<p>##重新思考<br>我们正在考虑使用客户端state和Metero后台交互来重写app.我们认为Redux的模型更合适.但是我们还有许多问题要考虑,在那些地方书写逻辑代码,怎么减少模板代码量.<br> 我们也不怎么确信Redux的state管理怎么和其他的state管理系统整合,比如Meteor的minimongo cache(译者:单词的含义意味着可以看做简单的mongo 数据库,看到这里你有什么想法呢？).这就是为什么我们想要寻求一些改变.</p>
<p> 现在让我们讨论一下我们建议的一些修改.</p>
<h3 id="使用Redux管理UI的state"><a href="#使用Redux管理UI的state" class="headerlink" title="使用Redux管理UI的state"></a>使用Redux管理UI的state</h3><p> 在我们的app中,我们要保留一些states,Redux就是用于UI state管理的组件.在Redux之外可能会有其他部分来管理state,例如像是REST API的缓存或者GraphQL.在Meteor中,可能是Minimongo cache.</p>
<p> ###Redux中的导航<br> update:<br>  在评论和其他地方,我准备试试simple-redux-router.看起来可以在Redux中进行导航.他允许React路由器管理布局和dispatch actions到store.<br>  我把simple-redux-router和我的sample app进行整合,整合过程还好除了即时加载过程.<br>  现在,我们准备把React Router和Redux合并.但是我们仔细考虑一下就可以发现,routing(路由)其实是另一种用户的action,类似按钮的点击action.所以router不应该成为app的管理或者app state的管理工具.<br>  理想Redux中的router应该应route的改变而发起actions.这就是我们需要做的工作.然后我们使用reducer来改变需要的app state.</p>
<h3 id="使用模块的目录结构"><a href="#使用模块的目录结构" class="headerlink" title="使用模块的目录结构"></a>使用模块的目录结构</h3><p>  推荐的是默认的布局目录结构.但是我们需要添加新的特性时,我们需要在多个目录中添加代码.<br>  有一个模式叫做<code>鸭子</code>模型,建议我们按组把相关的actions creators和reducer放到一个文件中.我们准备使用这个方法.我们也准备把相互关联的组件和redux container放到一个单一目录中.</p>
<p>  ###用于数据加载的一些助手函数.</p>
<p>  我们需要数据来渲染组件,通常我们通过action creator来做这件事.但是为了把数据加载和组件渲染很好的整合在一起,我们需要写一些模板式的代码.我们可以使用一些助手方法来消除这些模板代码.</p>
<p>  ###整合在一起<br>  为了充分理解这些理念,我们必需读一些代码.这也是我们构建实例代码app的原因.<br>  这里是repo:<a href="https://github.com/kadira-samples/rethinking-redux-demo" target="_blank" rel="external">rethinking-redux-demo</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Arunoda Susiripala  &lt;a href=&quot;https://voice.kadira.io/rethinking-redux-f1e96daba60c#.svx11tv8l&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
      <category term=" 翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>翻译-中间件和React-Redux-生命周期</title>
    <link href="http://yoursite.com/2017/03/01/%E7%BF%BB%E8%AF%91-%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8CReact-Redux-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/03/01/翻译-中间件和React-Redux-生命周期/</id>
    <published>2017-03-01T00:04:10.000Z</published>
    <updated>2017-03-23T08:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>rajaraodv </em> <a href="https://medium.com/@rajaraodv/using-middlewares-in-react-redux-apps-f7c9652610c6#.fu82u8qjf" target="_blank" rel="external">原文请参看</a>.</p>
<p>如果你使用过类似Express.js框架构建Node.js程序,你就可能在使用中间件,并且知道他们怎么工作.Redux给前端引入同样的概念.</p>
</blockquote>
<h2 id="什么是中间件？"><a href="#什么是中间件？" class="headerlink" title="什么是中间件？"></a>什么是中间件？</h2><p>中间件是可以被框架自动调用的函数,在框架中数据流结束之前,在数据流中加强或者改变输出.<br>例如:如果框架里面没有中间件是这个样子的:</p>
<p><code>funcA — calls→ funcB — calls→ funcC</code></p>
<p>添加了中间件以后,控制流就变为:<br><code>funcA — calls→ funcB — calls→ funcMiddleWare1 — back to →funcB. funcB → then calls→ funcMiddleWare2 — back to→ funcB. funcB — finally calls→ funcC</code></p>
<p>注意：funcB最终调用funcC但是在调用funcC之前要调用两个中间件.</p>
<h2 id="没有中间件的Redux生命周期"><a href="#没有中间件的Redux生命周期" class="headerlink" title="没有中间件的Redux生命周期"></a>没有中间件的Redux生命周期</h2><p>让我们想看看Redux app生命周期,来更好的理解它.</p>
<p>场景:点击”Click Me”按钮,更新”Clicked xyz times” 文本.</p>
<p>图片1</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-da53be67e7cd17d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="1*9E8kenASCn6TWNM9-dEL4Q.png"></p>
<p>场景：现在,当用户点击按钮的时候,我们想把点击的数目保存到服务器,并且在debugg中展示state的变化日志.让我们看看现在的控制流.</p>
<p>图片2</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-196ed4d492237d61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="1*kzLsHNZpJ9HVA4On9YkgAw.png"></p>
<p>在Redux中,中间件函数一个接一个的被调用,直到所有的中间件被调用,然后“Action”对象呗发送到“Reducer”.</p>
<p>注意:这就允许中间件有修改Action对象的潜力,在最终调用Reducers之前,解析AJAX调用,还可以做其他事情比如日志.Reeucers将会更新state,在app需要的时候渲染组件.</p>
<h2 id="使用中间件"><a href="#使用中间件" class="headerlink" title="使用中间件"></a>使用中间件</h2><p>Redux有个巨大的社区,已经构建了<a href="https://github.com/xgrommx/awesome-redux#react---a-javascript-library-for-building-user-interfaces" target="_blank" rel="external">大量可以完成各种任务的中间件</a>.</p>
<p>所有你需要做的就是:</p>
<ol>
<li>通过npm 安装</li>
<li>配置或者添加到Redux</li>
</ol>
<p>例如：在我前面的blog：<a href="https://medium.com/@rajaraodv/a-guide-for-building-a-react-redux-crud-app-7fe0b8943d0f#.aenutqb0r" target="_blank" rel="external">创建React Redux CRUD程序指南</a>,app为CRUD操作做AJAX请求.<br>在里面,我使用AXios的库来做AJAX调用.但是Axios返回一个Promise对象.但是Actions需要传递给Reducers的是一个纯粹的JSON对象.所以在在数据到达Reducers之前使用redux-promise解析Action中的Promise对象.</p>
<p>为了使用,首先安装.</p>
<p><code>npm install — save redux-promise</code></p>
<p>再做一点配置工作:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> ‘react’;</div><div class="line">...</div><div class="line">import &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> ‘redux’;</div><div class="line"><span class="keyword">import</span> rp <span class="keyword">from</span> ‘redux-promise’; <span class="comment">// &lt;------------ MIDDLEWARE</span></div><div class="line">...</div><div class="line"><span class="comment">//add middlewares</span></div><div class="line"><span class="keyword">const</span> createStoreWithMiddleware = applyMiddleware(rp)(createStore);</div><div class="line">ReactDOM.render(</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;createStoreWithMiddleware(reducers)&#125;</span>&gt;</span></span></div><div class="line"> <span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;browserHistory&#125;</span> <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> /&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line"> , document.getElementById(‘body’));</div></pre></td></tr></table></figure>
<hr>
<h2 id="中间件是怎么工作的？"><a href="#中间件是怎么工作的？" class="headerlink" title="中间件是怎么工作的？"></a>中间件是怎么工作的？</h2><p>如果你看了<a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a>,你就可以看到他是怎么工作的.</p>
<p>这里是伪代码:</p>
<ol>
<li>Redux调用中间件,“dispatch(函数)”,“next(函数)”和”action“JSON对象.</li>
<li>中间件检查”action”对象,看看是否有Promise对象</li>
<li>如果没有Promise对象,调用”next“函数返回到Redux.</li>
<li>如果这样做,他会附加上成功或者失败的回调函数,等待服务器的响应.</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//redux-promise middleware source code</span></div><div class="line"><span class="keyword">import</span> &#123; isFSA &#125; <span class="keyword">from</span> <span class="string">'flux-standard-action'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">val</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> val &amp;&amp; <span class="keyword">typeof</span> val.then === <span class="string">'function'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">promiseMiddleware</span>(<span class="params">&#123; dispatch &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> action =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!isFSA(action)) &#123;</div><div class="line">      <span class="keyword">return</span> isPromise(action)</div><div class="line">        ? action.then(dispatch)</div><div class="line">        : next(action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> isPromise(action.payload)</div><div class="line">      ? action.payload.then(</div><div class="line">          <span class="function"><span class="params">result</span> =&gt;</span> dispatch(&#123; ...action, <span class="attr">payload</span>: result &#125;),</div><div class="line">          error =&gt; dispatch(&#123; ...action, <span class="attr">payload</span>: error, <span class="attr">error</span>: <span class="literal">true</span> &#125;)</div><div class="line">        )</div><div class="line">      : next(action);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>更多内容请看:</p>
<ol>
<li><a href="http://redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="external">官方Redux 中间件文档</a></li>
<li><a href="https://github.com/xgrommx/awesome-redux#react---a-javascript-library-for-building-user-interfaces" target="_blank" rel="external">中间件列表</a></li>
<li>到<a href="https://medium.com/@rajaraodv/a-guide-for-building-a-react-redux-crud-app-7fe0b8943d0f#.aenutqb0r" target="_blank" rel="external">A Guide For Building A React Redux CRUD APP</a>.</li>
</ol>
<p>就这些内容了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;rajaraodv &lt;/em&gt; &lt;a href=&quot;https://medium.com/@rajaraodv/using-middlewares-in-react-redux-apps-f7c9652610c6#.fu82u8qjf&quot; ta
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript This关键字全解析</title>
    <link href="http://yoursite.com/2017/01/08/This%20keywords/"/>
    <id>http://yoursite.com/2017/01/08/This keywords/</id>
    <published>2017-01-08T00:04:10.000Z</published>
    <updated>2017-03-23T02:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2044710-9f870a42dbc62877.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200" alt="cover.jpg"></p>
<p>《你不知道的javascript》这本书读了有好几遍了，似乎每一次读都有新发现，有些内容并不是一下子可以弄懂的，每次读似乎都能明白一些概念。<br>再重读一下<code>this</code>关键字。这个概念非常灵活，也非常难掌握，所以我觉得经常读读没有坏处。期待javascript一桶江湖，这样学习的成本就低啦！<br>参考本书的第二部分的第一章，第二章。<a id="more"></a></p>
<blockquote>
<p>this关键字是js中最最复杂的机制之一。他被自动定义到所有函数的作用域中。</p>
</blockquote>
<p>在学习这个关键字的过程中似乎也走了很长时间的弯路。你要问我为什么走了很长时间的弯路，关键的地方还是没有对核心的概念彻底学习和领会，这一点和小学生学习新知识没有任何区别。要想掌握this这个关键字，需要紧扣关键概念，不要凭空想象这到底是怎么一回事。</p>
<p><strong>关键概念：js中的函数在调用的时候，一定，一定，一定会绑定在一个对象上，在分析this关键字的时候，一定要知道函数在调用的时候这个对象到底是谁？</strong>。<br><strong>切记：js中函数的调用和定义是没有任何关系的，函数所绑定的对象直到他被调用的时候才能知道。</strong></p>
<p>this关键字的不确定定是把双刃剑，一是函数调用时的对象不确定性，是js中函数的使用具有很大灵活性，每个对象都可以借用其他函数来完成功能。二是这也造成了this学习的一些困扰。所以在学习的时候先要理解this关键字的优点，然后再去学习造成困扰的地方</p>
<p>首先看看第一段代码<br>page 75<br>    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line"><span class="comment">//注意只是定义了一个函数，并未调用，这时候函数是没有绑定任何对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">identify</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name.toUpperCase();</div><div class="line">&#125;</div><div class="line"><span class="comment">//同上面的函数,但是这个函数内部有点复杂，如果下面的代码看不懂</span></div><div class="line"><span class="comment">//可以只看上面的函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> greeting = <span class="string">"Hello, I'm "</span> + identify.call( <span class="keyword">this</span> );</div><div class="line">	<span class="built_in">console</span>.log( greeting );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = &#123; <span class="comment">//定义了一个字面量对象</span></div><div class="line">	name: <span class="string">"Kyle"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> you = &#123;<span class="comment">//定义了一个字面量对象</span></div><div class="line">	name: <span class="string">"Reader"</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">//通过call方式把函数identify分别绑定到两个对象上</span></div><div class="line"><span class="comment">//这时的this是指向me对象，和you对象</span></div><div class="line">identify.call( me ); <span class="comment">// KYLE  </span></div><div class="line">identify.call( you ); <span class="comment">// READER</span></div><div class="line"></div><div class="line"><span class="comment">//通过call方式把函数call分别绑定到两个对象上</span></div><div class="line"><span class="comment">//这时的this是指向me对象，和you对象</span></div><div class="line">speak.call( me ); <span class="comment">// Hello, I'm KYLE</span></div><div class="line">speak.call( you ); <span class="comment">// Hello, I'm READER</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>在javascript中定义函数的时候，函数是不属于任何对象的。这一点非常的关键，非常的关键，非常的关键。这是理解this关键字的第一个障碍。</p>
</blockquote>
<p>this关键字在js函数定义的时候的不确定性使得js函数使用有极大的灵活性，任何对象都可以使用他。</p>
<p>###this到底是什么？</p>
<p>this的绑定和函数定义的位置没有任何关系，只<code>取决于函数调用的方式</code>.<br>javascript中当一个函数被调用的时候，会创建一个活动记录(有时也称上下文)。这个记录包括函数在哪里被调用，函数的调用方法，传入的参数。this就是记录中的一个属性。</p>
<p>这样在学习javascript关键字的<code>首要问题是要解决怎么知道到函数的调用位置</code>.</p>
<p>###js对象绑定规则</p>
<p>每个js函数在调用的时候一定要找到一个对象，<code>绑定</code>以后才能使用。 这里是理解了js函数的定义和调用的区别以后需要掌握的一个规模最庞大的概念，在js中一共有四种绑定方式.就我个人来看，绑定规则并不难，<code>难点还是在js的函数作用域的理解</code>. 尤其是<code>默认绑定</code>.这个绑定方式有极大的迷惑性。</p>
<p>####默认绑定<br>这个是函数的独立调用，也就是在一个函数直接调用的时候，似乎是没有绑定到对象上的，但是根据前面的介绍，js中函数调用时必须要绑定到一个对象上。<br>看下面代码 page 83</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">//这是函数的定义位置</span></div><div class="line">	<span class="built_in">console</span>.log( <span class="keyword">this</span>.a );</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;<span class="comment">//这个变量定义的含义是什么呢？仅仅是赋值给a吗？</span></div><div class="line"></div><div class="line">  foo(); <span class="comment">// 2  //这是函数的调用位置。为什么会打印出2呢？</span></div></pre></td></tr></table></figure>
</code></pre><blockquote>
<p>很多函数都是这么调用的，照猫画虎也可以写出来，但是理解了具体的含义就不一样了。<br>foo这个函数定义在全局作用域中(window作用域中)，巧合的是他的调用也是在全局作用域中，注意这仅仅是巧合，巧合。 那么foo()调用的时候为什么会打印出变量 a的值呢？尽管使用了var这个关键字，但是分析作用域可以知道，a这个变量实际是全局变量，说的再明白一点，a实际是window这个全局对象的一个属性，2是这个属性的属性值。<br>foo()调用的时候是一丝不挂的全裸状态，仅仅是函数本身，没有任何修饰符，这个时候他也没有任何函数包裹，处在全局作用域下面，所以foo()里面的this是指向全局对象的，当要打印this.a的时候，寻找foo()调用位置会找到全局作用域，找全局作用域的属性this.a的时候会打印出2这个属性值。</p>
</blockquote>
<p>我们在使用setTimeout,setInterval函数的时候，实际这两个函数就是一丝不挂的，同样绑定在window对象上。</p>
<p>####隐式绑定</p>
<p>函数在调用的时候被添加了修饰符。看下面这个代码<br>page 85</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="function">function <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="comment">//定义在全局作用下的函数，仅仅是定义，不是调用位置</span></div><div class="line">	console.<span class="built_in">log</span>( <span class="keyword">this</span>.a );</div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123; <span class="comment">//定义一个对象</span></div><div class="line">	a: <span class="number">2</span>,</div><div class="line">	foo: foo</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.foo(); <span class="comment">// 2  给foo()函数找了一个对象，this就指向这个对象了</span></div></pre></td></tr></table></figure>
<p>这是最常见的方式了，如果不写前面的obj是不是就是上面的默认绑定了？</p>
<p><code>隐式丢失</code><br>经常在js代码的嵌套回调函数中看到在外层函数开始的一句 </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  that=<span class="keyword">this</span>; <span class="comment">//这是什么含义</span></div></pre></td></tr></table></figure>
<p>或许你已经会用了，但是理解了其中意义用起来会更加得心应手啊</p>
<p>看下面段代码.这段代码其实以前我也不太理解，问题还是没有彻底领悟js函数定义和调用之间是没有关系的这一点。<br>page 86</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="comment">//定义了一个函数</span></div><div class="line">	console.<span class="built_in">log</span>( <span class="keyword">this</span>.a );</div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123; <span class="comment">//定义了一个对象字面量</span></div><div class="line">	a: <span class="number">2</span>,</div><div class="line">	foo: foo  <span class="comment">//函数作为对对象的属性</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var bar = obj.foo; <span class="comment">//把obj对象的函数foo属性赋值给bar变量</span></div><div class="line"><span class="comment">//这里就是理解这个问题的关键，如果你现在认为调用bar()的时候绑定的对象</span></div><div class="line"><span class="comment">//是obj那就完全搞错了。这个时候仅仅是把函数foo赋值给了var变量，</span></div><div class="line"><span class="comment">//并没有把对象也给bar变量，因为这里还不是foo()函数的调用位置，现在</span></div><div class="line"><span class="comment">//foo函数还没有绑定对象，那么调用bar()的时候对象到底是谁？不知道。</span></div><div class="line"><span class="comment">//调用的时候才知道。</span></div><div class="line"></div><div class="line">var a = <span class="string">"oops, global"</span>; <span class="comment">// 任然是全局对象的属性</span></div><div class="line">bar(); <span class="comment">// "oops, global" 这里执行的是默认绑定，this就是去全局对象啦</span></div></pre></td></tr></table></figure>
<p>下面这段代码就是使用var that=this的场景<br>在使用回调函数的时候要留心。js中函数是一等对象，可以作为另一个函数的参数传入函数。 问题就出在这里了，函数一旦作为实参代替形参的时候，实际也执行了和上面代码一样的赋值过程，实际只是传递了函数本身，原先的对象就没有了。</p>
<p>page 86</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function">function <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="comment">//定义一个函数</span></div><div class="line">	console.<span class="built_in">log</span>( <span class="keyword">this</span>.a );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">function <span class="title">doFoo</span><span class="params">(fn)</span> </span>&#123; <span class="comment">//fn是形参</span></div><div class="line">	<span class="comment">// 如果函数作为实参传入相当于代码 var fn=obj.foo</span></div><div class="line">	<span class="comment">//和上面一段代码是完全一样的，只是函数本身，并没有绑定任何对象</span></div><div class="line"></div><div class="line">	fn(); <span class="comment">// 在这里调用的时候，由于fn只代表foo()函数，被绑定到全局对象上了</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123;</div><div class="line">	a: <span class="number">2</span>,</div><div class="line">	foo: foo</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var a = <span class="string">"oops, global"</span>; <span class="comment">// `a` also property on global object</span></div><div class="line"></div><div class="line">doFoo( obj.foo ); <span class="comment">// "oops, global"不要被obj.foo迷惑了</span></div><div class="line"><span class="comment">//没有实际执行函数的调用，此时obj.foo仅仅代表没有绑定任何对象的函数</span></div><div class="line"></div><div class="line"><span class="comment">//这个代码块看着眼熟么？这就是javascript中回调函数的样子，当</span></div><div class="line"><span class="comment">//一个函数作为参数传递进另一个函数的时候,这个参数函数就找不到自己绑定的对象是谁了，</span></div><div class="line"><span class="comment">//所以就默认绑定到全局对象上了。但是我们既然在一个函数里调用另一个函数，肯定是要用这个函数操作当前的对象，那么既然找不到了，我们就手动给他指定一个对象吧。这就是为什么要使用</span></div><div class="line"><span class="comment">//var  that=this的原因。我觉得理解这个概念，js的功力至少会增加5%😁。至于具体使用，我想写出来其实没有什么必要了。这样的代</span></div><div class="line"><span class="comment">//码随处可见.</span></div></pre></td></tr></table></figure>
<p>最后我们会返回来看看怎么解决这个问题。</p>
<p>####显示绑定</p>
<p>直接使用apply()和call()方法来给函数指定一个对象<br>page 88</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   <span class="function">function <span class="title">foo</span><span class="params">()</span> </span>&#123;  <span class="comment">//定义函数</span></div><div class="line">	console.<span class="built_in">log</span>( <span class="keyword">this</span>.a );</div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123;  <span class="comment">//对象字面量定义</span></div><div class="line">	a: <span class="number">2</span> </div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo.call( obj ); <span class="comment">// 2  强制绑定到obj对象上</span></div></pre></td></tr></table></figure>
<p>使用显示绑定还不能解决this的丢失问题，所以可以创建一个包裹函数</p>
<p>page 89</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  <span class="function">function <span class="title">foo</span><span class="params">(something)</span> </span>&#123; <span class="comment">//定义函数</span></div><div class="line">	console.<span class="built_in">log</span>( <span class="keyword">this</span>.a, something );</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + something;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var obj = &#123; <span class="comment">//对象字面量</span></div><div class="line">	a: <span class="number">2</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var bar = function() &#123; 包裹函数，显示绑定</div><div class="line">	<span class="keyword">return</span> foo.apply( obj, arguments );</div><div class="line"> <span class="comment">//返回绑定了对象和传入参数的函数调用</span></div><div class="line"> <span class="comment">//这个语句在js的代码中非常的常见</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var b = bar( <span class="number">3</span> ); <span class="comment">// 2, 3  </span></div><div class="line">console.<span class="built_in">log</span>( b ); <span class="comment">// 5</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//可以把绑定函数独立出来</span></div><div class="line"></div><div class="line"><span class="function">function <span class="title">bind</span><span class="params">(fn, obj)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> function() &#123;</div><div class="line">		<span class="keyword">return</span> fn.apply( obj, arguments );</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####new 绑定</p>
<blockquote>
<p>js中的new关键字和java中完全不同，js中没有类，只有对象，在js中使用new 关键字的时候只是被调用的普通函数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function">function <span class="title">foo</span><span class="params">(a)</span> </span>&#123;  <span class="comment">//定义函数</span></div><div class="line">	<span class="keyword">this</span>.a = a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var bar = <span class="keyword">new</span> foo( <span class="number">2</span> ); <span class="comment">//仅仅是调用了一个函数</span></div><div class="line">console.<span class="built_in">log</span>( bar.a ); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>好了以上就是js this绑定的四种方式。  解决的关键问题是js中在函数调用的时候到底是属于哪个对象的问题。 </p>
<p>后面还有一点内容，但是上面的内容是最重要的。  2017年1月17日<br><code>的确包裹函数那里好像是没有讲清楚，我也忘了当初是怎么理解的，等我再看看，然后更新。有些地方已经做了更新!</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2044710-9f870a42dbc62877.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/200&quot; alt=&quot;cover.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;《你不知道的javascript》这本书读了有好几遍了，似乎每一次读都有新发现，有些内容并不是一下子可以弄懂的，每次读似乎都能明白一些概念。&lt;br&gt;再重读一下&lt;code&gt;this&lt;/code&gt;关键字。这个概念非常灵活，也非常难掌握，所以我觉得经常读读没有坏处。期待javascript一桶江湖，这样学习的成本就低啦！&lt;br&gt;参考本书的第二部分的第一章，第二章。
    
    </summary>
    
      <category term="testing" scheme="http://yoursite.com/categories/testing/"/>
    
    
  </entry>
  
  <entry>
    <title>understanding React(2)</title>
    <link href="http://yoursite.com/2016/05/29/understanding%20React(2)/"/>
    <id>http://yoursite.com/2016/05/29/understanding React(2)/</id>
    <published>2016-05-28T23:53:25.000Z</published>
    <updated>2017-03-23T02:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>#####understanding React2</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#####understanding React2&lt;/p&gt;

    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>understanding React(1)</title>
    <link href="http://yoursite.com/2016/05/29/understanding%20React(1)/"/>
    <id>http://yoursite.com/2016/05/29/understanding React(1)/</id>
    <published>2016-05-28T23:53:25.000Z</published>
    <updated>2017-03-23T02:51:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rect/Redux的系列文章<a id="more"></a><br>理解React程序(1)-宇宙大爆炸的奇点.<br>当大约160亿年前宇宙大爆炸从一个奇点开始的时候,第一缕光在宇宙中扩展开来,爆炸时产生的宇宙背景辐射至今在宇宙的时空中到处游荡,作为一个普通人也可以很容感知到到他们的存在,不信的话搬出你家里犄角旮旯里落满灰尘的十二寸黑白电视机,只要能点亮你就可以感知到他们存在.那么他们是什？没有电视节目的时候,满屏的雪花点就是电视天线接受到的宇宙背景辐射.至今关于宇宙大爆炸的奇点到底是是什么？谁做的程序架构,初衷是什么？迷仍然没有解开,甚至在宇宙大爆炸开始之前,连时间都是不存在的.科学家弄统的把所有的未解之谜都丢给了奇点,为了自圆其说,又创建了其他的理论.或许本来就存在多个奇点,所以存在好多平行的宇宙.好吧！上面的是一个脑洞大开的过程,你可能会说你说的这些东西到底和程序开发有半点关系吗？或许有吧,也或许更本没有任何关系.看你是怎么理解了.</p>
<p>下面我把这个主题有关的写作想法讲一下.</p>
<ul>
<li>编程到底在做什么？唯一的目的是:<code>信息</code>.编程就是传递信息.React作为Javascript编程语言的子集,他是在传递信息吗？当然是了.如果你明白了我说的这句话,后面我要讲的问题就容易啦. 所有的数据结构包括更高级的数据库都是围绕着<code>信息</code>来运转的.这个主题我原本想放到最后来写.头脑里出现这个概念的时候,其实也是理解了一些编程的基本概念以后才有的.但我本人以前没有深入学习过其他编程语言,如果你是深入学习和了解过一种编程语言,那么这里讲的内容就容易理解了.<code>如果我们把为了解决React编程中出现的state管理问题引入的Redux看做是一种简单的数据库系统</code>,有些问题就能找到已知概念作为理解的依托了.这个概念,并非我自己提出,原先是有点隐约的想法,在看了一本有关React概念的书的时候,觉得这个想法是很正确的.数据库操作核心的概念就是CRUD,还有吗？数据的验证,数据的过滤等等.这些概念如果你比照任何一种数据库的操作,都可以在Redux和Redux中间件中找到类似的概念.</li>
<li>既然我们说到了宇宙大爆炸的奇点理论了,那么如果把React程序看成是一个奇点,比宇宙大爆炸理论幸运的是我们可以看到这个<code>奇点</code>是怎么形成的.React的奇点是一个html文件.对于React的爆炸过程,我们也是可以完全解释清楚的.甚至我们还可以让这个爆炸过程无限次的重复.有点虚幻了吧.没有引入魔幻现实主义的<code>一只斗鸡</code>[^这只斗鸡来自于马尔克斯的《没有人写信的上尉》,实际这本书没有任何魔幻写诗主义,除了这只鸡的一丁点描写]和看文章的你来对话,我已经妥协了.这个过程会实际需要两方面的内容就可以了,一是Node.js的知识和一点React-redux程序初始化的知识.</li>
<li>上面第一点我们谈到了姑且可以把Redux看做是一种<code>数据库</code>.那么数据库操作就有数据的增删改查和数据的验证和过滤过程,具体的实现语句都在react-redux中实现.如果是其他语言,我不知道怎么来实现,如果是Redux,就好办了.Redux模块里的内容其实是非常少的.少到什么程度,可以这样说Redux里面除了闭包和数组操作就没有更多的内容了.为什么这样说呢？下面这个概念非常关键.<code>在javascript中,其他对象和函数对象都是传引用赋值的</code>.没错!javascript之所以能够成为一门函数式编程语言.对象和函数传引用赋值是一个基本的概念,这样做以后,函数和对象就可以得到一个标记的<code>键名</code>.这个键名就可以在程序里到处运行了.这个地方我们借助于数据库的操作概念和javascript的函数式编程概念来理解Redux的源码.这一部分可能会比较困难,困难点实际是数组的操作方法的灵活应用,当然还有<code>闭包了</code>.说道这个地方的时候我们在讨论,本人学习编程时间不长,对于这些方法潜移默化的东西太少,写到相关内容一定请高手指教.</li>
<li>Redux的中间件,实际应用中,简单的流程实际是很少的.这很好理解啊!就算是你家就在自来水厂的大门口,你也不可能每天拿着一个桶去水厂打水.自来水厂的水经过很多道的工序,出厂的时候还要经过很多的管道和水表才能到你家里.自来水厂是不可能做<code>大自然的搬运工</code>的.[^这个是看到有个幽默图片，题目是我们是大自然的搬运工,结果是桶装水里有只青蛙在游泳,意思的确是大自然搬运工,青蛙都搬运了].在数据在React和Redux的流动中,需要解决很多的细节问题,中间件就是来完成这个过程.有时候事情还没完.自来水厂会在自来水生产的时候添加漂白消毒剂.一旦这样,问题就变得更复杂了.到底选择哪家的次氯酸钠,几时能到货,每家的东西添加的步骤是不是一样?如果突然缺货了,怎么通知用水的人.这个过程就是Redux中的side effect的概念,虽然不在主流程上,但是对于主流程还是有很大影响.Redux到底怎么处理这些细节？这都依赖于中间件来实现.所以如果要编写复杂的应用,这个地方是需要花费很长时间的.如果是生产农夫山泉还好办,如果是生产脉动,那问题就更复杂啦！[^农夫山泉只是水,脉动里就添加了很多的维生素等等东西].Redux的中间件现在很多,但是实际中不可能每个都用到和学习到,所以只是关注几个比较重要的中间件就可以了.</li>
<li>javascript的模式设计在React和Redux中的应用,模式设计在编程中无处不在的,在高手的源码中看这些模式设计方法,可能更加的原汁原味和标准,所以我么也来简单的谈谈这些内容,模式设计其实就是React大爆炸的背景辐射,他就存在于程序的任何地方.</li>
<li>有关测试-作为初学者对于程序的测试理解太少,借助着这次写作的机会,加深认识.</li>
</ul>
<blockquote>
<p>好了，大概要写的东西就是这么多，后续就按照这个框架来写作.我自己起了一个名字叫<code>框架写作</code>或者<code>大纲写作</code>.起因是什么呢？过年的时候在家里,刚好视频盒子有《士兵突击》,所有又看了一遍,记不清是看的第几回了.但是看到有一集一团改编的时候,师长出场,我记得整个士兵突击里只出现过两个女性,就是这一集.和其他的国产军事题材大相径庭,其他的国产军事题材里都会出现几个长相俊美,拿着电脑爱好者焊接电路板,身手不凡的,和男主人公搞着不知道几个角的恋爱关系.士兵突击完全可以把这两个女性变为许三多小时候同班的丑小鸭,突然一下突变为士兵突击里的落在窠臼里的女主人公.在原先25集的主线里在添加这么一个中间件,在拍25集也不成问题啊.添加这个中间件以后,问题就复杂了,这女主人公可能是成材或者伍六一的妹妹[^成材,伍六一和许三多是同乡嗷].哈哈side effect出现了.后面编剧想收笔就很难刹车了. 你也别以为我是在讲笑话,如果你在图书馆的写作栏目里找找,可以看到美剧和电影编剧的一些书籍,都是这个套路.呵呵!不能再讲下去了,要这么写得心中有框架,而要形成这个框架需要看很多的类似框架.这也是学习编程的方法,学习更多的代码,才能看到里面的框架.<br>《士兵突击》我看了很多遍,React的程序我也看了好多,你的选择是什么呢?</p>
</blockquote>
<hr>
<p>接下来的一篇我们要看看一个React的程序是怎么加载到浏览器中的.<br>需要有点<code>node.js</code>的基础知识和自动化打包程序的基础.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rect/Redux的系列文章
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
  </entry>
  
</feed>
