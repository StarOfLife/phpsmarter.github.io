<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-27T15:20:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>翻译|React-navigation(1)</title>
    <link href="http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/"/>
    <id>http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/</id>
    <published>2017-03-27T20:26:48.000Z</published>
    <updated>2017-03-27T15:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.<br>教程可以参考<a href="https://hackernoon.com/getting-started-with-react-navigation-the-navigation-solution-for-react-native-ea3f4bd786a4#.n0pz5ev39" target="_blank" rel="external">这篇文章</a>,这个文章作者老兄和我一样很喜欢折腾.前面就参考了他的另一个导航教程,这次再来.</p>
<hr>
<p>本文是翻译的<a href="https://reactnavigation.org/docs/intro/" target="_blank" rel="external">官方文档</a>.打算翻译完<br>基本思路是有几个注册系统,如果要在app中使用导航,必须要把组件注册到对应的系统中.</p>
<h1 id="原文开始：你好！移动导航"><a href="#原文开始：你好！移动导航" class="headerlink" title="原文开始：你好！移动导航"></a>原文开始：你好！移动导航</h1><p>使用React Navigation来构建跨平台导航</p>
<h2 id="配置和安装"><a href="#配置和安装" class="headerlink" title="配置和安装"></a>配置和安装</h2><p>首先要配置React Native系统.接下来创建RN项目,添加<code>react-navigation</code></p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># Create a new React Native App</span></div><div class="line"> <span class="comment">#创建新RN APP</span></div><div class="line">react-native init SimpleApp</div><div class="line">cd SimpleApp</div><div class="line"></div><div class="line"><span class="comment"># Install the latest version of react-navigation from npm安装最新版本</span></div><div class="line">npm install --save react-navigation</div><div class="line"></div><div class="line"><span class="comment"># Run the new app运行，确保初始化正常</span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-android <span class="comment"># or:</span></span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure>
<p> <img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe1ostu6xlj30ku112jrj.jpg" alt="初始化界面"></p>
<p>为了在Android和iOS之间共享代码,删除掉<code>index.ios.js</code>和<code>index.andorid.js</code>的实际代码,使用<code>import &#39;./App&#39;</code>来实现具体的代码</p>
<p>现在来创建‘App.js’</p>
<h2 id="Stack-Navigator介绍"><a href="#Stack-Navigator介绍" class="headerlink" title="Stack Navigator介绍"></a>Stack Navigator介绍</h2><p>为了想使用<code>stack</code> navigation的概念,我们会使用<code>StactkNavigator</code>.(译注：stack就是数据结构的堆栈技术,遵循后进先出的原理).每一个<code>被</code>到导航的screen(导航画面)被放在堆栈的栈顶,返回时候,会从栈顶弹出对应的组件.先看看一个screen的情况</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其实这个代码没有实现App.js，export的模式,注意</span></div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">AppRegistry</span>,</div><div class="line">  <span class="type">Text</span>,</div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="comment">//导入stack导航组件</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="type">StackNavigator</span> &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',<span class="comment">//在导航中显示的标题内容</span></div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//这里可以是导入的其他组件</span></div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Navigation</span>!&lt;/<span class="type">Text</span>&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//进行导航的注册</span></div><div class="line">const <span class="type">SimpleApp</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123; screen: <span class="type">HomeScreen</span> &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'SimpleAp</span>p', () =&gt; <span class="type">SimpleApp</span>);</div></pre></td></tr></table></figure>
<p><code>title</code>是static<code>navigationOptions</code>里配置的标题内容,出现的界面看下面</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe1pa9cdbrj30yj1pd0t3.jpg" alt=""></p>
<h2 id="添加新的导航画面"><a href="#添加新的导航画面" class="headerlink" title="添加新的导航画面"></a>添加新的导航画面</h2><p>再添加一个<code>ChatScreen</code>画面</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>&lt;/<span class="type">Text</span>&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>HomeScreen</code>中添加一个button组件,使用<code>routeName</code> <code>Chat</code>关联到<code>ChatScreen</code>.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t')&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们正在使用从<code>screen navigation prop</code>获得的导航函数转向<code>ChatScreen</code>.但是这需要在<code>StackNavigator</code>中注册.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; screen: ChatScreen &#125;,<span class="comment">//新添加的screen</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在可以导航到ChatScreen,也可以返回了.<br><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe1pjjrpn4g307i0dc75l.gif" alt=""></p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在<code>ChatScreen</code>中硬编码标题不是好办法,可以在导航的时候传递参数.首先编辑一下<code>HomeScreen</code>组件,传递<code>name</code>参数到路由中.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t', &#123; user: <span class="symbol">'Luc</span>y' &#125;)&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以编辑<code>ChatScreen</code>组件显示的<code>name</code>参数,这个参数通过route来传递.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> class ChatScreen extends React.Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    // Nav options can be defined as a function of the navigation prop:</div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `Chat with $&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;`,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    // The screen's current route is passed <span class="keyword">in</span> <span class="keyword">to</span> `props.navigation.<span class="keyword">state</span>`:</div><div class="line">    const &#123; params &#125; = this.props.navigation.<span class="keyword">state</span>;</div><div class="line">    return (</div><div class="line">      <span class="variable">&lt;View&gt;</span></div><div class="line">        <span class="variable">&lt;Text&gt;</span>Chat with &#123;params.<span class="keyword">user</span>&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在当你导航到Chat screen的时候,可以看到名字了.在<code>HomeScreen</code>中改变<code>name</code>,看看变化.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fe1t489r4gg307i0dc75l.gif" alt=""></p>
<p>第一部分就这些.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.&lt;br&gt;教程可以参考&lt;a href=&quot;https://hackernoon.com/getting-started-with-react-n
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux- actions Readme</title>
    <link href="http://yoursite.com/2017/03/27/Redux-actions-Readme/"/>
    <id>http://yoursite.com/2017/03/27/Redux-actions-Readme/</id>
    <published>2017-03-27T10:41:40.000Z</published>
    <updated>2017-03-27T02:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a>redux-actions</h1><p><a href="https://travis-ci.org/acdlite/redux-actions" target="_blank" rel="external"><img src="https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square" alt="build status"></a></p>
<p><a href="https://nodei.co/npm/redux-actions/" target="_blank" rel="external"><img src="https://nodei.co/npm/redux-actions.png?downloads=true" alt="NPM"></a></p>
<p><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">Flux Standard Action</a> utilities for Redux.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save redux-actions</div></pre></td></tr></table></figure>
<p>The <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a> package provides a <a href="http://webpack.github.io/docs/commonjs.html" target="_blank" rel="external">CommonJS</a> build for use in Node.js, and with bundlers like <a href="http://webpack.github.io/" target="_blank" rel="external">Webpack</a> and <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>. It also includes an <a href="http://jsmodules.io/" target="_blank" rel="external">ES modules</a> build that works well with <a href="http://rollupjs.org/" target="_blank" rel="external">Rollup</a> and <a href="https://webpack.js.org" target="_blank" rel="external">Webpack2</a>‘s tree-shaking.</p>
<p>If you don’t use <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a>, you may grab the latest <a href="https://unpkg.com/redux-actions@latest/dist" target="_blank" rel="external">UMD</a> build from <a href="https://unpkg.com" target="_blank" rel="external">unpkg</a> (either a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.js" target="_blank" rel="external">development</a> or a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.min.js" target="_blank" rel="external">production</a> build). The UMD build exports a global called <code>window.ReduxActions</code> if you add it to your page via a <code>&lt;script&gt;</code> tag. We <em>don’t</em> recommend UMD builds for any serious application, as most of the libraries complementary to Redux are only available on <a href="https://www.npmjs.com/search?q=redux" target="_blank" rel="external">npm</a>.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="createAction-type-payloadCreator-Identity-metaCreator"><a href="#createAction-type-payloadCreator-Identity-metaCreator" class="headerlink" title="createAction(type, payloadCreator = Identity, ?metaCreator)"></a><code>createAction(type, payloadCreator = Identity, ?metaCreator)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps an action creator so that its return value is the payload of a Flux Standard Action.</p>
<p><code>payloadCreator</code> must be a function, <code>undefined</code>, or <code>null</code>. If <code>payloadCreator</code> is <code>undefined</code> or <code>null</code>, the identity function is used.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> increment = createAction(<span class="string">'INCREMENT'</span>, amount =&gt; amount);</div><div class="line"><span class="comment">// same as</span></div><div class="line">increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line">expect(increment(<span class="number">42</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">42</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If the payload is an instance of an <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="external">Error<br>object</a>,<br>redux-actions will automatically set <figure class="highlight plain"><figcaption><span>to true.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Example:</div><div class="line"></div><div class="line">```js</div><div class="line">const increment = createAction(&apos;INCREMENT&apos;);</div><div class="line"></div><div class="line">const error = new TypeError(&apos;not a number&apos;);</div><div class="line">expect(increment(error)).to.deep.equal(&#123;</div><div class="line">  type: &apos;INCREMENT&apos;,</div><div class="line">  payload: error,</div><div class="line">  error: true</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>createAction</code> also returns its <code>type</code> when used as type in <code>handleAction</code> or <code>handleActions</code>.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line"><span class="comment">// As parameter in handleAction:</span></div><div class="line">handleAction(increment, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// As object key in handleActions:</span></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [increment]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<p><strong>NOTE:</strong> The more correct name for this function is probably <code>createActionCreator()</code>, but that seems a bit redundant.</p>
<p>Use the identity form to create one-off actions:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createAction(<span class="string">'ADD_TODO'</span>)(<span class="string">'Use Redux'</span>);</div></pre></td></tr></table></figure>
<p><code>metaCreator</code> is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If <code>metaCreator</code> is undefined or not a function, the meta field is omitted.</p>
<h3 id="createActions-actionMap-identityActions"><a href="#createActions-actionMap-identityActions" class="headerlink" title="createActions(?actionMap, ?...identityActions)"></a><code>createActions(?actionMap, ?...identityActions)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Returns an object mapping action types to action creators. The keys of this object are camel-cased from the keys in <code>actionMap</code> and the string literals of <code>identityActions</code>; the values are the action creators.</p>
<p><code>actionMap</code> is an optional object and a recursive data structure, with action types as keys, and whose values <strong>must</strong> be either</p>
<ul>
<li>a function, which is the payload creator for that action</li>
<li>an array with <code>payload</code> and <code>meta</code> functions in that order, as in <a href="#createactiontype-payloadcreator--identity-metacreator"><code>createAction</code></a><ul>
<li><code>meta</code> is <strong>required</strong> in this case (otherwise use the function form above)</li>
</ul>
</li>
<li>an <code>actionMap</code></li>
</ul>
<p><code>identityActions</code> is an optional list of positional string arguments that are action type strings; these action types will use the identity payload creator.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; actionOne, actionTwo, actionThree &#125; = createActions(&#123;</div><div class="line">  <span class="comment">// function form; payload creator defined inline</span></div><div class="line">  ACTION_ONE: <span class="function">(<span class="params">key, value</span>) =&gt;</span> (&#123; [key]: value &#125;),</div><div class="line"></div><div class="line">  <span class="comment">// array form</span></div><div class="line">  ACTION_TWO: [</div><div class="line">    <span class="function">(<span class="params">first</span>) =&gt;</span> [first],             <span class="comment">// payload</span></div><div class="line">    (first, second) =&gt; (&#123; second &#125;) <span class="comment">// meta</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">// trailing action type string form; payload creator is the identity</span></div><div class="line">&#125;, <span class="string">'ACTION_THREE'</span>);</div><div class="line"></div><div class="line">expect(actionOne(<span class="string">'key'</span>, <span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_ONE'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionTwo(<span class="string">'first'</span>, <span class="string">'second'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_TWO'</span>,</div><div class="line">  <span class="attr">payload</span>: [<span class="string">'first'</span>],</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">second</span>: <span class="string">'second'</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionThree(<span class="number">3</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_THREE'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">3</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If <code>actionMap</code> has a recursive structure, its leaves are used as payload and meta creators, and the action type for each leaf is the combined path to that leaf:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> actionCreators = createActions(&#123;</div><div class="line">  <span class="attr">APP</span>: &#123;</div><div class="line">    <span class="attr">COUNTER</span>: &#123;</div><div class="line">      <span class="attr">INCREMENT</span>: [</div><div class="line">        <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">        amount =&gt; (&#123; <span class="attr">key</span>: <span class="string">'value'</span>, amount &#125;)</div><div class="line">      ],</div><div class="line">      <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">NOTIFY</span>: [</div><div class="line">      <span class="function">(<span class="params">username, message</span>) =&gt;</span> (&#123; <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;username&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span> &#125;),</div><div class="line">      (username, message) =&gt; (&#123; username, message &#125;)</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionCreators.app.counter.increment(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">1</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">key</span>: <span class="string">'value'</span>, <span class="attr">amount</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.counter.decrement(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/DECREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">-1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.notify(<span class="string">'yangmillstheory'</span>, <span class="string">'Hello World'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/NOTIFY'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">message</span>: <span class="string">'yangmillstheory: Hello World'</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">username</span>: <span class="string">'yangmillstheory'</span>, <span class="attr">message</span>: <span class="string">'Hello World'</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When using this form, you can pass an object with key <code>namespace</code> as the last positional argument, instead of the default <code>/</code>.</p>
<h3 id="handleAction-type-reducer-reducerMap-Identity-defaultState"><a href="#handleAction-type-reducer-reducerMap-Identity-defaultState" class="headerlink" title="handleAction(type, reducer | reducerMap = Identity, defaultState)"></a><code>handleAction(type, reducer | reducerMap = Identity, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps a reducer so that it only handles Flux Standard Actions of a certain type.</p>
<p>If a <code>reducer</code> function is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.</p>
<p>Otherwise, you can specify separate reducers for <code>next()</code> and <code>throw()</code> using the <code>reducerMap</code> form. This API is inspired by the ES6 generator interface.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleAction(<span class="string">'FETCH_DATA'</span>, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;, defaultState);</div></pre></td></tr></table></figure>
<p>If either <code>next()</code> or <code>throw()</code> are <code>undefined</code> or <code>null</code>, then the identity function is used for that reducer.</p>
<p>If the reducer argument (<code>reducer | reducerMap</code>) is <code>undefined</code>, then the identity function is used.</p>
<p>The third parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<h3 id="handleActions-reducerMap-defaultState"><a href="#handleActions-reducerMap-defaultState" class="headerlink" title="handleActions(reducerMap, defaultState)"></a><code>handleActions(reducerMap, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Creates multiple reducers using <code>handleAction()</code> and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are passed as the first parameter to <code>handleAction()</code> (the action type), and the values are passed as the second parameter (either a reducer or reducer map). The map must not be empty.</p>
<p>The second parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<p>(Internally, <code>handleActions()</code> works by applying multiple reducers in sequence using <a href="https://github.com/acdlite/reduce-reducers" target="_blank" rel="external">reduce-reducers</a>.)</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;),</div><div class="line"></div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter - action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="combineActions-types"><a href="#combineActions-types" class="headerlink" title="combineActions(...types)"></a><code>combineActions(...types)</code></h3><p>Combine any number of action types or action creators. <code>types</code> is a list of positional arguments which can be action type strings, symbols, or action creators.</p>
<p>This allows you to reduce multiple distinct actions with the same reducer.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;),</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleAction(combineActions(increment, decrement), &#123;</div><div class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">state, &#123; payload: &#123; amount &#125; &#125;</span>) =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;),</div><div class="line">  <span class="attr">throw</span>: <span class="function"><span class="params">state</span> =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: <span class="number">0</span> &#125;),</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;)</div><div class="line"></div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">11</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">9</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div></pre></td></tr></table></figure>
<p>Here’s an example using <code>handleActions</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [combineActions(increment, decrement)](state, &#123; <span class="attr">payload</span>: &#123; amount &#125; &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> &#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line"></div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, decrement(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, &#123; <span class="attr">type</span>: <span class="string">'NOT_TYPE'</span>, <span class="attr">payload</span>: <span class="number">1000</span> &#125;)).to.equal(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;);</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">15</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="Usage-with-middleware"><a href="#Usage-with-middleware" class="headerlink" title="Usage with middleware"></a>Usage with middleware</h2><p>redux-actions is handy all by itself, however, its real power comes when you combine it with middleware.</p>
<p>The identity form of <code>createAction</code> is a great way to create a single action creator that handles multiple payload types. For example, using <a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> and <a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> addTodo = createAction(<span class="string">'ADD_TODO'</span>);</div><div class="line"></div><div class="line"><span class="comment">// A single reducer...</span></div><div class="line">handleAction(<span class="string">'ADD_TODO'</span>, (state = &#123; <span class="attr">todos</span>: [] &#125;, action) =&gt; (&#123;</div><div class="line">  ...state,</div><div class="line">  <span class="attr">todos</span>: [...state.todos, action.payload]</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// ...that works with all of these forms:</span></div><div class="line"><span class="comment">// (Don't forget to use `bindActionCreators()` or equivalent.</span></div><div class="line"><span class="comment">// I've left that bit out)</span></div><div class="line">addTodo(<span class="string">'Use Redux'</span>)</div><div class="line">addTodo(<span class="built_in">Promise</span>.resolve(<span class="string">'Weep with joy'</span>));</div><div class="line">addTodo(Observable.of(</div><div class="line">  <span class="string">'Learn about middleware'</span>,</div><div class="line">  <span class="string">'Learn about higher-order stores'</span></div><div class="line">)).subscribe();</div></pre></td></tr></table></figure>
<h2 id="See-also"><a href="#See-also" class="headerlink" title="See also"></a>See also</h2><p>Use redux-actions in combination with FSA-compliant libraries.</p>
<ul>
<li><a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> - Promise middleware</li>
<li><a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a> - Includes observable middleware.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redux-actions&quot;&gt;&lt;a href=&quot;#redux-actions&quot; class=&quot;headerlink&quot; title=&quot;redux-actions&quot;&gt;&lt;/a&gt;redux-actions&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>React-Native-Immutable</title>
    <link href="http://yoursite.com/2017/03/27/React-Native-Immutable/"/>
    <id>http://yoursite.com/2017/03/27/React-Native-Immutable/</id>
    <published>2017-03-27T00:15:12.000Z</published>
    <updated>2017-03-26T16:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-native-immutable"><a href="#react-native-immutable" class="headerlink" title="react-native-immutable"></a>react-native-immutable</h1><p><strong>using immutable.js library as store with react &amp;&amp; react-native</strong></p>
<p>More info of <a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">immutable.js</a></p>
<hr>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> react-<span class="keyword">native</span>-immutable <span class="comment">--save</span></div></pre></td></tr></table></figure>
<h2 id="Useage"><a href="#Useage" class="headerlink" title="Useage"></a>Useage</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">react-native project</div><div class="line">   <span class="string">|---index.ios.js</span></div><div class="line">   <span class="string">|---App</span></div><div class="line">         <span class="string">|---Actions</span></div><div class="line">         	   <span class="string">|--- mainAction.js</span></div><div class="line">         	   <span class="string">|--- userAction.js</span></div><div class="line">         	   <span class="string">|--- articleAction.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Stores</span></div><div class="line">         	   <span class="string">|--- mainStore.js</span></div><div class="line">         	   <span class="string">|--- userStore.js</span></div><div class="line">         	   <span class="string">|--- articleStore.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Webapi</span></div></pre></td></tr></table></figure>
<h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; mixins &#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> StoreMixin = mixins.StoreMixin;</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'./App/Stores/mainStore'</span>);</div><div class="line"><span class="keyword">var</span> appAction = <span class="built_in">require</span>(<span class="string">'./App/Actions/mainAction'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">    <span class="attr">mixins</span>: [StoreMixin(appStore,<span class="string">"user"</span>,<span class="string">"article"</span>)],</div><div class="line">    <span class="attr">onChangeUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	appAction.emit(<span class="string">'onChangeUserName'</span>, <span class="string">"wilson"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state);  <span class="comment">// when store was changed, the state will change;</span></div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.username)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">        	<span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        		<span class="tag">&lt;<span class="name">Text</span> <span class="attr">onPress</span>=<span class="string">&#123;this.onChangeUserName&#125;</span>&gt;</span>Change user name<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        	<span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        )   </div><div class="line">    &#125; </div><div class="line">&#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">AppRegistry.registerComponent(<span class="string">'DEMO'</span>, () =&gt; App);</div></pre></td></tr></table></figure>
<h3 id="mainAction-js"><a href="#mainAction-js" class="headerlink" title="mainAction.js"></a>mainAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="comment">// require userAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./userAction'</span>)();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// require articleAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./articleAction'</span>)();</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Action;</div></pre></td></tr></table></figure>
<h3 id="userAction-js"><a href="#userAction-js" class="headerlink" title="userAction.js"></a>userAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'../Stores/mainStore'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更新管理员</span></div><div class="line"><span class="keyword">var</span> userAction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	Action.on(<span class="string">'onChangeUserName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">		<span class="comment">// study immutable.js visit http://facebook.github.io/immutable-js/</span></div><div class="line">    	appStore.getStore(<span class="string">"user"</span>).set(<span class="string">'name'</span>, name );</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = userAction;</div></pre></td></tr></table></figure>
<h3 id="mainStore-js"><a href="#mainStore-js" class="headerlink" title="mainStore.js"></a>mainStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Store,Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">module</span>.exports = Store(&#123;</div><div class="line">    <span class="attr">user</span>: <span class="built_in">require</span>(<span class="string">'./userStore'</span>),</div><div class="line">    <span class="attr">article</span>: <span class="built_in">require</span>(<span class="string">'./articleStore'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Use AsyncStorage if u what</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    AsyncStorage</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> db_name = <span class="string">"app_store"</span>;</div><div class="line"></div><div class="line">Action.on(<span class="string">"_updateStore"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    AsyncStorage.setItem(db_name, <span class="built_in">JSON</span>.stringify(data), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//initial Data</span></div><div class="line">AsyncStorage.getItem(db_name, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> res == <span class="literal">undefined</span> )&#123;</div><div class="line">            Action.emit(<span class="string">"_updateStore"</span>,appStore.getData());</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            appStore = Immutable.fromJS(<span class="built_in">JSON</span>.parse(res));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="userStore-js"><a href="#userStore-js" class="headerlink" title="userStore.js"></a>userStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react-native-immutable&quot;&gt;&lt;a href=&quot;#react-native-immutable&quot; class=&quot;headerlink&quot; title=&quot;react-native-immutable&quot;&gt;&lt;/a&gt;react-native-immutab
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Immutable.js-doc</title>
    <link href="http://yoursite.com/2017/03/26/Immutable-js/"/>
    <id>http://yoursite.com/2017/03/26/Immutable-js/</id>
    <published>2017-03-26T14:05:27.000Z</published>
    <updated>2017-03-26T06:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Immutable-collections-for-JavaScript"><a href="#Immutable-collections-for-JavaScript" class="headerlink" title="Immutable collections for JavaScript"></a>Immutable collections for JavaScript</h1><p><a href="https://travis-ci.org/facebook/immutable-js" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/immutable-js.svg?branch=master" alt="Build Status"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href="http://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="external">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>
<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="external">hash maps tries</a> and <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="external">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p>Immutable.js also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>
<p>Want to hear more? Watch the presentation about Immutable.js:</p>
<p><a href="https://youtu.be/I7IdS-PbEgI" target="_blank" alt="Immutable Data and React"><img src="https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg"></a></p>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install immutable</div></pre></td></tr></table></figure>
<p>Then require it into any module.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">map1.get(<span class="string">'b'</span>) <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>) <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>To use Immutable.js from a browser, download <a href="https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js" target="_blank" rel="external">dist/immutable.min.js</a><br>or use a CDN such as <a href="https://cdnjs.com/libraries/immutable" target="_blank" rel="external">CDNJS</a><br>or <a href="http://www.jsdelivr.com/#!immutable.js" target="_blank" rel="external">jsDelivr</a>.</p>
<p>Then, add it as a script tag to your page:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"immutable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or use an AMD loader (such as <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'./immutable.min.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Immutable</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If you’re using <a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a> or<br><a href="http://browserify.org/" target="_blank" rel="external">browserify</a>, the <code>immutable</code> npm module also works<br>from the browser.</p>
<h3 id="Flow-amp-TypeScript"><a href="#Flow-amp-TypeScript" class="headerlink" title="Flow &amp; TypeScript"></a>Flow &amp; TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href="https://flowtype.org/" target="_blank" rel="external">Flowtype</a> or <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Installing <code>immutable</code> via npm brings with it type definitions for Flow (v0.39.0 or higher)<br>and TypeScript (v2.1.0 or higher), so you shouldn’t need to do anything at all!</p>
<h4 id="Using-TypeScript-with-Immutable-js-v4"><a href="#Using-TypeScript-with-Immutable-js-v4" class="headerlink" title="Using TypeScript with Immutable.js v4"></a>Using TypeScript with Immutable.js v4</h4><p>Immutable.js type definitions embrace ES2015. While Immutable.js itself supports<br>legacy browsers and environments, its type definitions require TypeScript’s 2015<br>lib. Include either <code>&quot;target&quot;: &quot;es2015&quot;</code> or <code>&quot;lib&quot;: &quot;es2015&quot;</code> in your<br><code>tsconfig.json</code>, or provide <code>--target es2015</code> or <code>--lib es2015</code> to the<br><code>tsc</code> command.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">"immutable"</span>;</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h4 id="Using-TypeScript-with-Immutable-js-v3-and-earlier"><a href="#Using-TypeScript-with-Immutable-js-v3-and-earlier" class="headerlink" title="Using TypeScript with Immutable.js v3 and earlier:"></a>Using TypeScript with Immutable.js v3 and earlier:</h4><p>Previous versions of Immutable.js include a reference file which you can include<br>via relative path to the type definitions at the top of your file.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class="line"><span class="keyword">import</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class="line">map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h2 id="The-case-for-Immutability"><a href="#The-case-for-Immutability" class="headerlink" title="The case for Immutability"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>
<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>
<p>This model of data flow aligns well with the architecture of <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a><br>and especially well with an application designed using the ideas of <a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>.</p>
<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>( &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>)</div><div class="line">assert(map1.equals(map2) === <span class="literal">true</span>)</div><div class="line"><span class="keyword">const</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">assert(map1.equals(map3) === <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>Note: As a performance optimization Immutable.js attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>
<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> clone = map1;</div></pre></td></tr></table></figure>
<h2 id="JavaScript-first-API"><a href="#JavaScript-first-API" class="headerlink" title="JavaScript-first API"></a>JavaScript-first API</h2><p>While Immutable.js is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a>.</p>
<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="keyword">const</span> list3 = list2.unshift(<span class="number">0</span>);</div><div class="line"><span class="keyword">const</span> list4 = list1.concat(list2, list3);</div><div class="line">assert(list1.size === <span class="number">2</span>);</div><div class="line">assert(list2.size === <span class="number">5</span>);</div><div class="line">assert(list3.size === <span class="number">6</span>);</div><div class="line">assert(list4.size === <span class="number">13</span>);</div><div class="line">assert(list4.get(<span class="number">0</span>) === <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> found on <code>Immutable.Map</code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> alpha = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;);</div><div class="line">alpha.map(<span class="function">(<span class="params">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class="line"><span class="comment">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>
<h3 id="Accepts-raw-JavaScript-objects"><a href="#Accepts-raw-JavaScript-objects" class="headerlink" title="Accepts raw JavaScript objects."></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, Immutable.js<br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Collection</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">t</span>: <span class="number">30</span> &#125;)</div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">d</span>: <span class="number">100</span>, <span class="attr">o</span>: <span class="number">200</span>, <span class="attr">g</span>: <span class="number">300</span> &#125;</div><div class="line"><span class="keyword">const</span> map3 = map1.merge(map2, obj);</div><div class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>
<p>This is possible because Immutable.js can treat any JavaScript Array or Object<br>as a Collection. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> myObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</div><div class="line">Seq(myObject).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x).toObject();</div><div class="line"><span class="comment">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>
<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">"one"</span> &#125;</div><div class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// [ "1" ]</span></div><div class="line">obj[<span class="string">"1"</span>] <span class="comment">// "one"</span></div><div class="line">obj[<span class="number">1</span>]   <span class="comment">// "one"</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> map = fromJS(obj)</div><div class="line">map.get(<span class="string">"1"</span>) <span class="comment">// "one"</span></div><div class="line">map.get(<span class="number">1</span>)   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>
<h3 id="Converts-back-to-raw-JavaScript-objects"><a href="#Converts-back-to-raw-JavaScript-objects" class="headerlink" title="Converts back to raw JavaScript objects."></a>Converts back to raw JavaScript objects.</h3><p>All Immutable.js Collections can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Collections also implement <code>toJSON()</code> allowing them to be passed<br>to <code>JSON.stringify</code> directly.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> deep = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: List([ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]) &#125;)</div><div class="line">deep.toObject() <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class="line">deep.toArray() <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class="line">deep.toJS() <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class="line"><span class="built_in">JSON</span>.stringify(deep) <span class="comment">// '&#123;"a":1,"b":2,"c":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>
<h3 id="Embraces-ES2015"><a href="#Embraces-ES2015" class="headerlink" title="Embraces ES2015"></a>Embraces ES2015</h3><p>Immutable.js supports all JavaScript environments, including legacy<br>browsers (even IE8). However it also takes advantage of features added to<br>JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a>, the latest standard version of JavaScript, including<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol" target="_blank" rel="external">Iterators</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow Functions</a>, <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes" target="_blank" rel="external">Classes</a>, and <a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">Modules</a>. It’s inspired<br>by the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a> collections added to ES2015.</p>
<p>All examples in the Documentation are presented in ES2015. To run in all<br>browsers, they need to be translated to ES3.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015</span></div><div class="line"><span class="keyword">const</span> mapped = foo.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"><span class="comment">// ES3</span></div><div class="line"><span class="keyword">var</span> mapped = foo.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>
<h2 id="Nested-Structures"><a href="#Nested-Structures" class="headerlink" title="Nested Structures"></a>Nested Structures</h2><p>The collections in Immutable.js are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> nested = fromJS(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nested2 = nested.mergeDeep(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">6</span> &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line">nested2.getIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ]) <span class="comment">// 6</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested3 = nested2.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ], value =&gt; value + <span class="number">1</span>)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested4 = nested3.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ], list =&gt; list.push(<span class="number">6</span>))</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Lazy-Seq"><a href="#Lazy-Seq" class="headerlink" title="Lazy Seq"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the sequence methods (such as <code>map</code> and <code>filter</code>).</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>
<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>
<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> oddSquares = Seq([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ])</div><div class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</div><div class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</div></pre></td></tr></table></figure>
<p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(oddSquares.get(<span class="number">1</span>)); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> seq = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;).toSeq()</div></pre></td></tr></table></figure>
<p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seq.flip().map(<span class="function"><span class="params">key</span> =&gt;</span> key.toUpperCase()).flip().toObject();</div><div class="line"><span class="comment">// &#123; A: 1, B: 1, C: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>As well as expressing logic that would otherwise seem memory-limited:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Range &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line">Range(<span class="number">1</span>, <span class="literal">Infinity</span>)</div><div class="line">  .skip(<span class="number">1000</span>)</div><div class="line">  .map(<span class="function"><span class="params">n</span> =&gt;</span> -n)</div><div class="line">  .filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)</div><div class="line">  .take(<span class="number">2</span>)</div><div class="line">  .reduce(<span class="function">(<span class="params">r, n</span>) =&gt;</span> r * n, <span class="number">1</span>);</div><div class="line"><span class="comment">// 1006008</span></div></pre></td></tr></table></figure>
<p>Note: A Collection is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>
<h2 id="Equality-treats-Collections-as-Data"><a href="#Equality-treats-Collections-as-Data" class="headerlink" title="Equality treats Collections as Data"></a>Equality treats Collections as Data</h2><p>Immutable.js provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, is &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line">assert(map1 !== map2) <span class="comment">// two different instances</span></div><div class="line">assert(is(map1, map2)) <span class="comment">// have equivalent values</span></div><div class="line">assert(map1.equals(map2)) <span class="comment">// alternatively use the equals method</span></div></pre></td></tr></table></figure>
<p><code>Immutable.is()</code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="external">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>
<h2 id="Batching-Mutations"><a href="#Batching-Mutations" class="headerlink" title="Batching Mutations"></a>Batching Mutations</h2><blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, Immutable.js gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  Immutable.js applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.withMutations(<span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</div><div class="line">  list.push(<span class="number">4</span>).push(<span class="number">5</span>).push(<span class="number">6</span>);</div><div class="line">&#125;);</div><div class="line">assert(list1.size === <span class="number">3</span>);</div><div class="line">assert(list2.size === <span class="number">6</span>);</div></pre></td></tr></table></figure>
<p>Note: Immutable.js also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="external">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts" target="_blank" rel="external">Immutable.d.ts</a>.<br>Please contribute!</p>
<p>Also, don’t miss the <a href="https://github.com/facebook/immutable-js/wiki" target="_blank" rel="external">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">issue</a>.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>If you are using the <a href="http://chaijs.com/" target="_blank" rel="external">Chai Assertion Library</a>, <a href="https://github.com/astorije/chai-immutable" target="_blank" rel="external">Chai Immutable</a> provides a set of assertions to use against Immutable.js collections.</p>
<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>Use <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="./CONTRIBUTING.md">contribute</a>.</p>
<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>Changes are tracked as <a href="https://github.com/facebook/immutable-js/releases" target="_blank" rel="external">Github releases</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs" target="_blank" rel="external">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/" target="_blank" rel="external">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href="https://github.com/hughfdjackson/immutable" target="_blank" rel="external">this repository</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Immutable.js is <a href="https://github.com/facebook/immutable-js/blob/master/LICENSE" target="_blank" rel="external">BSD-licensed</a>. We also provide an additional <a href="https://github.com/facebook/immutable-js/blob/master/PATENTS" target="_blank" rel="external">patent grant</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Immutable-collections-for-JavaScript&quot;&gt;&lt;a href=&quot;#Immutable-collections-for-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Immutable collection
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>paserServer-Dashboard</title>
    <link href="http://yoursite.com/2017/03/26/paserServer-Dashboard/"/>
    <id>http://yoursite.com/2017/03/26/paserServer-Dashboard/</id>
    <published>2017-03-26T10:59:38.000Z</published>
    <updated>2017-03-26T03:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parse-Dashboard"><a href="#Parse-Dashboard" class="headerlink" title="Parse Dashboard"></a>Parse Dashboard</h1><p><a href="https://travis-ci.org/ParsePlatform/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-dashboard/master.svg?style=flat" alt="Build Status"></a><br><a href="https://www.npmjs.com/package/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-dashboard.svg?style=flat" alt="npm version"></a></p>
<p>Parse Dashboard is a standalone dashboard for managing your Parse apps. You can use it to manage your <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps and your apps that are running on <a href="https://Parse.com" target="_blank" rel="external">Parse.com</a>.</p>
<ul>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#local-installation">Local Installation</a><ul>
<li><a href="#configuring-parse-dashboard">Configuring Parse Dashboard</a></li>
<li><a href="#managing-multiple-apps">Managing Multiple Apps</a></li>
<li><a href="#other-configuration-options">Other Configuration Options</a></li>
</ul>
</li>
<li><a href="#running-as-express-middleware">Running as Express Middleware</a></li>
<li><a href="#deploying-parse-dashboard">Deploying Parse Dashboard</a><ul>
<li><a href="#preparing-for-deployment">Preparing for Deployment</a></li>
<li><a href="#security-considerations">Security Considerations</a><ul>
<li><a href="#configuring-basic-authentication">Configuring Basic Authentication</a></li>
<li><a href="#separating-app-access-based-on-user-identity">Separating App Access Based on User Identity</a></li>
</ul>
</li>
<li><a href="#run-with-docker">Run with Docker</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> version &gt;= 4.3 is required to run the dashboard. You also need to be using Parse Server version 2.1.4 or higher.</p>
<h1 id="Local-Installation"><a href="#Local-Installation" class="headerlink" title="Local Installation"></a>Local Installation</h1><p>Install the dashboard from <code>npm</code>.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-dashboard</div></pre></td></tr></table></figure>
<p>You can launch the dashboard for an app with a single command by supplying an app ID, master key, URL, and name like this:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">parse-dashboard </span><span class="built_in">--appId</span> <span class="string">yourAppId </span><span class="built_in">--masterKey</span> <span class="string">yourMasterKey </span><span class="built_in">--serverURL</span> <span class="string">"https://example.com/parse"</span> <span class="built_in">--appName</span> <span class="string">optionalName</span></div></pre></td></tr></table></figure>
<p>You may set the host, port and mount path by supplying the <code>--host</code>, <code>--port</code> and <code>--mountPath</code> options to parse-dashboard. You can use anything you want as the app name, or leave it out in which case the app ID will be used.</p>
<p>After starting the dashboard, you can visit <a href="http://localhost:4040" target="_blank" rel="external">http://localhost:4040</a> in your browser:</p>
<p><img src=".github/dash-shot.png" alt="Parse Dashboard"></p>
<h2 id="Configuring-Parse-Dashboard"><a href="#Configuring-Parse-Dashboard" class="headerlink" title="Configuring Parse Dashboard"></a>Configuring Parse Dashboard</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>You can also start the dashboard from the command line with a config file.  To do this, create a new file called <code>parse-dashboard-config.json</code> inside your local Parse Dashboard directory hierarchy.  The file should match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can then start the dashboard using <code>parse-dashboard --config parse-dashboard-config.json</code>.</p>
<h3 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h3><blockquote>
<p>This only works when starting the app using the <code>parse-dashboard</code> command</p>
</blockquote>
<p>There are also two methods you can use to configure the dashboard using environment variables.</p>
<h4 id="Multiple-apps"><a href="#Multiple-apps" class="headerlink" title="Multiple apps"></a>Multiple apps</h4><p>Provide the entire JSON configuration in <code>PARSE_DASHBOARD_CONFIG</code> and it will be parsed just like the config file.</p>
<h4 id="Single-app"><a href="#Single-app" class="headerlink" title="Single app"></a>Single app</h4><p>You can also define each configuration option individually.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HOST:</span> <span class="string">"0.0.0.0"</span></div><div class="line"><span class="symbol">PORT:</span> <span class="string">"4040"</span></div><div class="line"><span class="symbol">MOUNT_PATH:</span> <span class="string">"/"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_TRUST_PROXY:</span> undefined <span class="comment">// Or "1" to trust connection info from a proxy's X-Forwarded-* headers</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SERVER_URL:</span> <span class="string">"http://localhost:1337/parse"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_MASTER_KEY:</span> <span class="string">"myMasterKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_ID:</span> <span class="string">"myAppId"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_NAME:</span> <span class="string">"MyApp"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_ID:</span> <span class="string">"user1"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_PASSWORD:</span> <span class="string">"pass"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_KEY:</span> <span class="string">"sslKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_CERT:</span> <span class="string">"sslCert"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_CONFIG:</span> undefined <span class="comment">// Only for reference, it must not exist</span></div></pre></td></tr></table></figure>
<h2 id="Managing-Multiple-Apps"><a href="#Managing-Multiple-Apps" class="headerlink" title="Managing Multiple Apps"></a>Managing Multiple Apps</h2><p>Managing multiple apps from the same dashboard is also possible.  Simply add additional entries into the <code>parse-dashboard-config.json</code> file’s <code>&quot;apps&quot;</code> array.</p>
<p>You can manage self-hosted <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps, <em>and</em> apps that are hosted on <a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> from the same dashboard. In your config file, you will need to add the <code>restKey</code> and <code>javascriptKey</code> as well as the other paramaters, which you can find on <code>dashboard.parse.com</code>. Set the serverURL to <code>http://api.parse.com/1</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"https://api.parse.com/1"</span>, <span class="comment">// Hosted on Parse.com</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"javascriptKey"</span>: <span class="string">"myJavascriptKey"</span>,</div><div class="line">      <span class="string">"restKey"</span>: <span class="string">"myRestKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse.Com App"</span>,</div><div class="line">      <span class="string">"production"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>, <span class="comment">// Self-hosted Parse Server</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse Server App"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="App-Icon-Configuration"><a href="#App-Icon-Configuration" class="headerlink" title="App Icon Configuration"></a>App Icon Configuration</h2><p>Parse Dashboard supports adding an optional icon for each app, so you can identify them easier in the list. To do so, you <em>must</em> use the configuration file, define an <code>iconsFolder</code> in it, and define the <code>iconName</code> parameter for each app (including the extension). The path of the <code>iconsFolder</code> is relative to the configuration file. If you have installed ParseDashboard globally you need to use the full path as value for the <code>iconsFolder</code>. To visualize what it means, in the following example <code>icons</code> is a directory located under the same directory as the configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"My Parse Server App"</span>,</div><div class="line">      <span class="attr">"iconName"</span>: <span class="string">"MyAppIcon.png"</span>,</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"iconsFolder"</span>: <span class="string">"icons"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Other-Configuration-Options"><a href="#Other-Configuration-Options" class="headerlink" title="Other Configuration Options"></a>Other Configuration Options</h2><p>You can set <code>appNameForURL</code> in the config file for each app to control the url of your app within the dashboard. This can make it easier to use bookmarks or share links on your dashboard.</p>
<p>To change the app to production, simply set <code>production</code> to <code>true</code> in your config file. The default value is false if not specified.</p>
<h1 id="Running-as-Express-Middleware"><a href="#Running-as-Express-Middleware" class="headerlink" title="Running as Express Middleware"></a>Running as Express Middleware</h1><p>Instead of starting Parse Dashboard with the CLI, you can also run it as an <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<p>If you want to run both <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> and Parse Dashboard on the same server/port, you can run them both as express middleware:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="keyword">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> allowInsecureHTTP = <span class="keyword">false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">	<span class="comment">// Parse Server settings</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">	<span class="comment">// Parse Dashboard settings</span></div><div class="line">&#125;, allowInsecureHTTP);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Server available at /parse</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<h1 id="Deploying-Parse-Dashboard"><a href="#Deploying-Parse-Dashboard" class="headerlink" title="Deploying Parse Dashboard"></a>Deploying Parse Dashboard</h1><h2 id="Preparing-for-Deployment"><a href="#Preparing-for-Deployment" class="headerlink" title="Preparing for Deployment"></a>Preparing for Deployment</h2><p>Make sure the server URLs for your apps can be accessed by your browser. If you are deploying the dashboard, then <code>localhost</code> urls will not work.</p>
<h2 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h2><p>In order to securely deploy the dashboard without leaking your apps master key, you will need to use HTTPS and Basic Authentication.</p>
<p>The deployed dashboard detects if you are using a secure connection. If you are deploying the dashboard behind a load balancer or front-facing proxy, then the app won’t be able to detect that the connection is secure. In this case, you can start the dashboard with the <code>--trustProxy=1</code> option (or set the PARSE_DASHBOARD_TRUST_PROXY config var to 1) to rely on the X-Forwarded-* headers for the client’s connection security.  This is useful for hosting on services like Heroku, where you can trust the provided proxy headers to correctly determine whether you’re using HTTP or HTTPS.  You can also turn on this setting when using the dashboard as <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trustProxy = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"trustProxy"</span>: <span class="number">1</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Configuring-Basic-Authentication"><a href="#Configuring-Basic-Authentication" class="headerlink" title="Configuring Basic Authentication"></a>Configuring Basic Authentication</h3><p>You can configure your dashboard for Basic Authentication by adding usernames and passwords your <code>parse-dashboard-config.json</code> configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"useEncryptedPasswords"</span>: <span class="literal">true</span> | <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can store the password in either <code>plain text</code> or <code>bcrypt</code> formats. To use the <code>bcrypt</code> format, you must set the config <code>useEncryptedPasswords</code> parameter to <code>true</code>.<br>You can encrypt the password using any online bcrypt tool e.g. <a href="https://www.bcrypt-generator.com" target="_blank" rel="external">https://www.bcrypt-generator.com</a>.</p>
<h3 id="Separating-App-Access-Based-on-User-Identity"><a href="#Separating-App-Access-Based-on-User-Identity" class="headerlink" title="Separating App Access Based on User Identity"></a>Separating App Access Based on User Identity</h3><p>If you have configured your dashboard to manage multiple applications, you can restrict the management of apps based on user identity.</p>
<p>To do so, update your <code>parse-dashboard-config.json</code> configuration file to match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass1"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;, &#123;<span class="attr">"appId"</span>: <span class="string">"myAppId2"</span>&#125;]</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass2"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;]</div><div class="line">     &#125;  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The effect of such a configuration is as follows:</p>
<p>When <code>user1</code> logs in, he/she will be able to manage <code>myAppId1</code> and <code>myAppId2</code> from the dashboard.</p>
<p>When <em><code>user2</code></em>  logs in, he/she will only be able to manage <em><code>myAppId1</code></em> from the dashboard.</p>
<h2 id="Run-with-Docker"><a href="#Run-with-Docker" class="headerlink" title="Run with Docker"></a>Run with Docker</h2><p>It is easy to use it with Docker. First build the image:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t parse-dashboard .</div></pre></td></tr></table></figure>
<p>Run the image with your <code>config.json</code> mounted as a volume</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">4040</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard</div></pre></td></tr></table></figure>
<p>By default, the container will start the app at port 4040 inside the container. However, you can run custom command as well (see <code>Deploying in production</code> for custom setup).</p>
<p>In this example, we want to run the application in production mode at port 80 of the host machine.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">8080</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard --port <span class="number">8080</span></div></pre></td></tr></table></figure>
<p>If you are not familiar with Docker, <code>--port 8080</code> will be passed in as argument to the entrypoint to form the full command <code>npm start -- --port 8080</code>. The application will start at port 8080 inside the container and port <code>8080</code> will be mounted to port <code>80</code> on your host machine.</p>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Dashboard guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Parse-Dashboard&quot;&gt;&lt;a href=&quot;#Parse-Dashboard&quot; class=&quot;headerlink&quot; title=&quot;Parse Dashboard&quot;&gt;&lt;/a&gt;Parse Dashboard&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://t
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>PaserServer_readme</title>
    <link href="http://yoursite.com/2017/03/26/PaserServer-readme/"/>
    <id>http://yoursite.com/2017/03/26/PaserServer-readme/</id>
    <published>2017-03-26T10:50:57.000Z</published>
    <updated>2017-03-26T02:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src=".github/parse-server-logo.png?raw=true" alt="Parse Server logo"></p>
<p><a href="https://travis-ci.org/ParsePlatform/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-server/master.svg?style=flat" alt="Build Status"></a><br><a href="https://codecov.io/github/ParsePlatform/parse-server?branch=master" target="_blank" rel="external"><img src="https://img.shields.io/codecov/c/github/ParsePlatform/parse-server/master.svg" alt="Coverage Status"></a><br><a href="https://www.npmjs.com/package/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-server.svg?style=flat" alt="npm version"></a></p>
<p><a href="https://gitter.im/ParsePlatform/Chat" target="_blank" rel="external"><img src="https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg" alt="Join Chat"></a></p>
<p>Parse Server is an <a href="http://blog.parse.com/announcements/introducing-parse-server-and-the-database-migration-tool/" target="_blank" rel="external">open source version of the Parse backend</a> that can be deployed to any infrastructure that can run Node.js.</p>
<p>Parse Server works with the Express web application framework. It can be added to existing web applications, or run by itself.</p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>April 2016 - We created a series of video screencasts, please check them out here: <a href="http://blog.parse.com/learn/parse-server-video-series-april-2016/" target="_blank" rel="external">http://blog.parse.com/learn/parse-server-video-series-april-2016/</a></p>
<p>The fastest and easiest way to get started is to run MongoDB and Parse Server locally.</p>
<h2 id="Running-Parse-Server"><a href="#Running-Parse-Server" class="headerlink" title="Running Parse Server"></a>Running Parse Server</h2><h3 id="Locally"><a href="#Locally" class="headerlink" title="Locally"></a>Locally</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-<span class="keyword">server</span> mongodb-runner</div><div class="line">$ mongodb-runner <span class="keyword">start</span></div><div class="line">$ <span class="keyword">parse</span>-<span class="keyword">server</span> <span class="comment">--appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test</span></div></pre></td></tr></table></figure>
<h3 id="Inside-a-Docker-container"><a href="#Inside-a-Docker-container" class="headerlink" title="Inside a Docker container"></a>Inside a Docker container</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ docker build --tag <span class="built_in">parse</span>-server .</div><div class="line">$ docker <span class="keyword">run</span> --name my-mongo -d mongo</div><div class="line">$ docker <span class="keyword">run</span> --name my-<span class="built_in">parse</span>-server --link my-mongo:mongo <span class="built_in">parse</span>-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb:<span class="comment">//mongo/test</span></div><div class="line">```  </div><div class="line"></div><div class="line">You can <span class="keyword">use</span> any arbitrary <span class="keyword">string</span> as your application id <span class="keyword">and</span> master <span class="built_in">key</span>. These will be used by your clients to authenticate with the <span class="built_in">Parse</span> Server.</div><div class="line"></div><div class="line">That's it! You are now running a standalone version of <span class="built_in">Parse</span> Server on your machine.</div><div class="line"></div><div class="line">**Using a remote MongoDB?** Pass the  `--databaseURI DATABASE_URI` parameter when starting `<span class="built_in">parse</span>-server`. Learn more about configuring <span class="built_in">Parse</span> Server [here](<span class="meta">#configuration). For a full list of available options, run `parse-server --help`.</span></div><div class="line"></div><div class="line"><span class="meta">### Saving your first object</span></div><div class="line"></div><div class="line">Now that you're running <span class="built_in">Parse</span> Server, it is <span class="built_in">time</span> to <span class="keyword">save</span> your first object. We'll <span class="keyword">use</span> the [REST API](https:<span class="comment">//parse.com/docs/rest/guide), but you can easily do the same using any of the [Parse SDKs](https://parseplatform.github.io/#sdks). Run the following:</span></div><div class="line"></div><div class="line">```bash</div><div class="line">curl -X POST \</div><div class="line">-H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">-H <span class="string">"Content-Type: application/json"</span> \</div><div class="line">-d '&#123;<span class="string">"score"</span>:<span class="number">1337</span>,<span class="string">"playerName"</span>:<span class="string">"Sean Plott"</span>,<span class="string">"cheatMode"</span>:false&#125;' \</div><div class="line">http:<span class="comment">//localhost:1337/parse/classes/GameScore</span></div></pre></td></tr></table></figure>
<p>You should get a response similar to this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"objectId"</span>: <span class="string">"2ntvSpRGIK"</span>,</div><div class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-03-11T23:51:48.050Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can now retrieve this object directly (make sure to replace <code>2ntvSpRGIK</code> with the actual <code>objectId</code> you received when the object was created):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  http://localhost:1337/parse/classes/GameScore/2ntvSpRGIK</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Response</div><div class="line">&#123;</div><div class="line">  "objectId": "2ntvSpRGIK",</div><div class="line">  "score": 1337,</div><div class="line">  "playerName": "Sean Plott",</div><div class="line">  "cheatMode": false,</div><div class="line">  "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">  "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Keeping tracks of individual object ids is not ideal, however. In most cases you will want to run a query over the collection, like so:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  <span class="symbol">http:</span>/<span class="regexp">/localhost:1337/parse</span><span class="regexp">/classes/</span>GameScore</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// The response will provide all the matching objects within the `results` array:</div><div class="line">&#123;</div><div class="line">  "results": [</div><div class="line">    &#123;</div><div class="line">      "objectId": "2ntvSpRGIK",</div><div class="line">      "score": 1337,</div><div class="line">      "playerName": "Sean Plott",</div><div class="line">      "cheatMode": false,</div><div class="line">      "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">      "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To learn more about using saving and querying objects on Parse Server, check out the <a href="https://parse.com/docs" target="_blank" rel="external">Parse documentation</a>.</p>
<h3 id="Connect-your-app-to-Parse-Server"><a href="#Connect-your-app-to-Parse-Server" class="headerlink" title="Connect your app to Parse Server"></a>Connect your app to Parse Server</h3><p>Parse provides SDKs for all the major platforms. Refer to the Parse Server guide to <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#using-parse-sdks-with-parse-server" target="_blank" rel="external">learn how to connect your app to Parse Server</a>.</p>
<h2 id="Running-Parse-Server-elsewhere"><a href="#Running-Parse-Server-elsewhere" class="headerlink" title="Running Parse Server elsewhere"></a>Running Parse Server elsewhere</h2><p>Once you have a better understanding of how the project works, please refer to the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">Parse Server wiki</a> for in-depth guides to deploy Parse Server to major infrastructure providers. Read on to learn more about additional ways of running Parse Server.</p>
<h3 id="Parse-Server-Sample-Application"><a href="#Parse-Server-Sample-Application" class="headerlink" title="Parse Server Sample Application"></a>Parse Server Sample Application</h3><p>We have provided a basic <a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">Node.js application</a> that uses the Parse Server module on Express and can be easily deployed to various infrastructure providers:</p>
<ul>
<li><a href="https://devcenter.heroku.com/articles/deploying-a-parse-server-to-heroku" target="_blank" rel="external">Heroku and mLab</a></li>
<li><a href="http://mobile.awsblog.com/post/TxCD57GZLM2JR/How-to-set-up-Parse-Server-on-AWS-using-AWS-Elastic-Beanstalk" target="_blank" rel="external">AWS and Elastic Beanstalk</a></li>
<li><a href="https://medium.com/@justinbeckwith/deploying-parse-server-to-google-app-engine-6bc0b7451d50" target="_blank" rel="external">Google App Engine</a></li>
<li><a href="https://azure.microsoft.com/en-us/blog/azure-welcomes-parse-developers/" target="_blank" rel="external">Microsoft Azure</a></li>
<li><a href="https://blog.sashido.io/tag/migration/" target="_blank" rel="external">SashiDo</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-run-parse-server-on-ubuntu-14-04" target="_blank" rel="external">Digital Ocean</a></li>
<li><a href="https://github.com/cf-platform-eng/pws-parse-server" target="_blank" rel="external">Pivotal Web Services</a></li>
<li><a href="http://blog.back4app.com/2016/03/01/quick-wizard-migration/" target="_blank" rel="external">Back4app</a></li>
<li><a href="https://gomix.com/#!/project/parse-server" target="_blank" rel="external">Gomix</a></li>
</ul>
<h3 id="Parse-Server-Express"><a href="#Parse-Server-Express" class="headerlink" title="Parse Server + Express"></a>Parse Server + Express</h3><p>You can also create an instance of Parse Server, and mount it on a new or existing Express website:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="built_in">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">  <span class="attr">databaseURI</span>: <span class="string">'mongodb://localhost:27017/dev'</span>, <span class="comment">// Connection string for your MongoDB database</span></div><div class="line">  cloud: <span class="string">'/home/myApp/cloud/main.js'</span>, <span class="comment">// Absolute path to your Cloud Code</span></div><div class="line">  appId: <span class="string">'myAppId'</span>,</div><div class="line">  <span class="attr">masterKey</span>: <span class="string">'myMasterKey'</span>, <span class="comment">// Keep this key secret!</span></div><div class="line">  fileKey: <span class="string">'optionalFileKey'</span>,</div><div class="line">  <span class="attr">serverURL</span>: <span class="string">'http://localhost:1337/parse'</span> <span class="comment">// Don't forget to change to https if needed</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Serve the Parse API on the /parse URL prefix</span></div><div class="line">app.use(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line">app.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'parse-server-example running on port 1337.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>For a full list of available options, run <code>parse-server --help</code>.</p>
<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Parse Server will, by default, log:</p>
<ul>
<li>to the console</li>
<li>daily rotating files as new line delimited JSON</li>
</ul>
<p>Logs are also be viewable in Parse Dashboard.</p>
<p><strong>Want to log each request and response?</strong> Set the <code>VERBOSE</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>VERBOSE=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want logs to be in placed in other folder?</strong> Pass the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>PARSE_SERVER_LOGS_FOLDER=&#39;&lt;path-to-logs-folder&gt;&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want new line delimited JSON error logs (for consumption by CloudWatch, Google Cloud Logging, etc.)?</strong> Pass the <code>JSON_LOGS</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>JSON_LOGS=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<h1 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h1><p>The full documentation for Parse Server is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">wiki</a>. The <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide" target="_blank" rel="external">Parse Server guide</a> is a good place to get started. If you’re interested in developing for Parse Server, the <a href="https://github.com/ParsePlatform/parse-server/wiki/Development-Guide" target="_blank" rel="external">Development guide</a> will help you get set up.</p>
<h2 id="Migrating-an-Existing-Parse-App"><a href="#Migrating-an-Existing-Parse-App" class="headerlink" title="Migrating an Existing Parse App"></a>Migrating an Existing Parse App</h2><p>The hosted version of Parse will be fully retired on January 28th, 2017. If you are planning to migrate an app, you need to begin work as soon as possible. There are a few areas where Parse Server does not provide compatibility with the hosted version of Parse. Learn more in the <a href="https://parse.com/migration" target="_blank" rel="external">Migration guide</a>.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Parse Server can be configured using the following options. You may pass these as parameters when running a standalone <code>parse-server</code>, or by loading a configuration file in JSON format using <code>parse-server path/to/configuration.json</code>. If you’re using Parse Server on Express, you may also pass these to the <code>ParseServer</code> object as options.</p>
<p>For the full list of available options, run <code>parse-server --help</code>.</p>
<h4 id="Basic-options"><a href="#Basic-options" class="headerlink" title="Basic options"></a>Basic options</h4><ul>
<li><code>appId</code> <strong>(required)</strong> - The application id to host with this server instance. You can use any arbitrary string. For migrated apps, this should match your hosted Parse app.</li>
<li><code>masterKey</code> <strong>(required)</strong> - The master key to use for overriding ACL security.  You can use any arbitrary string. Keep it secret! For migrated apps, this should match your hosted Parse app.</li>
<li><code>databaseURI</code> <strong>(required)</strong> - The connection string for your database, i.e. <code>mongodb://user:pass@host.com/dbname</code>. Be sure to <a href="https://app.zencoder.com/docs/guides/getting-started/special-characters-in-usernames-and-passwords" target="_blank" rel="external">URL encode your password</a> if your password has special characters.</li>
<li><code>port</code> - The default port is 1337, specify this parameter to use a different port.</li>
<li><code>serverURL</code> - URL to your Parse Server (don’t forget to specify http:// or https://). This URL will be used when making requests to Parse Server from Cloud Code.</li>
<li><code>cloud</code> - The absolute path to your cloud code <code>main.js</code> file.</li>
<li><code>push</code> - Configuration options for APNS and GCM push. See the <a href="https://github.com/ParsePlatform/parse-server/wiki/Push" target="_blank" rel="external">Push Notifications wiki entry</a>.</li>
</ul>
<h4 id="Client-key-options"><a href="#Client-key-options" class="headerlink" title="Client key options"></a>Client key options</h4><p>The client keys used with Parse are no longer necessary with Parse Server. If you wish to still require them, perhaps to be able to refuse access to older clients, you can set the keys at initialization time. Setting any of these keys will require all requests to provide one of the configured keys.</p>
<ul>
<li><code>clientKey</code></li>
<li><code>javascriptKey</code></li>
<li><code>restAPIKey</code></li>
<li><code>dotNetKey</code></li>
</ul>
<h4 id="Advanced-options"><a href="#Advanced-options" class="headerlink" title="Advanced options"></a>Advanced options</h4><ul>
<li><code>fileKey</code> - For migrated apps, this is necessary to provide access to files already hosted on Parse.</li>
<li><code>allowClientClassCreation</code> - Set to false to disable client class creation. Defaults to true.</li>
<li><code>enableAnonymousUsers</code> - Set to false to disable anonymous users. Defaults to true.</li>
<li><code>auth</code> - Used to configure support for <a href="https://github.com/ParsePlatform/parse-server/wiki/OAuth--and-Custom-Authentication" target="_blank" rel="external">3rd party authentication</a>.</li>
<li><code>facebookAppIds</code> - An array of valid Facebook application IDs that users may authenticate with.</li>
<li><code>mountPath</code> - Mount path for the server. Defaults to <code>/parse</code>.</li>
<li><code>filesAdapter</code> - The default behavior (GridStore) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Files/FilesAdapter.js" target="_blank" rel="external"><code>FilesAdapter.js</code></a>).</li>
<li><code>maxUploadSize</code> - Max file size for uploads. Defaults to 20 MB.</li>
<li><code>loggerAdapter</code> - The default behavior/transport (File) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Logger/LoggerAdapter.js" target="_blank" rel="external"><code>LoggerAdapter.js</code></a>).</li>
<li><code>sessionLength</code> - The length of time in seconds that a session should be valid for. Defaults to 31536000 seconds (1 year).</li>
<li><code>revokeSessionOnPasswordReset</code> - When a user changes their password, either through the reset password email or while logged in, all sessions are revoked if this is true. Set to false if you don’t want to revoke sessions.</li>
<li><code>accountLockout</code> - Lock account when a malicious user is attempting to determine an account password by trial and error.</li>
<li><code>passwordPolicy</code> - Optional password policy rules to enforce.</li>
<li><code>customPages</code> - A hash with urls to override email verification links, password reset links and specify frame url for masking user-facing pages. Available keys: <code>parseFrameURL</code>, <code>invalidLink</code>, <code>choosePassword</code>, <code>passwordResetSuccess</code>, <code>verifyEmailSuccess</code>.</li>
<li><code>middleware</code> - (CLI only), a module name, function that is an express middleware. When using the CLI, the express app will load it just <strong>before</strong> mounting parse-server on the mount path. This option is useful for injecting a monitoring middleware.</li>
</ul>
<h5 id="Logging-1"><a href="#Logging-1" class="headerlink" title="Logging"></a>Logging</h5><p>Use the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code> to save your server logfiles to the specified folder.</p>
<p>Usage:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">PARSE_SERVER_LOGS_FOLDER=</span><span class="string">'&lt;path-to-logs-folder&gt;'</span> <span class="string">parse-server </span><span class="built_in">--appId</span> <span class="string">APPLICATION_ID </span><span class="built_in">--masterKey</span> <span class="string">MASTER_KEY</span></div></pre></td></tr></table></figure>
<h5 id="Email-verification-and-password-reset"><a href="#Email-verification-and-password-reset" class="headerlink" title="Email verification and password reset"></a>Email verification and password reset</h5><p>Verifying user email addresses and enabling password reset via email requires an email adapter. As part of the <code>parse-server</code> package we provide an adapter for sending email through Mailgun. To use it, sign up for Mailgun, and add this to your initialization code:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = ParseServer(&#123;</div><div class="line">  ...otherOptions,</div><div class="line">  <span class="comment">// Enable email verification</span></div><div class="line">  verifyUserEmails: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// if `verifyUserEmails` is `true` and</span></div><div class="line">  <span class="comment">//     if `emailVerifyTokenValidityDuration` is `undefined` then</span></div><div class="line">  <span class="comment">//        email verify token never expires</span></div><div class="line">  <span class="comment">//     else</span></div><div class="line">  <span class="comment">//        email verify token expires after `emailVerifyTokenValidityDuration`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// `emailVerifyTokenValidityDuration` defaults to `undefined`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// email verify token below expires in 2 hours (= 2 * 60 * 60 == 7200 seconds)</span></div><div class="line">  emailVerifyTokenValidityDuration: <span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="comment">// in seconds (2 hours = 7200 seconds)</span></div><div class="line"></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to false to allow user to login without verifying their email</span></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to true to prevent user from login if their email is not verified</span></div><div class="line">  preventLoginWithUnverifiedEmail: <span class="literal">false</span>, <span class="comment">// defaults to false</span></div><div class="line"></div><div class="line">  <span class="comment">// The public URL of your app.</span></div><div class="line">  <span class="comment">// This will appear in the link that is used to verify email addresses and reset passwords.</span></div><div class="line">  <span class="comment">// Set the mount path as it is in serverURL</span></div><div class="line">  publicServerURL: <span class="string">'https://example.com/parse'</span>,</div><div class="line">  <span class="comment">// Your apps name. This will appear in the subject and body of the emails that are sent.</span></div><div class="line">  appName: <span class="string">'Parse App'</span>,</div><div class="line">  <span class="comment">// The email adapter</span></div><div class="line">  emailAdapter: &#123;</div><div class="line">    <span class="attr">module</span>: <span class="string">'parse-server-simple-mailgun-adapter'</span>,</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="comment">// The address that your emails come from</span></div><div class="line">      fromAddress: <span class="string">'parse@example.com'</span>,</div><div class="line">      <span class="comment">// Your domain from mailgun.com</span></div><div class="line">      domain: <span class="string">'example.com'</span>,</div><div class="line">      <span class="comment">// Your API key from mailgun.com</span></div><div class="line">      apiKey: <span class="string">'key-mykey'</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// account lockout policy setting (OPTIONAL) - defaults to undefined</span></div><div class="line">  <span class="comment">// if the account lockout policy is set and there are more than `threshold` number of failed login attempts then the `login` api call returns error code `Parse.Error.OBJECT_NOT_FOUND` with error message `Your account is locked due to multiple failed login attempts. Please try again after &lt;duration&gt; minute(s)`. After `duration` minutes of no login attempts, the application will allow the user to try login again.</span></div><div class="line">  accountLockout: &#123;</div><div class="line">    <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// duration policy setting determines the number of minutes that a locked-out account remains locked out before automatically becoming unlocked. Set it to a value greater than 0 and less than 100000.</span></div><div class="line">    threshold: <span class="number">3</span>, <span class="comment">// threshold policy setting determines the number of failed sign-in attempts that will cause a user account to be locked. Set it to an integer value greater than 0 and less than 1000.</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// optional settings to enforce password policies</span></div><div class="line">  passwordPolicy: &#123;</div><div class="line">    <span class="comment">// Two optional settings to enforce strong passwords. Either one or both can be specified. </span></div><div class="line">    <span class="comment">// If both are specified, both checks must pass to accept the password</span></div><div class="line">    <span class="comment">// 1. a RegExp object or a regex string representing the pattern to enforce </span></div><div class="line">    validatorPattern: <span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.&#123;8,&#125;)/</span>, <span class="comment">// enforce password with at least 8 char with at least 1 lower case, 1 upper case and 1 digit</span></div><div class="line">    <span class="comment">// 2. a callback function to be invoked to validate the password  </span></div><div class="line">    validatorCallback: <span class="function">(<span class="params">password</span>) =&gt;</span> &#123; <span class="keyword">return</span> validatePassword(password) &#125;, </div><div class="line">    <span class="attr">doNotAllowUsername</span>: <span class="literal">true</span>, <span class="comment">// optional setting to disallow username in passwords</span></div><div class="line">    maxPasswordAge: <span class="number">90</span>, <span class="comment">// optional setting in days for password expiry. Login fails if user does not reset the password within this period after signup/last reset. </span></div><div class="line">    maxPasswordHistory: <span class="number">5</span>, <span class="comment">// optional setting to prevent reuse of previous n passwords. Maximum value that can be specified is 20. Not specifying it or specifying 0 will not enforce history.</span></div><div class="line">    <span class="comment">//optional setting to set a validity duration for password reset links (in seconds)</span></div><div class="line">    resetTokenValidityDuration: <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>, <span class="comment">// expire after 24 hours</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>You can also use other email adapters contributed by the community such as:</p>
<ul>
<li><a href="https://www.npmjs.com/package/parse-server-postmark-adapter" target="_blank" rel="external">parse-server-postmark-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-sendgrid-adapter" target="_blank" rel="external">parse-server-sendgrid-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mandrill-adapter" target="_blank" rel="external">parse-server-mandrill-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-simple-ses-adapter" target="_blank" rel="external">parse-server-simple-ses-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailgun-adapter-template" target="_blank" rel="external">parse-server-mailgun-adapter-template</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailjet-adapter" target="_blank" rel="external">parse-server-mailjet-adapter</a></li>
<li><a href="https://www.npmjs.com/package/simple-parse-smtp-adapter" target="_blank" rel="external">simple-parse-smtp-adapter</a></li>
</ul>
<h3 id="Using-environment-variables-to-configure-Parse-Server"><a href="#Using-environment-variables-to-configure-Parse-Server" class="headerlink" title="Using environment variables to configure Parse Server"></a>Using environment variables to configure Parse Server</h3><p>You may configure the Parse Server using environment variables:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PORT</div><div class="line">PARSE_SERVER_APPLICATION_ID</div><div class="line">PARSE_SERVER_MASTER_KEY</div><div class="line">PARSE_SERVER_DATABASE_URI</div><div class="line">PARSE_SERVER_URL</div><div class="line">PARSE_SERVER_CLOUD_CODE_MAIN</div></pre></td></tr></table></figure>
<p>The default port is 1337, to use a different port set the PORT environment variable:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ PORT=8080 parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</div></pre></td></tr></table></figure>
<p>For the full list of configurable environment variables, run <code>parse-server --help</code>.</p>
<h3 id="Available-Adapters"><a href="#Available-Adapters" class="headerlink" title="Available Adapters"></a>Available Adapters</h3><p><a href="https://github.com/parse-server-modules" target="_blank" rel="external">Parse Server Modules (Adapters)</a></p>
<h3 id="Configuring-File-Adapters"><a href="#Configuring-File-Adapters" class="headerlink" title="Configuring File Adapters"></a>Configuring File Adapters</h3><p>Parse Server allows developers to choose from several options when hosting files:</p>
<ul>
<li><code>GridStoreAdapter</code>, which is backed by MongoDB;</li>
<li><code>S3Adapter</code>, which is backed by <a href="https://aws.amazon.com/s3/" target="_blank" rel="external">Amazon S3</a>; or</li>
<li><code>GCSAdapter</code>, which is backed by <a href="https://cloud.google.com/storage/" target="_blank" rel="external">Google Cloud Storage</a></li>
</ul>
<p><code>GridStoreAdapter</code> is used by default and requires no setup, but if you’re interested in using S3 or Google Cloud Storage, additional configuration information is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki/Configuring-File-Adapters" target="_blank" rel="external">Parse Server wiki</a>.</p>
<h1 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h1><p>For implementation related questions or technical support, please refer to the <a href="http://stackoverflow.com/questions/tagged/parse.com" target="_blank" rel="external">Stack Overflow</a> and <a href="https://serverfault.com/tags/parse" target="_blank" rel="external">Server Fault</a> communities.</p>
<p>If you believe you’ve found an issue with Parse Server, make sure these boxes are checked before <a href="https://github.com/ParsePlatform/parse-server/issues" target="_blank" rel="external">reporting an issue</a>:</p>
<ul>
<li><p>[ ] You’ve met the <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#prerequisites" target="_blank" rel="external">prerequisites</a>.</p>
</li>
<li><p>[ ] You’re running the <a href="https://github.com/ParsePlatform/parse-server/releases" target="_blank" rel="external">latest version</a> of Parse Server.</p>
</li>
<li><p>[ ] You’ve searched through <a href="https://github.com/ParsePlatform/parse-server/issues?utf8=%E2%9C%93&amp;q=" target="_blank" rel="external">existing issues</a>. Chances are that your issue has been reported or resolved before.</p>
</li>
</ul>
<h1 id="Want-to-ride-the-bleeding-edge"><a href="#Want-to-ride-the-bleeding-edge" class="headerlink" title="Want to ride the bleeding edge?"></a>Want to ride the bleeding edge?</h1><p>The <code>latest</code> branch in this repository is automatically maintained to be the last<br>commit to <code>master</code> to pass all tests, in the same form found on npm. It is<br>recommend to use builds deployed npm for many reasons, but if you want to use<br>the latest not-yet-released version of parse-server, you can do so by depending<br>directly on this branch:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install parseplatform/parse-<span class="keyword">server</span>.git<span class="meta">#latest</span></div></pre></td></tr></table></figure>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Server guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;.github/parse-server-logo.png?raw=true&quot; alt=&quot;Parse Server logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/ParsePlatform/parse-serv
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL for ParserServer</title>
    <link href="http://yoursite.com/2017/03/25/graphql_for_parserserver/"/>
    <id>http://yoursite.com/2017/03/25/graphql_for_parserserver/</id>
    <published>2017-03-25T14:57:05.000Z</published>
    <updated>2017-03-25T08:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GraphQL-for-Parse-Server"><a href="#GraphQL-for-Parse-Server" class="headerlink" title="GraphQL for Parse Server"></a>GraphQL for Parse Server</h1><p><a href="https://travis-ci.org/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://travis-ci.org/thebakeryio/parse-graphql-server.svg?branch=master" alt="Build Status"></a><br><a href="https://codeclimate.com/github/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://codeclimate.com/github/thebakeryio/parse-graphql-server/badges/gpa.svg" alt="Code Climate"></a><br><a href="https://codeclimate.com/github/thebakeryio/parse-graphql-server/coverage" target="_blank" rel="external"><img src="https://codeclimate.com/github/thebakeryio/parse-graphql-server/badges/coverage.svg" alt="Test Coverage"></a><br><a href="https://david-dm.org/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://david-dm.org/thebakeryio/parse-graphql-server.svg" alt="Dependency Status"></a><br><a href="https://david-dm.org/thebakeryio/parse-graphql-server#info=devDependencies" target="_blank" rel="external"><img src="https://david-dm.org/thebakeryio/parse-graphql-server/dev-status.svg" alt="devDependency Status"></a></p>
<h2 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use"></a>When to use</h2><ul>
<li>you are using Parse SDK (web or mobile) coupled with Parse Server running on Express</li>
<li>you are using GraphQL</li>
<li>you want to control access to Parse models in your resolvers using Parse ACL system</li>
<li>you are using <a href="https://github.com/thebakeryio/parse-graphql-client" target="_blank" rel="external">parse-graphql-client</a> package</li>
</ul>
<h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save graphql parse-graphql-server parse</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'parse/node'</span>;</div><div class="line"><span class="keyword">import</span> parseGraphQLHTTP <span class="keyword">from</span> <span class="string">'parse-graphql-server'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  GraphQLObjectType,</div><div class="line">  GraphQLSchema,</div><div class="line">  GraphQLID,</div><div class="line">  GraphQLString,</div><div class="line">  GraphQLBoolean,</div><div class="line">  GraphQLList,</div><div class="line">  GraphQLNonNull,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'graphql'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Todo = Parse.Object.extend(<span class="string">'Todo'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> TodoType = <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Todo'</span>,</div><div class="line">  <span class="attr">description</span>: <span class="string">'Item in todo list'</span>,</div><div class="line">  <span class="attr">fields</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">id</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLID,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">text</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLString,</div><div class="line">      <span class="attr">resolve</span>: <span class="function"><span class="params">todo</span> =&gt;</span> todo.get(<span class="string">'text'</span>),</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isComplete</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLBoolean,</div><div class="line">      <span class="attr">resolve</span>: <span class="function"><span class="params">todo</span> =&gt;</span> todo.get(<span class="string">'isComplete'</span>),</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> GraphQLSchema(&#123;</div><div class="line">  <span class="attr">query</span>: <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Query'</span>,</div><div class="line">    <span class="attr">fields</span>: &#123;</div><div class="line">      <span class="attr">todos</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="keyword">new</span> GraphQLList(TodoType),</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, args, &#123; user, Query &#125;</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> query = <span class="keyword">new</span> Query(Todo);</div><div class="line">          <span class="keyword">return</span> query.find();</div><div class="line">        &#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">  <span class="attr">mutation</span>: <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Mutation'</span>,</div><div class="line">    <span class="attr">fields</span>: &#123;</div><div class="line">      <span class="attr">addTodo</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Todo.SchemaType,</div><div class="line">        <span class="attr">description</span>: <span class="string">'Create a new todo item'</span>,</div><div class="line">        <span class="attr">args</span>: &#123;</div><div class="line">          <span class="attr">text</span>: &#123; <span class="attr">type</span>: <span class="keyword">new</span> GraphQLNonNull(GraphQLString) &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, &#123; text &#125;, &#123; Query, user &#125;</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> newTodo = <span class="keyword">new</span> Query(Todo).create(&#123; text, <span class="attr">isComplete</span>: <span class="literal">false</span> &#125;);</div><div class="line">          <span class="keyword">if</span> (user) &#123;</div><div class="line">            newTodo.setACL(<span class="keyword">new</span> Parse.ACL(user));</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> newTodo.save().then(<span class="function"><span class="params">td</span> =&gt;</span> td);</div><div class="line">        &#125;,</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">deleteTodo</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Todo.SchemaType,</div><div class="line">        <span class="attr">description</span>: <span class="string">'Delete a todo'</span>,</div><div class="line">        <span class="attr">args</span>: &#123;</div><div class="line">          <span class="attr">id</span>: &#123; <span class="attr">type</span>: <span class="keyword">new</span> GraphQLNonNull(GraphQLID) &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, &#123; id &#125;, &#123; Query &#125;</span>) =&gt;</span></div><div class="line">          <span class="keyword">new</span> Query(Todo).get(id).then(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (todo) &#123;</div><div class="line">              <span class="keyword">return</span> todo.destroy();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> todo;</div><div class="line">          &#125;),</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.use(<span class="string">'/graphql'</span>, parseGraphQLHTTP(&#123; schema, <span class="attr">graphiql</span>: <span class="literal">true</span>, &#125;));</div><div class="line"></div><div class="line">app.listen(process.env.PORT, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Writing-resolvers"><a href="#Writing-resolvers" class="headerlink" title="Writing resolvers"></a>Writing resolvers</h2><p>When using Parse GraphQL server package, all your GraphQL resolvers include authentication information and updated version of Parse.Query that passes ACL info along to make sure your queries are authenticated</p>
<pre><code>{
  resolve: (_, args, { Query, user }) =&gt; {
    // **Query** is a patched version of Parse.Query that
    // includes session token information for the currently authenticated 
    // user (if any)
    // It also extends basic Parse.Query to include a **create** method:
    // const newTodo = new Query(Todo).create({ text, isComplete: false });
    //
    // **user** is an instance of Parse.User set to the authenticated user (if any)
  },
}
</code></pre><h2 id="Client-side"><a href="#Client-side" class="headerlink" title="Client side"></a>Client side</h2><p>Parse GraphQL server looks for <strong>Authorization</strong> header set to the session token of the current Parse User. <a href="https://github.com/thebakeryio/parse-graphql-client" target="_blank" rel="external">Parse GraphQL client</a> sets this up for you automatically.  </p>
<h2 id="See-it-in-action"><a href="#See-it-in-action" class="headerlink" title="See it in action"></a>See it in action</h2><ul>
<li><a href="https://github.com/thebakeryio/todomvc-react-native" target="_blank" rel="external">TodoMVC using React Native</a></li>
</ul>
<h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>Parse GraphQL server relies heavily on <a href="https://github.com/graphql/express-graphql" target="_blank" rel="external">Express GraphQL package</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GraphQL-for-Parse-Server&quot;&gt;&lt;a href=&quot;#GraphQL-for-Parse-Server&quot; class=&quot;headerlink&quot; title=&quot;GraphQL for Parse Server&quot;&gt;&lt;/a&gt;GraphQL for Pa
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>becoming a profess programmer</title>
    <link href="http://yoursite.com/2017/03/25/becoming-a-profess-programmer/"/>
    <id>http://yoursite.com/2017/03/25/becoming-a-profess-programmer/</id>
    <published>2017-03-25T14:48:22.000Z</published>
    <updated>2017-03-25T06:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code># 前言
</code></pre><p>成为一名专业程序员的道路上，需要坚持练习、学习与积累，技术方面既要有一定的广度，更要有自己的深度。</p>
<p>笔者作为一位tool mad，将工作以来用到的各种优秀资料、神器及框架整理在此，毕竟好记性不如烂键盘，此项目可以作为自己的不时之需。</p>
<p>本人喜欢折腾，记录的东西也比较杂，各方面都会有一些，内容按重要等级排序，大家各取所需。</p>
<p>这里的东西会持续积累下去，欢迎Star，也欢迎发PR给我。</p>
<p><a href="https://github.com/thonatos" target="_blank" rel="external">Thonatos.Yang</a>整理的GitBook版本，阅读体验更佳：<a href="https://thonatos.gitbooks.io/be-a-professional-programmer/" target="_blank" rel="external">https://thonatos.gitbooks.io/be-a-professional-programmer/</a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<ul>
<li><a href="#%E8%B5%84%E6%96%99%E7%AF%87">资料篇</a><ul>
<li><a href="#%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9">技术站点</a></li>
<li><a href="#%E5%BF%85%E7%9C%8B%E4%B9%A6%E7%B1%8D">必看书籍</a></li>
<li><a href="#%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2">大牛博客</a></li>
<li><a href="#github%E7%AF%87">GitHub篇</a></li>
</ul>
</li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%AF%87">工具篇</a><ul>
<li><a href="#%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7">平台工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1">第三方服务</a></li>
<li><a href="#%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B7%A5%E5%85%B7">爬虫相关(好玩的工具)</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3">安全相关</a></li>
<li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">Web服务器性能/压力测试工具/负载均衡器</a></li>
</ul>
</li>
<li><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E5%85%B7">大数据处理/数据分析/分布式工具</a></li>
<li><a href="#web%E5%89%8D%E7%AB%AF">Web前端</a></li>
<li><a href="#%E8%AF%AD%E8%A8%80%E7%AF%87">语言篇</a><ul>
<li><a href="#scala">Scala</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#c--c">C &amp; C++</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>
<li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">游戏开发相关</a></li>
<li><a href="#%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">日志聚合，分布式日志收集</a></li>
<li><a href="#rtp%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%9F%B3%E8%A7%86%E9%A2%91">RTP,实时传输协议与音视频</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a>技术站点</h3><ul>
<li>在线学习：<a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a>、<a href="https://www.edx.org/" target="_blank" rel="external">edX</a>、<a href="https://cn.udacity.com/" target="_blank" rel="external">Udacity</a>、<a href="https://ocw.mit.edu/index.htm" target="_blank" rel="external">MIT公开课</a>、<a href="http://mooc.guokr.com/course/" target="_blank" rel="external">MOOC学院</a>、<a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a></li>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>：非常棒的针对编程的链接聚合网站</li>
<li><a href="https://www.techmeme.com/" target="_blank" rel="external">Techmeme</a>：美国知名科技新闻和博客聚集网站，类似的还有（Panda, Hacker &amp; Designer News）</li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank" rel="external">Reddit - Programming板块</a>：同上</li>
<li>Java牛人必备：<a href="http://www.programcreek.com/" target="_blank" rel="external">Program Creek</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>：IT技术问答网站</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a>：中文的技术问答社区</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a>：全球最大的源代码管理平台，很多知名开源项目都在上面，如<a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux内核</a>，<a href="https://github.com/openstack/openstack" target="_blank" rel="external">OpenStack</a>等</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>：支持中文可免费创建私有项目的代码托管平台，可作为备选</li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a>：来做做这些题吧，看看自己的算法水平如何？这可比什么面试宝典强多了。</li>
<li><a href="http://www.lintcode.com/zh-cn/" target="_blank" rel="external">LintCode</a>：支持中文的编程题在线训练平台，可作为备选</li>
<li><a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>,<a href="https://www.topcoder.com/" target="_blank" rel="external">Topcoder</a>: 机器学习、大数据竞赛</li>
<li><a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a>：高质量的技术社区</li>
<li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn" target="_blank" rel="external">InfoQ</a>：企业级应用，关注软件开发领域</li>
<li><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX: way to explore</a></li>
<li>国内老牌技术社区：<a href="https://www.oschina.net/" target="_blank" rel="external">OSChina</a>、<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>、<a href="http://www.51cto.com/" target="_blank" rel="external">51CTO</a></li>
<li>免费的it电子书：<a href="http://it-ebooks.info/" target="_blank" rel="external">http://it-ebooks.info/</a></li>
<li>在线学习：<a href="http://www.udemy.com/" target="_blank" rel="external">http://www.udemy.com/</a></li>
<li>优质学习资源：<a href="http://plus.mojiax.com/" target="_blank" rel="external">http://plus.mojiax.com/</a></li>
<li>代码练习：<a href="http://exercism.io/" target="_blank" rel="external">http://exercism.io/</a>   and  <a href="https://www.codingame.com" target="_blank" rel="external">https://www.codingame.com</a></li>
<li><a href="http://www.devstore.cn/" target="_blank" rel="external">DevStore</a>:开发者服务商店</li>
<li><a href="https://msdn.microsoft.com/zh-cn" target="_blank" rel="external">MSDN</a>：微软相关的官方技术集中地，主要是文档类</li>
<li><a href="https://developers.google.cn/" target="_blank" rel="external">谷歌开发者</a></li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="external">码库</a> - 收录了实用的开源项目及资源</li>
<li><a href="http://coding.net" target="_blank" rel="external">Coding</a> 基于Git的国内代码托管平台，支持私有项目，有项目管理相关功能</li>
</ul>
<h3 id="必看书籍"><a href="#必看书籍" class="headerlink" title="必看书籍"></a>必看书籍</h3><ul>
<li>SICP(<a href="https://mitpress.mit.edu/sicp/" target="_blank" rel="external">Structure and Interpretation of Computer Programs</a>)</li>
<li>深入理解计算机系统</li>
<li>代码大全2</li>
<li>人件</li>
<li>人月神话</li>
<li>软件随想录</li>
<li>算法导论（麻省理工学院出版社）</li>
<li>离散数学及其应用</li>
<li>设计模式</li>
<li>编程之美</li>
<li>黑客与画家</li>
<li>编程珠玑</li>
<li>The Little Schemer</li>
<li>Simply Scheme_Introducing_Computer_Science</li>
<li>C++ Prime</li>
<li>Effective C++</li>
<li>TCP/IP详解</li>
<li>Unix 编程艺术</li>
<li>技术的本质</li>
<li>软件随想录</li>
<li>计算机程序设计艺术</li>
<li>职业篇：程序员的自我修养,程序员修炼之道,高效能程序员的修炼</li>
<li>《精神分析引论》弗洛伊德</li>
<li>《失控》《科技想要什么》《技术元素》凯文凯利</li>
<li>程序开发心理学</li>
<li>天地一沙鸥</li>
<li>搞定：无压力工作的艺术</li>
</ul>
<h3 id="大牛博客"><a href="#大牛博客" class="headerlink" title="大牛博客"></a>大牛博客</h3><ul>
<li>云风（游戏界大牛）: <a href="http://blog.codingnow.com/" target="_blank" rel="external">http://blog.codingnow.com/</a></li>
<li>王垠（不少文章喷到蛮有道理）：<a href="http://www.yinwang.org/" target="_blank" rel="external">http://www.yinwang.org/</a></li>
<li>冰河-伞哥(Lisp大牛)：<a href="http://tianchunbinghe.blog.163.com/" target="_blank" rel="external">http://tianchunbinghe.blog.163.com/</a></li>
<li>R大<a href="https://zhuanlan.zhihu.com/p/25042028" target="_blank" rel="external">【干货满满】RednaxelaFX写的文章/回答的导航帖</a></li>
<li>陈皓-左耳朵耗子：<a href="http://coolshell.cn/" target="_blank" rel="external">http://coolshell.cn/</a></li>
<li>Jeff Atwood（国外知名博主）: <a href="https://blog.codinghorror.com/" target="_blank" rel="external">https://blog.codinghorror.com/</a></li>
<li>阮一峰（黑客与画家译者，Web）：<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">http://www.ruanyifeng.com/</a></li>
<li>廖雪峰（他的Python、Git教程不少人都看过）：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>道哥的黑板报（安全）：<a href="https://zhuanlan.zhihu.com/taosay" target="_blank" rel="external">https://zhuanlan.zhihu.com/taosay</a></li>
<li><a href="https://github.com/search?l=&amp;o=desc&amp;p=1&amp;q=location%3AChina&amp;ref=advsearch&amp;s=followers&amp;type=Users&amp;utf8=%E2%9C%93" target="_blank" rel="external">国内GitHub上关注度较高的开发者</a></li>
</ul>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p><strong> Awesome </strong></p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome</a>: 这是个Awesome合集，常见的资料这里面都能找到</li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome2</a>: 类似第一个Awesome</li>
<li><a href="https://github.com/jnv/lists" target="_blank" rel="external">杂七杂八、有用没用的Awesome合集</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">非常不错的语言类学习资料集合：Awesomeness</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">awesome-ios-ui</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="external">awesome-public-datasets</a></li>
<li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">awesome-AppSec(系统安全)</a></li>
<li><a href="https://github.com/okulbilisim/awesome-datascience" target="_blank" rel="external">awesome-datascience</a></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="external">awesome-dataviz</a> - 数据可视化库及资料</li>
<li><a href="https://github.com/jacksu/awesome-es" target="_blank" rel="external">awesome-es</a></li>
</ul>
<p><strong> 书籍资料 </strong></p>
<ul>
<li><a href="https://github.com/bingwen/free-programming-books/blob/master/free-programming-books-ch.md" target="_blank" rel="external">free-programming-books</a> <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文版</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="external">《程序员编程艺术 — 面试和算法心得》</a></li>
<li><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">GoBooks</a></li>
<li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="external">Papers we love</a></li>
<li><a href="https://github.com/JustFollowUs/Natural-Language-Processing" target="_blank" rel="external">自然语言处理NLP推荐学习路线及参考资料</a></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">超级棒的机器学习资料（框架，库，软件）</a>, <a href="http://www.oschina.net/news/53818/awesome-machine-learning" target="_blank" rel="external">中文翻译版</a></li>
<li><a href="http://news.cnblogs.com/n/504467/" target="_blank" rel="external">机器学习(Machine Learning)&amp;深入学习(Deep Learning)资料</a></li>
<li><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">Docker资料合集</a></li>
<li><a href="https://github.com/apache/incubator-storm/tree/master/examples/storm-starter" target="_blank" rel="external">学习使用Strom</a></li>
<li><a href="http://ercoppa.github.io/HadoopInternals/" target="_blank" rel="external">Hadoop Internals</a></li>
<li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="external">Spark Internals</a></li>
<li><a href="http://hadoop.readthedocs.org/en/latest/" target="_blank" rel="external">大数据时代的数据分析与数据挖掘 – 基于Hadoop实现</a></li>
<li><a href="http://samypesse.gitbooks.io/how-to-create-an-operating-system/index.html" target="_blank" rel="external">如何制作操作系统</a></li>
<li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="external">借助开源项目学习软件开发</a></li>
<li><a href="http://code.csdn.net/news/2821842" target="_blank" rel="external">几个不错的开源游戏引擎</a></li>
<li><a href="https://github.com/hit9/PyZh" target="_blank" rel="external">一起写Python文章，一起看Python文章</a></li>
<li><a href="http://blog.fens.me/series-r/" target="_blank" rel="external">R的极客理想系列文章</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP接口设计指南</a></li>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="external">分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a></li>
<li><a href="https://github.com/rxin/db-readings" target="_blank" rel="external">Readings in Databases</a></li>
<li><a href="https://github.com/rushter/data-science-blogs" target="_blank" rel="external">Data Science blogs</a></li>
<li><a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="external">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">Android Code Path</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">Android Learn Notes</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="external">PHP 类库框架，资料集合</a></li>
</ul>
<p><strong> 优秀项目 </strong></p>
<ul>
<li><a href="http://news.cnblogs.com/n/506775/" target="_blank" rel="external">最值得关注的10个C语言开源项目</a></li>
<li><a href="http://code.csdn.net/news/2822568" target="_blank" rel="external">15款值得学习的小型开源项目</a></li>
<li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">iOS-100个开源组件</a></li>
<li><a href="http://code.csdn.net/news/2822753" target="_blank" rel="external">十大Material Design开源项目</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android开源项目分类汇总</a></li>
</ul>
<p><strong> 前端 &amp; Node.js </strong></p>
<ul>
<li><a href="https://github.com/moklick/frontend-stuff" target="_blank" rel="external">前端资源</a></li>
<li><a href="https://github.com/w3crange/Front-End-Develop-Guide" target="_blank" rel="external">前端开发指南</a></li>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">前端技能汇总</a></li>
<li><a href="http://www.daqianduan.com/nav" target="_blank" rel="external">前端资源大导航</a></li>
<li><a href="https://github.com/lisposter/frontend-books" target="_blank" rel="external">收集前端方面的书籍</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="external">2014年最新前端开发面试题</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">简单清晰的JavaScript语言教程，代码示例</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">JavaScript编程规范</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JavaScript必看视频</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript标准参考教程（阮一峰的，整理的不错）</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JS必看</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning/blob/master/ZH-CN.md" target="_blank" rel="external">AngularJS Guide的中文分支</a></li>
<li><a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="external">Angular2学习资料</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS应用的最佳实践和风格指南</a></li>
<li><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">React-Native学习指南</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/sergtitov/NodeJS-Learning/blob/master/cn_resource.md" target="_blank" rel="external">node.js中文资料导航</a></li>
<li><a href="http://blog.fens.me/nodejs-roadmap/" target="_blank" rel="external">Nodejs学习路线图</a></li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/9629682#9629682" target="_blank" rel="external">如何学习nodejs</a></li>
</ul>
<p><strong> 工作，工具 </strong></p>
<ul>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="external">系统管理员工具集合</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://github.com/taobao/nginx-book" target="_blank" rel="external">Nginx开发从入门到精通</a></li>
<li><a href="https://github.com/justjavac/Google-IPs.git" target="_blank" rel="external">Google 全球 IP 地址库</a></li>
<li><a href="https://github.com/greatghoul/remote-working" target="_blank" rel="external">收集整理远程工作相关的资料</a></li>
<li><a href="https://github.com/chriskempson/base16" target="_blank" rel="external">Color schemes for hackers</a></li>
<li><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="external">游戏开发工具集，MagicTools</a></li>
<li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="external">开发者工具箱， free-for-dev</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="external">Git风格指南</a></li>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Bast-App</a></li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a>平台工具</h3><ul>
<li>Phabricator: 软件开发平台，Facebook出品，现已开源，CodeReview神器（从这个往下一直到GitLab之间的工具统统可以忽略了）</li>
<li>Redmine/Trac：项目管理平台</li>
<li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究）</li>
<li>git，svn：源代码版本控制系统</li>
<li>GitLab/Gitorious：构建自己的GitHub服务器</li>
<li>Postman:RESTful，api测试工具，HTTP接口开发必备神器</li>
<li><a href="http://airbnb.design/lottie/" target="_blank" rel="external">Lottie</a>: AE动画变原生代码，设计师必备</li>
<li>Sonar：代码质量管理平台</li>
<li>Nessus: 系统漏洞扫描器</li>
<li>gitbook：<a href="https://www.gitbook.io/" target="_blank" rel="external">https://www.gitbook.io/</a>写书的好东西，当然用来写文档也很不错的（发现不少产品的文档就是用的它）</li>
<li>Travis-ci：开源项目持续集成必备，和GitHub相结合，<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>Trello：简单高效的项目管理平台，注重看板管理</li>
<li>日志聚合：graylog、ELK（推荐新一代的graylog，基本上算作是开源的Splunk了）</li>
<li>开源测试工具、社区（Selenium、OpenQA.org）</li>
<li>Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。其他类似工具：CFEngine、SaltStack、Ansible</li>
<li>Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li>
<li>Ganglia：分布式监控系统</li>
<li>fleet：分布式init系统</li>
<li>Ansible：能够大大简化Unix管理员的自动化配置管理与流程控制方式。</li>
<li>GeoLite免费数据库</li>
<li>jsHint:js代码验证工具</li>
<li>haproxy: 高可用负载均衡（此外类似的系统还有nginx，lvs）</li>
<li>linux OS性能分析工具：dstat，iostat，iotop，nmon</li>
<li>kimono：将网页信息转换为api接口的工具</li>
<li>集群管理工具：pdsh，ClusterSSH，mussh（可以用它快速管理Hadoop集群）ipa-server做统一的认证管理</li>
<li>influxdb: 分布式时序数据库，结合Grafana可以进行实时数据分析</li>
<li>dot: 程序员绘图利器（是种语言，也是个工具）</li>
<li>Graph::Easy: （Ascii Art工具）字符流程图绘制，实乃程序员装逼神器。其他类似的工具Asciiflow, vi插件：drawit!</li>
<li>spf13-vim: 让你的vim飞起来！</li>
<li>Kubernetes: 容器集群管理系统</li>
<li>Gatling: 服务器性能压力测试工具</li>
<li>systemtap: Linux内核探测工具、内核调试神器</li>
<li>Cygwin：Windows下的类UNIX模拟环境</li>
<li>MinGW：Windows下的GNU工具集</li>
</ul>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Mac下的神兵利器</a></li>
<li><a href="https://asciinema.org/" target="_blank" rel="external">asciinema</a>: 终端录屏神器</li>
<li>Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理</li>
<li>Charles: Mac上的Web代理调试工具，类似Fiddler</li>
<li><a href="https://fir.im/" target="_blank" rel="external">fir.im</a>免费的移动App内测托管平台</li>
<li>wireshark：知名的网络数据包分析工具</li>
<li>PowerCmd:替代Windows Cmd的利器</li>
<li>RegexBuddy:强大的正则表达式测试工具</li>
<li>Soure Insight：源代码阅读神器</li>
<li>SublimeText：程序员最爱的编辑器</li>
<li>Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的</li>
<li>Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。</li>
<li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li>
<li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li>
<li>Radmin: 远程控制工具，用了一段时间的DameWare，还要破解，对Win7支持的不好，还是发现这个好用</li>
<li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li>
<li>Clover：给资源管理器加上多标签，我平时工作的时候就用它，像Chrome一样使用资源管理器，甚是方便啊（这是Windows平台的）</li>
<li>WinLaunch：模拟Mac OS的Launch工具</li>
<li>OllyDbg: OD大名鼎鼎的反汇编工具，Win平台</li>
<li>Fritzing：绘制电路图</li>
<li>LICEcap：gif教程制作</li>
<li>git，svn：版本控制系统</li>
<li>Enigma Virtual Box（将exe，dll等封装成一个可执行程序）</li>
<li>Open DBDiff(针对SqlServer)数据库同步</li>
<li>SymmetricDS：数据库同步</li>
<li>BIEE,Infomatica，SPSS，weka，R语言：数据分析</li>
<li>CodeSmith，LightSwitch：代码生成</li>
<li>Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。</li>
<li>Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能</li>
<li>log explorer：查看SqlServer日志</li>
<li>dependency walker：查询Windows应用程序dll依赖项</li>
<li>Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上</li>
<li>ngrok：内网穿透工具</li>
<li>Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错<a href="http://www.processon.com/" target="_blank" rel="external">http://www.processon.com/</a></li>
<li>Origami: 次世代交互设计神器</li>
<li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="external">http://naotu.baidu.com/</a></li>
<li>tinyproxy:（Linux）小型的代理服务器支持http和https协议</li>
<li>EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。</li>
<li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢）</li>
<li>ApkIDE:Android反编译神器</li>
<li>翻、墙工具（自|由|门、天行浏览器，免费的VPN：<a href="http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）" target="_blank" rel="external">http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）</a></li>
<li>设计工具：Sketch、OmniGraffle</li>
<li>MindManger：思维导图</li>
<li>MagicDraw:Uml图工具</li>
<li>innotop：MySql状态监测工具</li>
<li>墨刀：比Axure更为简单的原型工具，可以快速制作原型</li>
<li>Karabiner: Mac专用，修改键盘键位的神器，机械键盘必备</li>
<li>Timing：Mac专用，统计你的时间都花在哪了</li>
<li>f.lux: 护眼神器，过滤蓝光，程序员护眼必备良品</li>
<li>LaTeX: 基于ΤΕΧ的排版系统, 让写论文更方便</li>
<li>Antlr：开源的语法分析器，可以让你毫无压力的写个小parser</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li>DnsPod：一个不错的智能DNS服务解析提供商</li>
<li>DigitalOcean：海外的云主机提供商，价格便宜，磁盘是SSD的，用过一段时间整体上还可以，不过毕竟是海外的，网速比较慢。国内的就是阿里云了。还有个比较知名的是：Linode，据说速度上比DigitalOcean好很多</li>
<li>移动端推送服务：个推、JPush、云巴</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>：移动应用开发服务，包括:数据存储、用户管理、消息推送、应用统计、社交分享、实时聊天等服务</li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">Color Hunt</a>: 漂亮炫酷的配色网站，程序员的福音</li>
<li><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku: PaaS平台</a></li>
</ul>
<h3 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a>爬虫相关(好玩的工具)</h3><ul>
<li>Phantomjs(Web自动化测试，服务端渲染等)</li>
<li>berserkJS(基于Phantomjs的改进版本)</li>
<li>SlimerJS</li>
<li>CasperJS</li>
<li>selenium</li>
<li>HtmlUnit（开源的java 页面分析工具，也是个Headless的浏览器）</li>
</ul>
<h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul>
<li>sql注入检测：sqlmap、haviji</li>
<li>端口扫描：nmap</li>
<li>渗透测试：BurpLoader</li>
<li>sqltools: sql漏洞利用工具</li>
<li>snort: 入侵检测</li>
</ul>
<h3 id="Web服务器性能-压力测试工具-负载均衡器"><a href="#Web服务器性能-压力测试工具-负载均衡器" class="headerlink" title="Web服务器性能/压力测试工具/负载均衡器"></a>Web服务器性能/压力测试工具/负载均衡器</h3><ul>
<li>ab: ab是apache自带的一款功能强大的测试工具</li>
<li>curl-loader: 真实模拟、测试Web负载</li>
<li>http_load: 程序非常小，解压后也不到100K</li>
<li>webbench: 是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。</li>
<li>Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li>
<li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li>
<li>Piwik：开源网站访问量统计系统</li>
<li>ClickHeat：开源的网站点击情况热力图</li>
<li>HAProxy：高性能TCP /HTTP负载均衡器</li>
<li>ElasticSearch：搜索引擎基于Lucene</li>
<li>Page Speed SDK和YSLOW</li>
<li>HAR Viewer: HAR分析工具</li>
<li>protractor：E2E（end to end）自动化测试工具</li>
</ul>
<h2 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a>大数据处理/数据分析/分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Spark：大规模数据处理框架（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>除了Spark，其他几个不错的计算框架还有：Kylin，Flink，Drill</li>
<li>Ignite: In-Memory Data Fabric</li>
<li>CarbonData: 华为的孵化项目，支持索引的列式存储</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Druid: 实时数据分析存储系统</li>
<li>Ambari: 大数据平台搭建、监控利器；类似的还有CDH</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享</li>
<li>Impala：新一代开源大数据分析引擎，提供Sql语义，比Hive强在速度上</li>
<li>presto: facebook的开源工具，大数据分布式sql查询引擎</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍</li>
<li>开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
<li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li>
<li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li>
<li>NoSql：ScyllaDB（宣称是世界上最快的NoSql）、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</li>
<li>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum </li>
<li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、Tinkerpop</li>
<li>NLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li>
<li>机器学习：TensorFlow（Google出品），WEKA、Mahout、scikits.learn、SkyTree</li>
<li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</li>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎，类似的还有：Azkaban</li>
<li>开源的数据分析可视化工具：Weka、Orange、KNIME</li>
<li>Cobar：阿里巴巴的MySql分布式中间件</li>
<li>数据清洗：data wrangler， Google Refine</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li><a href="https://material.io/" target="_blank" rel="external">Material Design</a>: 谷歌出品，必属精品</li>
<li>Vue.js: 借鉴了Angular及React的JS框架，设计理念较为先进</li>
<li>GRUNT: js task runner</li>
<li>Sea.js: js模块化</li>
<li>knockout.js：MVVM开发前台，绑定技术</li>
<li>Angular.js: 使用超动感HTML &amp; JS开发WEB应用！</li>
<li>Highcharts.js，Flot:常用的Web图表插件</li>
<li>NVD3: 基于d3.js的图表库</li>
<li>Raw：非常不错的一款高级数据可视化工具</li>
<li>Rickshaw:时序图标库，可用于构建实时图表</li>
<li>JavaScript InfoVis Toolkit：另一款Web数据可视化插件</li>
<li>Pdf.js，在html中展现pdf</li>
<li>ACE，CodeMirror：Html代码编辑器（ACE甚好啊）</li>
<li>NProcess：绚丽的加载进度条</li>
<li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal)</li>
<li>Threejs：3DWeb库</li>
<li>Hightopo：基于Html5的2D、3D可视化UI库</li>
<li>jQuery.dataTables.js:高度灵活的表格插件</li>
<li>Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的</li>
<li>director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用</li>
<li>pace.js：页面加载进度条</li>
<li>bower：Web包管理器</li>
<li>jsnice：有趣的js反编译工具，猜压缩后的变量名，<a href="http://www.jsnice.org/" target="_blank" rel="external">http://www.jsnice.org/</a></li>
<li>D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js）</li>
<li>Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile.</li>
<li>UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li>
<li>前段UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li>
<li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">https://developer.mozilla.org/en-US/</a></li>
<li>图标资源：IcoMoon（我的最爱），Font Awesome, Themify Icons，FreePik，Glyphicons</li>
<li>artDialog:非常漂亮的对话框</li>
<li>AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架</li>
<li>Respond.js：让不懂爱的IE6-8支持响应式设计</li>
<li>require.js: js模块加载库</li>
<li>select2：比chosen具有更多特性的选择框替代库</li>
<li>AngularUI：集成angular.js的UI库</li>
<li>normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库</li>
<li>CreateJS：Html5游戏引擎</li>
<li>Less,Compass:简化CSS开发</li>
<li>emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像</li>
<li>simditor:一个不错的开源的html编辑器，简洁高效</li>
<li>Sencha:  基于html5的移动端开发框架</li>
<li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li>
<li>jquery-smooth-scroll:同上，平滑滚动插件</li>
<li>Animate.css:实现了各种动画效果的css库</li>
<li>Emmet:前端工程师必备，前身为 Zen Coding</li>
<li>React: facebook出品的js UI库</li>
<li>highlight.js：专门用来做语法高亮的库</li>
<li>GoJS: Html5交互式图表库，看demo更适合层次结构的图表。</li>
<li>10 Pure CSS (Mostly) Flat Mobile Devices: <a href="http://marvelapp.github.io/devices.css/" target="_blank" rel="external">http://marvelapp.github.io/devices.css/</a></li>
<li>CodePen: <a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a></li>
<li>jsfiddle: <a href="http://jsfiddle.net/" target="_blank" rel="external">http://jsfiddle.net/</a> 前端js，html，css测试利器</li>
</ul>
<h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><p>折腾中：Scala、Python、Lua、JavaScript、Go</p>
<p>待折腾：</p>
<ul>
<li><a href="http://racket-lang.org/" target="_blank" rel="external">Racket</a></li>
<li><a href="http://ocaml.org/" target="_blank" rel="external">OCaml</a></li>
<li><a href="https://www.rust-lang.org" target="_blank" rel="external">Rust</a></li>
<li><a href="http://julialang.org/" target="_blank" rel="external">Julia</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://www.scala-lang.org/api/current/" target="_blank" rel="external">Scala Standard Library API</a></li>
<li><a href="http://twitter.github.io/scala_school/" target="_blank" rel="external">Scala School!</a>: A Scala tutorial by Twitter</li>
<li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html" target="_blank" rel="external">A Tour of Scala</a>: Tutorial introducing the main concepts of Scala</li>
<li><a href="http://stackoverflow.com/tags/scala/info" target="_blank" rel="external">Scala Overview on StackOverflow</a>: A list of useful questions sorted by topic</li>
<li><a href="http://www.artima.com/pins1ed/" target="_blank" rel="external">Programming in Scala</a>，最新的第3版，还没有电子版，电子版是第一版</li>
<li>《Scala for the Impatient》</li>
<li>《Scala in Depth》</li>
<li>《Programming Scala》Dean Wampler and Alex Payne. O’Reilly 2009</li>
<li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf" target="_blank" rel="external">Scala By Example</a></li>
<li><a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="external">Scala Cheatsheet</a>学习模式匹配的好资料</li>
<li><a href="http://docs.scala-lang.org/glossary/" target="_blank" rel="external">Glossary of Scala and FP terms</a></li>
<li><a href="https://github.com/lihaoyi/Metascala" target="_blank" rel="external">Metascala: A JVM written in Scala</a></li>
<li><a href="https://scala-lms.github.io/" target="_blank" rel="external">LMS: Program Generation and Embedded Compilers in Scala</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li>常用的IDE：IntelliJ IDEA(强烈推荐)，Eclipse，Netbeans</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="external">fastutil</a>: 性能更好的Java集合框架</li>
<li>Guava: 谷歌的Java工具包，应用广泛</li>
<li>Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程，现在已经是apache下的一个独立项目了。Spark的HA也用的这货。</li>
<li>Rx(Reactive Extensions)框架：Vert.x, RxJava(Android中用的比较多),  Quasar</li>
<li>FindBugs: 代码静态分析工具，找出代码缺陷</li>
<li>Java反编译工具：Luyten，JD-Gui</li>
<li>Drools: 规则引擎</li>
<li>Jersey: Java RESTful 框架</li>
<li>canal: 阿里巴巴出品，binlog增量订阅&amp;消费组件</li>
<li>Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring，Hibernate</li>
<li>Netty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架，spark 1.2.0就用netty替代了nio）</li>
<li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的</li>
<li>jOOQ：java Orm框架</li>
<li>Janino: 超级小又快的Java编译器，Spark的Tungsten引起用的它</li>
<li>Activiti:工作流引擎，类似的还有jBPM、Snaker</li>
<li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li>
<li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li>
<li>Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的</li>
<li>web-harvest：Web数据提取工具</li>
<li>POM工具：Maven+Artifactory</li>
<li>Akka:一款基于actor模型实现的 并发处理框架</li>
<li>EclEmma：覆盖测试工具</li>
<li>Shiro:安全框架</li>
<li>joda-time:简化时间处理</li>
<li>parboiled:表达式解析</li>
<li>dozer: 深拷贝神器</li>
<li>dubbo: 阿里巴巴出品的分布式服务框架</li>
<li>jackson databind: json序列化工具(fastjson,simplejson)</li>
<li>Atomikos: 分布式事务管理</li>
<li>BoneCP：性能很赞的数据库连接池组件，据说比c3p0快好多</li>
<li>ProGuard: obconfuscation tool, 强大的混淆工具</li>
<li>S-99：Scala相关的99个问题</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li>PyCharm：最佳Python IDE</li>
<li>Eric,Eclipse+pydev,比较不错的Python IDE</li>
<li>PyWin:Win32 api编程包</li>
<li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib</li>
<li>GUI相关：PyQt，PyQwt</li>
<li>supervisor:进程监控工具</li>
<li>PyGame: 基于Python的多媒体开发和游戏软件开发模块</li>
<li>Web框架: Django 开源web开发框架，它鼓励快速开发,并遵循MVC设计</li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">Swift精选资料</a></li>
<li><a href="http://www.csdn.net/article/2015-01-09/2823502-swift-open-source-libs" target="_blank" rel="external">43个优秀的开源项目</a></li>
</ul>
<p><strong>客户端</strong></p>
<ul>
<li><a href="https://github.com/YANGReal/JokeClient-Swift" target="_blank" rel="external">糗事百科 Swift</a></li>
<li><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="external">HackerNews Swift</a></li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="external">知乎日报app</a></li>
</ul>
<p><strong>Framework</strong></p>
<ul>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="external">Twitter框架</a></li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="external">Mac下简单HTTP Server Swifter</a></li>
</ul>
<p><strong>小工具</strong></p>
<ul>
<li><a href="https://github.com/ChrisChares/swift-alarm" target="_blank" rel="external">Swift Alarm</a></li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="external">Swift Note</a></li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="external">Swift RSS Reader</a></li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="external">Swift-PM2.5查询app</a></li>
</ul>
<p><strong>游戏</strong></p>
<ul>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">Flappy Swift</a></li>
<li><a href="https://github.com/geek5nan/FanFanSwift" target="_blank" rel="external">FanFan Swift</a></li>
</ul>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><ul>
<li>Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器</li>
<li>CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单</li>
<li>netz:免费的 .NET 可执行文件压缩工具</li>
<li>SmartAssembly:变态的.net代码优化混淆工具</li>
<li>NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的)</li>
<li>ILMerge：将所有引用的DLL和exe文件打成一个exe文件</li>
<li>ILSpy:开源.net程序反编译工具</li>
<li>Javascript.NET：很不错的js执行引擎，对v8做了封装</li>
<li>NPOI: Excel操作</li>
<li>DotRAS:远程访问服务的模块</li>
<li>WinHtmlEditor: Winform下的html编辑器</li>
<li>SmartThreadPool:使用C#实现的，带高级特性的线程池</li>
<li>Snoop: WPF Spy Utility</li>
<li>Autofac: 轻量级IoC框架</li>
<li>HtmlAgilityPack：Html解析利器</li>
<li>Quartz.NET：Job调度</li>
<li>HttpLib：@CodePlex，简化http请求</li>
<li>SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了</li>
<li>DocX：未安装Office的情况下操作Word文件</li>
<li>Dapper：轻量级的ORM类，性能不错</li>
<li>HubbleDotNet：支持接入数据库的全文搜索系统</li>
<li>fastJSON：@CodeProject，高性能的json序列化类</li>
<li>ZXing.NET：@CodePlex，QR，条形码相关</li>
<li>Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎)</li>
<li>AntiXSS：微软的XSS防御库Microsoft Web Protection Library</li>
<li>Jint：JavaScript解释器</li>
<li>CS-Script：将C#代码文件作为脚本执行</li>
<li>Jexus：Linux下 高性能、易用、免费的ASP.NET服务器</li>
<li>Clay：将dynamic发挥的更加灵活，像写js一样写C#</li>
<li>DynamicJSON：不必定义数据模型获取json数据</li>
<li>SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析）</li>
<li>Roslyn：C#，VB编译器</li>
<li>ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便</li>
<li>UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF）</li>
<li>NetSparkle：应用自动更新组件</li>
<li>ConfuserEx: 开源.net混淆工具</li>
<li>ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务</li>
<li>Expression Evaluator：Eval for C#,处理字符串表达式</li>
<li><a href="http://nugetmusthaves.com/" target="_blank" rel="external">http://nugetmusthaves.com/</a></li>
<li>Reactive Extensions (Rx):异步，事件驱动编程包， Rx = Observables + LINQ + Schedulers</li>
</ul>
<h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul>
<li>Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。</li>
<li>libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢）</li>
<li>Boost:不多说了，准C++标准库</li>
<li>Valgrind\Ptmalloc\Purify: 调试工具</li>
<li>NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦)</li>
<li><a href="https://pocoproject.org/" target="_blank" rel="external">POCO</a> - 开源的C++类库及应用程序框架的集合,它主要提供简单的、快速的网络和可移植应用程序</li>
<li>breakpad:崩溃转储和分析模块，很多crashreport会用到</li>
<li>UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏开发相关"><a href="#游戏开发相关" class="headerlink" title="游戏开发相关"></a>游戏开发相关</h3><ul>
<li>MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的)</li>
<li>HP-Socket：见有有些页游服务器使用这个构建的</li>
<li>Unreal: 虚幻引擎，C++，基于这个引擎的游戏很多</li>
<li>OGRE：大名鼎鼎的3D图形渲染引擎，天龙八部OL、火炬之光等不少游戏都用了这个引擎</li>
<li>OpenVDB：梦工厂C++的特效库，开源的</li>
<li>cocos2d：跨平台2D游戏引擎</li>
<li>unity3d：跨平台3D游戏引擎，很火的哦</li>
<li>Nodejs：也有不少使用它来开发手游和页游服务器（网易的Pomelo）</li>
</ul>
<h3 id="日志聚合，分布式日志收集"><a href="#日志聚合，分布式日志收集" class="headerlink" title="日志聚合，分布式日志收集"></a>日志聚合，分布式日志收集</h3><ul>
<li>Scribe：Facebook的（nodejs + scribe + inotify 同步日志）</li>
<li>logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台</li>
<li>log.io: nodejs开发的实时日志收集系统</li>
<li>Graylog: 易用、功能丰富的日志管理系统， 部署、维护、搜索比<code>ELK</code>简单</li>
</ul>
<h3 id="RTP-实时传输协议与音视频"><a href="#RTP-实时传输协议与音视频" class="headerlink" title="RTP,实时传输协议与音视频"></a>RTP,实时传输协议与音视频</h3><ul>
<li>RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准)</li>
<li>环形缓冲区，实时数据传输用</li>
<li>SDL,ffmpeg,live555,Speex</li>
<li>Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;# 前言
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成为一名专业程序员的道路上，需要坚持练习、学习与积累，技术方面既要有一定的广度，更要有自己的深度。&lt;/p&gt;
&lt;p&gt;笔者作为一位tool mad，将工作以来用到的各种优秀资料、神器及框架整理在此，毕竟好记性不如烂键盘，
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/03/25/Document/"/>
    <id>http://yoursite.com/2017/03/25/Document/</id>
    <published>2017-03-25T08:58:23.000Z</published>
    <updated>2017-03-25T08:58:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript桥接模式(1)-队列数据结构</title>
    <link href="http://yoursite.com/2017/03/24/javascript%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F(1)-%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/03/24/javascript桥接模式(1)-队列数据结构/</id>
    <published>2017-03-24T11:04:10.000Z</published>
    <updated>2017-03-23T13:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。<br>队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个元素，返回新数组。两个操作对于数组都有结构的改变</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//js中队列的实现是依赖数组的数据结构</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];  <span class="comment">//初始化空数组，let关键字是es6中的</span></div><div class="line">    <span class="comment">//用于形成大括号包围的作用域</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; <span class="comment">//入队操作</span></div><div class="line">        items.push(element); <span class="comment">//数组push操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//出对</span></div><div class="line">        <span class="keyword">return</span> items.shift(); <span class="comment">//数组shift操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//队列第一个元素</span></div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];     <span class="comment">//数组第一个元素</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//判断队列有无成员</span></div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>; <span class="comment">//布尔值判断</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//清空队列</span></div><div class="line">        items = [];   <span class="comment">//变量重新赋值空数组</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//获得队列的长度</span></div><div class="line">        <span class="keyword">return</span> items.length; </div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//打印队列</span></div><div class="line">        <span class="built_in">console</span>.log(items.toString());</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>下面是优先队列。数据成员入队的时候要携带数据和优先级。<br>优先级在这里的定义是数字越大在数组中的位置靠后。当插入一个数组元素的时候，先要根据它的优先级来判断，最小是直接插入到第一位，紧邻一个比他大的优先级是，就插入到这个邻居的前面。如果是最大的数字就插到数组的最后。<br>一维数组变成了二位数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span> (<span class="params">element, priority</span>)</span>&#123; </div><div class="line">            <span class="keyword">this</span>.element = element;<span class="comment">//成员本身</span></div><div class="line">        <span class="keyword">this</span>.priority = priority;  <span class="comment">//优先级</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>; <span class="comment">//添加标记</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (queueElement.priority &lt;            </div><div class="line"> items[i].priority)&#123;  <span class="comment">//找到优先级数字比他大的那个元素</span></div><div class="line"></div><div class="line">                items.splice(i,<span class="number">0</span>,queueElement);            </div><div class="line">             <span class="comment">// 插到这个元素的前面</span></div><div class="line">                added = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// 终止</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!added)&#123; <span class="comment">//如果是优先级数字是最大的，直接插入到</span></div><div class="line">        <span class="comment">//数组的末尾</span></div><div class="line">            items.push(queueElement); <span class="comment">//&#123;5&#125;</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//其他操作和普通队列是一样的</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.shift();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//print使用了es6里的拼接字符串的方法</span></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span>  - <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</div><div class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Maxwell"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</div><div class="line">priorityQueue.print();</div><div class="line"><span class="comment">//=&gt;</span></div><div class="line"><span class="comment">//打印出的结果</span></div><div class="line">Jack  - <span class="number">1</span>  <span class="comment">//数组元素--优先级</span></div><div class="line">Camila  - <span class="number">1</span></div><div class="line">John  - <span class="number">2</span></div><div class="line">Maxwell  - <span class="number">2</span></div><div class="line">Ana  - <span class="number">3</span></div></pre></td></tr></table></figure>
<p>在这个队列的基础上可以实现javascript中桥接模式的例子。本文算是一个独立的javascript队列的介绍，也作为桥接模式例子的背景方法。<br><a href="http://www.apress.com/cn/book/9781590599082" target="_blank" rel="external">javascript设计模式 第八章-桥接模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。&lt;br&gt;队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>react-native视差滚动组件使用</title>
    <link href="http://yoursite.com/2017/03/24/react-native%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/24/react-native视差滚动组件使用/</id>
    <published>2017-03-23T21:44:17.000Z</published>
    <updated>2017-03-23T13:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>看到许多app在界面上实现了头部的图片和文字的渐隐效果，在网上找到一个组件，实现了这个功能。如果要体现比较好的效果还需要在细节地方多研究。<br>这里写出来仅供学习的进一步的研究</p>
<p>   看看效果图</p>
<p><a href="https://github.com/phpsmarter/react-native-parallax-scroll-view" target="_blank" rel="external">react-native-parallax-scroll-view ,github地址</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-32c303299eff67ca.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow.gif"><br>下面看一下代码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Dimensions,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  AppRegistry,</div><div class="line">  StatusBar</div><div class="line">&#125; from <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">//导入组件</span></div><div class="line"><span class="keyword">import</span> ParallaxScrollView from <span class="string">'react-native-parallax-scroll-view'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> window = Dimensions.<span class="built_in">get</span>(<span class="string">'window'</span>);<span class="comment">//获取宽度</span></div><div class="line">console.<span class="built_in">log</span>(window.<span class="built_in">width</span>);</div><div class="line"></div><div class="line">class Nested extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;&#123; flex: <span class="number">1</span> &#125;&#125;&gt;</div><div class="line">         <span class="comment">//方向，可以为row</span></div><div class="line">        &lt;View style=&#123;&#123; flex: <span class="number">1</span>, flexDirection: <span class="string">'column'</span> &#125;&#125;&gt;</div><div class="line">          &lt;View style=&#123;&#123; <span class="built_in">width</span>: <span class="number">60</span>, backgroundColor: <span class="string">'red'</span> &#125;&#125;/&gt;</div><div class="line">         <span class="comment">//滚动效果都在下面这个组件</span></div><div class="line">          &lt;ParallaxScrollView</div><div class="line">              style=&#123;&#123; flex: <span class="number">1</span>, backgroundColor: <span class="string">'hotpink'</span>, overflow: <span class="string">'hidden'</span> &#125;&#125;</div><div class="line">             <span class="comment">//下面渲染背景</span></div><div class="line">              renderBackground=&#123;() =&gt;  &lt;Image style=&#123;&#123;<span class="built_in">width</span>:window.<span class="built_in">width</span>,<span class="built_in">height</span>:<span class="number">350</span>&#125;&#125; source=&#123;require(<span class="string">'./images/schedule-background.png'</span>)&#125;/&gt;&#125;</div><div class="line">             <span class="comment">//下面是渲染前景</span></div><div class="line">              renderForeground=&#123;() =&gt; (</div><div class="line">                &lt;View&gt;</div><div class="line">                &lt;View style=&#123;&#123;alignItems: <span class="string">'center'</span>, justifyContent: <span class="string">'center'</span>,marginTop:<span class="number">50</span>&#125;&#125;&gt;</div><div class="line">              </div><div class="line">                &lt;Image style=&#123;&#123;borderRadius:<span class="number">50</span></div><div class="line">              &#125;&#125; source=&#123;&#123;</div><div class="line">                  uri: <span class="string">'https://pbs.twimg.com/profile_images/2694242404/5b0619220a92d391534b0cd89bf5adc1_400x400.jpeg'</span>,</div><div class="line">                  <span class="built_in">width</span>: <span class="number">100</span>,</div><div class="line">                  <span class="built_in">height</span>: <span class="number">100</span></div><div class="line">                &#125;&#125;/&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">               </div><div class="line">                  &lt;Text style=&#123;&#123;paddingVertical: <span class="number">5</span>,<span class="built_in">textAlign</span>:<span class="string">'center'</span>,<span class="built_in">color</span>:<span class="string">'white'</span>&#125;&#125;&gt;</div><div class="line">                    Talks by Rich Hickey</div><div class="line">                   &lt;/Text&gt;</div><div class="line">                   &lt;Text style=&#123;&#123;paddingVertical: <span class="number">5</span> ,<span class="built_in">textAlign</span>:<span class="string">'center'</span>,<span class="built_in">color</span>:<span class="string">'white'</span>&#125;&#125;&gt;</div><div class="line">                    CTO of Cognitec, Creator of Clojure</div><div class="line">                  &lt;/Text&gt;</div><div class="line">                </div><div class="line">                &lt;/View&gt;</div><div class="line">                </div><div class="line">            )&#125;</div><div class="line">             <span class="comment">//渲染固定头部</span></div><div class="line">              renderFixedHeader=&#123;() =&gt; &lt;Text style=&#123;&#123; <span class="built_in">textAlign</span>: <span class="string">'right'</span>, <span class="built_in">color</span>: <span class="string">'white'</span>, padding: <span class="number">5</span>, fontSize: <span class="number">20</span>,marginTop:<span class="number">20</span> &#125;&#125;&gt;Hello&lt;/Text&gt;&#125;</div><div class="line">              parallaxHeaderHeight=&#123; <span class="number">350</span> &#125;&gt;</div><div class="line">                        &lt;View style=&#123;&#123; alignItems: <span class="string">'center'</span>&#125;&#125;&gt;&lt;Text style=&#123;&#123; fontSize: <span class="number">20</span> ,backgroundColor:<span class="string">"#519caf"</span>,<span class="built_in">width</span>:window.<span class="built_in">width</span>,<span class="built_in">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;This is parallaxbox&lt;/Text&gt;&lt;/View&gt;          </div><div class="line"></div><div class="line">          &lt;/ParallaxScrollView&gt;</div><div class="line">          </div><div class="line">        &lt;/View&gt;</div><div class="line">        &lt;View style=&#123;&#123; <span class="built_in">height</span>: <span class="number">30</span>, backgroundColor: <span class="string">'#6577cc'</span> &#125;&#125;/&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> Nested;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'parallaxBox'</span>, () =&gt; Nested);</div></pre></td></tr></table></figure></p>
<p>背景图片用了一张f8app的背景图片，曲线有动态变化效果。<br>这个组件的api还是有一些，用好了效果就出来了。具体的看github介绍</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到许多app在界面上实现了头部的图片和文字的渐隐效果，在网上找到一个组件，实现了这个功能。如果要体现比较好的效果还需要在细节地方多研究。&lt;br&gt;这里写出来仅供学习的进一步的研究&lt;/p&gt;
&lt;p&gt;   看看效果图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.
    
    </summary>
    
      <category term="React-native" scheme="http://yoursite.com/categories/React-native/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Velocity动画库学习</title>
    <link href="http://yoursite.com/2017/03/24/Velocity%E5%8A%A8%E7%94%BB%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/24/Velocity动画库学习/</id>
    <published>2017-03-23T21:37:04.000Z</published>
    <updated>2017-03-23T13:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="1661.987.big.jpg.png"></p>
<blockquote>
<p>看velocity.js的内容有段时间了，源于图片这本书。前面看直观的感受是：这个库的操作很简单。要解决一个rn的动画问题，把这本书又拿出来看，刚好看到也有了velocity-react版，考虑是否以后可以用在react-native上，这样的话应用范围就大很多。<br><a href="http://velocityjs.org" target="_blank" rel="external">Velocity.js文档</a><br><a href="https://github.com/twitter-fabric/velocity-react" target="_blank" rel="external">velocity-react github地址</a>；<br><a href="https://fabric.io/blog/introducing-the-velocityreact-library" target="_blank" rel="external">velocity-react的内容</a>；</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a00dfb63a7e5f09d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1443477710321.png"><br>初始化比较简单，网页中先导入jquery库，然后导入velocity.js库<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  //最好是配合jquery来使用，可以使用jquery的链式操作。</div><div class="line">  //jquery的函数操作在完成以后会有一句 return this,由此链式操作的</div><div class="line"> //的后一个方法的对象和前一个方法的对象是相同的</div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/velocity.min.js"</span>&gt;</span><span class="javascript">/script&gt; </span></div><div class="line">   $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $div=$(<span class="string">"div"</span>);   <span class="comment">//jQuery对象缓存起来</span></div><div class="line">    $div.velocity(&#123;<span class="attr">opacity</span>:<span class="number">0.5</span>&#125;);  <span class="comment">//调用方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><em>Velocity接受多个参数</em>，第一个参数是一个对象，用于将css属性映射到对应的目标值，第二个参数是指定动画的选项<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,&#123;<span class="string">duration:</span><span class="number">400</span>,<span class="string">easing:</span><span class="string">"swing"</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">//也可以使用简写</span></div><div class="line">$element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,<span class="number">400</span>，<span class="string">"ease-in-out"</span>);</div></pre></td></tr></table></figure></p>
<p><em>对于css属性，velocity不支持简写，只能一个一个的写，而且css属性也和react一样是驼峰命名。</em></p>
<p>链式操作；如果为了效率放弃使用jquery,那么就不能使用链式操作了<br>每个操作单独写就可以了。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$elemnt</span><span class="selector-class">.velocity</span>(&#123;<span class="attribute">width</span>:<span class="string">"400px"</span>&#125;).velocity(&#123;opacity:<span class="number">0.6</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>使用这个库实现旋转动画 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-5ddc998c6c858840.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow.gif"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;image id=<span class="string">"pic"</span> src=<span class="string">"img/pic.jpg"</span>/&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">         $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             $pic=$(<span class="string">"#pic"</span>);</div><div class="line">            $pic.velocity(  <span class="comment">//loop表示无限循环</span></div><div class="line">                    &#123;<span class="attr">rotateZ</span>: <span class="string">"360deg"</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">5000</span>,<span class="attr">loop</span>: <span class="literal">true</span> &#125;,<span class="string">"linear"</span>)；   </div><div class="line">         &#125;);   </div><div class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://twitter-fabric.github.io/velocity-react/" target="_blank" rel="external">这是官方的一个示例</a><br><img src="http://upload-images.jianshu.io/upload_images/2044710-019b0a1d63961dd2.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow3.gif"><br>下面是react组件的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm install --save velocity-react</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate/velocity.ui'</span>);</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">VelocityComponent</span> <span class="attr">animation</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">this.state.showSubComponent</span> ? <span class="attr">1</span> <span class="attr">:</span> <span class="attr">0</span> &#125;&#125; <span class="attr">duration</span>=<span class="string">&#123;500&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">MySubComponent</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">VelocityComponent</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; a
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-1/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式-1/</id>
    <published>2017-03-23T21:30:54.000Z</published>
    <updated>2017-03-23T13:30:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式/</id>
    <published>2017-03-23T21:29:41.000Z</published>
    <updated>2017-03-23T13:30:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在react/react-native的代码中都有这样的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; View,  </div><div class="line">               StyleSheet, </div><div class="line">               ScrollView, </div><div class="line">               ListView,  </div><div class="line">               StatusBar,</div><div class="line">              InteractionManager,</div><div class="line">              Navigator, &#125;</div><div class="line">              <span class="keyword">from</span> <span class="string">'react-native'</span></div></pre></td></tr></table></figure>
<p>通过这样的方式引入组件对象。 今天又一次读js设计模式的时候发现原来的理解是错误的，误解了组件的外部状态和内部状态，从而没有领会组件的微妙之处。今天把正确的概念写出来。</p>
<p>在曾探的《javascript 设计模式与开发实践》关于享元模式的内部状态和外部状态有这样的描述</p>
<blockquote>
<p>-内部状态存储于对象内部<br>  -内部状态可以被一些对象共享<br>  -内部状态可以独立于场景，通常不会变<br>  -外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</p>
</blockquote>
<p>怎么解释呢？意思是页面中出现的所有View组件实际是同一个共享对象，外部状态从对象上剥离开来，并存储在外部。<br>   剥离了外部状态的就是共享组件。 外部状态必要时传入共享组件就可以组成一个完整的对象。这些外部状态包括 state，props,style等<br>组装外部状态需要时间，但是可以大大减少系统中的对象数量，享元模式是用时间换空间的做法。<br>通过import导入的就是公共组件对象。 公共组件内部可以为外部状态加上标签以示区别，这就是ref参数存在的含义。</p>
<p>这就是借助享元模式理解的react组件的构造和用法。</p>
<p>借助模式设计慢慢读代码，写代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在react/react-native的代码中都有这样的代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;di
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0-2/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数-2/</id>
    <published>2017-03-23T21:12:02.000Z</published>
    <updated>2017-03-23T13:12:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0-1/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数-1/</id>
    <published>2017-03-23T21:10:42.000Z</published>
    <updated>2017-03-23T13:10:42.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数/</id>
    <published>2017-03-23T21:06:24.000Z</published>
    <updated>2017-03-23T13:06:24.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript reducer函数实战</title>
    <link href="http://yoursite.com/2017/03/24/Javascript%20reducer%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/24/Javascript reducer函数/</id>
    <published>2017-03-23T21:03:59.000Z</published>
    <updated>2017-03-23T13:21:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.</p>
</blockquote>
<p>本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.</p>
<p>Redux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些<code>键值对</code>. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？</p>
<p>#####下面我们就贯彻以上的理念,来研究一些基础的内容。<br>第一个就是Reducer函数,参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">MDN</a> 文档</p>
<p>直接看代码例子</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//accumulator是累加值,currentValue是当前遍历的值</span></div><div class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce( (accumulator, currentValue, currentIndex, array) =&gt; &#123;</div><div class="line">  return accumulator + currentValue;</div><div class="line">&#125;, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">callback</th>
<th style="text-align:left">accumulate</th>
<th style="text-align:left">currentValue</th>
<th style="text-align:left">currentIndex</th>
<th style="text-align:left">array</th>
<th style="text-align:left">return</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">第一次调用</td>
<td style="text-align:left">10</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">第二次调用</td>
<td style="text-align:left">10</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">11</td>
</tr>
<tr>
<td style="text-align:left">第三次调用</td>
<td style="text-align:left">11</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">第四次调用</td>
<td style="text-align:left">13</td>
<td style="text-align:left">3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">第五次调用</td>
<td style="text-align:left">16</td>
<td style="text-align:left">4</td>
<td style="text-align:left">4</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">20</td>
</tr>
</tbody>
</table>
<p>第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.</p>
<p>第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。<br>也就是返回 10+array[1]=11.</p>
<p>第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。<br>后面的几个遍历就和第二个遍历一样了。</p>
<p><em>数组扁平化</em><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(function(a, b) &#123;</div><div class="line">    return a.concat(b); <span class="comment">//要了解concat的使用,返回的是</span></div><div class="line">    <span class="comment">//数组合并的返回对象</span></div><div class="line">&#125;, []); <span class="comment">//起始是空数组</span></div><div class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure></p>
<hr>
<p>就这么简单,但是灵活变动起来也不是太好理解啊<br>看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> Types = &#123; <span class="comment">//类型</span></div><div class="line">  NUMBER: <span class="string">'NUMBER'</span>,</div><div class="line">  DECIMAL: <span class="string">'DECIMAL'</span>,</div><div class="line">  SIGN: <span class="string">'SIGN'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> inputs = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">1</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">2</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">3</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">4</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">5</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">6</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">7</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">8</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">9</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+/-'</span>, type: Types.SIGN&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">0</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'.'</span>, type: Types.DECIMAL&#125;,</div><div class="line">];</div><div class="line"><span class="comment">//操作符的配置</span></div><div class="line"><span class="keyword">var</span> operations = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'/'</span>, color: <span class="string">'#c77ccc'</span>, altColor: <span class="string">'#b16eb7'</span>, operation: OPERATION_DIVIDE&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'-'</span>, color: <span class="string">'#f8b055'</span>, altColor: <span class="string">'#dc9c4c'</span>, operation: OPERATION_SUBTRACT&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+'</span>, color: <span class="string">'#f796d2'</span>, altColor: <span class="string">'#e088be'</span>, operation: OPERATION_ADD&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'x'</span>, color: <span class="string">'#6fcdf4'</span>, altColor: <span class="string">'#65badd'</span>, operation: OPERATION_MULTIPLY&#125;</div><div class="line">];</div><div class="line"></div><div class="line">renderInputRows() &#123;</div><div class="line">    <span class="keyword">var</span> &#123;inputNumber, inputSigned, inputDecimal&#125; = <span class="keyword">this</span>.props;<span class="comment">//注意在redux中那个地方返回了这三个函数的名字</span></div><div class="line">    <span class="keyword">return</span> inputs.reduce((collection, input) =&gt; &#123;<span class="comment">//这里的reduce是怎么用的呢？</span></div><div class="line">      <span class="keyword">if</span> (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;<span class="comment">//为什么等于3</span></div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length<span class="number">-1</span>].push(input);</div><div class="line">      <span class="keyword">return</span> collection;</div><div class="line">    &#125;, [[]]).map((<span class="keyword">group</span>, rowIndex) =&gt; &#123;</div><div class="line">      <span class="keyword">var</span> columns = <span class="keyword">group</span>.map((item, columnIndex) =&gt; &#123;<span class="comment">//看看map的方法</span></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;TouchableHighlight</div><div class="line">            key=&#123;<span class="string">'inputRow_'</span> + rowIndex + <span class="string">'_inputCol_'</span> + columnIndex&#125;</div><div class="line">            underlayColor=<span class="string">"#ededed"</span></div><div class="line">            style=&#123;styles.input&#125;</div><div class="line">            onPress=&#123;() =&gt; &#123; <span class="comment">//dispatch方法</span></div><div class="line">              <span class="keyword">if</span> (item.type === Types.NUMBER) &#123;</div><div class="line">                inputNumber(item.<span class="keyword">value</span>);</div><div class="line">              &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">item.type === Types.DECIMAL</span>) </span>&#123;</div><div class="line">                inputDecimal();</div><div class="line">              &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">item.type === Types.SIGN</span>) </span>&#123;</div><div class="line">                inputSigned();</div><div class="line">              &#125;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">            &lt;Text style=&#123;styles.inputText&#125;&gt;&#123;item.<span class="keyword">value</span>&#125;&lt;/Text&gt;</div><div class="line">          &lt;/TouchableHighlight&gt;</div><div class="line">        );</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>看看这个数组的reducer方法的使用.<a href="https://github.com/benoitvallon/react-native-nw-react-calculator" target="_blank" rel="external">源代码在这里</a></p>
<p>这个我稍后再补充,会补充大神给我的解答.</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> var Types = &#123;</div><div class="line">  <span class="keyword">NUMBER</span>: <span class="string">'NUMBER'</span>,</div><div class="line">  <span class="keyword">DECIMAL</span>: <span class="string">'DECIMAL'</span>,</div><div class="line">  <span class="built_in">SIGN</span>: <span class="string">'SIGN'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">var inputs = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">1</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">2</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">3</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">4</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">5</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">6</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">7</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">8</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">9</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+/-'</span>, <span class="keyword">type</span>: Types.<span class="built_in">SIGN</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">0</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'.'</span>, <span class="keyword">type</span>: Types.<span class="keyword">DECIMAL</span>&#125;,</div><div class="line">];</div><div class="line">//这里其实是有一维数组转为二维数组，打印结构可以看到.</div><div class="line">//注意reduce的起始值就是一个二维数组.</div><div class="line">var result = inputs.reduce((collection, input) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;</div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length-<span class="number">1</span>].push(input);</div><div class="line">      <span class="keyword">return</span> collection;</div><div class="line">    &#125;, [[]])</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(result)</div><div class="line">console.table(result)</div></pre></td></tr></table></figure>
<p>再看看下面这里两段代码<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let str = `name,  age,  hair\nMerble,  <span class="number">35</span>,  red\nBob,  <span class="number">64</span>,  blonde`;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lameCSV</span><span class="params">(str)</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">'\n'</span>).reduce(<span class="function"><span class="keyword">function</span><span class="params">(table, row)</span></span>&#123;</div><div class="line">    <span class="built_in">table</span>.push(row.split(<span class="string">','</span>).map(<span class="function"><span class="keyword">function</span><span class="params">(c)</span></span> &#123;<span class="keyword">return</span> c.trim();&#125;));</div><div class="line">    <span class="keyword">return</span> <span class="built_in">table</span></div><div class="line">  &#125;, <span class="string">[[]]</span>);</div><div class="line">&#125;;</div><div class="line">lameCSV(str);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line"> var result = arr.reduce((collection, input) =&gt; &#123;</div><div class="line">      if (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;</div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length<span class="number">-1</span>].push(input);</div><div class="line">      console.log(collection);</div><div class="line">      return collection;</div><div class="line">    &#125;, [[]]);</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/zaxlct/baike_spider/issues/1" target="_blank" rel="external">感谢大神的帮助,大神的github</a><br>reduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://yoursite.com/2017/03/23/new-article-2/"/>
    <id>http://yoursite.com/2017/03/23/new-article-2/</id>
    <published>2017-03-23T15:31:30.000Z</published>
    <updated>2017-03-23T11:33:16.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译-如何使用React,Redux和Immutable-js构建Todo-App</title>
    <link href="http://yoursite.com/2017/03/23/%E7%BF%BB%E8%AF%91-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8React,Redux%E5%92%8CImmutable-js%E6%9E%84%E5%BB%BATodo-App/"/>
    <id>http://yoursite.com/2017/03/23/翻译-如何使用React,Redux和Immutable-js构建Todo-App/</id>
    <published>2017-03-23T00:04:10.000Z</published>
    <updated>2017-03-23T11:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文是翻译版本,<a href="https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/" target="_blank" rel="external">原文请见</a><br><em>By Dan Prince  May 03, 2016</em></p>
</blockquote>
<p>React使用组件和单向数据流方式描述用户界面,但是React对state的处理非常的简单.这一点让我们知道,React仅仅只当于传统的<code>Model-View-Controller</code>构架的<code>View</code>层.</p>
<p>仅仅使用React也可以构建大型的app,但是很快我们会发现,要保持代码的简洁,我们需要在其他地方管理state(把state的管理独立出来).</p>
<p>没有官方管理应用state的工具,但是有几个库工作的的不错.今天我们添加两个库和React一起来构建一个简单的app.</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux是一个小型的js库,作为app的state容器.糅合了Fluc和Elm的概念.我们可以使用Redux管理任何app的state,只要我们紧扣下面的指导：</p>
<ol>
<li>我们的state保持在一个单一的store中</li>
<li>state的改变只会来自于actions</li>
</ol>
<p>Redux的核心 store是一个函数,它接收当前的application的state和一个action,合并创建一个新的application state,这个函数叫做Reducer.</p>
<p>我们的React组件负责发送actions到我们的store,反过来,如果组件需要渲染的时候,store会通知他.</p>
<h2 id="ImmutableJS"><a href="#ImmutableJS" class="headerlink" title="ImmutableJS"></a>ImmutableJS</h2><p>因为Redux不允许我们mutate程序的state,如果借助immutable数据结构模型化应用程序的state将会非常的有用.<br><code>Immutable.js</code>使用突变界面(mutative interfaces)提供一些immutable数据结构,这些界面实施时非常的高效,灵感来自于Clojure和Scala.</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们将会使用React,Redux和ImmutableJS去构建一个简单的todo list,允许我们添加todos,在完成和未完成之间切换.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">//css</div><div class="line"> html, body, input, button &#123;</div><div class="line">  font-family: Sawasdee;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__list &#123;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">  list-style-type: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item &#123;</div><div class="line">  padding: .5em .25em;</div><div class="line">  border-bottom: solid 1px #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item:hover &#123;</div><div class="line">  background: #f7f7f7;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__entry &#123;</div><div class="line">  border: solid 1px #ccc;</div><div class="line">  padding: .25em .5em;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #f3f3f3;</div><div class="line">  width: 100%;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button &#123;</div><div class="line">  border: 0;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #71B7FF;  </div><div class="line">  color: #fff;</div><div class="line">  padding: .25em .5em;</div><div class="line">  margin: .5em 0;</div><div class="line">  margin-right: .25em;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button:hover &#123;</div><div class="line">  background: #B2D8FF;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = Immutable;</div><div class="line"><span class="keyword">const</span> &#123; createStore &#125; = Redux;</div><div class="line"><span class="keyword">const</span> &#123; Provider, connect &#125; = reactRedux;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  Todo(&#123; todo &#125;) &#123;</div><div class="line">    <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  TodoList(&#123; todos, toggleTodo, addTodo &#125;) &#123;</div><div class="line">    <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> text = e.target.value;</div><div class="line">      <span class="keyword">if</span>(e.which === <span class="number">13</span> &amp;&amp; text.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        addTodo(text);</div><div class="line">        e.target.value = <span class="string">''</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> toggleClick = <span class="function">(<span class="params">id</span>) =&gt;</span> () =&gt; toggleTodo(id);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> &#123; Todo &#125; = components;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className='todo'&gt;</div><div class="line">        &lt;input type='text'</div><div class="line">               className='todo__entry'</div><div class="line">               placeholder='Add todo'</div><div class="line">               onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">        &lt;ul className='todo__list'&gt;</div><div class="line">          &#123;todos.map(t =&gt; (</div><div class="line">            &lt;li</div><div class="line">              key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">              &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          ))&#125; </div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const actions = &#123;</div><div class="line">  addTodo(text) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'ADD_TODO',</div><div class="line">      payload: &#123;</div><div class="line">        id: Math.random().toString(34).slice(2),</div><div class="line">        isDone: false,</div><div class="line">        text</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  toggleTodo(id) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'TOGGLE_TODO',</div><div class="line">      payload: id</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const init = List();</div><div class="line"></div><div class="line">const reducer = function(state=init, action) &#123;</div><div class="line">  switch(action.type) &#123;</div><div class="line">    case 'ADD_TODO':</div><div class="line">      return state.push(</div><div class="line">        Map(action.payload)</div><div class="line">      );</div><div class="line">    case 'TOGGLE_TODO':</div><div class="line">      return state.map(t =&gt; &#123;</div><div class="line">        if(t.get('id') == action.payload) &#123;</div><div class="line">          return t.update('isDone', isDone =&gt; !isDone);</div><div class="line">        &#125; else &#123;</div><div class="line">          return t;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const containers = &#123;</div><div class="line">  TodoList: connect(</div><div class="line">    function mapStateToProps(state) &#123;</div><div class="line">      return &#123;</div><div class="line">        todos: state</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    function mapDispatchToProps(dispatch) &#123;</div><div class="line">      return &#123;</div><div class="line">        toggleTodo: (id) =&gt; dispatch(actions.toggleTodo(id)),</div><div class="line">        addTodo: (text) =&gt; dispatch(actions.addTodo(text))</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  )(components.TodoList)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const &#123; TodoList &#125; = containers;</div><div class="line">const store = createStore(reducer);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    &lt;TodoList /&gt;</div><div class="line">  &lt;/Provider&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>代码在 <a href="https://github.com/sitepoint-editors/immutable-redux-todo" target="_blank" rel="external">Github</a></p>
<blockquote>
<p>可能提示build失败,<code>npm install babel-core</code>试试</p>
</blockquote>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>从创建项目📂开始,建立一个package.json文件.然后安装需要的依赖包.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> npm install --save react react-dom redux react-redux immutable</div><div class="line">npm install --save-dev webpack babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>
<hr>
<p>使用JSX和ES2015,用Babel编译代码,使用Webpack来完成这个模块绑定过程.</p>
<p>在<code>webpack.config.js</code>文件中创建Webpack配置文件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">        <span class="attr">query</span>: &#123; <span class="attr">presets</span>: [ <span class="string">'es2015'</span>, <span class="string">'react'</span> ] &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p>最后扩展一下<code>package.json</code>,添加一个npm script使用source maps编译我们的代码.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> "scripts": &#123;</div><div class="line">  "build": "webpack --debug"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每次编译代码的时候,运行<code>npm run build</code>.</p>
<h2 id="React-amp-Components"><a href="#React-amp-Components" class="headerlink" title="React&amp;Components"></a>React&amp;Components</h2><p>在实施项目之前,先创建一些傻瓜数据有很大的用处,但我们构思需要渲染的组件的时候,有一点点初步的感觉.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<hr>
<p>我们需要两个React组件<code>&lt;Todo/&gt;</code>和<code>&lt;TodoList&gt;</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/components.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todo &#125; = props;</div><div class="line">  <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos &#125; = props;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text' placeholder='Add todo' /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.id&#125; className='todo__item'&gt;</div><div class="line">            &lt;Todo todo=&#123;t&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>到了这一步,可以创建<code>index.html</code>文件来测试这些组价,添加下面的标记</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Immutable Todo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>还有一个项目的入口文件<code>src/app.js</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;dummyTodos&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>使用<code>npm run build</code>编译文件,然后在浏览器中打开index.html文件,确保运行.</p>
<h2 id="Redux-amp-ImmutableJS"><a href="#Redux-amp-ImmutableJS" class="headerlink" title="Redux&amp;ImmutableJS"></a>Redux&amp;ImmutableJS</h2><p>现在我们有了很好的UI,可以开始考虑组件最后的state.开始创建的傻瓜数据是一个很好的开端,我们可以很容易转化为ImmutableJS集合.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = List([</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure>
<hr>
<p>ImmutableJS map和Javascript的对象工作方式不同,所以我们要对组件做一点轻微的改变.property接入的地方(例如：todo.id)需要使用一个方法调用来代替(例如:<code>todo.get(‘id’)</code>).</p>
<h2 id="设计Actions"><a href="#设计Actions" class="headerlink" title="设计Actions"></a>设计Actions</h2><p>现在我们获得了数据的特征,可以考虑一下actions的更新.这个实例中,我们仅仅需要两个acions,一个是添加新的todo,另一个转换todo的状态.</p>
<p>让我们定义几个函数创建这些actions</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// src/actions.js</span></div><div class="line"></div><div class="line"><span class="comment">// succinct hack for generating passable unique ids</span></div><div class="line"><span class="keyword">const</span> uid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">34</span>).slice(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: &#123;</div><div class="line">      <span class="attr">id</span>: uid(),</div><div class="line">      <span class="attr">isDone</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">text</span>: text</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: id</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每一个action仅仅是一个有type和payload的属性对象.在我们触发action后,type属性帮助我们用payload来作什么.</p>
<h2 id="设计一个Reducer"><a href="#设计一个Reducer" class="headerlink" title="设计一个Reducer"></a>设计一个Reducer</h2><p>现在我们知道了state的特性和更新state的action,我们可以创建reducer了.仅仅提醒一下,reducer是一个接收state和action的函数,然后用来计算更新state.</p>
<p>这里是我们reducer的初始结构.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/reducer.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> init = List([]);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">todos=init, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> todos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>操作<code>ADD_TODO</code>action非常简单,可是使用<code>.push()</code>方法,返回一个新的列表,添加todo到末尾.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.push(<span class="built_in">Map</span>(action.payload));</div></pre></td></tr></table></figure>
<hr>
<p>记住要push到列表之前,要把todo对象转变为immutable map.</p>
<p>我们需要处理的稍微复杂的action是<code>TOOGLE_TODO</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.map(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">if</span>(t.get(<span class="string">'id'</span>) === action.payload) &#123;</div><div class="line">     <span class="keyword">return</span> t.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">return</span> t;</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>.map()</code>遍历列表,找到与aciton<code>id</code>匹配的todo项目.之后我们调用<code>.update()</code>方法,接收一个键和函数,然后返回一个map的新拷贝到updata函数,新拷贝中新值替换了初始值.</p>
<p>字面量版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">const</span> todo = <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'foo'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</div><div class="line">todo.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line"><span class="comment">// =&gt; &#123; id: 0, text: 'foo', isDone: true &#125;</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="把所有的东西都连系到一起"><a href="#把所有的东西都连系到一起" class="headerlink" title="把所有的东西都连系到一起"></a>把所有的东西都连系到一起</h2><p>actions和reducer准备好了,可以创建一个store,连接到我们的React组件中.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;store.getState()&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>为了保持组件和store的独立,我们使用<code>react-redux</code>帮助简化这个过程.它允许我们创建独立于store的容器,包装所有的组件,我们不需要改变先前的设计.</p>
<p>我们需要一个容器包装<code>&lt;TodoList/&gt;</code>组件,看看下面的内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/containers.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> &#123; addTodo, toggleTodo &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoList = connect(</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">)(components.TodoList);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>connect</code>函数创建容器.当我们调用<code>connect()</code>函数,传递两个函数,<code>mapStateToProps()</code>和<code>mapDispatchToProps()</code>.</p>
<p><code>mapStateToProps()</code>函数接收当前store的state作为参数,期待返回一个我们包装组件需要的对象映射.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面代码是一个包装组件根据映射map可视化的结果.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>我们也需要提供<code>mapDispatchProps</code>函数,传递store的<code>dispatch</code>方法,所以我们可以使用action creatros来dispatch actions.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">addTodo</span>: <span class="function"><span class="params">text</span> =&gt;</span> dispatch(addTodo(text)),</div><div class="line">    <span class="attr">toggleTodo</span>: <span class="function"><span class="params">id</span> =&gt;</span> dispatch(toggleTodo(id))</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>再一次实例化组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125;</div><div class="line">         addTodo=&#123;text =&gt; dispatch(addTodo(text))&#125;</div><div class="line">         toggleTodo=&#123;id =&gt; dispatch(toggleTodo(id))&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>现在我们已经把action creators映射到组件,可以从事件监听中调用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos, toggleTodo, addTodo &#125; = props;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> input = event.target;</div><div class="line">    <span class="keyword">const</span> text = input.value;</div><div class="line">    <span class="keyword">const</span> isEnterKey = (event.which == <span class="number">13</span>);</div><div class="line">    <span class="keyword">const</span> isLongEnough = text.length &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(isEnterKey &amp;&amp; isLongEnough) &#123;</div><div class="line">      input.value = <span class="string">''</span>;</div><div class="line">      addTodo(text);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> toggleClick = <span class="function"><span class="params">id</span> =&gt;</span> event =&gt; toggleTodo(id);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text'</div><div class="line">             className='todo__entry'</div><div class="line">             placeholder='Add todo'</div><div class="line">             onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">            &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>container容器自动订阅store的变化,只要的映射的props变化的时候,容器包装的组件就会重新渲染.</p>
<p>最后,需要使容器组件独立于store,使用<code>&lt;Provider/&gt;</code>组件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./containers'</span>;</div><div class="line"><span class="comment">//                          ^^^^^^^^^^</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不可否认,对于初学者来说,React和Redux的生态系统是相当复杂和令人迷惑的.<br>但是好消息是这些概念是可以可以转移的.我们仅仅粗略的接触了Redux的基础构架,但是已经足够我们学习<code>Elm 构架</code>,或者选取ClojureScript库例如：<code>Om</code>,<code>Re-frame</code>.类似的,我们仅仅看到immutable数据结构的只言片语,但是已经足够我们学习<code>Clojure</code>或者<code>Haskell</code>.</p>
<p>不管你是刚开始探索有关state的web编程开发者,还是使用javascript很长时间的开发者,基于action构架的办成和immutable数据结构变得至观重要的技能.所以现在是学习这些内容的时间了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是翻译版本,&lt;a href=&quot;https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
</feed>
