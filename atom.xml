<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-29T15:25:28.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>翻译|React-navigation导航系统(5)-高级指南</title>
    <link href="http://yoursite.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-5-%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/03/30/翻译-React-navigation导航系统-5-高级指南/</id>
    <published>2017-03-29T16:41:19.000Z</published>
    <updated>2017-03-29T15:25:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Intergration"><a href="#Redux-Intergration" class="headerlink" title="Redux Intergration"></a>Redux Intergration</h1><p>为了在redux中处理app的navigation state,你可以传递你自己的<code>navigation</code> prop到一个navigator.你的navigation prop必须提供当前的state,还有就是处理navigation配置项的dispatcher.</p>
<p>使用redux,你的app state由reducer来定义.每一个navigation router都有一个reducer,叫做<code>getStateForAction</code>.下面是一在redux应用中使用navigators的简单实例:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; addNavigationHelpers &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line">const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">AppRouteConfigs</span>);</div><div class="line"></div><div class="line">const navReducer = (state, action) =&gt; &#123;</div><div class="line">  const newState = <span class="type">AppNavigator</span>.router.getStateForAction(action, state);</div><div class="line">  <span class="keyword">return</span> newState || state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const appReducer = combineReducers(&#123;</div><div class="line">  nav: navReducer,</div><div class="line">  ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="meta">@connect</span>(state =&gt; (&#123;</div><div class="line">  nav: state.nav,</div><div class="line">&#125;))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppWithNavigationState</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> navigation=&#123;addNavigationHelpers(&#123;</div><div class="line">        dispatch: <span class="keyword">this</span>.props.dispatch,</div><div class="line">        state: <span class="keyword">this</span>.props.nav,</div><div class="line">      &#125;)&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = createStore(appReducer);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Provider</span> store=&#123;store&#125;&gt;</div><div class="line">        &lt;<span class="type">AppWithNavigationState</span> /&gt;</div><div class="line">      &lt;/<span class="type">Provider</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦按照实例操作,navigation state就存储在redux的store中,这样就可以使用redux的dispatch函数来发起navigation的actions.</p>
<p>牢记在心,当一个navigator给定一个<code>navigation</code>prop,他将失去内部state的控制权.这意味着现在你来负责state的持久化,处理任何的深度链接,整合Back按钮等操作.</p>
<p>当你的navigator是巢式的时候,Navigation state自动从一个navigator传递到另一个navigator.注意,为了让子代navigator可以从父代navigator接收state,它应该定义为一个<code>screen</code>.</p>
<p>对应上面的实例,你可以定义<code>AppNavigator</code>包含一个巢式的<code>TabNavigator</code>:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"> const AppNavigator</span> = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: MyTabNavigator &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这个实例中,一旦你在<code>AppWithNavigationState</code>中<code>connect</code> <code>AppNavigator</code>到Redux,<code>MyTabNavigation</code>将会自动接入到navigation state 作为<code>navigtion</code>的prop.</p>
<h1 id="Web-Integration"><a href="#Web-Integration" class="headerlink" title="Web Integration"></a>Web Integration</h1><p>React Navigation routers工作在web环境下允许你和原生app共享导航的逻辑.绑定在<code>react-navigation</code>的视图目前只能工作在React Native下,但是在react-primitives项目中可能会有所改变.</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><a href="https://reactnavigation.org/" target="_blank" rel="external">这个网站</a>由React Navigation构建,使用了<code>createNavigation</code>和<code>TabRouter</code>.<br>看看网站的源代码<a href="https://github.com/react-community/react-navigation/blob/master/website/src/App.js" target="_blank" rel="external">app.js</a></p>
<p>app如何获得渲染参看<a href="https://github.com/react-community/react-navigation/blob/master/website/src/Server.js" target="_blank" rel="external">server.js</a>.在浏览器中,使用[BrowserAppContainer.js]来唤醒和获得渲染.</p>
<p>##更多内容,很快呈现<br>不久会有详细的教程.</p>
<h1 id="Deep-Linking"><a href="#Deep-Linking" class="headerlink" title="Deep Linking"></a>Deep Linking</h1><p>这一部分指南中,我们将设置app来处理外部URIs.让我们从SimpleApp开始<br><a href="https://reactnavigation.org/docs/intro" target="_blank" rel="external">getting start的指南</a></p>
<p>在这个示例中,我们想使用类似<code>mychat://chat/Taylor</code>的URI来打开我们的app,直接连接到Taylor的chat page.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>在前面我们定义了navigator想下面这样：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; <span class="keyword">screen: </span>HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; <span class="keyword">screen: </span>ChatScreen &#125;,</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>我们想让path类似<code>chat/Taylor</code>链接到“Chat”screen,传递<code>user</code>作为参数.我们重新定义我们的chat screen使用一个<code>path</code>来告诉router需要匹配的path和需要提取的参数.这个路径配置为<code>chat/:user</code>.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="attr">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="attr">  Chat:</span> &#123;</div><div class="line"><span class="attr">    screen:</span> ChatScreen,</div><div class="line"><span class="attr">    path:</span> <span class="string">'chat/:user'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="URI的前缀"><a href="#URI的前缀" class="headerlink" title="URI的前缀"></a>URI的前缀</h2><p>下面配置navigation container来提取app的path.当配置在顶层navigator上的时候,我们提供<code>containerOperations</code>,</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SimpleApp = StackNavigator(&#123;</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">containerOptions</span>: &#123;</div><div class="line">    <span class="comment">// on Android, the URI prefix typically contains a host in addition to scheme</span></div><div class="line">    URIPrefix: Platform.OS == <span class="string">'android'</span> ? <span class="string">'mychat://mychat/'</span> : <span class="string">'mychat://'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>基于<code>mychat://</code>URI图式配置原生的iOS app.<br>在<code>SimpleApp/ios/SimpleApp/AppleDelegate.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Add the header at the top of the file:</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTLinkingManager.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Add this above the `@end`:</span></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">  sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [RCTLinkingManager application:application openURL:url</div><div class="line">                      sourceApplication:sourceApplication annotation:annotation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode里,打开项目的<code>simpleApp/ios/SimpleApp.xcodeproj</code>.在边栏中选择项目导航到info tab.向下滑动到“URL Types”并且添加一个.在新的URL type,设定名称和url图式对应想导航到的url图式.<br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe3z3gaupxj30ui0fk74v.jpg" alt=""></p>
<p>现在可以在Xcode中点击play,或者在命令行运行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure></p>
<p>为了在iOS中测试URI,在safari中打开<code>mychat://chat/Taylor</code></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>为了在Andorid中链接外链,可以在manifest中创建一个新的intent.<br>在<code>SimpleApp/android/app/src/main/AndroidManifest.xml</code>中<code>MainActivity</code>内添加新的<code>VIEW</code>type<code>intent-filter</code>.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"mychat"</span></span></div><div class="line">          <span class="attr">android:host</span>=<span class="string">"mychat"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在,重新运行:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-android</span></div></pre></td></tr></table></figure></p>
<p>在Android中测试intent操作,运行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -W -<span class="selector-tag">a</span> android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.VIEW</span> -d <span class="string">"mychat://mychat/chat/Taylor"</span> com.simpleapp</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe3zdd1q9gg307i0dc17p.gif" alt=""></p>
<h1 id="Screen-tracking-and-analytics"><a href="#Screen-tracking-and-analytics" class="headerlink" title="Screen tracking and analytics"></a>Screen tracking and analytics</h1><p>这个实例中展示怎么做屏幕追踪并且发到Google Analytics.这个方法应用在其他的移动分析SDK也是可以的.</p>
<h2 id="Screen-tracking"><a href="#Screen-tracking" class="headerlink" title="Screen tracking"></a>Screen tracking</h2><p>当我们使用内建的navigation container,我们使用<code>onNavigationStateChange</code>来追踪screen.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> import &#123; GoogleAnalyticsTracker &#125; from <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="comment">// gets the current screen from navigation state</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentRouteName</span><span class="params">(navigationState)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!navigationState) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> route = navigationState.routes[navigationState.index];</div><div class="line">  <span class="comment">// dive into nested navigators</span></div><div class="line">  <span class="keyword">if</span> (route.routes) &#123;</div><div class="line">    <span class="keyword">return</span> getCurrentRouteName(route);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> route.routeName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> AppNavigator = StackNavigator(AppRouteConfigs);</div><div class="line"></div><div class="line">export <span class="keyword">default</span> () =&gt; (</div><div class="line">  &lt;AppNavigator</div><div class="line">    onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> currentScreen = getCurrentRouteName(currentState);</div><div class="line">      <span class="keyword">const</span> prevScreen = getCurrentRouteName(prevState);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (prevScreen !== currentScreen) &#123;</div><div class="line">        <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">        <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">        tracker.trackScreenView(currentScreen);</div><div class="line">      &#125;</div><div class="line">    &#125;&#125;</div><div class="line">  /&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="使用Redux做Screen-tracking"><a href="#使用Redux做Screen-tracking" class="headerlink" title="使用Redux做Screen tracking"></a>使用Redux做Screen tracking</h2><p>使用Redux的时候,我们可以写Redux 中间件来track screen.为了达到这个目的,我们从前面的部分重新使用<code>getCurrenRouteName</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"><span class="keyword">import</span> &#123; GoogleAnalyticsTracker &#125; <span class="keyword">from</span> <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="keyword">const</span> screenTracking = <span class="function">(<span class="params">&#123; getState &#125;</span>) =&gt;</span> next =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (</div><div class="line">    action.type !== NavigationActions.NAVIGATE</div><div class="line">    &amp;&amp; action.type !== NavigationActions.BACK</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> currentScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">const</span> result = next(action);</div><div class="line">  <span class="keyword">const</span> nextScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">if</span> (nextScreen !== currentScreen) &#123;</div><div class="line">    <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">    <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">    tracker.trackScreenView(nextScreen);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> screenTracking;</div></pre></td></tr></table></figure>
<h2 id="创建Redux-store并应用上面的中间件"><a href="#创建Redux-store并应用上面的中间件" class="headerlink" title="创建Redux store并应用上面的中间件"></a>创建Redux store并应用上面的中间件</h2><p>在创建store的时候应用这个<code>screenTracking</code>的中间件.看看Redux Integration了解细节.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> const store = createStore(</div><div class="line">  <span class="name">combineReducers</span>(&#123;</div><div class="line">    navigation: navigationReducer,</div><div class="line">    ...</div><div class="line">  &#125;),</div><div class="line">  applyMiddleware(</div><div class="line">    <span class="name">screenTracking</span>,</div><div class="line">    ...</div><div class="line">    ),</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-Intergration&quot;&gt;&lt;a href=&quot;#Redux-Intergration&quot; class=&quot;headerlink&quot; title=&quot;Redux Intergration&quot;&gt;&lt;/a&gt;Redux Intergration&lt;/h1&gt;&lt;p&gt;为了在red
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(4)</title>
    <link href="http://yoursite.com/2017/03/29/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-4/"/>
    <id>http://yoursite.com/2017/03/29/翻译-React-navigation导航系统-4/</id>
    <published>2017-03-29T07:16:17.000Z</published>
    <updated>2017-03-29T08:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigation-Actions"><a href="#Navigation-Actions" class="headerlink" title="Navigation Actions"></a>Navigation Actions</h1><p>所有的Navigation Actions都会返回一个对象,这个对象可以使用<code>navigation.dispatch</code>方法传递到router.<br><em>注意</em>：如果你想dispatch react-navigation,你应该使用这个库提供的action creators.</p>
<p>下面的actions是可以使用的:</p>
<ul>
<li><code>Navigate</code>-导航到其他的route</li>
<li><code>Reset</code>-使用新的state代替目前的state</li>
<li><code>Back</code>-返回上一个state</li>
<li><code>Set Params</code>-给定的route设置参数</li>
<li><code>Init</code>-如果state没有定义,用来初始化第一个state</li>
</ul>
<h2 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h2><p><code>Navigatie action</code>会使用<code>Navigate action</code>的结果来更新当前的state.</p>
<ul>
<li><code>routeName</code>-字符串-必选项,在app的router里注册的导航目的地的routeName.</li>
<li><code>params</code>-对象-可选项-融合进目的地route的参数</li>
<li><code>actions</code>-对象-可选项-(高级)-如果screen也是一个navigator,次级action可以在子router中运行.在文档中描述的任何actions都可以作为次级action.</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const navigateAction = NavigationActions.navigate(&#123;</div><div class="line"></div><div class="line">  routeName: <span class="string">'Profile'</span>,</div><div class="line"></div><div class="line">  params: &#123;&#125;,</div><div class="line"></div><div class="line">  action: NavigationActions.navigate(&#123; routeName: <span class="string">'SubProfileRoute'</span>&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">this.props.navigation.dispatch(navigateAction)</div></pre></td></tr></table></figure>
<h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p><code>Reset</code>action删掉所有的navigation state并且使用几个actions的结果来代替.</p>
<ul>
<li><code>index</code>—数组-必选-navigation <code>state</code>中<code>route</code>数组中激活route的index.</li>
<li><code>actions</code>-数组-必选项-Navigation Actions数组,将会替代navigation state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> resetAction = NavigationActions.reset(&#123;</div><div class="line">  <span class="attr">index</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">actions</span>: [</div><div class="line">    NavigationActions.navigate(&#123; <span class="attr">routeName</span>: <span class="string">'Profile'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="怎么使用index参数"><a href="#怎么使用index参数" class="headerlink" title="怎么使用index参数"></a>怎么使用<code>index</code>参数</h2><p><code>index</code>参数被用来定制化当前激活的route<br>例如：使用两个routes <code>Profile</code>和<code>Settings</code>给一个基础的stakc navigation设置.为了重置route到经过<code>Settings</code>的激活screen那一点,但是在堆栈中他又存放在<code>Setting</code>screen之上,你可以这么做:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const resetAction = NavigationActions.reset(&#123;</div><div class="line">  index: <span class="number">1</span>,</div><div class="line">  actions: [</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Profile'</span>&#125;),</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Settings'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line">this.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="Back"><a href="#Back" class="headerlink" title="Back"></a>Back</h2><p>返回到前一个screen并且关闭当前screen.<code>back</code>action creator接受一个可选的参数:</p>
<ul>
<li><code>key</code>-字符串或者空-可选项-如果设定了,navigation将会从设定的key返回.如果是null,navigation将返回到任何地方.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> backAction = NavigationActions.back(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'Profile'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(backAction)</div></pre></td></tr></table></figure>
<h2 id="SetParams"><a href="#SetParams" class="headerlink" title="SetParams"></a>SetParams</h2><p>当dispatching <code>setParams的时候</code>,router将会产出一个新的state,这个state是已经改变了特定route的参数,以key作为身份验证</p>
<ul>
<li><code>params</code>-对象-必选参数-融合进已经存在的route参数中的新参数</li>
<li><code>key</code>-字符串-必选参数-Route的key,应该分配给新的参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> setParamsAction = NavigationActions.setParams(&#123;</div><div class="line">  <span class="attr">params</span>: &#123; <span class="attr">title</span>: <span class="string">'Hello'</span> &#125;,</div><div class="line">  <span class="attr">key</span>: <span class="string">'screen-123'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(setParamsAction)</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h1><p>每个screen都可以配置几个方面的内容,这些内容影响到在父navigators中怎么得到展示.</p>
<h2 id="定制每一个可选项的两种方法"><a href="#定制每一个可选项的两种方法" class="headerlink" title="定制每一个可选项的两种方法"></a>定制每一个可选项的两种方法</h2><p><em>静态配置方法</em>:每一个navigation 可选项都可以被直接设定:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p><em>动态配置方法</em><br>要么就采用函数式的方法,接受参数,然后返回可选项的值.</p>
<ul>
<li><code>navigation</code>-screen的navigation prop和<code>navigation.state</code>中screen的route</li>
<li><code>childRouter</code>-如果screen是一个navigator,这个参数就是子代router.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: (navigation, childRouter) =&gt; &#123;</div><div class="line">     <span class="keyword">return</span> navigation.state.params.name + <span class="string">"'s Profile!"</span>;</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<h2 id="通用的Navigation-Options"><a href="#通用的Navigation-Options" class="headerlink" title="通用的Navigation Options"></a>通用的Navigation Options</h2><p>navigation的可选项<code>title</code>在每一个navigator之间是通用的,用来设定每一个screen的标题字符串.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>不像其他的navigation的可配置项仅仅由navigator view来使用,title 选项可以被环境变量使用来更新浏览器的标题或者app切换时候的标题.</p>
<h2 id="默认的Navigation选项"><a href="#默认的Navigation选项" class="headerlink" title="默认的Navigation选项"></a>默认的Navigation选项</h2><p>在screen中定义<code>navigationOption</code>非常普遍,但是有时候在navigator中定义<code>navitationOptions</code>也是非常有用</p>
<p>想象下面的场景:你的<code>TabNavigator</code>代表app中的一个screen.他在顶层<code>StackNavigator</code>之内:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">StackNavigator:</span></div><div class="line"> - <span class="string">route1:</span> A screen</div><div class="line"> - <span class="string">route2:</span> A TabNavigator</div></pre></td></tr></table></figure>
<p>现在<code>route2</code>是激活的,你可能会隐藏header,隐藏<code>route1</code>的header非常容易,<code>route2</code>的header应该也很容易隐藏.这就是默认Navigation Option 要做的.可以在<code>navigationOptions</code>中设定:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">TabNavigator</span>(&#123;</div><div class="line">  <span class="attribute">profile</span>: ProfileScreen,</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attribute">navigationOptions</span>: &#123;</div><div class="line">     header: &#123;</div><div class="line">       visible: false,</div><div class="line">     &#125;,</div><div class="line">   &#125;,</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>提示:你仍然可以在子代导航screen上定制<code>navigationOptions</code>.-例如,上面的<code>ProfileScreen</code>.从screen获得的<code>navigationOptions</code>会和从navigator来的配置按照键-键的方式融合在一起.无论在什么而时间,navigator和screen定义相同的配置(例如:<code>header</code>),screen会优先使用.因此,当<code>ProfileScreen</code>激活的时候,你可以使header再次可见.</p>
<p><em>扩展默认配置</em>:为了使用screen特定的properties扩展默认配置,而不是重写它,你可以像下面一样配置选项:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    header: (navigation, defaultHeader) =&gt; (&#123;</div><div class="line">      ...defaultHeader,</div><div class="line">      visible: <span class="literal">true</span>,</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递到函数的第二个参数作为在navigator中定义的<code>header</code>的默认值.</p>
<h2 id="Tab-Navigation-Options"><a href="#Tab-Navigation-Options" class="headerlink" title="Tab Navigation Options"></a>Tab Navigation Options</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: (&#123; state &#125;) =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Tab</span> <span class="type">Label</span>',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./tab-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">      visible: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>label</code>-可以是字符串或者是React组件</li>
<li><code>icon</code>-函数返回icon组件</li>
<li><code>visible</code>-true或者false,显示或者隐藏tab bar,默认是true</li>
</ul>
<h1 id="Custom-Navigation"><a href="#Custom-Navigation" class="headerlink" title="Custom Navigation"></a>Custom Navigation</h1><p>一个navigator是任何包含router的React组件.这里是一个基本navigator,使用router的API去获得激活组件来渲染<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> class MyNavigator extends React.Component &#123;</div><div class="line">  static router = MyRouter;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; <span class="keyword">state</span>, dispatch &#125; = this.props.navigation;</div><div class="line">    const &#123; routes, index &#125; = <span class="keyword">state</span>;</div><div class="line"></div><div class="line">    // Figure <span class="keyword">out</span> what <span class="keyword">to</span> render based <span class="keyword">on</span> the navigation <span class="keyword">state</span> and the router:</div><div class="line">    const Component = MyRouter.getComponentForState(<span class="keyword">state</span>);</div><div class="line"></div><div class="line">    // The <span class="keyword">state</span> of the active child screen can be found at routes[index]</div><div class="line">    let childNavigation = &#123; dispatch, <span class="keyword">state</span>: routes[index] &#125;;</div><div class="line">    // If we want, we can also tinker with the dispatch function here, <span class="keyword">to</span> <span class="keyword">limit</span></div><div class="line">    // or augment our children's actions</div><div class="line"></div><div class="line">    // Assuming our children want the convenience of calling .navigate() and so <span class="keyword">on</span>,</div><div class="line">    // we should call addNavigationHelpers <span class="keyword">to</span> augment our navigation prop:</div><div class="line">    childNavigation = addNavigationHelpers(childNavigation);</div><div class="line"></div><div class="line">    return <span class="variable">&lt;Component navigation=&#123;childNavigation&#125; /&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Navigation-Prop"><a href="#Navigation-Prop" class="headerlink" title="Navigation Prop"></a>Navigation Prop</h2><p>navigation prop传递给navigator的仅仅包含<code>state</code>和<code>dispatch</code>,这是当前的navigator的state,但是还有一个事件频道用来发送action request.<br>所有的navigators都是受控组件:他们总是显示根据<code>props.navigation.state</code>来显示,他们要改变state,唯一的办法是发送actions到<code>props.navigation.dispatch</code>.<br>Navigators可以通过定制他们的router来改变父navigators的行为.例如,当action应该从<code>router.getStateForAction</code>返回null来阻止其运行的时候.或者一个navigator可以为了定制URI的操作而改写<code>router.getActionForPathParams</code>,为了输出相对navigation action以及操作<code>router.getStateForAction</code>的action.</p>
<h2 id="Navigation-State"><a href="#Navigation-State" class="headerlink" title="Navigation State"></a>Navigation State</h2><p>传递到<code>props.navigation.state</code>的navigation state有下面的结构:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>, <span class="comment">// identifies which route in the routes array is active</span></div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Each route needs a name, which routers will use to associate each route</span></div><div class="line">      <span class="comment">// with a react component</span></div><div class="line">      <span class="attribute">routeName</span>: <span class="string">'MyRouteName'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// A unique id for this route, used to keep order in the routes array:</span></div><div class="line">      <span class="attribute">key</span>: <span class="string">'myroute-123'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Routes can have any additional data. The included routers have `params`</span></div><div class="line">      ...customRouteData,</div><div class="line">    &#125;,</div><div class="line">    ..<span class="selector-class">.moreRoutes</span>,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Navigation-Dispatchers"><a href="#Navigation-Dispatchers" class="headerlink" title="Navigation Dispatchers"></a>Navigation Dispatchers</h2><p>navigator可以dispatch navigation actions,例如Go to URI,Go back.<br>如果action被成功操作了,dispatcher将会返回true,否则就是false</p>
<h2 id="构建定制navigators的API"><a href="#构建定制navigators的API" class="headerlink" title="构建定制navigators的API"></a>构建定制navigators的API</h2><p>为了帮助开发者实施定制navigators,React Navigation提供了下面的工具<br><code>createNavigator</code><br>这个工具使用标准方法把router和navigation view合并在一起.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const MyApp = createNavigator(<span class="name">MyRouter</span>)(<span class="name">MyView</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>幕后所做的是:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyView</span> <span class="attr">router</span>=<span class="string">&#123;MyRouter&#125;</span> <span class="attr">navigation</span>=<span class="string">&#123;navigation&#125;</span> /&gt;</span></span></div><div class="line">);</div><div class="line">MyApp.router = MyRouter;</div></pre></td></tr></table></figure>
<p><code>addNavigationHelpers</code><br>接收一个拥有<code>state</code>和<code>dispatch</code>的纯navigator的prop,传递的参数是在screen navigation prop中的各种函数,例如<code>navigation.navigate()</code>和<code>navigation.goBack()</code>.这些函数是简单的助手函数帮助创建action并且发送到<code>dispatch</code>.</p>
<p><code>createNavigationContainer</code></p>
<p>如果你想让你的navigator作为顶层组件使用(没有navigation prop传入),你可以使用<code>createNavigationContainer</code>.当缺少navigtion prop的时候,这个工具使你的navigator看起来像一个顶层的导航组件.它将管理app的state,和app级别的导航特性整合在一起,例如操作进出的链接和android的返回按钮行为.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigation-Actions&quot;&gt;&lt;a href=&quot;#Navigation-Actions&quot; class=&quot;headerlink&quot; title=&quot;Navigation Actions&quot;&gt;&lt;/a&gt;Navigation Actions&lt;/h1&gt;&lt;p&gt;所有的Nav
    
    </summary>
    
      <category term=" 翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(3)</title>
    <link href="http://yoursite.com/2017/03/28/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-3/"/>
    <id>http://yoursite.com/2017/03/28/翻译-React-navigation导航系统-3/</id>
    <published>2017-03-28T07:48:36.000Z</published>
    <updated>2017-03-28T22:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigators"><a href="#Navigators" class="headerlink" title="Navigators"></a>Navigators</h1><p>Navigators允许你定义你的导航结构.Navigators也可以渲染普通的元素,例如你配置好的header和tab bar.<br>navigators可以是单纯的React组件.</p>
<h2 id="内建的Navigators"><a href="#内建的Navigators" class="headerlink" title="内建的Navigators"></a>内建的Navigators</h2><p><code>react-navigation</code>包含下面的几个函数帮助你创建navigators：</p>
<ul>
<li><code>StackNavigator</code>-一次渲染一个screen,在screen之间切换.当一个新的screen被打开的时候,他被放在栈顶.</li>
<li><code>TabNavigator</code>-渲染出一个tab bar让用户可以在多个screen之间切换.</li>
<li><code>DrawNavigator</code>-渲染一个抽屉,可以从屏幕左边侧滑出.</li>
</ul>
<h2 id="使用Navigators渲染screen"><a href="#使用Navigators渲染screen" class="headerlink" title="使用Navigators渲染screen"></a>使用Navigators渲染screen</h2><p>navigators实际渲染的就是React组件<br>了解怎么创建screen,读读一下内容:</p>
<ul>
<li>Screen<code>navigation</code>props允许screen分发navigation动作,例如操作另外一个screen.</li>
<li>Screen <code>navigationOptions</code>定制screen的展示方式(例如：header title,tab label)<h2 id="在顶层组件上调用导航"><a href="#在顶层组件上调用导航" class="headerlink" title="在顶层组件上调用导航"></a>在顶层组件上调用导航</h2>万一你想在同一级别的Navigation screen之间使用Navigator,你可以使用react的<code>ref</code>选项:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">SomeAppRouteConfigs</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  someEvent() &#123;</div><div class="line">    <span class="comment">// call navigate for AppNavigator here:</span></div><div class="line">    <span class="keyword">this</span>.navigator &amp;&amp; <span class="keyword">this</span>.navigator.dispatch(&#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Navigat</span>e', routeName, params &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> ref=&#123;nav =&gt; &#123; <span class="keyword">this</span>.navigator = nav; &#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:这个解决办法只能用在顶层navigator上.</p>
<h2 id="Navigation-Containers"><a href="#Navigation-Containers" class="headerlink" title="Navigation Containers"></a>Navigation Containers</h2><p>如果navigators没有props的话,他就会表现为顶层navigators.这个方式提供了一个透明的navigator container,这是顶层导航props的来源.<br>当渲染其中一个navigators的时候,navigation prop是可选的.如果没有navigation prop,container将会管理自己的导航state.他也可以使用URLs,外部链接以及整合android的back button.</p>
<p>为了使用方便,在幕后内建的navigators有这个能力,因为在幕后他们使用了<code>createNavigationContainer</code>.通常,navigators需要一个navigation prop来执行一定的功能.<br><code>onNavigationStateChange(prevState, newState)</code></p>
<p>当navigation state由顶层navigator变化管理的时候,这一点非常有用.为了达到这个目的,这个函数在每次调用的时候都会使用导航之前的state和导航之后的新state作为参数.</p>
<p><code>containerOptions</code><br>当一个navigator在顶层被使用的时候,这些选项可以来配置这个navigator.<br>如果一个navigator配置了<code>containerOptions</code>,但是也接受了<code>navigation</code>prop,会抛出错误.因为在这种情况下,navigator有两种选择,它就不知道怎么做了.</p>
<ul>
<li><code>URIPrefic</code>-app可以处理的URI前缀.在处理<code>deep link</code>的时候，可以提取路径,并且传递到router.</li>
</ul>
<h1 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h1><p>给你的app提供screen之间转变的方法,每个转变到的screen会存放在堆栈的栈顶.<br>默认情况下,StackNavigator配置有iOS和android的外观和感觉:在iOS下,新的screen从屏幕的右侧滑入,在android下,新的screen从底部淡入.iOS下也可以配置为从屏幕底部滑入.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Hom</span>e',</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Profil</span>e', &#123;name: <span class="symbol">'Luc</span>y'&#125;)&#125;</div><div class="line">        title=<span class="string">"Go to Lucy's profile"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const <span class="type">ModalStack</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Profile</span>: &#123;</div><div class="line">    path: <span class="symbol">'people</span>/:name',</div><div class="line">    screen: <span class="type">MyProfileScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="定义API"><a href="#定义API" class="headerlink" title="定义API"></a>定义API</h2><p><code>StackNavigator(Routeconfigs,StackNavigatorConfig)</code></p>
<h2 id="RouteConfigs"><a href="#RouteConfigs" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">StackNavigator(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// For each screen that you can navigate to, create a new entry like this:</span></div><div class="line">  Profile: &#123;</div><div class="line"></div><div class="line">    <span class="comment">// `ProfileScreen` is a React component that will be the main content of the screen.</span></div><div class="line">    screen: ProfileScreen,</div><div class="line">    <span class="comment">// When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: When deep linking or using react-navigation in a web app, this path is used:</span></div><div class="line">    path: <span class="string">'people/:username'</span>,</div><div class="line">    <span class="comment">// The action and route params are extracted from the path.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: Override the `navigationOptions` for the screen</span></div><div class="line">    navigationOptions: &#123;</div><div class="line">      <span class="attr">title</span>: <span class="function">(<span class="params">&#123;state&#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;state.params.username&#125;</span>'s Profile'`</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  ...MyOtherRoutes,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="StackNavigatorConfi"><a href="#StackNavigatorConfi" class="headerlink" title="StackNavigatorConfi"></a>StackNavigatorConfi</h2><p>Router的Options:</p>
<ul>
<li><code>initialRouteName</code>-设定默认的堆栈的screen.需要和route config的键之一相同.</li>
<li><code>initalRouteParams</code>-初始化route的参数</li>
<li><code>navigationOptions</code>-默认需要使用的可选参数</li>
<li><code>path</code>-覆盖route configs的路径设置</li>
</ul>
<p>可视化选项:</p>
<ul>
<li><code>mode</code>-定义渲染和切换之间的样式:<ul>
<li><code>card</code>-使用iOS和android标准的切换方法.默认值</li>
<li><code>modal</code>-使screen从底部滑动显示.仅仅在iOS下使用,Andorid下没有效果</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>headerMode</code>-定制header渲染的方法</p>
<ul>
<li><code>float</code>-切换界面的时候,用动画效果在screen的顶部渲染header</li>
<li><code>screen</code>-每一个screen都有一个header附着到头部,切换的时候有淡入和淡出的效果.andorid的基本模式</li>
<li><code>none</code>-没有header的渲染.</li>
</ul>
</li>
<li><p><code>cardStyle</code>-使用这个prop来重写或者扩展单个card的默认style</p>
</li>
<li><code>onTransitionStart</code>-当card开始切换动画的时候,这个函数被调用</li>
<li><code>onTransitionEnd</code>-当切换动画完成的时候,这个函数被调用</li>
</ul>
<h2 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line"></div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">    header: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">      // Render a button <span class="keyword">on</span> the right side of the header</div><div class="line">      // When pressed switches the screen <span class="keyword">to</span> edit mode.</div><div class="line">      right: (</div><div class="line">        <span class="variable">&lt;Button</span></div><div class="line">          title=&#123;state.params.editing ? 'Done' : 'Edit'&#125;</div><div class="line">          onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123;editing: <span class="keyword">state</span>.params.editing ? false : true&#125;)&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>stackNavigator</code>的<code>navigationOptions</code>:</p>
<ul>
<li><code>title</code>-scene的标题(字符串)</li>
<li><code>header</code>-header bar的配置对象<ul>
<li><code>visible</code>-header可视性的切换.只有当<code>headerMode</code>是<code>screen</code>的时候才可以工作</li>
<li><code>title</code>-header可以使用的字符串或者React组件,默认是scene的<code>title</code></li>
<li><code>backTitle</code>-iOS back按钮的title字符串或者<code>null</code>到disable标签,默认设定到scene的<code>title</code>.</li>
<li><code>right</code>-显示在header右侧的React组件</li>
<li><code>left</code>-同上,左侧</li>
<li><code>style</code>-header的Style对象</li>
<li><code>titleStyle</code>-title组建的Style对象</li>
<li><code>tintColor</code>-header的着色</li>
</ul>
</li>
<li><code>cardStack</code>-card stack的配置对象<ul>
<li><code>gesturesEnabled</code>-不管你是不是用手势,在iOS上是true,在android里是false.<h2 id="Navigator-Props"><a href="#Navigator-Props" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>StackNavigator(...)</code>创建的navigator组件接收两个props:<br><code>screenProps</code>-向下传递到子screen,例如:</li>
</ul>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SomeStack = StackNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;SomeStack</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>看看实例<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/SimpleStack.js" target="_blank" rel="external">SimpleStack.js</a>和<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/ModalStack.js" target="_blank" rel="external">ModalStack.js</a>,可以在本地的<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground" target="_blank" rel="external">NavigationPlayground</a>app中运行.</p>
<h1 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h1><p>通常很容易使用TabRouter来创建有几个tabs的screen.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      <span class="comment">// Note: By default the icon is only shown on iOS. Search the showIcon option below.</span></div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">26</span>,</div><div class="line">    height: <span class="number">26</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">TabNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  tabBarOptions: &#123;</div><div class="line">    activeTintColor: '#e91e63',</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="定义API-1"><a href="#定义API-1" class="headerlink" title="定义API"></a>定义API</h2><p><code>TabNavigator(RouteConfigs,TabNavigator)</code></p>
<h2 id="RouteConfigs-1"><a href="#RouteConfigs-1" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<h2 id="TabNavigatorConfig"><a href="#TabNavigatorConfig" class="headerlink" title="TabNavigatorConfig"></a>TabNavigatorConfig</h2><ul>
<li><code>tabBarComponent</code>-作为tab bar的组件.例如,<code>TabView.TabBarBottom</code>(ios的默认配置),<code>TabView.TabBarTop</code>(android的默认配置)</li>
<li><code>tabBarPosition</code>-tab bar的位置,可以是<code>top</code>和<code>bottom</code></li>
<li><code>swipeEnabled</code>-是否在tab之间滑动</li>
<li><code>animationEnabled</code>-变换tabs的时候是否开启动画效果</li>
<li><code>lazyLoad</code>-是否在需要的时候才惰性加载tabs,代替预渲染</li>
<li><code>tabBarOption</code>-配置tab bar,看下面<br>几个Options可以传递到潜在的的router,修改导航的逻辑</li>
<li><code>initialRouteName</code>-初始化时加载的tab route</li>
<li><code>order</code>-定义tabs顺序的routeName的数组</li>
<li><code>paths</code>-提供routeName到path配置的映射,重写routeConfigs里的paths设置</li>
<li><code>backBehavior</code>-back button是不是应该导致tab切换到初始的tab？入如果是的话,设定<code>initialRoute</code>,否则就是<code>none</code>.默认到<code>initialRoute</code>的行为.</li>
</ul>
<p><code>TabBarTop</code>的<code>tabBarOptions</code>设置(android默认的tab bar)</p>
<ul>
<li><code>activeTintColor</code>-激活tab的标签和icon的颜色</li>
<li><code>inactiveTintColor</code>-未激活tab的标签和icon的颜色</li>
<li><code>showIcon</code>-是否在tab中显示icon,默认是false</li>
<li><code>showLabel</code>-是否在tab显示label,默认是true</li>
<li><code>upperCaseLabel</code>-tab的label是否是大写,默认是true</li>
<li><code>pressColor</code>-material涟漪效果的颜色(Android&gt;=5.0)</li>
<li><code>pressOpacity</code>-按下tab的透明度变化(iOS和Android&lt;5.0)</li>
<li><code>scrollEnabled</code>-是否是滑动式tabs.</li>
<li><code>tabStyle</code>-tab的样式配置对象</li>
<li><code>indicatorStyle</code>-tab指示器的样式对象(tab底部的划线)</li>
<li><code>labelStyle</code>-tab label的样式对象</li>
<li><code>style</code>-tab bar的样式对象</li>
</ul>
<p>实例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tabBarOptions</span>: &#123;</div><div class="line">  <span class="attribute">labelStyle</span>: &#123;</div><div class="line">    fontSize: <span class="number">12</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="selector-tag">style</span>: &#123;</div><div class="line">    <span class="attribute">backgroundColor</span>: <span class="string">'blue'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项"><a href="#Screen导航的选项" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">   tabBar: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">     icon: (</div><div class="line">       <span class="variable">&lt;Image src=&#123;require('./my-icon.png')&#125; /&gt;</span></div><div class="line">     ),</div><div class="line">   &#125;),</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有<code>TabNavigator</code>的<code>navigationOption</code>:</p>
<ul>
<li><code>title</code>-scene的title(字符串)</li>
<li><code>tabBar</code>-tab bar的config对象:<ul>
<li><code>visible</code>-tab bar的可见性的切换</li>
<li><code>icon</code>-React组件或者函数给出<code>{focused:boolean,tintColor:string}</code>,返回一个React组件,显示在tab bar</li>
<li><code>label</code>-显示在tab bar中的tab的名字.如果定义为undefined,scene的<code>title</code>会被使用.如果要隐藏,看前面部分的<code>tabBarOption.showLabel</code>.<h2 id="Navigator-Props-1"><a href="#Navigator-Props-1" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>TabNavigator(...)</code>创建的navigator组件接收下面的props:</li>
</ul>
</li>
<li><code>screenProps</code>-向下传递额外的options给子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> TabNav = TabNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;TabNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="抽屉式导航"><a href="#抽屉式导航" class="headerlink" title="抽屉式导航"></a>抽屉式导航</h1><p>用来构建抽屉式导航<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.tabIcon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">24</span>,</div><div class="line">    height: <span class="number">24</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">DrawerNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开抽屉或者关闭抽屉,分别导航到<code>DrawerOpen</code>和<code>Drawerclose</code>.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerOpen'</span>); <span class="comment">// open drawer</span></div><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerClose'</span>); <span class="comment">// close drawer</span></div></pre></td></tr></table></figure></p>
<h2 id="定义API-2"><a href="#定义API-2" class="headerlink" title="定义API"></a>定义API</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">DrawerNavigator</span><span class="params">(RouteConfigs, DrawerNavigatorConfig)</span></span></div></pre></td></tr></table></figure>
<h2 id="RouteConfigs-2"><a href="#RouteConfigs-2" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>参看前面的内容</p>
<h2 id="DrawerNavigatonConfig"><a href="#DrawerNavigatonConfig" class="headerlink" title="DrawerNavigatonConfig"></a>DrawerNavigatonConfig</h2><ul>
<li><code>drawerWidth</code>-抽屉的宽度</li>
<li><code>drawerPosition</code>-选项是<code>left</code>和<code>right</code>.默认是<code>left</code>.</li>
<li><code>contentComponent</code>-用来渲染抽屉内容的组件,例如,navigation item.接收<code>navigation</code>prop.默认是<code>DrawerView.Items</code>.了解更多内容看下面内容.</li>
<li><code>contentOptions</code>-配置drawer的内容,看下面内容<br>几个选项传递给潜在的router,用来修改navigation的逻辑:</li>
<li><code>initialRouteName</code>-初始化route的routeName</li>
<li><code>order</code>-定义drawer item顺序的routeName数组</li>
<li><code>path</code>-提供一个routeName到path config的映射,重写掉routeConfigs中的path配置</li>
<li><code>backBehavior</code>-back按钮一定要返回到初始化的route吗？如果是的话,设置到<code>initialRoute</code>,否则就用<code>none</code>.默认到<code>initialRoute</code>的行为.<h2 id="提供定制化的contentComponent"><a href="#提供定制化的contentComponent" class="headerlink" title="提供定制化的contentComponent"></a>提供定制化的<em>contentComponent</em></h2>可以使用<code>react-navigation</code>重写默认的组件.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> CustomDrawerContentComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;style.container&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">DrawerView.Items</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container : &#123;</div><div class="line">    flex : 1,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>DrawerView.Item</code>的<code>contentOptions</code>配置</p>
<ul>
<li><code>activeTintColor</code>-激活的标签的label和icon的颜色</li>
<li><code>activeBackgroundColor</code>-激活的标签的背景颜色</li>
<li><code>inactiveTintColor</code>-未激活的标签的label和icon的颜色</li>
<li><code>inactiveBackgroundColor</code>-未激活的标签的背景颜色</li>
<li><code>style</code>-内容部分的样式对象</li>
</ul>
<p>示例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">contentOptions</span>: &#123;</div><div class="line">  <span class="attribute">activeTintColor</span>: <span class="string">'#e91e63'</span>,</div><div class="line">  style: &#123;</div><div class="line">    marginVertical: <span class="number">0</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项-1"><a href="#Screen导航的选项-1" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在组件中定义静态的<code>navigationOptions</code>.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; state &#125;) =&gt; `$&#123;state.params.name&#125;<span class="symbol">'s</span> <span class="type">Profile</span>!`,</div><div class="line"></div><div class="line">   drawer: &#123;</div><div class="line">     icon: (</div><div class="line">       &lt;<span class="type">Image</span> src=&#123;require('./my-icon.png')&#125; /&gt;</div><div class="line">     ),</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>DrawerNavigation</code> <code>navigationOption</code>配置项</p>
<ul>
<li><code>title</code>-scene的标题</li>
<li><code>drawer</code>-drawer的配置对象<ul>
<li><code>label</code>-字符串,React组件或者函数被设定<code>{fcoused:boolean,tinColor:string}</code>返回一个React组件,显示在drawer的边栏上.当label定义为undefined时,scene的``title被使用.</li>
<li><code>icon</code>-React组件或者函数被设定为<code>{fcoused:boolean,tintColor:string}</code>返回一个React元素,显示在drawer的边栏上.</li>
</ul>
</li>
</ul>
<h2 id="Navigator-的Props"><a href="#Navigator-的Props" class="headerlink" title="Navigator 的Props"></a>Navigator 的Props</h2><p>由<code>DrawerNavigator(...)</code>创建的navigator组件接受下面的props:</p>
<ul>
<li><code>screenProps</code>-向下传递额外的options到子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> DrawerNav = DrawerNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;DrawerNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Prop"><a href="#Screen-Navigation-Prop" class="headerlink" title="Screen Navigation Prop"></a>Screen Navigation Prop</h1><p>app中的每个screen都接收navigation prop 包含下面的内容:</p>
<ul>
<li><code>navigate</code>-(helper)链接的其他的screens</li>
<li><code>state</code>-screen的当前state和routes</li>
<li><code>setParam</code>-(helper)改变route的参数</li>
<li><code>goBack</code>-(helper)关闭激活的screen并且返回</li>
<li><code>dispatch</code>-发送一个action到router</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigators&quot;&gt;&lt;a href=&quot;#Navigators&quot; class=&quot;headerlink&quot; title=&quot;Navigators&quot;&gt;&lt;/a&gt;Navigators&lt;/h1&gt;&lt;p&gt;Navigators允许你定义你的导航结构.Navigators也可以渲染普
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-native" scheme="http://yoursite.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(2)</title>
    <link href="http://yoursite.com/2017/03/28/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-2/"/>
    <id>http://yoursite.com/2017/03/28/翻译-React-navigation导航系统-2/</id>
    <published>2017-03-28T00:25:36.000Z</published>
    <updated>2017-03-27T23:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二部分</p>
<h1 id="巢式导航"><a href="#巢式导航" class="headerlink" title="巢式导航"></a>巢式导航</h1><p>在移动应用中组合各种形式的导航是非常普遍的.React Navigation中的router和navigators是组合式的,如此以来可以允许我们定义非常复杂的导航系统.</p>
<h2 id="Tab-Navigator的介绍"><a href="#Tab-Navigator的介绍" class="headerlink" title="Tab Navigator的介绍"></a>Tab Navigator的介绍</h2><p> 我们在<code>App.js</code>中创建<code>TabNavigator</code>：<br>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">RecentChatsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">List</span> of recent chats&lt;/<span class="type">Text</span>&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllContactsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">List</span> of all contacts&lt;/<span class="type">Text</span>&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const <span class="type">MainScreenNavigator</span> = <span class="type">TabNavigator</span>(&#123;</div><div class="line">  <span class="type">Recent</span>: &#123; screen: <span class="type">RecentChatsScreen</span> &#125;,</div><div class="line">  <span class="type">All</span>: &#123; screen: <span class="type">AllContactsScreen</span> &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p> 如果<code>MainScreenNavigation</code>作为顶层的导航组件来渲染,看起来是这个样子的:<br> <img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe26v8brpug307i0dcjrv.gif" alt=""> </p>
<h2 id="在屏幕中构造一个巢式导航器"><a href="#在屏幕中构造一个巢式导航器" class="headerlink" title="在屏幕中构造一个巢式导航器"></a>在屏幕中构造一个巢式导航器</h2><p>我们想让这些tabs在app的第一屏显示,但是堆栈中的新的screen会覆盖tabs.<br>在前一步骤设置的<code>StackNavigator</code>中添加tabs作为顶级导航<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; <span class="keyword">screen: </span>MainScreenNavigator &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; <span class="keyword">screen: </span>ChatScreen &#125;,</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>因为<code>MainScreenNavigator</code>作为screen,可以传递<code>navigationOtions</code>参数:<br><figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> MainScreenNavigator.navigationOptions = &#123;</div><div class="line">  <span class="keyword">title</span>: <span class="string">'My Chats'</span>,</div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>在每一个tabs中添加链接到chat的按钮:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> &lt;Button</div><div class="line">  onPress=&#123;() =&gt; this<span class="selector-class">.props</span><span class="selector-class">.navigation</span><span class="selector-class">.navigate</span>(<span class="string">'Chat'</span>, &#123; user: <span class="string">'Lucy'</span> &#125;)&#125;</div><div class="line">  title=<span class="string">"Chat with Lucy"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>现在我们在每个导航器彼此之间做了配置,可以在导航界面之间切换.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fe2750jl3og307i0dc0x4.gif" alt=""></p>
<h1 id="配置头部"><a href="#配置头部" class="headerlink" title="配置头部"></a>配置头部</h1><p>在前面的例子中,我们用StactNavigator创建了几个screen.<br>当我们导航到chat screen,我们通过navigate 函数传递特定的参数到新的导航界面.例如,我们想给chat screen提供一个人名:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'Chat'</span>, &#123; <span class="string">user:</span>  <span class="string">'Lucy'</span> &#125;);</div></pre></td></tr></table></figure></p>
<p><code>user</code>参数可以在chat screen中获取到:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; params &#125; = <span class="keyword">this</span>.props.navigation.state;</div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">Chat</span> <span class="keyword">with</span> &#123;params.user&#125;&lt;/<span class="type">Text</span>&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="设定头部标题"><a href="#设定头部标题" class="headerlink" title="设定头部标题"></a>设定头部标题</h2><p>接着来,可以在screen 参数中配置头部的标题<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    <span class="comment">// // Title may be a simple string:</span></div><div class="line">    <span class="comment">// title: 'Hello',</span></div><div class="line">     </div><div class="line">    <span class="comment">// Or the title string may be a function of the </span></div><div class="line">    navigation prop:可以是prop的函数解析</div><div class="line">    title: (&#123; state &#125;) =&gt; `<span class="type">Chat</span> <span class="keyword">with</span> $&#123;state.params.user&#125;`</div><div class="line">  &#125;;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe27gzgg40j30h90uojra.jpg" alt=""></p>
<h2 id="添加右侧的按钮"><a href="#添加右侧的按钮" class="headerlink" title="添加右侧的按钮"></a>添加右侧的按钮</h2><p>可以在option中添加定制的右侧按钮<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = &#123;</div><div class="line">  <span class="selector-tag">header</span>: &#123;</div><div class="line">    <span class="attribute">right</span>: &lt;Button title=<span class="string">"Info"</span> /&gt;,</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe27iwdrcmj30ha0uowee.jpg" alt=""></p>
<p>和<code>title</code>一样,<code>header</code>option可以定义为prop的一个函数.让我们来基于导航参数渲染一个不同的按钮,设定为点击时调用<code>navigation.setParams</code>:</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">static navigationOptions = &#123;</div><div class="line">  title: (&#123; <span class="keyword">state</span> &#125;) =&gt; &#123;</div><div class="line">    if (<span class="keyword">state</span>.params.mode === 'info') &#123;</div><div class="line">      return `$&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;'s Contact Info`;</div><div class="line">    &#125;</div><div class="line">    return `Chat with $&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;`;</div><div class="line">  &#125;,</div><div class="line">  header: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; &#123;</div><div class="line">    // The navigation prop has functions like <span class="built_in">set</span>Params, goBack, and navigate.</div><div class="line">    let right = (</div><div class="line">      <span class="variable">&lt;Button</span></div><div class="line">        title=&#123;`$&#123;state.params.user&#125;'s info`&#125;</div><div class="line">        onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123; mode: 'info' &#125;)&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">    if (<span class="keyword">state</span>.params.mode === 'info') &#123;</div><div class="line">      right = (</div><div class="line">        <span class="variable">&lt;Button</span></div><div class="line">          title="Done"</div><div class="line">          onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123; mode: '<span class="keyword">none</span>' &#125;)&#125;</div><div class="line">        /&gt;        </div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">    return &#123; right &#125;;</div><div class="line">  &#125;,</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>现在头部可以和screen的路由state进行交互了.<br><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe27os9kgrg307g0dc752.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二部分&lt;/p&gt;
&lt;h1 id=&quot;巢式导航&quot;&gt;&lt;a href=&quot;#巢式导航&quot; class=&quot;headerlink&quot; title=&quot;巢式导航&quot;&gt;&lt;/a&gt;巢式导航&lt;/h1&gt;&lt;p&gt;在移动应用中组合各种形式的导航是非常普遍的.React Navigation中的router和nav
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb React/JSX 编码规范</title>
    <link href="http://yoursite.com/2017/03/28/Airbnb-React-JSX-%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/03/28/Airbnb-React-JSX-编码规范/</id>
    <published>2017-03-28T00:13:55.000Z</published>
    <updated>2017-03-27T16:15:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Airbnb-React-JSX-编码规范"><a href="#Airbnb-React-JSX-编码规范" class="headerlink" title="Airbnb React/JSX 编码规范"></a>Airbnb React/JSX 编码规范</h1><p><em>算是最合理的React/JSX编码规范之一了</em></p>
<h2 id="内容目录"><a href="#内容目录" class="headerlink" title="内容目录"></a>内容目录</h2><ol>
<li><a href="#basic-rules-基本规范">基本规范</a></li>
<li><a href="#创建模块">Class vs React.createClass vs stateless</a></li>
<li><a href="#mixins">Mixins</a></li>
<li><a href="#naming-命名">命名</a></li>
<li><a href="#declaration-声明模块">声明模块</a></li>
<li><a href="#alignment-代码对齐">代码对齐</a></li>
<li><a href="#quotes-单引号还是双引号">单引号还是双引号</a></li>
<li><a href="#spacing-空格">空格</a></li>
<li><a href="#props-属性">属性</a></li>
<li><a href="#refs">Refs引用</a></li>
<li><a href="#parentheses-括号">括号</a></li>
<li><a href="#tags-标签">标签</a></li>
<li><a href="#methods-函数">函数/方法</a></li>
<li><a href="#ordering-react-模块生命周期">模块生命周期</a></li>
<li><a href="#ismounted">isMounted</a></li>
</ol>
<h2 id="Basic-Rules-基本规范"><a href="#Basic-Rules-基本规范" class="headerlink" title="Basic Rules 基本规范"></a>Basic Rules 基本规范</h2><ul>
<li>每个文件只写一个模块.<ul>
<li>但是多个<a href="https://facebook.github.io/react/docs/reusable-components.html#stateless-functions" target="_blank" rel="external">无状态模块</a>可以放在单个文件中. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless" target="_blank" rel="external"><code>react/no-multi-comp</code></a>.</li>
</ul>
</li>
<li>推荐使用JSX语法.</li>
<li>不要使用 <code>React.createElement</code>，除非从一个非JSX的文件中初始化你的app.</li>
</ul>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>   Class vs React.createClass vs stateless  </p>
<ul>
<li><p>如果你的模块有内部状态或者是<code>refs</code>, 推荐使用 <code>class extends React.Component</code> 而不是 <code>React.createClass</code>.<br>eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md" target="_blank" rel="external"><code>react/prefer-es6-class</code></a> <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md" target="_blank" rel="external"><code>react/prefer-stateless-function</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> Listing = React.createClass(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你的模块没有状态或是没有引用<code>refs</code>， 推荐使用普通函数（非箭头函数）而不是类:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listing</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad (relying on function name inference is discouraged)</span></div><div class="line"><span class="keyword">const</span> Listing = <span class="function">(<span class="params">&#123; hello &#125;</span>) =&gt;</span> (</div><div class="line">  &lt;div&gt;&#123;hello&#125;&lt;/div&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listing</span>(<span class="params">&#123; hello &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h2><ul>
<li><p><a href="https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="external">不要使用 mixins</a>.</p>
<blockquote>
<p>为什么? Mixins 会增加隐式的依赖，导致命名冲突，并且会以雪球式增加复杂度。在大多数情况下Mixins可以被更好的方法替代，如：组件化，高阶组件，工具模块等。</p>
</blockquote>
</li>
</ul>
<h2 id="Naming-命名"><a href="#Naming-命名" class="headerlink" title="Naming 命名"></a>Naming 命名</h2><ul>
<li><strong>扩展名</strong>: React模块使用 <code>.jsx</code> 扩展名.</li>
<li><strong>文件名</strong>: 文件名使用帕斯卡命名. 如, <code>ReservationCard.jsx</code>.</li>
<li><p><strong>引用命名</strong>: React模块名使用帕斯卡命名，实例使用骆驼式命名. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md" target="_blank" rel="external"><code>react/jsx-pascal-case</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> reservationCard <span class="keyword">from</span> <span class="string">'./ReservationCard'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> ReservationCard <span class="keyword">from</span> <span class="string">'./ReservationCard'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> ReservationItem = &lt;ReservationCard /&gt;;</div><div class="line"></div><div class="line">// good</div><div class="line">const reservationItem = &lt;ReservationCard /&gt;;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>模块命名</strong>: 模块使用当前文件名一样的名称. 比如 <code>ReservationCard.jsx</code> 应该包含名为 <code>ReservationCard</code>的模块. 但是，如果整个文件夹是一个模块，使用 <code>index.js</code>作为入口文件，然后直接使用 <code>index.js</code> 或者文件夹名作为模块的名称:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer/Footer'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer/index'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> Footer <span class="keyword">from</span> <span class="string">'./Footer'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>高阶模块命名</strong>: 对于生成一个新的模块，其中的模块名 <code>displayName</code> 应该为高阶模块名和传入模块名的组合. 例如, 高阶模块 <code>withFoo()</code>, 当传入一个 <code>Bar</code> 模块的时候， 生成的模块名 <code>displayName</code> 应该为 <code>withFoo(Bar)</code>.</p>
<blockquote>
<p>为什么？一个模块的 <code>displayName</code> 可能会在开发者工具或者错误信息中使用到，因此有一个能清楚的表达这层关系的值能帮助我们更好的理解模块发生了什么，更好的Debug.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">withFoo</span>(<span class="params">WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">WithFoo</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">export default function withFoo(WrappedComponent) &#123;</div><div class="line">  function WithFoo(props) &#123;</div><div class="line">    return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  const wrappedComponentName = WrappedComponent.displayName</div><div class="line">    || WrappedComponent.name</div><div class="line">    || 'Component';</div><div class="line"></div><div class="line">  WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`;</div><div class="line">  return WithFoo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>属性命名</strong>: 避免使用DOM相关的属性来用作其他的用途。</p>
<blockquote>
<p>为什么？对于<code>style</code> 和 <code>className</code>这样的属性名，我们都会默认它们代表一些特殊的含义，如元素的样式，CSS class的名称。在你的应用中使用这些属性来表示其他的含义会使你的代码更难阅读，更难维护，并且可能会引起bug。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;MyComponent style=<span class="string">"fancy"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;MyComponent variant=<span class="string">"fancy"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Declaration-声明模块"><a href="#Declaration-声明模块" class="headerlink" title="Declaration 声明模块"></a>Declaration 声明模块</h2><ul>
<li><p>不要使用 <code>displayName</code> 来命名React模块，而是使用引用来命名模块， 如 class 名称.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.createClass(&#123;</div><div class="line">  <span class="attr">displayName</span>: <span class="string">'ReservationCard'</span>,</div><div class="line">  <span class="comment">// stuff goes here</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ReservationCard</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Alignment-代码对齐"><a href="#Alignment-代码对齐" class="headerlink" title="Alignment 代码对齐"></a>Alignment 代码对齐</h2><ul>
<li><p>遵循以下的JSX语法缩进/格式. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md" target="_blank" rel="external"><code>react/jsx-closing-bracket-location</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo superLongParam=<span class="string">"bar"</span></div><div class="line">     anotherSuperLongParam=<span class="string">"baz"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good, 有多行属性的话, 新建一行关闭标签</span></div><div class="line">&lt;Foo</div><div class="line">  superLongParam=<span class="string">"bar"</span></div><div class="line">  anotherSuperLongParam=<span class="string">"baz"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// 若能在一行中显示, 直接写成一行</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// 子元素按照常规方式缩进</span></div><div class="line">&lt;Foo</div><div class="line">  superLongParam=<span class="string">"bar"</span></div><div class="line">  anotherSuperLongParam=<span class="string">"baz"</span></div><div class="line">&gt;</div><div class="line">  &lt;Quux /&gt;</div><div class="line">&lt;/Foo&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Quotes-单引号还是双引号"><a href="#Quotes-单引号还是双引号" class="headerlink" title="Quotes 单引号还是双引号"></a>Quotes 单引号还是双引号</h2><ul>
<li><p>对于JSX属性值总是使用双引号(<code>&quot;</code>), 其他均使用单引号(<code>&#39;</code>). eslint: <a href="http://eslint.org/docs/rules/jsx-quotes" target="_blank" rel="external"><code>jsx-quotes</code></a></p>
<blockquote>
<p>为什么? HTML属性也是用双引号, 因此JSX的属性也遵循此约定.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo bar=<span class="string">'bar'</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo style=&#123;&#123; <span class="attr">left</span>: <span class="string">"20px"</span> &#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo style=&#123;&#123; <span class="attr">left</span>: <span class="string">'20px'</span> &#125;&#125; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Spacing-空格"><a href="#Spacing-空格" class="headerlink" title="Spacing 空格"></a>Spacing 空格</h2><ul>
<li><p>总是在自动关闭的标签前加一个空格，正常情况下也不需要换行. eslint: <a href="http://eslint.org/docs/rules/no-multi-spaces" target="_blank" rel="external"><code>no-multi-spaces</code></a>, <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-space-before-closing.md" target="_blank" rel="external"><code>react/jsx-space-before-closing</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo/&gt;</div><div class="line"></div><div class="line"><span class="comment">// very bad</span></div><div class="line">&lt;Foo                 /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line"> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在JSX <code>{}</code> 引用括号里两边加空格. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md" target="_blank" rel="external"><code>react/jsx-curly-spacing</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo bar=&#123; baz &#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo bar=&#123;baz&#125; /&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Props-属性"><a href="#Props-属性" class="headerlink" title="Props 属性"></a>Props 属性</h2><ul>
<li><p>JSX属性名使用骆驼式风格<code>camelCase</code>.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  UserName=<span class="string">"hello"</span></div><div class="line">  phone_number=&#123;<span class="number">12345678</span>&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  userName=<span class="string">"hello"</span></div><div class="line">  phoneNumber=&#123;<span class="number">12345678</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果属性值为 <code>true</code>, 可以直接省略. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md" target="_blank" rel="external"><code>react/jsx-boolean-value</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  hidden=&#123;<span class="literal">true</span>&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  hidden</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;img&gt;</code> 标签总是添加 <code>alt</code> 属性. 如果图片以presentation(感觉是以类似PPT方式显示?)方式显示，<code>alt</code> 可为空, 或者<code>&lt;img&gt;</code> 要包含<code>role=&quot;presentation&quot;</code>. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-has-alt.md" target="_blank" rel="external"><code>jsx-a11y/img-has-alt</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Me waving hello"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">""</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> role=<span class="string">"presentation"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在 <code>alt</code> 值里使用如 “image”, “photo”, or “picture”包括图片含义这样的词， 中文也一样. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md" target="_blank" rel="external"><code>jsx-a11y/img-redundant-alt</code></a></p>
<blockquote>
<p>为什么? 屏幕助读器已经把 <code>img</code> 标签标注为图片了, 所以没有必要再在 <code>alt</code> 里说明了.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Picture of me waving hello"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;img src=<span class="string">"hello.jpg"</span> alt=<span class="string">"Me waving hello"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>使用有效正确的 aria <code>role</code>属性值 <a href="https://www.w3.org/TR/wai-aria/roles#role_definitions" target="_blank" rel="external">ARIA roles</a>. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md" target="_blank" rel="external"><code>jsx-a11y/aria-role</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad - not an ARIA role</span></div><div class="line">&lt;div role=<span class="string">"datepicker"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// bad - abstract ARIA role</span></div><div class="line">&lt;div role=<span class="string">"range"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;div role=<span class="string">"button"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>不要在标签上使用 <code>accessKey</code> 属性. eslint: <a href="https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md" target="_blank" rel="external"><code>jsx-a11y/no-access-key</code></a></p>
<blockquote>
<p>为什么? 屏幕助读器在键盘快捷键与键盘命令时造成的不统一性会导致阅读性更加复杂.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;div accessKey=<span class="string">"h"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;div /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>避免使用数组的index来作为属性<code>key</code>的值，推荐使用唯一ID. (<a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318" target="_blank" rel="external">为什么?</a>)</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&#123;todos.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></div><div class="line">  &lt;Todo</div><div class="line">    &#123;...todo&#125;</div><div class="line">    key=&#123;index&#125;</div><div class="line">  /&gt;</div><div class="line">)&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&#123;todos.map(<span class="function"><span class="params">todo</span> =&gt;</span> (</div><div class="line">  &lt;Todo</div><div class="line">    &#123;...todo&#125;</div><div class="line">    key=&#123;todo.id&#125;</div><div class="line">  /&gt;</div><div class="line">))&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>对于所有非必须的属性，总是手动去定义<code>defaultProps</code>属性.</p>
<blockquote>
<p>为什么? propTypes 可以作为模块的文档说明, 并且声明 defaultProps 的话意味着阅读代码的人不需要去假设一些默认值。更重要的是, 显示的声明默认属性可以让你的模块跳过属性类型的检查.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SFC</span>(<span class="params">&#123; foo, bar, children &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;</div><div class="line">&#125;</div><div class="line">SFC.propTypes = &#123;</div><div class="line">  <span class="attr">foo</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">bar</span>: PropTypes.string,</div><div class="line">  <span class="attr">children</span>: PropTypes.node,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SFC</span>(<span class="params">&#123; foo, bar &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&lt;/div&gt;;</div><div class="line">&#125;</div><div class="line">SFC.propTypes = &#123;</div><div class="line">  <span class="attr">foo</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">bar</span>: PropTypes.string,</div><div class="line">  <span class="attr">children</span>: PropTypes.node,</div><div class="line">&#125;;</div><div class="line">SFC.defaultProps = &#123;</div><div class="line">  <span class="attr">bar</span>: <span class="string">''</span>,</div><div class="line">  <span class="attr">children</span>: <span class="literal">null</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><ul>
<li><p>总是在Refs里使用回调函数. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md" target="_blank" rel="external"><code>react/no-string-refs</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  ref=<span class="string">"myRef"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  ref=&#123;(ref) =&gt; &#123; <span class="keyword">this</span>.myRef = ref; &#125;&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Parentheses-括号"><a href="#Parentheses-括号" class="headerlink" title="Parentheses 括号"></a>Parentheses 括号</h2><ul>
<li><p>将多行的JSX标签写在 <code>()</code>里. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md" target="_blank" rel="external"><code>react/jsx-wrap-multilines</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> &lt;MyComponent className="long body" foo="bar"&gt;</div><div class="line">           &lt;MyChild /&gt;</div><div class="line">         &lt;/MyComponent&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;MyComponent className="long body" foo="bar"&gt;</div><div class="line">      &lt;MyChild /&gt;</div><div class="line">    &lt;/MyComponent&gt;</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good, 单行可以不需要</span></div><div class="line">render() &#123;</div><div class="line">  <span class="keyword">const</span> body = &lt;div&gt;hello&lt;/div&gt;;</div><div class="line">  <span class="keyword">return</span> &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tags-标签"><a href="#Tags-标签" class="headerlink" title="Tags 标签"></a>Tags 标签</h2><ul>
<li><p>对于没有子元素的标签来说总是自己关闭标签. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md" target="_blank" rel="external"><code>react/self-closing-comp</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo className=<span class="string">"stuff"</span>&gt;&lt;/Foo&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo className=<span class="string">"stuff"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果模块有多行的属性， 关闭标签时新建一行. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md" target="_blank" rel="external"><code>react/jsx-closing-bracket-location</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">&lt;Foo</div><div class="line">  bar=<span class="string">"bar"</span></div><div class="line">  baz=<span class="string">"baz"</span> /&gt;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">&lt;Foo</div><div class="line">  bar=<span class="string">"bar"</span></div><div class="line">  baz=<span class="string">"baz"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Methods-函数"><a href="#Methods-函数" class="headerlink" title="Methods 函数"></a>Methods 函数</h2><ul>
<li><p>使用箭头函数来获取本地变量.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ItemList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;ul&gt;</div><div class="line">      &#123;props.items.map((item, index) =&gt; (</div><div class="line">        &lt;Item</div><div class="line">          key=&#123;item.key&#125;</div><div class="line">          onClick=&#123;() =&gt; doSomethingWith(item.name, index)&#125;</div><div class="line">        /&gt;</div><div class="line">      ))&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当在 <code>render()</code> 里使用事件处理方法时，提前在构造函数里把 <code>this</code> 绑定上去. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md" target="_blank" rel="external"><code>react/jsx-no-bind</code></a></p>
<blockquote>
<p>为什么? 在每次 <code>render</code> 过程中， 再调用 <code>bind</code> 都会新建一个新的函数，浪费资源.</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  onClickDiv() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;div onClick=&#123;this.onClickDiv.bind(this)&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">class extends React.Component &#123;</div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props);</div><div class="line"></div><div class="line">    this.onClickDiv = this.onClickDiv.bind(this);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  onClickDiv() &#123;</div><div class="line">    // do stuff</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return &lt;div onClick=&#123;this.onClickDiv&#125; /&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在React模块中，不要给所谓的私有函数添加 <code>_</code> 前缀，本质上它并不是私有的.</p>
<blockquote>
<p>为什么？<code>_</code> 下划线前缀在某些语言中通常被用来表示私有变量或者函数。但是不像其他的一些语言，在JS中没有原生支持所谓的私有变量，所有的变量函数都是共有的。尽管你的意图是使它私有化，在之前加上下划线并不会使这些变量私有化，并且所有的属性（包括有下划线前缀及没有前缀的）都应该被视为是共有的。了解更多详情请查看Issue <a href="https://github.com/airbnb/javascript/issues/1024" target="_blank" rel="external">#1024</a>, 和 <a href="https://github.com/airbnb/javascript/issues/490" target="_blank" rel="external">#490</a> 。</p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">React.createClass(&#123;</div><div class="line">  _onClickSubmit() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// other stuff</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  onClickSubmit() &#123;</div><div class="line">    <span class="comment">// do stuff</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// other stuff</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在 <code>render</code> 方法中总是确保 <code>return</code> 返回值. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md" target="_blank" rel="external"><code>react/require-render-return</code></a></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">render() &#123;</div><div class="line">  (&lt;div /&gt;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// good</div><div class="line">render() &#123;</div><div class="line">  return (&lt;div /&gt;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Ordering-React-模块生命周期"><a href="#Ordering-React-模块生命周期" class="headerlink" title="Ordering React 模块生命周期"></a>Ordering React 模块生命周期</h2><ul>
<li><code>class extends React.Component</code> 的生命周期函数:</li>
</ul>
<ol>
<li>可选的 <code>static</code> 方法</li>
<li><code>constructor</code> 构造函数</li>
<li><code>getChildContext</code> 获取子元素内容</li>
<li><code>componentWillMount</code> 模块渲染前</li>
<li><code>componentDidMount</code> 模块渲染后</li>
<li><code>componentWillReceiveProps</code> 模块将接受新的数据</li>
<li><code>shouldComponentUpdate</code> 判断模块需不需要重新渲染</li>
<li><code>componentWillUpdate</code> 上面的方法返回 <code>true</code>， 模块将重新渲染</li>
<li><code>componentDidUpdate</code> 模块渲染结束</li>
<li><code>componentWillUnmount</code> 模块将从DOM中清除, 做一些清理任务</li>
<li><em>点击回调或者事件处理器</em> 如 <code>onClickSubmit()</code> 或 <code>onChangeDescription()</code></li>
<li><em><code>render</code> 里的 getter 方法</em> 如 <code>getSelectReason()</code> 或 <code>getFooterContent()</code></li>
<li><em>可选的 render 方法</em> 如 <code>renderNavigation()</code> 或 <code>renderProfilePicture()</code></li>
<li><code>render</code> render() 方法</li>
</ol>
<ul>
<li><p>如何定义 <code>propTypes</code>, <code>defaultProps</code>, <code>contextTypes</code>, 等等其他属性…</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> propTypes = &#123;</div><div class="line">  <span class="attr">id</span>: PropTypes.number.isRequired,</div><div class="line">  <span class="attr">url</span>: PropTypes.string.isRequired,</div><div class="line">  <span class="attr">text</span>: PropTypes.string,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> defaultProps = &#123;</div><div class="line">  <span class="attr">text</span>: <span class="string">'Hello World'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> methodsAreOk() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> &lt;a href=&#123;this.props.url&#125; data-id=&#123;this.props.id&#125;&gt;&#123;this.props.text&#125;&lt;/a&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Link.propTypes = propTypes;</div><div class="line">Link.defaultProps = defaultProps;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Link;</div></pre></td></tr></table></figure>
</li>
<li><p><code>React.createClass</code> 的生命周期函数，与使用class稍有不同: eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md" target="_blank" rel="external"><code>react/sort-comp</code></a></p>
</li>
</ul>
<ol>
<li><code>displayName</code> 设定模块名称</li>
<li><code>propTypes</code> 设置属性的类型</li>
<li><code>contextTypes</code> 设置上下文类型</li>
<li><code>childContextTypes</code> 设置子元素上下文类型</li>
<li><code>mixins</code> 添加一些mixins</li>
<li><code>statics</code></li>
<li><code>defaultProps</code> 设置默认的属性值</li>
<li><code>getDefaultProps</code> 获取默认属性值</li>
<li><code>getInitialState</code> 或者初始状态</li>
<li><code>getChildContext</code></li>
<li><code>componentWillMount</code></li>
<li><code>componentDidMount</code></li>
<li><code>componentWillReceiveProps</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>componentWillUpdate</code></li>
<li><code>componentDidUpdate</code></li>
<li><code>componentWillUnmount</code></li>
<li><em>clickHandlers or eventHandlers</em> like <code>onClickSubmit()</code> or <code>onChangeDescription()</code></li>
<li><em>getter methods for <code>render</code></em> like <code>getSelectReason()</code> or <code>getFooterContent()</code></li>
<li><em>Optional render methods</em> like <code>renderNavigation()</code> or <code>renderProfilePicture()</code></li>
<li><code>render</code></li>
</ol>
<h2 id="isMounted"><a href="#isMounted" class="headerlink" title="isMounted"></a>isMounted</h2><ul>
<li><p>不要再使用 <code>isMounted</code>. eslint: <a href="https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md" target="_blank" rel="external"><code>react/no-is-mounted</code></a></p>
<blockquote>
<p>为什么? <a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html" target="_blank" rel="external"><code>isMounted</code> 反人类设计模式:()</a>, 在 ES6 classes 中无法使用， 官方将在未来的版本里删除此方法.</p>
</blockquote>
</li>
</ul>
<p><strong><a href="#内容目录">⬆ 回到顶部</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Airbnb-React-JSX-编码规范&quot;&gt;&lt;a href=&quot;#Airbnb-React-JSX-编码规范&quot; class=&quot;headerlink&quot; title=&quot;Airbnb React/JSX 编码规范&quot;&gt;&lt;/a&gt;Airbnb React/JSX 编码规范&lt;/
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation(1)</title>
    <link href="http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/"/>
    <id>http://yoursite.com/2017/03/28/New-React-navigation-system-github-3211/</id>
    <published>2017-03-27T20:26:48.000Z</published>
    <updated>2017-03-27T15:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.<br>教程可以参考<a href="https://hackernoon.com/getting-started-with-react-navigation-the-navigation-solution-for-react-native-ea3f4bd786a4#.n0pz5ev39" target="_blank" rel="external">这篇文章</a>,这个文章作者老兄和我一样很喜欢折腾.前面就参考了他的另一个导航教程,这次再来.</p>
<hr>
<p>本文是翻译的<a href="https://reactnavigation.org/docs/intro/" target="_blank" rel="external">官方文档</a>.打算翻译完<br>基本思路是有几个注册系统,如果要在app中使用导航,必须要把组件注册到对应的系统中.</p>
<h1 id="原文开始：你好！移动导航"><a href="#原文开始：你好！移动导航" class="headerlink" title="原文开始：你好！移动导航"></a>原文开始：你好！移动导航</h1><p>使用React Navigation来构建跨平台导航</p>
<h2 id="配置和安装"><a href="#配置和安装" class="headerlink" title="配置和安装"></a>配置和安装</h2><p>首先要配置React Native系统.接下来创建RN项目,添加<code>react-navigation</code></p>
</blockquote>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># Create a new React Native App</span></div><div class="line"> <span class="comment">#创建新RN APP</span></div><div class="line">react-native init SimpleApp</div><div class="line">cd SimpleApp</div><div class="line"></div><div class="line"><span class="comment"># Install the latest version of react-navigation from npm安装最新版本</span></div><div class="line">npm install --save react-navigation</div><div class="line"></div><div class="line"><span class="comment"># Run the new app运行，确保初始化正常</span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-android <span class="comment"># or:</span></span></div><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure>
<p> <img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe1ostu6xlj30ku112jrj.jpg" alt="初始化界面"></p>
<p>为了在Android和iOS之间共享代码,删除掉<code>index.ios.js</code>和<code>index.andorid.js</code>的实际代码,使用<code>import &#39;./App&#39;</code>来实现具体的代码</p>
<p>现在来创建‘App.js’</p>
<h2 id="Stack-Navigator介绍"><a href="#Stack-Navigator介绍" class="headerlink" title="Stack Navigator介绍"></a>Stack Navigator介绍</h2><p>为了想使用<code>stack</code> navigation的概念,我们会使用<code>StactkNavigator</code>.(译注：stack就是数据结构的堆栈技术,遵循后进先出的原理).每一个<code>被</code>到导航的screen(导航画面)被放在堆栈的栈顶,返回时候,会从栈顶弹出对应的组件.先看看一个screen的情况</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//其实这个代码没有实现App.js，export的模式,注意</span></div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  <span class="type">AppRegistry</span>,</div><div class="line">  <span class="type">Text</span>,</div><div class="line">&#125; from <span class="symbol">'react</span>-native';</div><div class="line"><span class="comment">//导入stack导航组件</span></div><div class="line"><span class="keyword">import</span> &#123; <span class="type">StackNavigator</span> &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',<span class="comment">//在导航中显示的标题内容</span></div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">//这里可以是导入的其他组件</span></div><div class="line">    <span class="keyword">return</span> &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Navigation</span>!&lt;/<span class="type">Text</span>&gt;;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//进行导航的注册</span></div><div class="line">const <span class="type">SimpleApp</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123; screen: <span class="type">HomeScreen</span> &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="type">AppRegistry</span>.registerComponent(<span class="symbol">'SimpleAp</span>p', () =&gt; <span class="type">SimpleApp</span>);</div></pre></td></tr></table></figure>
<p><code>title</code>是static<code>navigationOptions</code>里配置的标题内容,出现的界面看下面</p>
<p><img src="https://ww1.sinaimg.cn/large/006tNbRwly1fe1pa9cdbrj30yj1pd0t3.jpg" alt=""></p>
<h2 id="添加新的导航画面"><a href="#添加新的导航画面" class="headerlink" title="添加新的导航画面"></a>添加新的导航画面</h2><p>再添加一个<code>ChatScreen</code>画面</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ChatScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Chat</span> <span class="keyword">with</span> <span class="type">Lucy</span>&lt;/<span class="type">Text</span>&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>HomeScreen</code>中添加一个button组件,使用<code>routeName</code> <code>Chat</code>关联到<code>ChatScreen</code>.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t')&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们正在使用从<code>screen navigation prop</code>获得的导航函数转向<code>ChatScreen</code>.但是这需要在<code>StackNavigator</code>中注册.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; screen: ChatScreen &#125;,<span class="comment">//新添加的screen</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在可以导航到ChatScreen,也可以返回了.<br><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe1pjjrpn4g307i0dc75l.gif" alt=""></p>
<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>在<code>ChatScreen</code>中硬编码标题不是好办法,可以在导航的时候传递参数.首先编辑一下<code>HomeScreen</code>组件,传递<code>name</code>参数到路由中.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Welcom</span>e',</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; navigate &#125; = <span class="keyword">this</span>.props.navigation;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">View</span>&gt;</div><div class="line">        &lt;<span class="type">Text</span>&gt;<span class="type">Hello</span>, <span class="type">Chat</span> <span class="type">App</span>!&lt;/<span class="type">Text</span>&gt;</div><div class="line">        &lt;<span class="type">Button</span></div><div class="line">          onPress=&#123;() =&gt; navigate(<span class="symbol">'Cha</span>t', &#123; user: <span class="symbol">'Luc</span>y' &#125;)&#125;</div><div class="line">          title=<span class="string">"Chat with Lucy"</span></div><div class="line">        /&gt;</div><div class="line">      &lt;/<span class="type">View</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以编辑<code>ChatScreen</code>组件显示的<code>name</code>参数,这个参数通过route来传递.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> class ChatScreen extends React.Component &#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    // Nav options can be defined as a function of the navigation prop:</div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `Chat with $&#123;<span class="keyword">state</span>.params.<span class="keyword">user</span>&#125;`,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    // The screen's current route is passed <span class="keyword">in</span> <span class="keyword">to</span> `props.navigation.<span class="keyword">state</span>`:</div><div class="line">    const &#123; params &#125; = this.props.navigation.<span class="keyword">state</span>;</div><div class="line">    return (</div><div class="line">      <span class="variable">&lt;View&gt;</span></div><div class="line">        <span class="variable">&lt;Text&gt;</span>Chat with &#123;params.<span class="keyword">user</span>&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在当你导航到Chat screen的时候,可以看到名字了.在<code>HomeScreen</code>中改变<code>name</code>,看看变化.</p>
<p><img src="https://ww2.sinaimg.cn/large/006tNbRwly1fe1t489r4gg307i0dc75l.gif" alt=""></p>
<p>第一部分就这些.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个React-native的导航系统可能已经基本官方标配系统了.两个月时间已经积累了3000多的star.&lt;br&gt;教程可以参考&lt;a href=&quot;https://hackernoon.com/getting-started-with-react-n
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux- actions Readme</title>
    <link href="http://yoursite.com/2017/03/27/Redux-actions-Readme/"/>
    <id>http://yoursite.com/2017/03/27/Redux-actions-Readme/</id>
    <published>2017-03-27T10:41:40.000Z</published>
    <updated>2017-03-27T02:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-actions"><a href="#redux-actions" class="headerlink" title="redux-actions"></a>redux-actions</h1><p><a href="https://travis-ci.org/acdlite/redux-actions" target="_blank" rel="external"><img src="https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square" alt="build status"></a></p>
<p><a href="https://nodei.co/npm/redux-actions/" target="_blank" rel="external"><img src="https://nodei.co/npm/redux-actions.png?downloads=true" alt="NPM"></a></p>
<p><a href="https://github.com/acdlite/flux-standard-action" target="_blank" rel="external">Flux Standard Action</a> utilities for Redux.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save redux-actions</div></pre></td></tr></table></figure>
<p>The <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a> package provides a <a href="http://webpack.github.io/docs/commonjs.html" target="_blank" rel="external">CommonJS</a> build for use in Node.js, and with bundlers like <a href="http://webpack.github.io/" target="_blank" rel="external">Webpack</a> and <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a>. It also includes an <a href="http://jsmodules.io/" target="_blank" rel="external">ES modules</a> build that works well with <a href="http://rollupjs.org/" target="_blank" rel="external">Rollup</a> and <a href="https://webpack.js.org" target="_blank" rel="external">Webpack2</a>‘s tree-shaking.</p>
<p>If you don’t use <a href="https://www.npmjs.com" target="_blank" rel="external">npm</a>, you may grab the latest <a href="https://unpkg.com/redux-actions@latest/dist" target="_blank" rel="external">UMD</a> build from <a href="https://unpkg.com" target="_blank" rel="external">unpkg</a> (either a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.js" target="_blank" rel="external">development</a> or a <a href="https://unpkg.com/redux-actions@latest/dist/redux-actions.min.js" target="_blank" rel="external">production</a> build). The UMD build exports a global called <code>window.ReduxActions</code> if you add it to your page via a <code>&lt;script&gt;</code> tag. We <em>don’t</em> recommend UMD builds for any serious application, as most of the libraries complementary to Redux are only available on <a href="https://www.npmjs.com/search?q=redux" target="_blank" rel="external">npm</a>.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="createAction-type-payloadCreator-Identity-metaCreator"><a href="#createAction-type-payloadCreator-Identity-metaCreator" class="headerlink" title="createAction(type, payloadCreator = Identity, ?metaCreator)"></a><code>createAction(type, payloadCreator = Identity, ?metaCreator)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps an action creator so that its return value is the payload of a Flux Standard Action.</p>
<p><code>payloadCreator</code> must be a function, <code>undefined</code>, or <code>null</code>. If <code>payloadCreator</code> is <code>undefined</code> or <code>null</code>, the identity function is used.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> increment = createAction(<span class="string">'INCREMENT'</span>, amount =&gt; amount);</div><div class="line"><span class="comment">// same as</span></div><div class="line">increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line">expect(increment(<span class="number">42</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">42</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If the payload is an instance of an <a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="external">Error<br>object</a>,<br>redux-actions will automatically set <figure class="highlight plain"><figcaption><span>to true.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Example:</div><div class="line"></div><div class="line">```js</div><div class="line">const increment = createAction(&apos;INCREMENT&apos;);</div><div class="line"></div><div class="line">const error = new TypeError(&apos;not a number&apos;);</div><div class="line">expect(increment(error)).to.deep.equal(&#123;</div><div class="line">  type: &apos;INCREMENT&apos;,</div><div class="line">  payload: error,</div><div class="line">  error: true</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>createAction</code> also returns its <code>type</code> when used as type in <code>handleAction</code> or <code>handleActions</code>.</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> increment = createAction(<span class="string">'INCREMENT'</span>);</div><div class="line"></div><div class="line"><span class="comment">// As parameter in handleAction:</span></div><div class="line">handleAction(increment, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// As object key in handleActions:</span></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [increment]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<p><strong>NOTE:</strong> The more correct name for this function is probably <code>createActionCreator()</code>, but that seems a bit redundant.</p>
<p>Use the identity form to create one-off actions:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">createAction(<span class="string">'ADD_TODO'</span>)(<span class="string">'Use Redux'</span>);</div></pre></td></tr></table></figure>
<p><code>metaCreator</code> is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If <code>metaCreator</code> is undefined or not a function, the meta field is omitted.</p>
<h3 id="createActions-actionMap-identityActions"><a href="#createActions-actionMap-identityActions" class="headerlink" title="createActions(?actionMap, ?...identityActions)"></a><code>createActions(?actionMap, ?...identityActions)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Returns an object mapping action types to action creators. The keys of this object are camel-cased from the keys in <code>actionMap</code> and the string literals of <code>identityActions</code>; the values are the action creators.</p>
<p><code>actionMap</code> is an optional object and a recursive data structure, with action types as keys, and whose values <strong>must</strong> be either</p>
<ul>
<li>a function, which is the payload creator for that action</li>
<li>an array with <code>payload</code> and <code>meta</code> functions in that order, as in <a href="#createactiontype-payloadcreator--identity-metacreator"><code>createAction</code></a><ul>
<li><code>meta</code> is <strong>required</strong> in this case (otherwise use the function form above)</li>
</ul>
</li>
<li>an <code>actionMap</code></li>
</ul>
<p><code>identityActions</code> is an optional list of positional string arguments that are action type strings; these action types will use the identity payload creator.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; actionOne, actionTwo, actionThree &#125; = createActions(&#123;</div><div class="line">  <span class="comment">// function form; payload creator defined inline</span></div><div class="line">  ACTION_ONE: <span class="function">(<span class="params">key, value</span>) =&gt;</span> (&#123; [key]: value &#125;),</div><div class="line"></div><div class="line">  <span class="comment">// array form</span></div><div class="line">  ACTION_TWO: [</div><div class="line">    <span class="function">(<span class="params">first</span>) =&gt;</span> [first],             <span class="comment">// payload</span></div><div class="line">    (first, second) =&gt; (&#123; second &#125;) <span class="comment">// meta</span></div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">// trailing action type string form; payload creator is the identity</span></div><div class="line">&#125;, <span class="string">'ACTION_THREE'</span>);</div><div class="line"></div><div class="line">expect(actionOne(<span class="string">'key'</span>, <span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_ONE'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">key</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionTwo(<span class="string">'first'</span>, <span class="string">'second'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_TWO'</span>,</div><div class="line">  <span class="attr">payload</span>: [<span class="string">'first'</span>],</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">second</span>: <span class="string">'second'</span> &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionThree(<span class="number">3</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'ACTION_THREE'</span>,</div><div class="line">  <span class="attr">payload</span>: <span class="number">3</span>,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If <code>actionMap</code> has a recursive structure, its leaves are used as payload and meta creators, and the action type for each leaf is the combined path to that leaf:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> actionCreators = createActions(&#123;</div><div class="line">  <span class="attr">APP</span>: &#123;</div><div class="line">    <span class="attr">COUNTER</span>: &#123;</div><div class="line">      <span class="attr">INCREMENT</span>: [</div><div class="line">        <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">        amount =&gt; (&#123; <span class="attr">key</span>: <span class="string">'value'</span>, amount &#125;)</div><div class="line">      ],</div><div class="line">      <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">NOTIFY</span>: [</div><div class="line">      <span class="function">(<span class="params">username, message</span>) =&gt;</span> (&#123; <span class="attr">message</span>: <span class="string">`<span class="subst">$&#123;username&#125;</span>: <span class="subst">$&#123;message&#125;</span>`</span> &#125;),</div><div class="line">      (username, message) =&gt; (&#123; username, message &#125;)</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">expect(actionCreators.app.counter.increment(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/INCREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">1</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">key</span>: <span class="string">'value'</span>, <span class="attr">amount</span>: <span class="number">1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.counter.decrement(<span class="number">1</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/COUNTER/DECREMENT'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">amount</span>: <span class="number">-1</span> &#125;</div><div class="line">&#125;);</div><div class="line">expect(actionCreators.app.notify(<span class="string">'yangmillstheory'</span>, <span class="string">'Hello World'</span>)).to.deep.equal(&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'APP/NOTIFY'</span>,</div><div class="line">  <span class="attr">payload</span>: &#123; <span class="attr">message</span>: <span class="string">'yangmillstheory: Hello World'</span> &#125;,</div><div class="line">  <span class="attr">meta</span>: &#123; <span class="attr">username</span>: <span class="string">'yangmillstheory'</span>, <span class="attr">message</span>: <span class="string">'Hello World'</span> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>When using this form, you can pass an object with key <code>namespace</code> as the last positional argument, instead of the default <code>/</code>.</p>
<h3 id="handleAction-type-reducer-reducerMap-Identity-defaultState"><a href="#handleAction-type-reducer-reducerMap-Identity-defaultState" class="headerlink" title="handleAction(type, reducer | reducerMap = Identity, defaultState)"></a><code>handleAction(type, reducer | reducerMap = Identity, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Wraps a reducer so that it only handles Flux Standard Actions of a certain type.</p>
<p>If a <code>reducer</code> function is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.</p>
<p>Otherwise, you can specify separate reducers for <code>next()</code> and <code>throw()</code> using the <code>reducerMap</code> form. This API is inspired by the ES6 generator interface.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleAction(<span class="string">'FETCH_DATA'</span>, &#123;</div><div class="line">  next(state, action) &#123;...&#125;,</div><div class="line">  <span class="keyword">throw</span>(state, action) &#123;...&#125;</div><div class="line">&#125;, defaultState);</div></pre></td></tr></table></figure>
<p>If either <code>next()</code> or <code>throw()</code> are <code>undefined</code> or <code>null</code>, then the identity function is used for that reducer.</p>
<p>If the reducer argument (<code>reducer | reducerMap</code>) is <code>undefined</code>, then the identity function is used.</p>
<p>The third parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<h3 id="handleActions-reducerMap-defaultState"><a href="#handleActions-reducerMap-defaultState" class="headerlink" title="handleActions(reducerMap, defaultState)"></a><code>handleActions(reducerMap, defaultState)</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; handleActions &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</div></pre></td></tr></table></figure>
<p>Creates multiple reducers using <code>handleAction()</code> and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are passed as the first parameter to <code>handleAction()</code> (the action type), and the values are passed as the second parameter (either a reducer or reducer map). The map must not be empty.</p>
<p>The second parameter <code>defaultState</code> is required, and is used when <code>undefined</code> is passed to the reducer.</p>
<p>(Internally, <code>handleActions()</code> works by applying multiple reducers in sequence using <a href="https://github.com/acdlite/reduce-reducers" target="_blank" rel="external">reduce-reducers</a>.)</p>
<p>Example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter + action.payload</div><div class="line">  &#125;),</div><div class="line"></div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function">(<span class="params">state, action</span>) =&gt;</span> (&#123;</div><div class="line">    <span class="attr">counter</span>: state.counter - action.payload</div><div class="line">  &#125;)</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="combineActions-types"><a href="#combineActions-types" class="headerlink" title="combineActions(...types)"></a><code>combineActions(...types)</code></h3><p>Combine any number of action types or action creators. <code>types</code> is a list of positional arguments which can be action type strings, symbols, or action creators.</p>
<p>This allows you to reduce multiple distinct actions with the same reducer.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;),</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleAction(combineActions(increment, decrement), &#123;</div><div class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">state, &#123; payload: &#123; amount &#125; &#125;</span>) =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;),</div><div class="line">  <span class="attr">throw</span>: <span class="function"><span class="params">state</span> =&gt;</span> (&#123; ...state, <span class="attr">counter</span>: <span class="number">0</span> &#125;),</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;)</div><div class="line"></div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">11</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="number">1</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">9</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div><div class="line">expect(reducer(<span class="literal">undefined</span>, decrement(<span class="keyword">new</span> <span class="built_in">Error</span>)).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;)</div></pre></td></tr></table></figure>
<p>Here’s an example using <code>handleActions</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; increment, decrement &#125; = createActions(&#123;</div><div class="line">  <span class="attr">INCREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; amount &#125;),</div><div class="line">  <span class="attr">DECREMENT</span>: <span class="function"><span class="params">amount</span> =&gt;</span> (&#123; <span class="attr">amount</span>: -amount &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = handleActions(&#123;</div><div class="line">  [combineActions(increment, decrement)](state, &#123; <span class="attr">payload</span>: &#123; amount &#125; &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> &#123; ...state, <span class="attr">counter</span>: state.counter + amount &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;, &#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line"></div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">10</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, decrement(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;);</div><div class="line">expect(reducer(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;, &#123; <span class="attr">type</span>: <span class="string">'NOT_TYPE'</span>, <span class="attr">payload</span>: <span class="number">1000</span> &#125;)).to.equal(&#123; <span class="attr">counter</span>: <span class="number">5</span> &#125;);</div><div class="line">expect(reducer(<span class="literal">undefined</span>, increment(<span class="number">5</span>))).to.deep.equal(&#123; <span class="attr">counter</span>: <span class="number">15</span> &#125;);</div></pre></td></tr></table></figure>
<h2 id="Usage-with-middleware"><a href="#Usage-with-middleware" class="headerlink" title="Usage with middleware"></a>Usage with middleware</h2><p>redux-actions is handy all by itself, however, its real power comes when you combine it with middleware.</p>
<p>The identity form of <code>createAction</code> is a great way to create a single action creator that handles multiple payload types. For example, using <a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> and <a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> addTodo = createAction(<span class="string">'ADD_TODO'</span>);</div><div class="line"></div><div class="line"><span class="comment">// A single reducer...</span></div><div class="line">handleAction(<span class="string">'ADD_TODO'</span>, (state = &#123; <span class="attr">todos</span>: [] &#125;, action) =&gt; (&#123;</div><div class="line">  ...state,</div><div class="line">  <span class="attr">todos</span>: [...state.todos, action.payload]</div><div class="line">&#125;));</div><div class="line"></div><div class="line"><span class="comment">// ...that works with all of these forms:</span></div><div class="line"><span class="comment">// (Don't forget to use `bindActionCreators()` or equivalent.</span></div><div class="line"><span class="comment">// I've left that bit out)</span></div><div class="line">addTodo(<span class="string">'Use Redux'</span>)</div><div class="line">addTodo(<span class="built_in">Promise</span>.resolve(<span class="string">'Weep with joy'</span>));</div><div class="line">addTodo(Observable.of(</div><div class="line">  <span class="string">'Learn about middleware'</span>,</div><div class="line">  <span class="string">'Learn about higher-order stores'</span></div><div class="line">)).subscribe();</div></pre></td></tr></table></figure>
<h2 id="See-also"><a href="#See-also" class="headerlink" title="See also"></a>See also</h2><p>Use redux-actions in combination with FSA-compliant libraries.</p>
<ul>
<li><a href="https://github.com/acdlite/redux-promise" target="_blank" rel="external">redux-promise</a> - Promise middleware</li>
<li><a href="https://github.com/acdlite/redux-rx" target="_blank" rel="external">redux-rx</a> - Includes observable middleware.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redux-actions&quot;&gt;&lt;a href=&quot;#redux-actions&quot; class=&quot;headerlink&quot; title=&quot;redux-actions&quot;&gt;&lt;/a&gt;redux-actions&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://travis-ci
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>React-Native-Immutable</title>
    <link href="http://yoursite.com/2017/03/27/React-Native-Immutable/"/>
    <id>http://yoursite.com/2017/03/27/React-Native-Immutable/</id>
    <published>2017-03-27T00:15:12.000Z</published>
    <updated>2017-03-26T16:16:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="react-native-immutable"><a href="#react-native-immutable" class="headerlink" title="react-native-immutable"></a>react-native-immutable</h1><p><strong>using immutable.js library as store with react &amp;&amp; react-native</strong></p>
<p>More info of <a href="http://facebook.github.io/immutable-js/" target="_blank" rel="external">immutable.js</a></p>
<hr>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> react-<span class="keyword">native</span>-immutable <span class="comment">--save</span></div></pre></td></tr></table></figure>
<h2 id="Useage"><a href="#Useage" class="headerlink" title="Useage"></a>Useage</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">react-native project</div><div class="line">   <span class="string">|---index.ios.js</span></div><div class="line">   <span class="string">|---App</span></div><div class="line">         <span class="string">|---Actions</span></div><div class="line">         	   <span class="string">|--- mainAction.js</span></div><div class="line">         	   <span class="string">|--- userAction.js</span></div><div class="line">         	   <span class="string">|--- articleAction.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Stores</span></div><div class="line">         	   <span class="string">|--- mainStore.js</span></div><div class="line">         	   <span class="string">|--- userStore.js</span></div><div class="line">         	   <span class="string">|--- articleStore.js</span></div><div class="line">         	   <span class="string">|--- ...</span></div><div class="line">         <span class="string">|---Webapi</span></div></pre></td></tr></table></figure>
<h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; mixins &#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> StoreMixin = mixins.StoreMixin;</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'./App/Stores/mainStore'</span>);</div><div class="line"><span class="keyword">var</span> appAction = <span class="built_in">require</span>(<span class="string">'./App/Actions/mainAction'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">    <span class="attr">mixins</span>: [StoreMixin(appStore,<span class="string">"user"</span>,<span class="string">"article"</span>)],</div><div class="line">    <span class="attr">onChangeUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    	appAction.emit(<span class="string">'onChangeUserName'</span>, <span class="string">"wilson"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state);  <span class="comment">// when store was changed, the state will change;</span></div><div class="line">        </div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.username)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (</div><div class="line">        	<span class="xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></div><div class="line">        		<span class="tag">&lt;<span class="name">Text</span> <span class="attr">onPress</span>=<span class="string">&#123;this.onChangeUserName&#125;</span>&gt;</span>Change user name<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        	<span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        )   </div><div class="line">    &#125; </div><div class="line">&#125;);</div><div class="line">    </div><div class="line">    </div><div class="line">AppRegistry.registerComponent(<span class="string">'DEMO'</span>, () =&gt; App);</div></pre></td></tr></table></figure>
<h3 id="mainAction-js"><a href="#mainAction-js" class="headerlink" title="mainAction.js"></a>mainAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="comment">// require userAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./userAction'</span>)();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// require articleAction</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./articleAction'</span>)();</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Action;</div></pre></td></tr></table></figure>
<h3 id="userAction-js"><a href="#userAction-js" class="headerlink" title="userAction.js"></a>userAction.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">require</span>(<span class="string">'../Stores/mainStore'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 更新管理员</span></div><div class="line"><span class="keyword">var</span> userAction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	Action.on(<span class="string">'onChangeUserName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">		<span class="comment">// study immutable.js visit http://facebook.github.io/immutable-js/</span></div><div class="line">    	appStore.getStore(<span class="string">"user"</span>).set(<span class="string">'name'</span>, name );</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = userAction;</div></pre></td></tr></table></figure>
<h3 id="mainStore-js"><a href="#mainStore-js" class="headerlink" title="mainStore.js"></a>mainStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> &#123;Store,Action&#125; = <span class="built_in">require</span>(<span class="string">'react-native-immutable'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react-native'</span>);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> appStore = <span class="built_in">module</span>.exports = Store(&#123;</div><div class="line">    <span class="attr">user</span>: <span class="built_in">require</span>(<span class="string">'./userStore'</span>),</div><div class="line">    <span class="attr">article</span>: <span class="built_in">require</span>(<span class="string">'./articleStore'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Use AsyncStorage if u what</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;</div><div class="line">    AsyncStorage</div><div class="line">&#125; = React;</div><div class="line"></div><div class="line"><span class="keyword">var</span> db_name = <span class="string">"app_store"</span>;</div><div class="line"></div><div class="line">Action.on(<span class="string">"_updateStore"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    AsyncStorage.setItem(db_name, <span class="built_in">JSON</span>.stringify(data), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//initial Data</span></div><div class="line">AsyncStorage.getItem(db_name, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.error(<span class="string">"error"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> res == <span class="literal">undefined</span> )&#123;</div><div class="line">            Action.emit(<span class="string">"_updateStore"</span>,appStore.getData());</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            appStore = Immutable.fromJS(<span class="built_in">JSON</span>.parse(res));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="userStore-js"><a href="#userStore-js" class="headerlink" title="userStore.js"></a>userStore.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;react-native-immutable&quot;&gt;&lt;a href=&quot;#react-native-immutable&quot; class=&quot;headerlink&quot; title=&quot;react-native-immutable&quot;&gt;&lt;/a&gt;react-native-immutab
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Immutable.js-doc</title>
    <link href="http://yoursite.com/2017/03/26/Immutable-js/"/>
    <id>http://yoursite.com/2017/03/26/Immutable-js/</id>
    <published>2017-03-26T14:05:27.000Z</published>
    <updated>2017-03-26T06:06:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Immutable-collections-for-JavaScript"><a href="#Immutable-collections-for-JavaScript" class="headerlink" title="Immutable collections for JavaScript"></a>Immutable collections for JavaScript</h1><p><a href="https://travis-ci.org/facebook/immutable-js" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/immutable-js.svg?branch=master" alt="Build Status"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href="http://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="external">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>
<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="external">hash maps tries</a> and <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="external">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p>Immutable.js also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>
<p>Want to hear more? Watch the presentation about Immutable.js:</p>
<p><a href="https://youtu.be/I7IdS-PbEgI" target="_blank" alt="Immutable Data and React"><img src="https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg"></a></p>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install immutable</div></pre></td></tr></table></figure>
<p>Then require it into any module.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">map1.get(<span class="string">'b'</span>) <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>) <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>To use Immutable.js from a browser, download <a href="https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js" target="_blank" rel="external">dist/immutable.min.js</a><br>or use a CDN such as <a href="https://cdnjs.com/libraries/immutable" target="_blank" rel="external">CDNJS</a><br>or <a href="http://www.jsdelivr.com/#!immutable.js" target="_blank" rel="external">jsDelivr</a>.</p>
<p>Then, add it as a script tag to your page:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"immutable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or use an AMD loader (such as <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'./immutable.min.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Immutable</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If you’re using <a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a> or<br><a href="http://browserify.org/" target="_blank" rel="external">browserify</a>, the <code>immutable</code> npm module also works<br>from the browser.</p>
<h3 id="Flow-amp-TypeScript"><a href="#Flow-amp-TypeScript" class="headerlink" title="Flow &amp; TypeScript"></a>Flow &amp; TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href="https://flowtype.org/" target="_blank" rel="external">Flowtype</a> or <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Installing <code>immutable</code> via npm brings with it type definitions for Flow (v0.39.0 or higher)<br>and TypeScript (v2.1.0 or higher), so you shouldn’t need to do anything at all!</p>
<h4 id="Using-TypeScript-with-Immutable-js-v4"><a href="#Using-TypeScript-with-Immutable-js-v4" class="headerlink" title="Using TypeScript with Immutable.js v4"></a>Using TypeScript with Immutable.js v4</h4><p>Immutable.js type definitions embrace ES2015. While Immutable.js itself supports<br>legacy browsers and environments, its type definitions require TypeScript’s 2015<br>lib. Include either <code>&quot;target&quot;: &quot;es2015&quot;</code> or <code>&quot;lib&quot;: &quot;es2015&quot;</code> in your<br><code>tsconfig.json</code>, or provide <code>--target es2015</code> or <code>--lib es2015</code> to the<br><code>tsc</code> command.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">"immutable"</span>;</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h4 id="Using-TypeScript-with-Immutable-js-v3-and-earlier"><a href="#Using-TypeScript-with-Immutable-js-v3-and-earlier" class="headerlink" title="Using TypeScript with Immutable.js v3 and earlier:"></a>Using TypeScript with Immutable.js v3 and earlier:</h4><p>Previous versions of Immutable.js include a reference file which you can include<br>via relative path to the type definitions at the top of your file.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class="line"><span class="keyword">import</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class="line">map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h2 id="The-case-for-Immutability"><a href="#The-case-for-Immutability" class="headerlink" title="The case for Immutability"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>
<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>
<p>This model of data flow aligns well with the architecture of <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a><br>and especially well with an application designed using the ideas of <a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>.</p>
<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>( &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>)</div><div class="line">assert(map1.equals(map2) === <span class="literal">true</span>)</div><div class="line"><span class="keyword">const</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</div><div class="line">assert(map1.equals(map3) === <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>Note: As a performance optimization Immutable.js attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>
<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> clone = map1;</div></pre></td></tr></table></figure>
<h2 id="JavaScript-first-API"><a href="#JavaScript-first-API" class="headerlink" title="JavaScript-first API"></a>JavaScript-first API</h2><p>While Immutable.js is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a>.</p>
<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="keyword">const</span> list3 = list2.unshift(<span class="number">0</span>);</div><div class="line"><span class="keyword">const</span> list4 = list1.concat(list2, list3);</div><div class="line">assert(list1.size === <span class="number">2</span>);</div><div class="line">assert(list2.size === <span class="number">5</span>);</div><div class="line">assert(list3.size === <span class="number">6</span>);</div><div class="line">assert(list4.size === <span class="number">13</span>);</div><div class="line">assert(list4.get(<span class="number">0</span>) === <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> found on <code>Immutable.Map</code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> alpha = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;);</div><div class="line">alpha.map(<span class="function">(<span class="params">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class="line"><span class="comment">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>
<h3 id="Accepts-raw-JavaScript-objects"><a href="#Accepts-raw-JavaScript-objects" class="headerlink" title="Accepts raw JavaScript objects."></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, Immutable.js<br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Collection</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">t</span>: <span class="number">30</span> &#125;)</div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">d</span>: <span class="number">100</span>, <span class="attr">o</span>: <span class="number">200</span>, <span class="attr">g</span>: <span class="number">300</span> &#125;</div><div class="line"><span class="keyword">const</span> map3 = map1.merge(map2, obj);</div><div class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>
<p>This is possible because Immutable.js can treat any JavaScript Array or Object<br>as a Collection. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> myObject = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</div><div class="line">Seq(myObject).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x).toObject();</div><div class="line"><span class="comment">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>
<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="number">1</span>: <span class="string">"one"</span> &#125;</div><div class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// [ "1" ]</span></div><div class="line">obj[<span class="string">"1"</span>] <span class="comment">// "one"</span></div><div class="line">obj[<span class="number">1</span>]   <span class="comment">// "one"</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> map = fromJS(obj)</div><div class="line">map.get(<span class="string">"1"</span>) <span class="comment">// "one"</span></div><div class="line">map.get(<span class="number">1</span>)   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>
<h3 id="Converts-back-to-raw-JavaScript-objects"><a href="#Converts-back-to-raw-JavaScript-objects" class="headerlink" title="Converts back to raw JavaScript objects."></a>Converts back to raw JavaScript objects.</h3><p>All Immutable.js Collections can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Collections also implement <code>toJSON()</code> allowing them to be passed<br>to <code>JSON.stringify</code> directly.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> deep = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: List([ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]) &#125;)</div><div class="line">deep.toObject() <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class="line">deep.toArray() <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class="line">deep.toJS() <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class="line"><span class="built_in">JSON</span>.stringify(deep) <span class="comment">// '&#123;"a":1,"b":2,"c":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>
<h3 id="Embraces-ES2015"><a href="#Embraces-ES2015" class="headerlink" title="Embraces ES2015"></a>Embraces ES2015</h3><p>Immutable.js supports all JavaScript environments, including legacy<br>browsers (even IE8). However it also takes advantage of features added to<br>JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES2015</a>, the latest standard version of JavaScript, including<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol" target="_blank" rel="external">Iterators</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow Functions</a>, <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes" target="_blank" rel="external">Classes</a>, and <a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">Modules</a>. It’s inspired<br>by the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a> collections added to ES2015.</p>
<p>All examples in the Documentation are presented in ES2015. To run in all<br>browsers, they need to be translated to ES3.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES2015</span></div><div class="line"><span class="keyword">const</span> mapped = foo.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"><span class="comment">// ES3</span></div><div class="line"><span class="keyword">var</span> mapped = foo.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>
<h2 id="Nested-Structures"><a href="#Nested-Structures" class="headerlink" title="Nested Structures"></a>Nested Structures</h2><p>The collections in Immutable.js are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> nested = fromJS(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ] &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> nested2 = nested.mergeDeep(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">6</span> &#125; &#125; &#125;)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line">nested2.getIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ]) <span class="comment">// 6</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested3 = nested2.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span> ], value =&gt; value + <span class="number">1</span>)</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> nested4 = nested3.updateIn([ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ], list =&gt; list.push(<span class="number">6</span>))</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Lazy-Seq"><a href="#Lazy-Seq" class="headerlink" title="Lazy Seq"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the sequence methods (such as <code>map</code> and <code>filter</code>).</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>
<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>
<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Seq &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> oddSquares = Seq([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ])</div><div class="line">  .filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span>)</div><div class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</div></pre></td></tr></table></figure>
<p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(oddSquares.get(<span class="number">1</span>)); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> seq = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;).toSeq()</div></pre></td></tr></table></figure>
<p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">seq.flip().map(<span class="function"><span class="params">key</span> =&gt;</span> key.toUpperCase()).flip().toObject();</div><div class="line"><span class="comment">// &#123; A: 1, B: 1, C: 1 &#125;</span></div></pre></td></tr></table></figure>
<p>As well as expressing logic that would otherwise seem memory-limited:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Range &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line">Range(<span class="number">1</span>, <span class="literal">Infinity</span>)</div><div class="line">  .skip(<span class="number">1000</span>)</div><div class="line">  .map(<span class="function"><span class="params">n</span> =&gt;</span> -n)</div><div class="line">  .filter(<span class="function"><span class="params">n</span> =&gt;</span> n % <span class="number">2</span> === <span class="number">0</span>)</div><div class="line">  .take(<span class="number">2</span>)</div><div class="line">  .reduce(<span class="function">(<span class="params">r, n</span>) =&gt;</span> r * n, <span class="number">1</span>);</div><div class="line"><span class="comment">// 1006008</span></div></pre></td></tr></table></figure>
<p>Note: A Collection is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>
<h2 id="Equality-treats-Collections-as-Data"><a href="#Equality-treats-Collections-as-Data" class="headerlink" title="Equality treats Collections as Data"></a>Equality treats Collections as Data</h2><p>Immutable.js provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, is &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line"><span class="keyword">const</span> map2 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</div><div class="line">assert(map1 !== map2) <span class="comment">// two different instances</span></div><div class="line">assert(is(map1, map2)) <span class="comment">// have equivalent values</span></div><div class="line">assert(map1.equals(map2)) <span class="comment">// alternatively use the equals method</span></div></pre></td></tr></table></figure>
<p><code>Immutable.is()</code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="external">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>
<h2 id="Batching-Mutations"><a href="#Batching-Mutations" class="headerlink" title="Batching Mutations"></a>Batching Mutations</h2><blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, Immutable.js gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  Immutable.js applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; List &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</div><div class="line"><span class="keyword">const</span> list1 = List([ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]);</div><div class="line"><span class="keyword">const</span> list2 = list1.withMutations(<span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</div><div class="line">  list.push(<span class="number">4</span>).push(<span class="number">5</span>).push(<span class="number">6</span>);</div><div class="line">&#125;);</div><div class="line">assert(list1.size === <span class="number">3</span>);</div><div class="line">assert(list2.size === <span class="number">6</span>);</div></pre></td></tr></table></figure>
<p>Note: Immutable.js also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="external">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts" target="_blank" rel="external">Immutable.d.ts</a>.<br>Please contribute!</p>
<p>Also, don’t miss the <a href="https://github.com/facebook/immutable-js/wiki" target="_blank" rel="external">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">issue</a>.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>If you are using the <a href="http://chaijs.com/" target="_blank" rel="external">Chai Assertion Library</a>, <a href="https://github.com/astorije/chai-immutable" target="_blank" rel="external">Chai Immutable</a> provides a set of assertions to use against Immutable.js collections.</p>
<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>Use <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="./CONTRIBUTING.md">contribute</a>.</p>
<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>Changes are tracked as <a href="https://github.com/facebook/immutable-js/releases" target="_blank" rel="external">Github releases</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs" target="_blank" rel="external">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/" target="_blank" rel="external">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href="https://github.com/hughfdjackson/immutable" target="_blank" rel="external">this repository</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Immutable.js is <a href="https://github.com/facebook/immutable-js/blob/master/LICENSE" target="_blank" rel="external">BSD-licensed</a>. We also provide an additional <a href="https://github.com/facebook/immutable-js/blob/master/PATENTS" target="_blank" rel="external">patent grant</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Immutable-collections-for-JavaScript&quot;&gt;&lt;a href=&quot;#Immutable-collections-for-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Immutable collection
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>paserServer-Dashboard</title>
    <link href="http://yoursite.com/2017/03/26/paserServer-Dashboard/"/>
    <id>http://yoursite.com/2017/03/26/paserServer-Dashboard/</id>
    <published>2017-03-26T10:59:38.000Z</published>
    <updated>2017-03-26T03:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Parse-Dashboard"><a href="#Parse-Dashboard" class="headerlink" title="Parse Dashboard"></a>Parse Dashboard</h1><p><a href="https://travis-ci.org/ParsePlatform/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-dashboard/master.svg?style=flat" alt="Build Status"></a><br><a href="https://www.npmjs.com/package/parse-dashboard" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-dashboard.svg?style=flat" alt="npm version"></a></p>
<p>Parse Dashboard is a standalone dashboard for managing your Parse apps. You can use it to manage your <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps and your apps that are running on <a href="https://Parse.com" target="_blank" rel="external">Parse.com</a>.</p>
<ul>
<li><a href="#getting-started">Getting Started</a></li>
<li><a href="#local-installation">Local Installation</a><ul>
<li><a href="#configuring-parse-dashboard">Configuring Parse Dashboard</a></li>
<li><a href="#managing-multiple-apps">Managing Multiple Apps</a></li>
<li><a href="#other-configuration-options">Other Configuration Options</a></li>
</ul>
</li>
<li><a href="#running-as-express-middleware">Running as Express Middleware</a></li>
<li><a href="#deploying-parse-dashboard">Deploying Parse Dashboard</a><ul>
<li><a href="#preparing-for-deployment">Preparing for Deployment</a></li>
<li><a href="#security-considerations">Security Considerations</a><ul>
<li><a href="#configuring-basic-authentication">Configuring Basic Authentication</a></li>
<li><a href="#separating-app-access-based-on-user-identity">Separating App Access Based on User Identity</a></li>
</ul>
</li>
<li><a href="#run-with-docker">Run with Docker</a></li>
</ul>
</li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p><a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> version &gt;= 4.3 is required to run the dashboard. You also need to be using Parse Server version 2.1.4 or higher.</p>
<h1 id="Local-Installation"><a href="#Local-Installation" class="headerlink" title="Local Installation"></a>Local Installation</h1><p>Install the dashboard from <code>npm</code>.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-dashboard</div></pre></td></tr></table></figure>
<p>You can launch the dashboard for an app with a single command by supplying an app ID, master key, URL, and name like this:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">parse-dashboard </span><span class="built_in">--appId</span> <span class="string">yourAppId </span><span class="built_in">--masterKey</span> <span class="string">yourMasterKey </span><span class="built_in">--serverURL</span> <span class="string">"https://example.com/parse"</span> <span class="built_in">--appName</span> <span class="string">optionalName</span></div></pre></td></tr></table></figure>
<p>You may set the host, port and mount path by supplying the <code>--host</code>, <code>--port</code> and <code>--mountPath</code> options to parse-dashboard. You can use anything you want as the app name, or leave it out in which case the app ID will be used.</p>
<p>After starting the dashboard, you can visit <a href="http://localhost:4040" target="_blank" rel="external">http://localhost:4040</a> in your browser:</p>
<p><img src=".github/dash-shot.png" alt="Parse Dashboard"></p>
<h2 id="Configuring-Parse-Dashboard"><a href="#Configuring-Parse-Dashboard" class="headerlink" title="Configuring Parse Dashboard"></a>Configuring Parse Dashboard</h2><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>You can also start the dashboard from the command line with a config file.  To do this, create a new file called <code>parse-dashboard-config.json</code> inside your local Parse Dashboard directory hierarchy.  The file should match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can then start the dashboard using <code>parse-dashboard --config parse-dashboard-config.json</code>.</p>
<h3 id="Environment-variables"><a href="#Environment-variables" class="headerlink" title="Environment variables"></a>Environment variables</h3><blockquote>
<p>This only works when starting the app using the <code>parse-dashboard</code> command</p>
</blockquote>
<p>There are also two methods you can use to configure the dashboard using environment variables.</p>
<h4 id="Multiple-apps"><a href="#Multiple-apps" class="headerlink" title="Multiple apps"></a>Multiple apps</h4><p>Provide the entire JSON configuration in <code>PARSE_DASHBOARD_CONFIG</code> and it will be parsed just like the config file.</p>
<h4 id="Single-app"><a href="#Single-app" class="headerlink" title="Single app"></a>Single app</h4><p>You can also define each configuration option individually.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HOST:</span> <span class="string">"0.0.0.0"</span></div><div class="line"><span class="symbol">PORT:</span> <span class="string">"4040"</span></div><div class="line"><span class="symbol">MOUNT_PATH:</span> <span class="string">"/"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_TRUST_PROXY:</span> undefined <span class="comment">// Or "1" to trust connection info from a proxy's X-Forwarded-* headers</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SERVER_URL:</span> <span class="string">"http://localhost:1337/parse"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_MASTER_KEY:</span> <span class="string">"myMasterKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_ID:</span> <span class="string">"myAppId"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_APP_NAME:</span> <span class="string">"MyApp"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_ID:</span> <span class="string">"user1"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_USER_PASSWORD:</span> <span class="string">"pass"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_KEY:</span> <span class="string">"sslKey"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_SSL_CERT:</span> <span class="string">"sslCert"</span></div><div class="line"><span class="symbol">PARSE_DASHBOARD_CONFIG:</span> undefined <span class="comment">// Only for reference, it must not exist</span></div></pre></td></tr></table></figure>
<h2 id="Managing-Multiple-Apps"><a href="#Managing-Multiple-Apps" class="headerlink" title="Managing Multiple Apps"></a>Managing Multiple Apps</h2><p>Managing multiple apps from the same dashboard is also possible.  Simply add additional entries into the <code>parse-dashboard-config.json</code> file’s <code>&quot;apps&quot;</code> array.</p>
<p>You can manage self-hosted <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> apps, <em>and</em> apps that are hosted on <a href="http://parse.com/" target="_blank" rel="external">Parse.com</a> from the same dashboard. In your config file, you will need to add the <code>restKey</code> and <code>javascriptKey</code> as well as the other paramaters, which you can find on <code>dashboard.parse.com</code>. Set the serverURL to <code>http://api.parse.com/1</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"https://api.parse.com/1"</span>, <span class="comment">// Hosted on Parse.com</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"javascriptKey"</span>: <span class="string">"myJavascriptKey"</span>,</div><div class="line">      <span class="string">"restKey"</span>: <span class="string">"myRestKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse.Com App"</span>,</div><div class="line">      <span class="string">"production"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>, <span class="comment">// Self-hosted Parse Server</span></div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"My Parse Server App"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="App-Icon-Configuration"><a href="#App-Icon-Configuration" class="headerlink" title="App Icon Configuration"></a>App Icon Configuration</h2><p>Parse Dashboard supports adding an optional icon for each app, so you can identify them easier in the list. To do so, you <em>must</em> use the configuration file, define an <code>iconsFolder</code> in it, and define the <code>iconName</code> parameter for each app (including the extension). The path of the <code>iconsFolder</code> is relative to the configuration file. If you have installed ParseDashboard globally you need to use the full path as value for the <code>iconsFolder</code>. To visualize what it means, in the following example <code>icons</code> is a directory located under the same directory as the configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="attr">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="attr">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="attr">"appName"</span>: <span class="string">"My Parse Server App"</span>,</div><div class="line">      <span class="attr">"iconName"</span>: <span class="string">"MyAppIcon.png"</span>,</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"iconsFolder"</span>: <span class="string">"icons"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Other-Configuration-Options"><a href="#Other-Configuration-Options" class="headerlink" title="Other Configuration Options"></a>Other Configuration Options</h2><p>You can set <code>appNameForURL</code> in the config file for each app to control the url of your app within the dashboard. This can make it easier to use bookmarks or share links on your dashboard.</p>
<p>To change the app to production, simply set <code>production</code> to <code>true</code> in your config file. The default value is false if not specified.</p>
<h1 id="Running-as-Express-Middleware"><a href="#Running-as-Express-Middleware" class="headerlink" title="Running as Express Middleware"></a>Running as Express Middleware</h1><p>Instead of starting Parse Dashboard with the CLI, you can also run it as an <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<p>If you want to run both <a href="https://github.com/ParsePlatform/parse-server" target="_blank" rel="external">Parse Server</a> and Parse Dashboard on the same server/port, you can run them both as express middleware:</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="keyword">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="keyword">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> ParseDashboard = <span class="keyword">require</span>(<span class="string">'parse-dashboard'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> allowInsecureHTTP = <span class="keyword">false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">	<span class="comment">// Parse Server settings</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">	<span class="comment">// Parse Dashboard settings</span></div><div class="line">&#125;, allowInsecureHTTP);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Server available at /parse</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line"><span class="comment">// make the Parse Dashboard available at /dashboard</span></div><div class="line">app.<span class="keyword">use</span>(<span class="string">'/dashboard'</span>, dashboard);</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpServer = <span class="keyword">require</span>(<span class="string">'http'</span>).createServer(app);</div><div class="line">httpServer.listen(<span class="number">4040</span>);</div></pre></td></tr></table></figure>
<h1 id="Deploying-Parse-Dashboard"><a href="#Deploying-Parse-Dashboard" class="headerlink" title="Deploying Parse Dashboard"></a>Deploying Parse Dashboard</h1><h2 id="Preparing-for-Deployment"><a href="#Preparing-for-Deployment" class="headerlink" title="Preparing for Deployment"></a>Preparing for Deployment</h2><p>Make sure the server URLs for your apps can be accessed by your browser. If you are deploying the dashboard, then <code>localhost</code> urls will not work.</p>
<h2 id="Security-Considerations"><a href="#Security-Considerations" class="headerlink" title="Security Considerations"></a>Security Considerations</h2><p>In order to securely deploy the dashboard without leaking your apps master key, you will need to use HTTPS and Basic Authentication.</p>
<p>The deployed dashboard detects if you are using a secure connection. If you are deploying the dashboard behind a load balancer or front-facing proxy, then the app won’t be able to detect that the connection is secure. In this case, you can start the dashboard with the <code>--trustProxy=1</code> option (or set the PARSE_DASHBOARD_TRUST_PROXY config var to 1) to rely on the X-Forwarded-* headers for the client’s connection security.  This is useful for hosting on services like Heroku, where you can trust the provided proxy headers to correctly determine whether you’re using HTTP or HTTPS.  You can also turn on this setting when using the dashboard as <a href="https://github.com/expressjs/express" target="_blank" rel="external">express</a> middleware:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> trustProxy = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dashboard = <span class="keyword">new</span> ParseDashboard(&#123;</div><div class="line">  <span class="string">"apps"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"serverURL"</span>: <span class="string">"http://localhost:1337/parse"</span>,</div><div class="line">      <span class="string">"appId"</span>: <span class="string">"myAppId"</span>,</div><div class="line">      <span class="string">"masterKey"</span>: <span class="string">"myMasterKey"</span>,</div><div class="line">      <span class="string">"appName"</span>: <span class="string">"MyApp"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"trustProxy"</span>: <span class="number">1</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Configuring-Basic-Authentication"><a href="#Configuring-Basic-Authentication" class="headerlink" title="Configuring Basic Authentication"></a>Configuring Basic Authentication</h3><p>You can configure your dashboard for Basic Authentication by adding usernames and passwords your <code>parse-dashboard-config.json</code> configuration file:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">      <span class="attr">"pass"</span>:<span class="string">"pass"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"useEncryptedPasswords"</span>: <span class="literal">true</span> | <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can store the password in either <code>plain text</code> or <code>bcrypt</code> formats. To use the <code>bcrypt</code> format, you must set the config <code>useEncryptedPasswords</code> parameter to <code>true</code>.<br>You can encrypt the password using any online bcrypt tool e.g. <a href="https://www.bcrypt-generator.com" target="_blank" rel="external">https://www.bcrypt-generator.com</a>.</p>
<h3 id="Separating-App-Access-Based-on-User-Identity"><a href="#Separating-App-Access-Based-on-User-Identity" class="headerlink" title="Separating App Access Based on User Identity"></a>Separating App Access Based on User Identity</h3><p>If you have configured your dashboard to manage multiple applications, you can restrict the management of apps based on user identity.</p>
<p>To do so, update your <code>parse-dashboard-config.json</code> configuration file to match the following format:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span>: [&#123;<span class="attr">"..."</span>: <span class="string">"..."</span>&#125;],</div><div class="line">  <span class="attr">"users"</span>: [</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user1"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass1"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;, &#123;<span class="attr">"appId"</span>: <span class="string">"myAppId2"</span>&#125;]</div><div class="line">     &#125;,</div><div class="line">     &#123;</div><div class="line">       <span class="attr">"user"</span>:<span class="string">"user2"</span>,</div><div class="line">       <span class="attr">"pass"</span>:<span class="string">"pass2"</span>,</div><div class="line">       <span class="attr">"apps"</span>: [&#123;<span class="attr">"appId"</span>: <span class="string">"myAppId1"</span>&#125;]</div><div class="line">     &#125;  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The effect of such a configuration is as follows:</p>
<p>When <code>user1</code> logs in, he/she will be able to manage <code>myAppId1</code> and <code>myAppId2</code> from the dashboard.</p>
<p>When <em><code>user2</code></em>  logs in, he/she will only be able to manage <em><code>myAppId1</code></em> from the dashboard.</p>
<h2 id="Run-with-Docker"><a href="#Run-with-Docker" class="headerlink" title="Run with Docker"></a>Run with Docker</h2><p>It is easy to use it with Docker. First build the image:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t parse-dashboard .</div></pre></td></tr></table></figure>
<p>Run the image with your <code>config.json</code> mounted as a volume</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">8080</span>:<span class="number">4040</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard</div></pre></td></tr></table></figure>
<p>By default, the container will start the app at port 4040 inside the container. However, you can run custom command as well (see <code>Deploying in production</code> for custom setup).</p>
<p>In this example, we want to run the application in production mode at port 80 of the host machine.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -<span class="selector-tag">p</span> <span class="number">80</span>:<span class="number">8080</span> -v host/path/to/config<span class="selector-class">.json</span>:/src/Parse-Dashboard/parse-dashboard-config<span class="selector-class">.json</span> parse-dashboard --port <span class="number">8080</span></div></pre></td></tr></table></figure>
<p>If you are not familiar with Docker, <code>--port 8080</code> will be passed in as argument to the entrypoint to form the full command <code>npm start -- --port 8080</code>. The application will start at port 8080 inside the container and port <code>8080</code> will be mounted to port <code>80</code> on your host machine.</p>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Dashboard guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Parse-Dashboard&quot;&gt;&lt;a href=&quot;#Parse-Dashboard&quot; class=&quot;headerlink&quot; title=&quot;Parse Dashboard&quot;&gt;&lt;/a&gt;Parse Dashboard&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://t
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>PaserServer_readme</title>
    <link href="http://yoursite.com/2017/03/26/PaserServer-readme/"/>
    <id>http://yoursite.com/2017/03/26/PaserServer-readme/</id>
    <published>2017-03-26T10:50:57.000Z</published>
    <updated>2017-03-26T02:56:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src=".github/parse-server-logo.png?raw=true" alt="Parse Server logo"></p>
<p><a href="https://travis-ci.org/ParsePlatform/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/travis/ParsePlatform/parse-server/master.svg?style=flat" alt="Build Status"></a><br><a href="https://codecov.io/github/ParsePlatform/parse-server?branch=master" target="_blank" rel="external"><img src="https://img.shields.io/codecov/c/github/ParsePlatform/parse-server/master.svg" alt="Coverage Status"></a><br><a href="https://www.npmjs.com/package/parse-server" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/parse-server.svg?style=flat" alt="npm version"></a></p>
<p><a href="https://gitter.im/ParsePlatform/Chat" target="_blank" rel="external"><img src="https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg" alt="Join Chat"></a></p>
<p>Parse Server is an <a href="http://blog.parse.com/announcements/introducing-parse-server-and-the-database-migration-tool/" target="_blank" rel="external">open source version of the Parse backend</a> that can be deployed to any infrastructure that can run Node.js.</p>
<p>Parse Server works with the Express web application framework. It can be added to existing web applications, or run by itself.</p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><p>April 2016 - We created a series of video screencasts, please check them out here: <a href="http://blog.parse.com/learn/parse-server-video-series-april-2016/" target="_blank" rel="external">http://blog.parse.com/learn/parse-server-video-series-april-2016/</a></p>
<p>The fastest and easiest way to get started is to run MongoDB and Parse Server locally.</p>
<h2 id="Running-Parse-Server"><a href="#Running-Parse-Server" class="headerlink" title="Running Parse Server"></a>Running Parse Server</h2><h3 id="Locally"><a href="#Locally" class="headerlink" title="Locally"></a>Locally</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm <span class="keyword">install</span> -g <span class="keyword">parse</span>-<span class="keyword">server</span> mongodb-runner</div><div class="line">$ mongodb-runner <span class="keyword">start</span></div><div class="line">$ <span class="keyword">parse</span>-<span class="keyword">server</span> <span class="comment">--appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test</span></div></pre></td></tr></table></figure>
<h3 id="Inside-a-Docker-container"><a href="#Inside-a-Docker-container" class="headerlink" title="Inside a Docker container"></a>Inside a Docker container</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">$ docker build --tag <span class="built_in">parse</span>-server .</div><div class="line">$ docker <span class="keyword">run</span> --name my-mongo -d mongo</div><div class="line">$ docker <span class="keyword">run</span> --name my-<span class="built_in">parse</span>-server --link my-mongo:mongo <span class="built_in">parse</span>-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb:<span class="comment">//mongo/test</span></div><div class="line">```  </div><div class="line"></div><div class="line">You can <span class="keyword">use</span> any arbitrary <span class="keyword">string</span> as your application id <span class="keyword">and</span> master <span class="built_in">key</span>. These will be used by your clients to authenticate with the <span class="built_in">Parse</span> Server.</div><div class="line"></div><div class="line">That's it! You are now running a standalone version of <span class="built_in">Parse</span> Server on your machine.</div><div class="line"></div><div class="line">**Using a remote MongoDB?** Pass the  `--databaseURI DATABASE_URI` parameter when starting `<span class="built_in">parse</span>-server`. Learn more about configuring <span class="built_in">Parse</span> Server [here](<span class="meta">#configuration). For a full list of available options, run `parse-server --help`.</span></div><div class="line"></div><div class="line"><span class="meta">### Saving your first object</span></div><div class="line"></div><div class="line">Now that you're running <span class="built_in">Parse</span> Server, it is <span class="built_in">time</span> to <span class="keyword">save</span> your first object. We'll <span class="keyword">use</span> the [REST API](https:<span class="comment">//parse.com/docs/rest/guide), but you can easily do the same using any of the [Parse SDKs](https://parseplatform.github.io/#sdks). Run the following:</span></div><div class="line"></div><div class="line">```bash</div><div class="line">curl -X POST \</div><div class="line">-H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">-H <span class="string">"Content-Type: application/json"</span> \</div><div class="line">-d '&#123;<span class="string">"score"</span>:<span class="number">1337</span>,<span class="string">"playerName"</span>:<span class="string">"Sean Plott"</span>,<span class="string">"cheatMode"</span>:false&#125;' \</div><div class="line">http:<span class="comment">//localhost:1337/parse/classes/GameScore</span></div></pre></td></tr></table></figure>
<p>You should get a response similar to this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"objectId"</span>: <span class="string">"2ntvSpRGIK"</span>,</div><div class="line">  <span class="string">"createdAt"</span>: <span class="string">"2016-03-11T23:51:48.050Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You can now retrieve this object directly (make sure to replace <code>2ntvSpRGIK</code> with the actual <code>objectId</code> you received when the object was created):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  http://localhost:1337/parse/classes/GameScore/2ntvSpRGIK</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Response</div><div class="line">&#123;</div><div class="line">  "objectId": "2ntvSpRGIK",</div><div class="line">  "score": 1337,</div><div class="line">  "playerName": "Sean Plott",</div><div class="line">  "cheatMode": false,</div><div class="line">  "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">  "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Keeping tracks of individual object ids is not ideal, however. In most cases you will want to run a query over the collection, like so:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>curl -X GET \</div><div class="line">  -H <span class="string">"X-Parse-Application-Id: APPLICATION_ID"</span> \</div><div class="line">  <span class="symbol">http:</span>/<span class="regexp">/localhost:1337/parse</span><span class="regexp">/classes/</span>GameScore</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// The response will provide all the matching objects within the `results` array:</div><div class="line">&#123;</div><div class="line">  "results": [</div><div class="line">    &#123;</div><div class="line">      "objectId": "2ntvSpRGIK",</div><div class="line">      "score": 1337,</div><div class="line">      "playerName": "Sean Plott",</div><div class="line">      "cheatMode": false,</div><div class="line">      "updatedAt": "2016-03-11T23:51:48.050Z",</div><div class="line">      "createdAt": "2016-03-11T23:51:48.050Z"</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To learn more about using saving and querying objects on Parse Server, check out the <a href="https://parse.com/docs" target="_blank" rel="external">Parse documentation</a>.</p>
<h3 id="Connect-your-app-to-Parse-Server"><a href="#Connect-your-app-to-Parse-Server" class="headerlink" title="Connect your app to Parse Server"></a>Connect your app to Parse Server</h3><p>Parse provides SDKs for all the major platforms. Refer to the Parse Server guide to <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#using-parse-sdks-with-parse-server" target="_blank" rel="external">learn how to connect your app to Parse Server</a>.</p>
<h2 id="Running-Parse-Server-elsewhere"><a href="#Running-Parse-Server-elsewhere" class="headerlink" title="Running Parse Server elsewhere"></a>Running Parse Server elsewhere</h2><p>Once you have a better understanding of how the project works, please refer to the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">Parse Server wiki</a> for in-depth guides to deploy Parse Server to major infrastructure providers. Read on to learn more about additional ways of running Parse Server.</p>
<h3 id="Parse-Server-Sample-Application"><a href="#Parse-Server-Sample-Application" class="headerlink" title="Parse Server Sample Application"></a>Parse Server Sample Application</h3><p>We have provided a basic <a href="https://github.com/ParsePlatform/parse-server-example" target="_blank" rel="external">Node.js application</a> that uses the Parse Server module on Express and can be easily deployed to various infrastructure providers:</p>
<ul>
<li><a href="https://devcenter.heroku.com/articles/deploying-a-parse-server-to-heroku" target="_blank" rel="external">Heroku and mLab</a></li>
<li><a href="http://mobile.awsblog.com/post/TxCD57GZLM2JR/How-to-set-up-Parse-Server-on-AWS-using-AWS-Elastic-Beanstalk" target="_blank" rel="external">AWS and Elastic Beanstalk</a></li>
<li><a href="https://medium.com/@justinbeckwith/deploying-parse-server-to-google-app-engine-6bc0b7451d50" target="_blank" rel="external">Google App Engine</a></li>
<li><a href="https://azure.microsoft.com/en-us/blog/azure-welcomes-parse-developers/" target="_blank" rel="external">Microsoft Azure</a></li>
<li><a href="https://blog.sashido.io/tag/migration/" target="_blank" rel="external">SashiDo</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-run-parse-server-on-ubuntu-14-04" target="_blank" rel="external">Digital Ocean</a></li>
<li><a href="https://github.com/cf-platform-eng/pws-parse-server" target="_blank" rel="external">Pivotal Web Services</a></li>
<li><a href="http://blog.back4app.com/2016/03/01/quick-wizard-migration/" target="_blank" rel="external">Back4app</a></li>
<li><a href="https://gomix.com/#!/project/parse-server" target="_blank" rel="external">Gomix</a></li>
</ul>
<h3 id="Parse-Server-Express"><a href="#Parse-Server-Express" class="headerlink" title="Parse Server + Express"></a>Parse Server + Express</h3><p>You can also create an instance of Parse Server, and mount it on a new or existing Express website:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> ParseServer = <span class="built_in">require</span>(<span class="string">'parse-server'</span>).ParseServer;</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">var</span> api = <span class="keyword">new</span> ParseServer(&#123;</div><div class="line">  <span class="attr">databaseURI</span>: <span class="string">'mongodb://localhost:27017/dev'</span>, <span class="comment">// Connection string for your MongoDB database</span></div><div class="line">  cloud: <span class="string">'/home/myApp/cloud/main.js'</span>, <span class="comment">// Absolute path to your Cloud Code</span></div><div class="line">  appId: <span class="string">'myAppId'</span>,</div><div class="line">  <span class="attr">masterKey</span>: <span class="string">'myMasterKey'</span>, <span class="comment">// Keep this key secret!</span></div><div class="line">  fileKey: <span class="string">'optionalFileKey'</span>,</div><div class="line">  <span class="attr">serverURL</span>: <span class="string">'http://localhost:1337/parse'</span> <span class="comment">// Don't forget to change to https if needed</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Serve the Parse API on the /parse URL prefix</span></div><div class="line">app.use(<span class="string">'/parse'</span>, api);</div><div class="line"></div><div class="line">app.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'parse-server-example running on port 1337.'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>For a full list of available options, run <code>parse-server --help</code>.</p>
<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Parse Server will, by default, log:</p>
<ul>
<li>to the console</li>
<li>daily rotating files as new line delimited JSON</li>
</ul>
<p>Logs are also be viewable in Parse Dashboard.</p>
<p><strong>Want to log each request and response?</strong> Set the <code>VERBOSE</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>VERBOSE=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want logs to be in placed in other folder?</strong> Pass the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>PARSE_SERVER_LOGS_FOLDER=&#39;&lt;path-to-logs-folder&gt;&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<p><strong>Want new line delimited JSON error logs (for consumption by CloudWatch, Google Cloud Logging, etc.)?</strong> Pass the <code>JSON_LOGS</code> environment variable when starting <code>parse-server</code>. Usage :-  <code>JSON_LOGS=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</code></p>
<h1 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h1><p>The full documentation for Parse Server is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki" target="_blank" rel="external">wiki</a>. The <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide" target="_blank" rel="external">Parse Server guide</a> is a good place to get started. If you’re interested in developing for Parse Server, the <a href="https://github.com/ParsePlatform/parse-server/wiki/Development-Guide" target="_blank" rel="external">Development guide</a> will help you get set up.</p>
<h2 id="Migrating-an-Existing-Parse-App"><a href="#Migrating-an-Existing-Parse-App" class="headerlink" title="Migrating an Existing Parse App"></a>Migrating an Existing Parse App</h2><p>The hosted version of Parse will be fully retired on January 28th, 2017. If you are planning to migrate an app, you need to begin work as soon as possible. There are a few areas where Parse Server does not provide compatibility with the hosted version of Parse. Learn more in the <a href="https://parse.com/migration" target="_blank" rel="external">Migration guide</a>.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>Parse Server can be configured using the following options. You may pass these as parameters when running a standalone <code>parse-server</code>, or by loading a configuration file in JSON format using <code>parse-server path/to/configuration.json</code>. If you’re using Parse Server on Express, you may also pass these to the <code>ParseServer</code> object as options.</p>
<p>For the full list of available options, run <code>parse-server --help</code>.</p>
<h4 id="Basic-options"><a href="#Basic-options" class="headerlink" title="Basic options"></a>Basic options</h4><ul>
<li><code>appId</code> <strong>(required)</strong> - The application id to host with this server instance. You can use any arbitrary string. For migrated apps, this should match your hosted Parse app.</li>
<li><code>masterKey</code> <strong>(required)</strong> - The master key to use for overriding ACL security.  You can use any arbitrary string. Keep it secret! For migrated apps, this should match your hosted Parse app.</li>
<li><code>databaseURI</code> <strong>(required)</strong> - The connection string for your database, i.e. <code>mongodb://user:pass@host.com/dbname</code>. Be sure to <a href="https://app.zencoder.com/docs/guides/getting-started/special-characters-in-usernames-and-passwords" target="_blank" rel="external">URL encode your password</a> if your password has special characters.</li>
<li><code>port</code> - The default port is 1337, specify this parameter to use a different port.</li>
<li><code>serverURL</code> - URL to your Parse Server (don’t forget to specify http:// or https://). This URL will be used when making requests to Parse Server from Cloud Code.</li>
<li><code>cloud</code> - The absolute path to your cloud code <code>main.js</code> file.</li>
<li><code>push</code> - Configuration options for APNS and GCM push. See the <a href="https://github.com/ParsePlatform/parse-server/wiki/Push" target="_blank" rel="external">Push Notifications wiki entry</a>.</li>
</ul>
<h4 id="Client-key-options"><a href="#Client-key-options" class="headerlink" title="Client key options"></a>Client key options</h4><p>The client keys used with Parse are no longer necessary with Parse Server. If you wish to still require them, perhaps to be able to refuse access to older clients, you can set the keys at initialization time. Setting any of these keys will require all requests to provide one of the configured keys.</p>
<ul>
<li><code>clientKey</code></li>
<li><code>javascriptKey</code></li>
<li><code>restAPIKey</code></li>
<li><code>dotNetKey</code></li>
</ul>
<h4 id="Advanced-options"><a href="#Advanced-options" class="headerlink" title="Advanced options"></a>Advanced options</h4><ul>
<li><code>fileKey</code> - For migrated apps, this is necessary to provide access to files already hosted on Parse.</li>
<li><code>allowClientClassCreation</code> - Set to false to disable client class creation. Defaults to true.</li>
<li><code>enableAnonymousUsers</code> - Set to false to disable anonymous users. Defaults to true.</li>
<li><code>auth</code> - Used to configure support for <a href="https://github.com/ParsePlatform/parse-server/wiki/OAuth--and-Custom-Authentication" target="_blank" rel="external">3rd party authentication</a>.</li>
<li><code>facebookAppIds</code> - An array of valid Facebook application IDs that users may authenticate with.</li>
<li><code>mountPath</code> - Mount path for the server. Defaults to <code>/parse</code>.</li>
<li><code>filesAdapter</code> - The default behavior (GridStore) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Files/FilesAdapter.js" target="_blank" rel="external"><code>FilesAdapter.js</code></a>).</li>
<li><code>maxUploadSize</code> - Max file size for uploads. Defaults to 20 MB.</li>
<li><code>loggerAdapter</code> - The default behavior/transport (File) can be changed by creating an adapter class (see <a href="https://github.com/ParsePlatform/parse-server/blob/master/src/Adapters/Logger/LoggerAdapter.js" target="_blank" rel="external"><code>LoggerAdapter.js</code></a>).</li>
<li><code>sessionLength</code> - The length of time in seconds that a session should be valid for. Defaults to 31536000 seconds (1 year).</li>
<li><code>revokeSessionOnPasswordReset</code> - When a user changes their password, either through the reset password email or while logged in, all sessions are revoked if this is true. Set to false if you don’t want to revoke sessions.</li>
<li><code>accountLockout</code> - Lock account when a malicious user is attempting to determine an account password by trial and error.</li>
<li><code>passwordPolicy</code> - Optional password policy rules to enforce.</li>
<li><code>customPages</code> - A hash with urls to override email verification links, password reset links and specify frame url for masking user-facing pages. Available keys: <code>parseFrameURL</code>, <code>invalidLink</code>, <code>choosePassword</code>, <code>passwordResetSuccess</code>, <code>verifyEmailSuccess</code>.</li>
<li><code>middleware</code> - (CLI only), a module name, function that is an express middleware. When using the CLI, the express app will load it just <strong>before</strong> mounting parse-server on the mount path. This option is useful for injecting a monitoring middleware.</li>
</ul>
<h5 id="Logging-1"><a href="#Logging-1" class="headerlink" title="Logging"></a>Logging</h5><p>Use the <code>PARSE_SERVER_LOGS_FOLDER</code> environment variable when starting <code>parse-server</code> to save your server logfiles to the specified folder.</p>
<p>Usage:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">PARSE_SERVER_LOGS_FOLDER=</span><span class="string">'&lt;path-to-logs-folder&gt;'</span> <span class="string">parse-server </span><span class="built_in">--appId</span> <span class="string">APPLICATION_ID </span><span class="built_in">--masterKey</span> <span class="string">MASTER_KEY</span></div></pre></td></tr></table></figure>
<h5 id="Email-verification-and-password-reset"><a href="#Email-verification-and-password-reset" class="headerlink" title="Email verification and password reset"></a>Email verification and password reset</h5><p>Verifying user email addresses and enabling password reset via email requires an email adapter. As part of the <code>parse-server</code> package we provide an adapter for sending email through Mailgun. To use it, sign up for Mailgun, and add this to your initialization code:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = ParseServer(&#123;</div><div class="line">  ...otherOptions,</div><div class="line">  <span class="comment">// Enable email verification</span></div><div class="line">  verifyUserEmails: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// if `verifyUserEmails` is `true` and</span></div><div class="line">  <span class="comment">//     if `emailVerifyTokenValidityDuration` is `undefined` then</span></div><div class="line">  <span class="comment">//        email verify token never expires</span></div><div class="line">  <span class="comment">//     else</span></div><div class="line">  <span class="comment">//        email verify token expires after `emailVerifyTokenValidityDuration`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// `emailVerifyTokenValidityDuration` defaults to `undefined`</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// email verify token below expires in 2 hours (= 2 * 60 * 60 == 7200 seconds)</span></div><div class="line">  emailVerifyTokenValidityDuration: <span class="number">2</span> * <span class="number">60</span> * <span class="number">60</span>, <span class="comment">// in seconds (2 hours = 7200 seconds)</span></div><div class="line"></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to false to allow user to login without verifying their email</span></div><div class="line">  <span class="comment">// set preventLoginWithUnverifiedEmail to true to prevent user from login if their email is not verified</span></div><div class="line">  preventLoginWithUnverifiedEmail: <span class="literal">false</span>, <span class="comment">// defaults to false</span></div><div class="line"></div><div class="line">  <span class="comment">// The public URL of your app.</span></div><div class="line">  <span class="comment">// This will appear in the link that is used to verify email addresses and reset passwords.</span></div><div class="line">  <span class="comment">// Set the mount path as it is in serverURL</span></div><div class="line">  publicServerURL: <span class="string">'https://example.com/parse'</span>,</div><div class="line">  <span class="comment">// Your apps name. This will appear in the subject and body of the emails that are sent.</span></div><div class="line">  appName: <span class="string">'Parse App'</span>,</div><div class="line">  <span class="comment">// The email adapter</span></div><div class="line">  emailAdapter: &#123;</div><div class="line">    <span class="attr">module</span>: <span class="string">'parse-server-simple-mailgun-adapter'</span>,</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="comment">// The address that your emails come from</span></div><div class="line">      fromAddress: <span class="string">'parse@example.com'</span>,</div><div class="line">      <span class="comment">// Your domain from mailgun.com</span></div><div class="line">      domain: <span class="string">'example.com'</span>,</div><div class="line">      <span class="comment">// Your API key from mailgun.com</span></div><div class="line">      apiKey: <span class="string">'key-mykey'</span>,</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// account lockout policy setting (OPTIONAL) - defaults to undefined</span></div><div class="line">  <span class="comment">// if the account lockout policy is set and there are more than `threshold` number of failed login attempts then the `login` api call returns error code `Parse.Error.OBJECT_NOT_FOUND` with error message `Your account is locked due to multiple failed login attempts. Please try again after &lt;duration&gt; minute(s)`. After `duration` minutes of no login attempts, the application will allow the user to try login again.</span></div><div class="line">  accountLockout: &#123;</div><div class="line">    <span class="attr">duration</span>: <span class="number">5</span>, <span class="comment">// duration policy setting determines the number of minutes that a locked-out account remains locked out before automatically becoming unlocked. Set it to a value greater than 0 and less than 100000.</span></div><div class="line">    threshold: <span class="number">3</span>, <span class="comment">// threshold policy setting determines the number of failed sign-in attempts that will cause a user account to be locked. Set it to an integer value greater than 0 and less than 1000.</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// optional settings to enforce password policies</span></div><div class="line">  passwordPolicy: &#123;</div><div class="line">    <span class="comment">// Two optional settings to enforce strong passwords. Either one or both can be specified. </span></div><div class="line">    <span class="comment">// If both are specified, both checks must pass to accept the password</span></div><div class="line">    <span class="comment">// 1. a RegExp object or a regex string representing the pattern to enforce </span></div><div class="line">    validatorPattern: <span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.&#123;8,&#125;)/</span>, <span class="comment">// enforce password with at least 8 char with at least 1 lower case, 1 upper case and 1 digit</span></div><div class="line">    <span class="comment">// 2. a callback function to be invoked to validate the password  </span></div><div class="line">    validatorCallback: <span class="function">(<span class="params">password</span>) =&gt;</span> &#123; <span class="keyword">return</span> validatePassword(password) &#125;, </div><div class="line">    <span class="attr">doNotAllowUsername</span>: <span class="literal">true</span>, <span class="comment">// optional setting to disallow username in passwords</span></div><div class="line">    maxPasswordAge: <span class="number">90</span>, <span class="comment">// optional setting in days for password expiry. Login fails if user does not reset the password within this period after signup/last reset. </span></div><div class="line">    maxPasswordHistory: <span class="number">5</span>, <span class="comment">// optional setting to prevent reuse of previous n passwords. Maximum value that can be specified is 20. Not specifying it or specifying 0 will not enforce history.</span></div><div class="line">    <span class="comment">//optional setting to set a validity duration for password reset links (in seconds)</span></div><div class="line">    resetTokenValidityDuration: <span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>, <span class="comment">// expire after 24 hours</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>You can also use other email adapters contributed by the community such as:</p>
<ul>
<li><a href="https://www.npmjs.com/package/parse-server-postmark-adapter" target="_blank" rel="external">parse-server-postmark-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-sendgrid-adapter" target="_blank" rel="external">parse-server-sendgrid-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mandrill-adapter" target="_blank" rel="external">parse-server-mandrill-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-simple-ses-adapter" target="_blank" rel="external">parse-server-simple-ses-adapter</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailgun-adapter-template" target="_blank" rel="external">parse-server-mailgun-adapter-template</a></li>
<li><a href="https://www.npmjs.com/package/parse-server-mailjet-adapter" target="_blank" rel="external">parse-server-mailjet-adapter</a></li>
<li><a href="https://www.npmjs.com/package/simple-parse-smtp-adapter" target="_blank" rel="external">simple-parse-smtp-adapter</a></li>
</ul>
<h3 id="Using-environment-variables-to-configure-Parse-Server"><a href="#Using-environment-variables-to-configure-Parse-Server" class="headerlink" title="Using environment variables to configure Parse Server"></a>Using environment variables to configure Parse Server</h3><p>You may configure the Parse Server using environment variables:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PORT</div><div class="line">PARSE_SERVER_APPLICATION_ID</div><div class="line">PARSE_SERVER_MASTER_KEY</div><div class="line">PARSE_SERVER_DATABASE_URI</div><div class="line">PARSE_SERVER_URL</div><div class="line">PARSE_SERVER_CLOUD_CODE_MAIN</div></pre></td></tr></table></figure>
<p>The default port is 1337, to use a different port set the PORT environment variable:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ PORT=8080 parse-server --appId APPLICATION_ID --masterKey MASTER_KEY</div></pre></td></tr></table></figure>
<p>For the full list of configurable environment variables, run <code>parse-server --help</code>.</p>
<h3 id="Available-Adapters"><a href="#Available-Adapters" class="headerlink" title="Available Adapters"></a>Available Adapters</h3><p><a href="https://github.com/parse-server-modules" target="_blank" rel="external">Parse Server Modules (Adapters)</a></p>
<h3 id="Configuring-File-Adapters"><a href="#Configuring-File-Adapters" class="headerlink" title="Configuring File Adapters"></a>Configuring File Adapters</h3><p>Parse Server allows developers to choose from several options when hosting files:</p>
<ul>
<li><code>GridStoreAdapter</code>, which is backed by MongoDB;</li>
<li><code>S3Adapter</code>, which is backed by <a href="https://aws.amazon.com/s3/" target="_blank" rel="external">Amazon S3</a>; or</li>
<li><code>GCSAdapter</code>, which is backed by <a href="https://cloud.google.com/storage/" target="_blank" rel="external">Google Cloud Storage</a></li>
</ul>
<p><code>GridStoreAdapter</code> is used by default and requires no setup, but if you’re interested in using S3 or Google Cloud Storage, additional configuration information is available in the <a href="https://github.com/ParsePlatform/parse-server/wiki/Configuring-File-Adapters" target="_blank" rel="external">Parse Server wiki</a>.</p>
<h1 id="Support"><a href="#Support" class="headerlink" title="Support"></a>Support</h1><p>For implementation related questions or technical support, please refer to the <a href="http://stackoverflow.com/questions/tagged/parse.com" target="_blank" rel="external">Stack Overflow</a> and <a href="https://serverfault.com/tags/parse" target="_blank" rel="external">Server Fault</a> communities.</p>
<p>If you believe you’ve found an issue with Parse Server, make sure these boxes are checked before <a href="https://github.com/ParsePlatform/parse-server/issues" target="_blank" rel="external">reporting an issue</a>:</p>
<ul>
<li><p>[ ] You’ve met the <a href="https://github.com/ParsePlatform/parse-server/wiki/Parse-Server-Guide#prerequisites" target="_blank" rel="external">prerequisites</a>.</p>
</li>
<li><p>[ ] You’re running the <a href="https://github.com/ParsePlatform/parse-server/releases" target="_blank" rel="external">latest version</a> of Parse Server.</p>
</li>
<li><p>[ ] You’ve searched through <a href="https://github.com/ParsePlatform/parse-server/issues?utf8=%E2%9C%93&amp;q=" target="_blank" rel="external">existing issues</a>. Chances are that your issue has been reported or resolved before.</p>
</li>
</ul>
<h1 id="Want-to-ride-the-bleeding-edge"><a href="#Want-to-ride-the-bleeding-edge" class="headerlink" title="Want to ride the bleeding edge?"></a>Want to ride the bleeding edge?</h1><p>The <code>latest</code> branch in this repository is automatically maintained to be the last<br>commit to <code>master</code> to pass all tests, in the same form found on npm. It is<br>recommend to use builds deployed npm for many reasons, but if you want to use<br>the latest not-yet-released version of parse-server, you can do so by depending<br>directly on this branch:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install parseplatform/parse-<span class="keyword">server</span>.git<span class="meta">#latest</span></div></pre></td></tr></table></figure>
<h1 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h1><p>We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the <a href="CONTRIBUTING.md">Contributing to Parse Server guide</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;.github/parse-server-logo.png?raw=true&quot; alt=&quot;Parse Server logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/ParsePlatform/parse-serv
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="database" scheme="http://yoursite.com/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL for ParserServer</title>
    <link href="http://yoursite.com/2017/03/25/graphql_for_parserserver/"/>
    <id>http://yoursite.com/2017/03/25/graphql_for_parserserver/</id>
    <published>2017-03-25T14:57:05.000Z</published>
    <updated>2017-03-25T08:59:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GraphQL-for-Parse-Server"><a href="#GraphQL-for-Parse-Server" class="headerlink" title="GraphQL for Parse Server"></a>GraphQL for Parse Server</h1><p><a href="https://travis-ci.org/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://travis-ci.org/thebakeryio/parse-graphql-server.svg?branch=master" alt="Build Status"></a><br><a href="https://codeclimate.com/github/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://codeclimate.com/github/thebakeryio/parse-graphql-server/badges/gpa.svg" alt="Code Climate"></a><br><a href="https://codeclimate.com/github/thebakeryio/parse-graphql-server/coverage" target="_blank" rel="external"><img src="https://codeclimate.com/github/thebakeryio/parse-graphql-server/badges/coverage.svg" alt="Test Coverage"></a><br><a href="https://david-dm.org/thebakeryio/parse-graphql-server" target="_blank" rel="external"><img src="https://david-dm.org/thebakeryio/parse-graphql-server.svg" alt="Dependency Status"></a><br><a href="https://david-dm.org/thebakeryio/parse-graphql-server#info=devDependencies" target="_blank" rel="external"><img src="https://david-dm.org/thebakeryio/parse-graphql-server/dev-status.svg" alt="devDependency Status"></a></p>
<h2 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use"></a>When to use</h2><ul>
<li>you are using Parse SDK (web or mobile) coupled with Parse Server running on Express</li>
<li>you are using GraphQL</li>
<li>you want to control access to Parse models in your resolvers using Parse ACL system</li>
<li>you are using <a href="https://github.com/thebakeryio/parse-graphql-client" target="_blank" rel="external">parse-graphql-client</a> package</li>
</ul>
<h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save graphql parse-graphql-server parse</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"><span class="keyword">import</span> Parse <span class="keyword">from</span> <span class="string">'parse/node'</span>;</div><div class="line"><span class="keyword">import</span> parseGraphQLHTTP <span class="keyword">from</span> <span class="string">'parse-graphql-server'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  GraphQLObjectType,</div><div class="line">  GraphQLSchema,</div><div class="line">  GraphQLID,</div><div class="line">  GraphQLString,</div><div class="line">  GraphQLBoolean,</div><div class="line">  GraphQLList,</div><div class="line">  GraphQLNonNull,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'graphql'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Todo = Parse.Object.extend(<span class="string">'Todo'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> TodoType = <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Todo'</span>,</div><div class="line">  <span class="attr">description</span>: <span class="string">'Item in todo list'</span>,</div><div class="line">  <span class="attr">fields</span>: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">    <span class="attr">id</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLID,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">text</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLString,</div><div class="line">      <span class="attr">resolve</span>: <span class="function"><span class="params">todo</span> =&gt;</span> todo.get(<span class="string">'text'</span>),</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">isComplete</span>: &#123;</div><div class="line">      <span class="attr">type</span>: GraphQLBoolean,</div><div class="line">      <span class="attr">resolve</span>: <span class="function"><span class="params">todo</span> =&gt;</span> todo.get(<span class="string">'isComplete'</span>),</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> schema = <span class="keyword">new</span> GraphQLSchema(&#123;</div><div class="line">  <span class="attr">query</span>: <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Query'</span>,</div><div class="line">    <span class="attr">fields</span>: &#123;</div><div class="line">      <span class="attr">todos</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="keyword">new</span> GraphQLList(TodoType),</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, args, &#123; user, Query &#125;</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> query = <span class="keyword">new</span> Query(Todo);</div><div class="line">          <span class="keyword">return</span> query.find();</div><div class="line">        &#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">  <span class="attr">mutation</span>: <span class="keyword">new</span> GraphQLObjectType(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'Mutation'</span>,</div><div class="line">    <span class="attr">fields</span>: &#123;</div><div class="line">      <span class="attr">addTodo</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Todo.SchemaType,</div><div class="line">        <span class="attr">description</span>: <span class="string">'Create a new todo item'</span>,</div><div class="line">        <span class="attr">args</span>: &#123;</div><div class="line">          <span class="attr">text</span>: &#123; <span class="attr">type</span>: <span class="keyword">new</span> GraphQLNonNull(GraphQLString) &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, &#123; text &#125;, &#123; Query, user &#125;</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">const</span> newTodo = <span class="keyword">new</span> Query(Todo).create(&#123; text, <span class="attr">isComplete</span>: <span class="literal">false</span> &#125;);</div><div class="line">          <span class="keyword">if</span> (user) &#123;</div><div class="line">            newTodo.setACL(<span class="keyword">new</span> Parse.ACL(user));</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">return</span> newTodo.save().then(<span class="function"><span class="params">td</span> =&gt;</span> td);</div><div class="line">        &#125;,</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">deleteTodo</span>: &#123;</div><div class="line">        <span class="attr">type</span>: Todo.SchemaType,</div><div class="line">        <span class="attr">description</span>: <span class="string">'Delete a todo'</span>,</div><div class="line">        <span class="attr">args</span>: &#123;</div><div class="line">          <span class="attr">id</span>: &#123; <span class="attr">type</span>: <span class="keyword">new</span> GraphQLNonNull(GraphQLID) &#125;,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">resolve</span>: <span class="function">(<span class="params">_, &#123; id &#125;, &#123; Query &#125;</span>) =&gt;</span></div><div class="line">          <span class="keyword">new</span> Query(Todo).get(id).then(<span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">if</span> (todo) &#123;</div><div class="line">              <span class="keyword">return</span> todo.destroy();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> todo;</div><div class="line">          &#125;),</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.use(<span class="string">'/graphql'</span>, parseGraphQLHTTP(&#123; schema, <span class="attr">graphiql</span>: <span class="literal">true</span>, &#125;));</div><div class="line"></div><div class="line">app.listen(process.env.PORT, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'server running'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Writing-resolvers"><a href="#Writing-resolvers" class="headerlink" title="Writing resolvers"></a>Writing resolvers</h2><p>When using Parse GraphQL server package, all your GraphQL resolvers include authentication information and updated version of Parse.Query that passes ACL info along to make sure your queries are authenticated</p>
<pre><code>{
  resolve: (_, args, { Query, user }) =&gt; {
    // **Query** is a patched version of Parse.Query that
    // includes session token information for the currently authenticated 
    // user (if any)
    // It also extends basic Parse.Query to include a **create** method:
    // const newTodo = new Query(Todo).create({ text, isComplete: false });
    //
    // **user** is an instance of Parse.User set to the authenticated user (if any)
  },
}
</code></pre><h2 id="Client-side"><a href="#Client-side" class="headerlink" title="Client side"></a>Client side</h2><p>Parse GraphQL server looks for <strong>Authorization</strong> header set to the session token of the current Parse User. <a href="https://github.com/thebakeryio/parse-graphql-client" target="_blank" rel="external">Parse GraphQL client</a> sets this up for you automatically.  </p>
<h2 id="See-it-in-action"><a href="#See-it-in-action" class="headerlink" title="See it in action"></a>See it in action</h2><ul>
<li><a href="https://github.com/thebakeryio/todomvc-react-native" target="_blank" rel="external">TodoMVC using React Native</a></li>
</ul>
<h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>Parse GraphQL server relies heavily on <a href="https://github.com/graphql/express-graphql" target="_blank" rel="external">Express GraphQL package</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GraphQL-for-Parse-Server&quot;&gt;&lt;a href=&quot;#GraphQL-for-Parse-Server&quot; class=&quot;headerlink&quot; title=&quot;GraphQL for Parse Server&quot;&gt;&lt;/a&gt;GraphQL for Pa
    
    </summary>
    
      <category term="Readme" scheme="http://yoursite.com/categories/Readme/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>becoming a profess programmer</title>
    <link href="http://yoursite.com/2017/03/25/becoming-a-profess-programmer/"/>
    <id>http://yoursite.com/2017/03/25/becoming-a-profess-programmer/</id>
    <published>2017-03-25T14:48:22.000Z</published>
    <updated>2017-03-25T06:49:51.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code># 前言
</code></pre><p>成为一名专业程序员的道路上，需要坚持练习、学习与积累，技术方面既要有一定的广度，更要有自己的深度。</p>
<p>笔者作为一位tool mad，将工作以来用到的各种优秀资料、神器及框架整理在此，毕竟好记性不如烂键盘，此项目可以作为自己的不时之需。</p>
<p>本人喜欢折腾，记录的东西也比较杂，各方面都会有一些，内容按重要等级排序，大家各取所需。</p>
<p>这里的东西会持续积累下去，欢迎Star，也欢迎发PR给我。</p>
<p><a href="https://github.com/thonatos" target="_blank" rel="external">Thonatos.Yang</a>整理的GitBook版本，阅读体验更佳：<a href="https://thonatos.gitbooks.io/be-a-professional-programmer/" target="_blank" rel="external">https://thonatos.gitbooks.io/be-a-professional-programmer/</a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- START doctoc generated TOC please keep comment here to allow auto update -->
<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->
<ul>
<li><a href="#%E8%B5%84%E6%96%99%E7%AF%87">资料篇</a><ul>
<li><a href="#%E6%8A%80%E6%9C%AF%E7%AB%99%E7%82%B9">技术站点</a></li>
<li><a href="#%E5%BF%85%E7%9C%8B%E4%B9%A6%E7%B1%8D">必看书籍</a></li>
<li><a href="#%E5%A4%A7%E7%89%9B%E5%8D%9A%E5%AE%A2">大牛博客</a></li>
<li><a href="#github%E7%AF%87">GitHub篇</a></li>
</ul>
</li>
<li><a href="#%E5%B7%A5%E5%85%B7%E7%AF%87">工具篇</a><ul>
<li><a href="#%E5%B9%B3%E5%8F%B0%E5%B7%A5%E5%85%B7">平台工具</a></li>
<li><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1">第三方服务</a></li>
<li><a href="#%E7%88%AC%E8%99%AB%E7%9B%B8%E5%85%B3%E5%A5%BD%E7%8E%A9%E7%9A%84%E5%B7%A5%E5%85%B7">爬虫相关(好玩的工具)</a></li>
<li><a href="#%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3">安全相关</a></li>
<li><a href="#web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8">Web服务器性能/压力测试工具/负载均衡器</a></li>
</ul>
</li>
<li><a href="#%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%88%86%E5%B8%83%E5%BC%8F%E5%B7%A5%E5%85%B7">大数据处理/数据分析/分布式工具</a></li>
<li><a href="#web%E5%89%8D%E7%AB%AF">Web前端</a></li>
<li><a href="#%E8%AF%AD%E8%A8%80%E7%AF%87">语言篇</a><ul>
<li><a href="#scala">Scala</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#swift">Swift</a></li>
<li><a href="#net">.NET</a></li>
<li><a href="#c--c">C &amp; C++</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96">其他</a><ul>
<li><a href="#%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3">游戏开发相关</a></li>
<li><a href="#%E6%97%A5%E5%BF%97%E8%81%9A%E5%90%88%E5%88%86%E5%B8%83%E5%BC%8F%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">日志聚合，分布式日志收集</a></li>
<li><a href="#rtp%E5%AE%9E%E6%97%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%9F%B3%E8%A7%86%E9%A2%91">RTP,实时传输协议与音视频</a></li>
</ul>
</li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="资料篇"><a href="#资料篇" class="headerlink" title="资料篇"></a>资料篇</h2><h3 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a>技术站点</h3><ul>
<li>在线学习：<a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a>、<a href="https://www.edx.org/" target="_blank" rel="external">edX</a>、<a href="https://cn.udacity.com/" target="_blank" rel="external">Udacity</a>、<a href="https://ocw.mit.edu/index.htm" target="_blank" rel="external">MIT公开课</a>、<a href="http://mooc.guokr.com/course/" target="_blank" rel="external">MOOC学院</a>、<a href="http://www.imooc.com/" target="_blank" rel="external">慕课网</a></li>
<li><a href="https://news.ycombinator.com/" target="_blank" rel="external">Hacker News</a>：非常棒的针对编程的链接聚合网站</li>
<li><a href="https://www.techmeme.com/" target="_blank" rel="external">Techmeme</a>：美国知名科技新闻和博客聚集网站，类似的还有（Panda, Hacker &amp; Designer News）</li>
<li><a href="https://www.reddit.com/r/programming/" target="_blank" rel="external">Reddit - Programming板块</a>：同上</li>
<li>Java牛人必备：<a href="http://www.programcreek.com/" target="_blank" rel="external">Program Creek</a></li>
<li><a href="https://stackoverflow.com/" target="_blank" rel="external">Stack Overflow</a>：IT技术问答网站</li>
<li><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a>：中文的技术问答社区</li>
<li><a href="https://github.com/" target="_blank" rel="external">GitHub</a>：全球最大的源代码管理平台，很多知名开源项目都在上面，如<a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux内核</a>，<a href="https://github.com/openstack/openstack" target="_blank" rel="external">OpenStack</a>等</li>
<li><a href="https://git.oschina.net/" target="_blank" rel="external">码云</a>：支持中文可免费创建私有项目的代码托管平台，可作为备选</li>
<li><a href="https://leetcode.com/" target="_blank" rel="external">LeetCode</a>：来做做这些题吧，看看自己的算法水平如何？这可比什么面试宝典强多了。</li>
<li><a href="http://www.lintcode.com/zh-cn/" target="_blank" rel="external">LintCode</a>：支持中文的编程题在线训练平台，可作为备选</li>
<li><a href="https://www.kaggle.com/" target="_blank" rel="external">Kaggle</a>,<a href="https://www.topcoder.com/" target="_blank" rel="external">Topcoder</a>: 机器学习、大数据竞赛</li>
<li><a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a>：高质量的技术社区</li>
<li><a href="https://toutiao.io/" target="_blank" rel="external">开发者头条</a></li>
<li><a href="http://www.infoq.com/cn" target="_blank" rel="external">InfoQ</a>：企业级应用，关注软件开发领域</li>
<li><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX: way to explore</a></li>
<li>国内老牌技术社区：<a href="https://www.oschina.net/" target="_blank" rel="external">OSChina</a>、<a href="http://www.cnblogs.com/" target="_blank" rel="external">博客园</a>、<a href="http://www.csdn.net/" target="_blank" rel="external">CSDN</a>、<a href="http://www.51cto.com/" target="_blank" rel="external">51CTO</a></li>
<li>免费的it电子书：<a href="http://it-ebooks.info/" target="_blank" rel="external">http://it-ebooks.info/</a></li>
<li>在线学习：<a href="http://www.udemy.com/" target="_blank" rel="external">http://www.udemy.com/</a></li>
<li>优质学习资源：<a href="http://plus.mojiax.com/" target="_blank" rel="external">http://plus.mojiax.com/</a></li>
<li>代码练习：<a href="http://exercism.io/" target="_blank" rel="external">http://exercism.io/</a>   and  <a href="https://www.codingame.com" target="_blank" rel="external">https://www.codingame.com</a></li>
<li><a href="http://www.devstore.cn/" target="_blank" rel="external">DevStore</a>:开发者服务商店</li>
<li><a href="https://msdn.microsoft.com/zh-cn" target="_blank" rel="external">MSDN</a>：微软相关的官方技术集中地，主要是文档类</li>
<li><a href="https://developers.google.cn/" target="_blank" rel="external">谷歌开发者</a></li>
<li><a href="http://www.ctolib.com/" target="_blank" rel="external">码库</a> - 收录了实用的开源项目及资源</li>
<li><a href="http://coding.net" target="_blank" rel="external">Coding</a> 基于Git的国内代码托管平台，支持私有项目，有项目管理相关功能</li>
</ul>
<h3 id="必看书籍"><a href="#必看书籍" class="headerlink" title="必看书籍"></a>必看书籍</h3><ul>
<li>SICP(<a href="https://mitpress.mit.edu/sicp/" target="_blank" rel="external">Structure and Interpretation of Computer Programs</a>)</li>
<li>深入理解计算机系统</li>
<li>代码大全2</li>
<li>人件</li>
<li>人月神话</li>
<li>软件随想录</li>
<li>算法导论（麻省理工学院出版社）</li>
<li>离散数学及其应用</li>
<li>设计模式</li>
<li>编程之美</li>
<li>黑客与画家</li>
<li>编程珠玑</li>
<li>The Little Schemer</li>
<li>Simply Scheme_Introducing_Computer_Science</li>
<li>C++ Prime</li>
<li>Effective C++</li>
<li>TCP/IP详解</li>
<li>Unix 编程艺术</li>
<li>技术的本质</li>
<li>软件随想录</li>
<li>计算机程序设计艺术</li>
<li>职业篇：程序员的自我修养,程序员修炼之道,高效能程序员的修炼</li>
<li>《精神分析引论》弗洛伊德</li>
<li>《失控》《科技想要什么》《技术元素》凯文凯利</li>
<li>程序开发心理学</li>
<li>天地一沙鸥</li>
<li>搞定：无压力工作的艺术</li>
</ul>
<h3 id="大牛博客"><a href="#大牛博客" class="headerlink" title="大牛博客"></a>大牛博客</h3><ul>
<li>云风（游戏界大牛）: <a href="http://blog.codingnow.com/" target="_blank" rel="external">http://blog.codingnow.com/</a></li>
<li>王垠（不少文章喷到蛮有道理）：<a href="http://www.yinwang.org/" target="_blank" rel="external">http://www.yinwang.org/</a></li>
<li>冰河-伞哥(Lisp大牛)：<a href="http://tianchunbinghe.blog.163.com/" target="_blank" rel="external">http://tianchunbinghe.blog.163.com/</a></li>
<li>R大<a href="https://zhuanlan.zhihu.com/p/25042028" target="_blank" rel="external">【干货满满】RednaxelaFX写的文章/回答的导航帖</a></li>
<li>陈皓-左耳朵耗子：<a href="http://coolshell.cn/" target="_blank" rel="external">http://coolshell.cn/</a></li>
<li>Jeff Atwood（国外知名博主）: <a href="https://blog.codinghorror.com/" target="_blank" rel="external">https://blog.codinghorror.com/</a></li>
<li>阮一峰（黑客与画家译者，Web）：<a href="http://www.ruanyifeng.com/" target="_blank" rel="external">http://www.ruanyifeng.com/</a></li>
<li>廖雪峰（他的Python、Git教程不少人都看过）：<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>道哥的黑板报（安全）：<a href="https://zhuanlan.zhihu.com/taosay" target="_blank" rel="external">https://zhuanlan.zhihu.com/taosay</a></li>
<li><a href="https://github.com/search?l=&amp;o=desc&amp;p=1&amp;q=location%3AChina&amp;ref=advsearch&amp;s=followers&amp;type=Users&amp;utf8=%E2%9C%93" target="_blank" rel="external">国内GitHub上关注度较高的开发者</a></li>
</ul>
<h3 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h3><p><strong> Awesome </strong></p>
<ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome</a>: 这是个Awesome合集，常见的资料这里面都能找到</li>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">Awesome2</a>: 类似第一个Awesome</li>
<li><a href="https://github.com/jnv/lists" target="_blank" rel="external">杂七杂八、有用没用的Awesome合集</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">非常不错的语言类学习资料集合：Awesomeness</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">awesome-ios-ui</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
<li><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></li>
<li><a href="https://github.com/caesar0301/awesome-public-datasets" target="_blank" rel="external">awesome-public-datasets</a></li>
<li><a href="https://github.com/paragonie/awesome-appsec" target="_blank" rel="external">awesome-AppSec(系统安全)</a></li>
<li><a href="https://github.com/okulbilisim/awesome-datascience" target="_blank" rel="external">awesome-datascience</a></li>
<li><a href="https://github.com/fasouto/awesome-dataviz" target="_blank" rel="external">awesome-dataviz</a> - 数据可视化库及资料</li>
<li><a href="https://github.com/jacksu/awesome-es" target="_blank" rel="external">awesome-es</a></li>
</ul>
<p><strong> 书籍资料 </strong></p>
<ul>
<li><a href="https://github.com/bingwen/free-programming-books/blob/master/free-programming-books-ch.md" target="_blank" rel="external">free-programming-books</a> <a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="external">中文版</a></li>
<li><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">免费的编程中文书籍索引</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="external">《程序员编程艺术 — 面试和算法心得》</a></li>
<li><a href="https://github.com/dariubs/GoBooks" target="_blank" rel="external">GoBooks</a></li>
<li><a href="https://github.com/papers-we-love/papers-we-love" target="_blank" rel="external">Papers we love</a></li>
<li><a href="https://github.com/JustFollowUs/Natural-Language-Processing" target="_blank" rel="external">自然语言处理NLP推荐学习路线及参考资料</a></li>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">超级棒的机器学习资料（框架，库，软件）</a>, <a href="http://www.oschina.net/news/53818/awesome-machine-learning" target="_blank" rel="external">中文翻译版</a></li>
<li><a href="http://news.cnblogs.com/n/504467/" target="_blank" rel="external">机器学习(Machine Learning)&amp;深入学习(Deep Learning)资料</a></li>
<li><a href="http://special.csdncms.csdn.net/BeDocker/" target="_blank" rel="external">Docker资料合集</a></li>
<li><a href="https://github.com/apache/incubator-storm/tree/master/examples/storm-starter" target="_blank" rel="external">学习使用Strom</a></li>
<li><a href="http://ercoppa.github.io/HadoopInternals/" target="_blank" rel="external">Hadoop Internals</a></li>
<li><a href="https://github.com/JerryLead/SparkInternals/tree/master/markdown" target="_blank" rel="external">Spark Internals</a></li>
<li><a href="http://hadoop.readthedocs.org/en/latest/" target="_blank" rel="external">大数据时代的数据分析与数据挖掘 – 基于Hadoop实现</a></li>
<li><a href="http://samypesse.gitbooks.io/how-to-create-an-operating-system/index.html" target="_blank" rel="external">如何制作操作系统</a></li>
<li><a href="https://github.com/zhuangbiaowei/learn-with-open-source" target="_blank" rel="external">借助开源项目学习软件开发</a></li>
<li><a href="http://code.csdn.net/news/2821842" target="_blank" rel="external">几个不错的开源游戏引擎</a></li>
<li><a href="https://github.com/hit9/PyZh" target="_blank" rel="external">一起写Python文章，一起看Python文章</a></li>
<li><a href="http://blog.fens.me/series-r/" target="_blank" rel="external">R的极客理想系列文章</a></li>
<li><a href="https://github.com/bolasblack/http-api-guide" target="_blank" rel="external">HTTP接口设计指南</a></li>
<li><a href="https://github.com/foru17/front-end-collect" target="_blank" rel="external">分享自己长期关注的前端开发相关的优秀网站、博客、以及活跃开发者</a></li>
<li><a href="https://github.com/rxin/db-readings" target="_blank" rel="external">Readings in Databases</a></li>
<li><a href="https://github.com/rushter/data-science-blogs" target="_blank" rel="external">Data Science blogs</a></li>
<li><a href="https://github.com/oldratlee/translations/blob/master/log-what-every-software-engineer-should-know-about-real-time-datas-unifying/README.md" target="_blank" rel="external">日志：每个软件工程师都应该知道的有关实时数据的统一概念</a></li>
<li><a href="http://guides.codepath.com/android" target="_blank" rel="external">Android Code Path</a></li>
<li><a href="https://github.com/GeniusVJR/LearningNotes" target="_blank" rel="external">Android Learn Notes</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="external">PHP 类库框架，资料集合</a></li>
</ul>
<p><strong> 优秀项目 </strong></p>
<ul>
<li><a href="http://news.cnblogs.com/n/506775/" target="_blank" rel="external">最值得关注的10个C语言开源项目</a></li>
<li><a href="http://code.csdn.net/news/2822568" target="_blank" rel="external">15款值得学习的小型开源项目</a></li>
<li><a href="https://github.com/Aufree/trip-to-iOS" target="_blank" rel="external">iOS-100个开源组件</a></li>
<li><a href="http://code.csdn.net/news/2822753" target="_blank" rel="external">十大Material Design开源项目</a></li>
<li><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android开源项目分类汇总</a></li>
</ul>
<p><strong> 前端 &amp; Node.js </strong></p>
<ul>
<li><a href="https://github.com/moklick/frontend-stuff" target="_blank" rel="external">前端资源</a></li>
<li><a href="https://github.com/w3crange/Front-End-Develop-Guide" target="_blank" rel="external">前端开发指南</a></li>
<li><a href="http://html5ify.com/fks/" target="_blank" rel="external">前端技能汇总</a></li>
<li><a href="http://www.daqianduan.com/nav" target="_blank" rel="external">前端资源大导航</a></li>
<li><a href="https://github.com/lisposter/frontend-books" target="_blank" rel="external">收集前端方面的书籍</a></li>
<li><a href="https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions" target="_blank" rel="external">2014年最新前端开发面试题</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">简单清晰的JavaScript语言教程，代码示例</a></li>
<li><a href="https://github.com/airbnb/javascript" target="_blank" rel="external">JavaScript编程规范</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JavaScript必看视频</a></li>
<li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript标准参考教程（阮一峰的，整理的不错）</a></li>
<li><a href="https://github.com/bolshchikov/js-must-watch" target="_blank" rel="external">JS必看</a></li>
<li><a href="https://github.com/jmcunningham/AngularJS-Learning/blob/master/ZH-CN.md" target="_blank" rel="external">AngularJS Guide的中文分支</a></li>
<li><a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="external">Angular2学习资料</a></li>
<li><a href="https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md" target="_blank" rel="external">AngularJS应用的最佳实践和风格指南</a></li>
<li><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external">React-Native学习指南</a></li>
<li><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="external">七天学会NodeJS</a></li>
<li><a href="https://github.com/sergtitov/NodeJS-Learning/blob/master/cn_resource.md" target="_blank" rel="external">node.js中文资料导航</a></li>
<li><a href="http://blog.fens.me/nodejs-roadmap/" target="_blank" rel="external">Nodejs学习路线图</a></li>
<li><a href="http://stackoverflow.com/questions/2353818/how-do-i-get-started-with-node-js/9629682#9629682" target="_blank" rel="external">如何学习nodejs</a></li>
</ul>
<p><strong> 工作，工具 </strong></p>
<ul>
<li><a href="https://github.com/kahun/awesome-sysadmin" target="_blank" rel="external">系统管理员工具集合</a></li>
<li><a href="http://git-scm.com/book/zh" target="_blank" rel="external">Pro Git</a></li>
<li><a href="https://github.com/taobao/nginx-book" target="_blank" rel="external">Nginx开发从入门到精通</a></li>
<li><a href="https://github.com/justjavac/Google-IPs.git" target="_blank" rel="external">Google 全球 IP 地址库</a></li>
<li><a href="https://github.com/greatghoul/remote-working" target="_blank" rel="external">收集整理远程工作相关的资料</a></li>
<li><a href="https://github.com/chriskempson/base16" target="_blank" rel="external">Color schemes for hackers</a></li>
<li><a href="https://github.com/ellisonleao/magictools" target="_blank" rel="external">游戏开发工具集，MagicTools</a></li>
<li><a href="https://github.com/ripienaar/free-for-dev" target="_blank" rel="external">开发者工具箱， free-for-dev</a></li>
<li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="external">GitHub秘籍</a></li>
<li><a href="https://github.com/agis-/git-style-guide" target="_blank" rel="external">Git风格指南</a></li>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Bast-App</a></li>
</ul>
<h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a>平台工具</h3><ul>
<li>Phabricator: 软件开发平台，Facebook出品，现已开源，CodeReview神器（从这个往下一直到GitLab之间的工具统统可以忽略了）</li>
<li>Redmine/Trac：项目管理平台</li>
<li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是Apache下的CI系统，还没来得及研究）</li>
<li>git，svn：源代码版本控制系统</li>
<li>GitLab/Gitorious：构建自己的GitHub服务器</li>
<li>Postman:RESTful，api测试工具，HTTP接口开发必备神器</li>
<li><a href="http://airbnb.design/lottie/" target="_blank" rel="external">Lottie</a>: AE动画变原生代码，设计师必备</li>
<li>Sonar：代码质量管理平台</li>
<li>Nessus: 系统漏洞扫描器</li>
<li>gitbook：<a href="https://www.gitbook.io/" target="_blank" rel="external">https://www.gitbook.io/</a>写书的好东西，当然用来写文档也很不错的（发现不少产品的文档就是用的它）</li>
<li>Travis-ci：开源项目持续集成必备，和GitHub相结合，<a href="https://travis-ci.org/" target="_blank" rel="external">https://travis-ci.org/</a></li>
<li>Trello：简单高效的项目管理平台，注重看板管理</li>
<li>日志聚合：graylog、ELK（推荐新一代的graylog，基本上算作是开源的Splunk了）</li>
<li>开源测试工具、社区（Selenium、OpenQA.org）</li>
<li>Puppet:一个自动管理引擎，可以适用于Linux、Unix以及Windows平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理1台，还是上万台机器Puppet都能轻松搞定。其他类似工具：CFEngine、SaltStack、Ansible</li>
<li>Nagios：系统状态监控报警，还有个Icinga(完全兼容nagios所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li>
<li>Ganglia：分布式监控系统</li>
<li>fleet：分布式init系统</li>
<li>Ansible：能够大大简化Unix管理员的自动化配置管理与流程控制方式。</li>
<li>GeoLite免费数据库</li>
<li>jsHint:js代码验证工具</li>
<li>haproxy: 高可用负载均衡（此外类似的系统还有nginx，lvs）</li>
<li>linux OS性能分析工具：dstat，iostat，iotop，nmon</li>
<li>kimono：将网页信息转换为api接口的工具</li>
<li>集群管理工具：pdsh，ClusterSSH，mussh（可以用它快速管理Hadoop集群）ipa-server做统一的认证管理</li>
<li>influxdb: 分布式时序数据库，结合Grafana可以进行实时数据分析</li>
<li>dot: 程序员绘图利器（是种语言，也是个工具）</li>
<li>Graph::Easy: （Ascii Art工具）字符流程图绘制，实乃程序员装逼神器。其他类似的工具Asciiflow, vi插件：drawit!</li>
<li>spf13-vim: 让你的vim飞起来！</li>
<li>Kubernetes: 容器集群管理系统</li>
<li>Gatling: 服务器性能压力测试工具</li>
<li>systemtap: Linux内核探测工具、内核调试神器</li>
<li>Cygwin：Windows下的类UNIX模拟环境</li>
<li>MinGW：Windows下的GNU工具集</li>
</ul>
<h3 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h3><ul>
<li><a href="https://github.com/hzlzh/Best-App" target="_blank" rel="external">Mac下的神兵利器</a></li>
<li><a href="https://asciinema.org/" target="_blank" rel="external">asciinema</a>: 终端录屏神器</li>
<li>Fiddler：非常好用的Web前端调试工具，当然是针对底层http协议的，一般情况使用Chrome等自带的调试工具也足够了，特殊情况还得用它去处理</li>
<li>Charles: Mac上的Web代理调试工具，类似Fiddler</li>
<li><a href="https://fir.im/" target="_blank" rel="external">fir.im</a>免费的移动App内测托管平台</li>
<li>wireshark：知名的网络数据包分析工具</li>
<li>PowerCmd:替代Windows Cmd的利器</li>
<li>RegexBuddy:强大的正则表达式测试工具</li>
<li>Soure Insight：源代码阅读神器</li>
<li>SublimeText：程序员最爱的编辑器</li>
<li>Database.NET：一个通用的关系型数据库客户端，基于.NET 4.0开发的，做简单的处理还是蛮方便的</li>
<li>Navicat Premium：支持MySql、PostgreSQL、Oracle、Sqlite和SQL Server的客户端，通用性上不如Database.NET，但性能方面比Database.NET好很多，自带备份功能也用于数据库定时备份。</li>
<li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li>
<li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li>
<li>Radmin: 远程控制工具，用了一段时间的DameWare，还要破解，对Win7支持的不好，还是发现这个好用</li>
<li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li>
<li>Clover：给资源管理器加上多标签，我平时工作的时候就用它，像Chrome一样使用资源管理器，甚是方便啊（这是Windows平台的）</li>
<li>WinLaunch：模拟Mac OS的Launch工具</li>
<li>OllyDbg: OD大名鼎鼎的反汇编工具，Win平台</li>
<li>Fritzing：绘制电路图</li>
<li>LICEcap：gif教程制作</li>
<li>git，svn：版本控制系统</li>
<li>Enigma Virtual Box（将exe，dll等封装成一个可执行程序）</li>
<li>Open DBDiff(针对SqlServer)数据库同步</li>
<li>SymmetricDS：数据库同步</li>
<li>BIEE,Infomatica，SPSS，weka，R语言：数据分析</li>
<li>CodeSmith，LightSwitch：代码生成</li>
<li>Pandoc：Markdown转换工具，出书用的。以前玩过docbook，不过现在还是Markdown盛行啊。</li>
<li>Window Magnet[Mac]：增强Mac窗口管理功能，想Win7一样具有窗口拖放到屏幕边缘自动调整的功能</li>
<li>log explorer：查看SqlServer日志</li>
<li>dependency walker：查询Windows应用程序dll依赖项</li>
<li>Shairport4w：将iPhone，iPad，iPod上的音频通过AirPlay协议传输到PC上</li>
<li>ngrok：内网穿透工具</li>
<li>Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错<a href="http://www.processon.com/" target="_blank" rel="external">http://www.processon.com/</a></li>
<li>Origami: 次世代交互设计神器</li>
<li>百度脑图：<a href="http://naotu.baidu.com/" target="_blank" rel="external">http://naotu.baidu.com/</a></li>
<li>tinyproxy:（Linux）小型的代理服务器支持http和https协议</li>
<li>EaseUS Partition Master：超级简单的分区调整工具，速度还是蛮快的，C盘不够用了就用它从D盘划点空间吧，不用重装系统这么折腾哦。</li>
<li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑6的时候就用的它，超级方便呢）</li>
<li>ApkIDE:Android反编译神器</li>
<li>翻、墙工具（自|由|门、天行浏览器，免费的VPN：<a href="http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）" target="_blank" rel="external">http://www.mangovpn.com/）,发现最方便还属Lantern，免费用起来超级方便（更新于2015-08-22）</a></li>
<li>设计工具：Sketch、OmniGraffle</li>
<li>MindManger：思维导图</li>
<li>MagicDraw:Uml图工具</li>
<li>innotop：MySql状态监测工具</li>
<li>墨刀：比Axure更为简单的原型工具，可以快速制作原型</li>
<li>Karabiner: Mac专用，修改键盘键位的神器，机械键盘必备</li>
<li>Timing：Mac专用，统计你的时间都花在哪了</li>
<li>f.lux: 护眼神器，过滤蓝光，程序员护眼必备良品</li>
<li>LaTeX: 基于ΤΕΧ的排版系统, 让写论文更方便</li>
<li>Antlr：开源的语法分析器，可以让你毫无压力的写个小parser</li>
</ul>
<h3 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h3><ul>
<li>DnsPod：一个不错的智能DNS服务解析提供商</li>
<li>DigitalOcean：海外的云主机提供商，价格便宜，磁盘是SSD的，用过一段时间整体上还可以，不过毕竟是海外的，网速比较慢。国内的就是阿里云了。还有个比较知名的是：Linode，据说速度上比DigitalOcean好很多</li>
<li>移动端推送服务：个推、JPush、云巴</li>
<li><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a>：移动应用开发服务，包括:数据存储、用户管理、消息推送、应用统计、社交分享、实时聊天等服务</li>
<li><a href="http://www.colorhunt.co/" target="_blank" rel="external">Color Hunt</a>: 漂亮炫酷的配色网站，程序员的福音</li>
<li><a href="https://www.heroku.com/" target="_blank" rel="external">Heroku: PaaS平台</a></li>
</ul>
<h3 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a>爬虫相关(好玩的工具)</h3><ul>
<li>Phantomjs(Web自动化测试，服务端渲染等)</li>
<li>berserkJS(基于Phantomjs的改进版本)</li>
<li>SlimerJS</li>
<li>CasperJS</li>
<li>selenium</li>
<li>HtmlUnit（开源的java 页面分析工具，也是个Headless的浏览器）</li>
</ul>
<h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul>
<li>sql注入检测：sqlmap、haviji</li>
<li>端口扫描：nmap</li>
<li>渗透测试：BurpLoader</li>
<li>sqltools: sql漏洞利用工具</li>
<li>snort: 入侵检测</li>
</ul>
<h3 id="Web服务器性能-压力测试工具-负载均衡器"><a href="#Web服务器性能-压力测试工具-负载均衡器" class="headerlink" title="Web服务器性能/压力测试工具/负载均衡器"></a>Web服务器性能/压力测试工具/负载均衡器</h3><ul>
<li>ab: ab是apache自带的一款功能强大的测试工具</li>
<li>curl-loader: 真实模拟、测试Web负载</li>
<li>http_load: 程序非常小，解压后也不到100K</li>
<li>webbench: 是Linux下的一个网站压力测试工具，最多可以模拟3万个并发连接去测试网站的负载能力。</li>
<li>Siege: 一款开源的压力测试工具，可以根据配置对一个WEB站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li>
<li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li>
<li>Piwik：开源网站访问量统计系统</li>
<li>ClickHeat：开源的网站点击情况热力图</li>
<li>HAProxy：高性能TCP /HTTP负载均衡器</li>
<li>ElasticSearch：搜索引擎基于Lucene</li>
<li>Page Speed SDK和YSLOW</li>
<li>HAR Viewer: HAR分析工具</li>
<li>protractor：E2E（end to end）自动化测试工具</li>
</ul>
<h2 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a>大数据处理/数据分析/分布式工具</h2><ul>
<li>Hadoop：分布式的文件系统，结合其MapReduce编程模型可以用来做海量数据的批处理（Hive，Pig，HBase啥的就不说了），值得介绍的是Cloudera的Hadoop分支CDH5，基于YARN MRv2集成了Spark可直接用于生产环境的Hadoop，对于企业快速构建数据仓库非常有用。</li>
<li>Spark：大规模数据处理框架（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND有篇文章介绍的不错</li>
<li>除了Spark，其他几个不错的计算框架还有：Kylin，Flink，Drill</li>
<li>Ignite: In-Memory Data Fabric</li>
<li>CarbonData: 华为的孵化项目，支持索引的列式存储</li>
<li>Ceph:Linux分布式文件系统（特点：无中心）</li>
<li>Storm：实时流数据处理，可以看下IBM的一篇介绍 （还有个Yahoo的S4，也是做流数据处理的）</li>
<li>Druid: 实时数据分析存储系统</li>
<li>Ambari: 大数据平台搭建、监控利器；类似的还有CDH</li>
<li>Tachyon：分布式内存文件系统</li>
<li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享</li>
<li>Impala：新一代开源大数据分析引擎，提供Sql语义，比Hive强在速度上</li>
<li>presto: facebook的开源工具，大数据分布式sql查询引擎</li>
<li>SNAPPY：快速的数据压缩系统，适用于Hadoop生态系统中</li>
<li>Kafka:高吞吐量的分布式消息队列系统</li>
<li>ActiveMQ:是Apache出品，最流行的，能力强劲的开源消息总线</li>
<li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li>
<li>RabbitMQ：记得OpenStack就是用的这个东西吧</li>
<li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍</li>
<li>开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li>
<li>Zookeeper：可靠的分布式协调的开源项目</li>
<li>Databus：LinkedIn 实时低延迟数据抓取系统</li>
<li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li>
<li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li>
<li>NoSql：ScyllaDB（宣称是世界上最快的NoSql）、Apache Casandra、MongoDB、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、Neo4j</li>
<li>MapReduce相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、Greenplum </li>
<li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、Tinkerpop</li>
<li>NLP自然语言处理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li>
<li>机器学习：TensorFlow（Google出品），WEKA、Mahout、scikits.learn、SkyTree</li>
<li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、Raphaël.js</li>
<li>Kettle：开源的ETL工具</li>
<li>Pentaho：以工作流为核心的开源BI系统</li>
<li>Mondrian：开源的Rolap服务器</li>
<li>Oozie：开源hadoop的工作流调度引擎，类似的还有：Azkaban</li>
<li>开源的数据分析可视化工具：Weka、Orange、KNIME</li>
<li>Cobar：阿里巴巴的MySql分布式中间件</li>
<li>数据清洗：data wrangler， Google Refine</li>
</ul>
<h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul>
<li><a href="https://material.io/" target="_blank" rel="external">Material Design</a>: 谷歌出品，必属精品</li>
<li>Vue.js: 借鉴了Angular及React的JS框架，设计理念较为先进</li>
<li>GRUNT: js task runner</li>
<li>Sea.js: js模块化</li>
<li>knockout.js：MVVM开发前台，绑定技术</li>
<li>Angular.js: 使用超动感HTML &amp; JS开发WEB应用！</li>
<li>Highcharts.js，Flot:常用的Web图表插件</li>
<li>NVD3: 基于d3.js的图表库</li>
<li>Raw：非常不错的一款高级数据可视化工具</li>
<li>Rickshaw:时序图标库，可用于构建实时图表</li>
<li>JavaScript InfoVis Toolkit：另一款Web数据可视化插件</li>
<li>Pdf.js，在html中展现pdf</li>
<li>ACE，CodeMirror：Html代码编辑器（ACE甚好啊）</li>
<li>NProcess：绚丽的加载进度条</li>
<li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有reveal)</li>
<li>Threejs：3DWeb库</li>
<li>Hightopo：基于Html5的2D、3D可视化UI库</li>
<li>jQuery.dataTables.js:高度灵活的表格插件</li>
<li>Raphaël：js，canvas绘图库，后来发现百度指数的图形就是用它绘出来的</li>
<li>director.js：js路由模块，前端路由，Nodejs后端路由等，适合构造单页应用</li>
<li>pace.js：页面加载进度条</li>
<li>bower：Web包管理器</li>
<li>jsnice：有趣的js反编译工具，猜压缩后的变量名，<a href="http://www.jsnice.org/" target="_blank" rel="external">http://www.jsnice.org/</a></li>
<li>D3.js: 是一个基于JavaScript数据展示库（类似的还有P5.js）</li>
<li>Zepto.js：移动端替代jQuery的东东，当然也可以使用jquery-mobile.</li>
<li>UI框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li>
<li>前段UI设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li>
<li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/" target="_blank" rel="external">https://developer.mozilla.org/en-US/</a></li>
<li>图标资源：IcoMoon（我的最爱），Font Awesome, Themify Icons，FreePik，Glyphicons</li>
<li>artDialog:非常漂亮的对话框</li>
<li>AdminLTE：github上的一个开源项目，基于Boostrap3的后台管理页面框架</li>
<li>Respond.js：让不懂爱的IE6-8支持响应式设计</li>
<li>require.js: js模块加载库</li>
<li>select2：比chosen具有更多特性的选择框替代库</li>
<li>AngularUI：集成angular.js的UI库</li>
<li>normalize.css: 采用了现代化标准让各浏览器渲染出的html保持一致的库</li>
<li>CreateJS：Html5游戏引擎</li>
<li>Less,Compass:简化CSS开发</li>
<li>emojify.js:用于自动识别网页上的Emoji文字并将其显示为图像</li>
<li>simditor:一个不错的开源的html编辑器，简洁高效</li>
<li>Sencha:  基于html5的移动端开发框架</li>
<li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li>
<li>jquery-smooth-scroll:同上，平滑滚动插件</li>
<li>Animate.css:实现了各种动画效果的css库</li>
<li>Emmet:前端工程师必备，前身为 Zen Coding</li>
<li>React: facebook出品的js UI库</li>
<li>highlight.js：专门用来做语法高亮的库</li>
<li>GoJS: Html5交互式图表库，看demo更适合层次结构的图表。</li>
<li>10 Pure CSS (Mostly) Flat Mobile Devices: <a href="http://marvelapp.github.io/devices.css/" target="_blank" rel="external">http://marvelapp.github.io/devices.css/</a></li>
<li>CodePen: <a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a></li>
<li>jsfiddle: <a href="http://jsfiddle.net/" target="_blank" rel="external">http://jsfiddle.net/</a> 前端js，html，css测试利器</li>
</ul>
<h2 id="语言篇"><a href="#语言篇" class="headerlink" title="语言篇"></a>语言篇</h2><p>折腾中：Scala、Python、Lua、JavaScript、Go</p>
<p>待折腾：</p>
<ul>
<li><a href="http://racket-lang.org/" target="_blank" rel="external">Racket</a></li>
<li><a href="http://ocaml.org/" target="_blank" rel="external">OCaml</a></li>
<li><a href="https://www.rust-lang.org" target="_blank" rel="external">Rust</a></li>
<li><a href="http://julialang.org/" target="_blank" rel="external">Julia</a></li>
</ul>
<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ul>
<li><a href="http://www.scala-lang.org/api/current/" target="_blank" rel="external">Scala Standard Library API</a></li>
<li><a href="http://twitter.github.io/scala_school/" target="_blank" rel="external">Scala School!</a>: A Scala tutorial by Twitter</li>
<li><a href="http://docs.scala-lang.org/tutorials/tour/tour-of-scala.html" target="_blank" rel="external">A Tour of Scala</a>: Tutorial introducing the main concepts of Scala</li>
<li><a href="http://stackoverflow.com/tags/scala/info" target="_blank" rel="external">Scala Overview on StackOverflow</a>: A list of useful questions sorted by topic</li>
<li><a href="http://www.artima.com/pins1ed/" target="_blank" rel="external">Programming in Scala</a>，最新的第3版，还没有电子版，电子版是第一版</li>
<li>《Scala for the Impatient》</li>
<li>《Scala in Depth》</li>
<li>《Programming Scala》Dean Wampler and Alex Payne. O’Reilly 2009</li>
<li><a href="http://www.scala-lang.org/docu/files/ScalaByExample.pdf" target="_blank" rel="external">Scala By Example</a></li>
<li><a href="http://docs.scala-lang.org/cheatsheets/" target="_blank" rel="external">Scala Cheatsheet</a>学习模式匹配的好资料</li>
<li><a href="http://docs.scala-lang.org/glossary/" target="_blank" rel="external">Glossary of Scala and FP terms</a></li>
<li><a href="https://github.com/lihaoyi/Metascala" target="_blank" rel="external">Metascala: A JVM written in Scala</a></li>
<li><a href="https://scala-lms.github.io/" target="_blank" rel="external">LMS: Program Generation and Embedded Compilers in Scala</a></li>
</ul>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li>常用的IDE：IntelliJ IDEA(强烈推荐)，Eclipse，Netbeans</li>
<li><a href="http://fastutil.di.unimi.it/" target="_blank" rel="external">fastutil</a>: 性能更好的Java集合框架</li>
<li>Guava: 谷歌的Java工具包，应用广泛</li>
<li>Curator：Netflix公司开源的一个Zookeeper client library，用于简化Zookeeper客户端编程，现在已经是apache下的一个独立项目了。Spark的HA也用的这货。</li>
<li>Rx(Reactive Extensions)框架：Vert.x, RxJava(Android中用的比较多),  Quasar</li>
<li>FindBugs: 代码静态分析工具，找出代码缺陷</li>
<li>Java反编译工具：Luyten，JD-Gui</li>
<li>Drools: 规则引擎</li>
<li>Jersey: Java RESTful 框架</li>
<li>canal: 阿里巴巴出品，binlog增量订阅&amp;消费组件</li>
<li>Web开发相关：Tomcat、Resin、Jetty、WebLogic等，常用的组件Struts，Spring，Hibernate</li>
<li>Netty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO框架，spark 1.2.0就用netty替代了nio）</li>
<li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个NIO框架），不少手游服务端是用它开发的</li>
<li>jOOQ：java Orm框架</li>
<li>Janino: 超级小又快的Java编译器，Spark的Tungsten引起用的它</li>
<li>Activiti:工作流引擎，类似的还有jBPM、Snaker</li>
<li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li>
<li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li>
<li>Nutch:知名的爬虫项目，hadoop就是从这个项目中发展出来的</li>
<li>web-harvest：Web数据提取工具</li>
<li>POM工具：Maven+Artifactory</li>
<li>Akka:一款基于actor模型实现的 并发处理框架</li>
<li>EclEmma：覆盖测试工具</li>
<li>Shiro:安全框架</li>
<li>joda-time:简化时间处理</li>
<li>parboiled:表达式解析</li>
<li>dozer: 深拷贝神器</li>
<li>dubbo: 阿里巴巴出品的分布式服务框架</li>
<li>jackson databind: json序列化工具(fastjson,simplejson)</li>
<li>Atomikos: 分布式事务管理</li>
<li>BoneCP：性能很赞的数据库连接池组件，据说比c3p0快好多</li>
<li>ProGuard: obconfuscation tool, 强大的混淆工具</li>
<li>S-99：Scala相关的99个问题</li>
</ul>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><ul>
<li>PyCharm：最佳Python IDE</li>
<li>Eric,Eclipse+pydev,比较不错的Python IDE</li>
<li>PyWin:Win32 api编程包</li>
<li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有SciPy，Matplotlib</li>
<li>GUI相关：PyQt，PyQwt</li>
<li>supervisor:进程监控工具</li>
<li>PyGame: 基于Python的多媒体开发和游戏软件开发模块</li>
<li>Web框架: Django 开源web开发框架，它鼓励快速开发,并遵循MVC设计</li>
</ul>
<h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><ul>
<li><a href="https://github.com/ipader/SwiftGuide" target="_blank" rel="external">Swift精选资料</a></li>
<li><a href="http://www.csdn.net/article/2015-01-09/2823502-swift-open-source-libs" target="_blank" rel="external">43个优秀的开源项目</a></li>
</ul>
<p><strong>客户端</strong></p>
<ul>
<li><a href="https://github.com/YANGReal/JokeClient-Swift" target="_blank" rel="external">糗事百科 Swift</a></li>
<li><a href="https://github.com/amitburst/HackerNews" target="_blank" rel="external">HackerNews Swift</a></li>
<li><a href="https://github.com/jxd001/Swift-ZhihuDaily" target="_blank" rel="external">知乎日报app</a></li>
</ul>
<p><strong>Framework</strong></p>
<ul>
<li><a href="https://github.com/mattdonnelly/Swifter" target="_blank" rel="external">Twitter框架</a></li>
<li><a href="https://github.com/glock45/swifter" target="_blank" rel="external">Mac下简单HTTP Server Swifter</a></li>
</ul>
<p><strong>小工具</strong></p>
<ul>
<li><a href="https://github.com/ChrisChares/swift-alarm" target="_blank" rel="external">Swift Alarm</a></li>
<li><a href="https://github.com/mslathrop/SwiftNote" target="_blank" rel="external">Swift Note</a></li>
<li><a href="https://github.com/wantedly/swift-rss-sample" target="_blank" rel="external">Swift RSS Reader</a></li>
<li><a href="https://github.com/sxyx2008/Swift-PM25" target="_blank" rel="external">Swift-PM2.5查询app</a></li>
</ul>
<p><strong>游戏</strong></p>
<ul>
<li><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="external">Flappy Swift</a></li>
<li><a href="https://github.com/geek5nan/FanFanSwift" target="_blank" rel="external">FanFan Swift</a></li>
</ul>
<h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><ul>
<li>Xilium.CefGlue:基于CEF框架的.NET封装，基于.NET开发Chrome内核浏览器</li>
<li>CefSharp：同上，有一款WebKit的封装，C#和Js交互会更简单</li>
<li>netz:免费的 .NET 可执行文件压缩工具</li>
<li>SmartAssembly:变态的.net代码优化混淆工具</li>
<li>NETDeob0：.net反混淆工具，真是魔高一尺道高一丈啊(还有个de4dot，在GitHub上，都是开源的)</li>
<li>ILMerge：将所有引用的DLL和exe文件打成一个exe文件</li>
<li>ILSpy:开源.net程序反编译工具</li>
<li>Javascript.NET：很不错的js执行引擎，对v8做了封装</li>
<li>NPOI: Excel操作</li>
<li>DotRAS:远程访问服务的模块</li>
<li>WinHtmlEditor: Winform下的html编辑器</li>
<li>SmartThreadPool:使用C#实现的，带高级特性的线程池</li>
<li>Snoop: WPF Spy Utility</li>
<li>Autofac: 轻量级IoC框架</li>
<li>HtmlAgilityPack：Html解析利器</li>
<li>Quartz.NET：Job调度</li>
<li>HttpLib：@CodePlex，简化http请求</li>
<li>SuperSocket：简化Socket操作，基于他的还有个SuperWebSocket，可以开发独立的WebSocket服务器了</li>
<li>DocX：未安装Office的情况下操作Word文件</li>
<li>Dapper：轻量级的ORM类，性能不错</li>
<li>HubbleDotNet：支持接入数据库的全文搜索系统</li>
<li>fastJSON：@CodeProject，高性能的json序列化类</li>
<li>ZXing.NET：@CodePlex，QR，条形码相关</li>
<li>Nancy：轻量级Http服务器，做个小型的Web应用可以摆脱IIS喽(Nancy.Viewengines.Razor,可以加入Razor引擎)</li>
<li>AntiXSS：微软的XSS防御库Microsoft Web Protection Library</li>
<li>Jint：JavaScript解释器</li>
<li>CS-Script：将C#代码文件作为脚本执行</li>
<li>Jexus：Linux下 高性能、易用、免费的ASP.NET服务器</li>
<li>Clay：将dynamic发挥的更加灵活，像写js一样写C#</li>
<li>DynamicJSON：不必定义数据模型获取json数据</li>
<li>SharpPcap：C#版的WinPcap调用端，牛逼的网络包分析库（自带PacketNotNet用于包协议分析）</li>
<li>Roslyn：C#，VB编译器</li>
<li>ImageResizer: 服务端自由控制图片大小，真乃神器也，对手机端传小图，PC端传大图，CMS用它很方便</li>
<li>UI相关：DevExpress, Fluent(Office 07风格), mui（Modern UI for WPF）</li>
<li>NetSparkle：应用自动更新组件</li>
<li>ConfuserEx: 开源.net混淆工具</li>
<li>ServiceStack: 开源高性能Web服务框架，可用于构建高性能的REST服务</li>
<li>Expression Evaluator：Eval for C#,处理字符串表达式</li>
<li><a href="http://nugetmusthaves.com/" target="_blank" rel="external">http://nugetmusthaves.com/</a></li>
<li>Reactive Extensions (Rx):异步，事件驱动编程包， Rx = Observables + LINQ + Schedulers</li>
</ul>
<h3 id="C-amp-C"><a href="#C-amp-C" class="headerlink" title="C &amp; C++"></a>C &amp; C++</h3><ul>
<li>Thrift:用来进行可扩展且跨语言的服务的开发(类似的还有个Avro，Google protobuf)。</li>
<li>libevent:是一个事件触发的网络库，适用于windows、linux、bsd等多种平台，内部使用select、epoll、kqueue等系统调用管理事件机制。（对了还有个libev呢）</li>
<li>Boost:不多说了，准C++标准库</li>
<li>Valgrind\Ptmalloc\Purify: 调试工具</li>
<li>NetworkServer架构：acceptor-&gt;dispatcher-&gt;worker(这个不算工具哦)</li>
<li><a href="https://pocoproject.org/" target="_blank" rel="external">POCO</a> - 开源的C++类库及应用程序框架的集合,它主要提供简单的、快速的网络和可移植应用程序</li>
<li>breakpad:崩溃转储和分析模块，很多crashreport会用到</li>
<li>UI界面相关：MFC、BCG和QT这类的就不说了，高端一点的还有Html和DirectUI技术：libcef（基于chrome内核的，想想使用html5开发页面，还真有点小激动呢）、HtmlLayout、Duilib、Bolt，非C++的，还有node-webkit也不错，集成了node和webkit内核。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="游戏开发相关"><a href="#游戏开发相关" class="headerlink" title="游戏开发相关"></a>游戏开发相关</h3><ul>
<li>MINA：使用Java开发手游和页游服务器(对了还有Netty，也很猛的，都是基于NIO的)</li>
<li>HP-Socket：见有有些页游服务器使用这个构建的</li>
<li>Unreal: 虚幻引擎，C++，基于这个引擎的游戏很多</li>
<li>OGRE：大名鼎鼎的3D图形渲染引擎，天龙八部OL、火炬之光等不少游戏都用了这个引擎</li>
<li>OpenVDB：梦工厂C++的特效库，开源的</li>
<li>cocos2d：跨平台2D游戏引擎</li>
<li>unity3d：跨平台3D游戏引擎，很火的哦</li>
<li>Nodejs：也有不少使用它来开发手游和页游服务器（网易的Pomelo）</li>
</ul>
<h3 id="日志聚合，分布式日志收集"><a href="#日志聚合，分布式日志收集" class="headerlink" title="日志聚合，分布式日志收集"></a>日志聚合，分布式日志收集</h3><ul>
<li>Scribe：Facebook的（nodejs + scribe + inotify 同步日志）</li>
<li>logstash:强大的日志收集系统，可以基于logstash+kibana+elasticsearch+redis开发强大的日志分析平台</li>
<li>log.io: nodejs开发的实时日志收集系统</li>
<li>Graylog: 易用、功能丰富的日志管理系统， 部署、维护、搜索比<code>ELK</code>简单</li>
</ul>
<h3 id="RTP-实时传输协议与音视频"><a href="#RTP-实时传输协议与音视频" class="headerlink" title="RTP,实时传输协议与音视频"></a>RTP,实时传输协议与音视频</h3><ul>
<li>RTP，RTCP，RTSP-&gt; librtp，JRTPLIB(遵循了RFC1889标准)</li>
<li>环形缓冲区，实时数据传输用</li>
<li>SDL,ffmpeg,live555,Speex</li>
<li>Red5:用Java开发开源的Flash流媒体服务器。它支持：把音频（MP3）和视频（FLV）转换成播放流； 录制客户端播放流（只支持FLV）；共享对象；现场直播流发布；远程调用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;# 前言
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;成为一名专业程序员的道路上，需要坚持练习、学习与积累，技术方面既要有一定的广度，更要有自己的深度。&lt;/p&gt;
&lt;p&gt;笔者作为一位tool mad，将工作以来用到的各种优秀资料、神器及框架整理在此，毕竟好记性不如烂键盘，
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/03/25/Document/"/>
    <id>http://yoursite.com/2017/03/25/Document/</id>
    <published>2017-03-25T08:58:23.000Z</published>
    <updated>2017-03-25T08:58:23.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript桥接模式(1)-队列数据结构</title>
    <link href="http://yoursite.com/2017/03/24/javascript%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F(1)-%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/03/24/javascript桥接模式(1)-队列数据结构/</id>
    <published>2017-03-24T11:04:10.000Z</published>
    <updated>2017-03-23T13:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。<br>队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个元素，返回新数组。两个操作对于数组都有结构的改变</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//js中队列的实现是依赖数组的数据结构</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];  <span class="comment">//初始化空数组，let关键字是es6中的</span></div><div class="line">    <span class="comment">//用于形成大括号包围的作用域</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; <span class="comment">//入队操作</span></div><div class="line">        items.push(element); <span class="comment">//数组push操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//出对</span></div><div class="line">        <span class="keyword">return</span> items.shift(); <span class="comment">//数组shift操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//队列第一个元素</span></div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];     <span class="comment">//数组第一个元素</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//判断队列有无成员</span></div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>; <span class="comment">//布尔值判断</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//清空队列</span></div><div class="line">        items = [];   <span class="comment">//变量重新赋值空数组</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//获得队列的长度</span></div><div class="line">        <span class="keyword">return</span> items.length; </div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//打印队列</span></div><div class="line">        <span class="built_in">console</span>.log(items.toString());</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>下面是优先队列。数据成员入队的时候要携带数据和优先级。<br>优先级在这里的定义是数字越大在数组中的位置靠后。当插入一个数组元素的时候，先要根据它的优先级来判断，最小是直接插入到第一位，紧邻一个比他大的优先级是，就插入到这个邻居的前面。如果是最大的数字就插到数组的最后。<br>一维数组变成了二位数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span> (<span class="params">element, priority</span>)</span>&#123; </div><div class="line">            <span class="keyword">this</span>.element = element;<span class="comment">//成员本身</span></div><div class="line">        <span class="keyword">this</span>.priority = priority;  <span class="comment">//优先级</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>; <span class="comment">//添加标记</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (queueElement.priority &lt;            </div><div class="line"> items[i].priority)&#123;  <span class="comment">//找到优先级数字比他大的那个元素</span></div><div class="line"></div><div class="line">                items.splice(i,<span class="number">0</span>,queueElement);            </div><div class="line">             <span class="comment">// 插到这个元素的前面</span></div><div class="line">                added = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// 终止</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!added)&#123; <span class="comment">//如果是优先级数字是最大的，直接插入到</span></div><div class="line">        <span class="comment">//数组的末尾</span></div><div class="line">            items.push(queueElement); <span class="comment">//&#123;5&#125;</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//其他操作和普通队列是一样的</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.shift();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//print使用了es6里的拼接字符串的方法</span></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span>  - <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</div><div class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Maxwell"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</div><div class="line">priorityQueue.print();</div><div class="line"><span class="comment">//=&gt;</span></div><div class="line"><span class="comment">//打印出的结果</span></div><div class="line">Jack  - <span class="number">1</span>  <span class="comment">//数组元素--优先级</span></div><div class="line">Camila  - <span class="number">1</span></div><div class="line">John  - <span class="number">2</span></div><div class="line">Maxwell  - <span class="number">2</span></div><div class="line">Ana  - <span class="number">3</span></div></pre></td></tr></table></figure>
<p>在这个队列的基础上可以实现javascript中桥接模式的例子。本文算是一个独立的javascript队列的介绍，也作为桥接模式例子的背景方法。<br><a href="http://www.apress.com/cn/book/9781590599082" target="_blank" rel="external">javascript设计模式 第八章-桥接模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。&lt;br&gt;队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>react-native视差滚动组件使用</title>
    <link href="http://yoursite.com/2017/03/24/react-native%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E7%BB%84%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/24/react-native视差滚动组件使用/</id>
    <published>2017-03-23T21:44:17.000Z</published>
    <updated>2017-03-23T13:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>看到许多app在界面上实现了头部的图片和文字的渐隐效果，在网上找到一个组件，实现了这个功能。如果要体现比较好的效果还需要在细节地方多研究。<br>这里写出来仅供学习的进一步的研究</p>
<p>   看看效果图</p>
<p><a href="https://github.com/phpsmarter/react-native-parallax-scroll-view" target="_blank" rel="external">react-native-parallax-scroll-view ,github地址</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-32c303299eff67ca.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow.gif"><br>下面看一下代码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React, &#123; Component &#125; from <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Dimensions,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  AppRegistry,</div><div class="line">  StatusBar</div><div class="line">&#125; from <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">//导入组件</span></div><div class="line"><span class="keyword">import</span> ParallaxScrollView from <span class="string">'react-native-parallax-scroll-view'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> window = Dimensions.<span class="built_in">get</span>(<span class="string">'window'</span>);<span class="comment">//获取宽度</span></div><div class="line">console.<span class="built_in">log</span>(window.<span class="built_in">width</span>);</div><div class="line"></div><div class="line">class Nested extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;&#123; flex: <span class="number">1</span> &#125;&#125;&gt;</div><div class="line">         <span class="comment">//方向，可以为row</span></div><div class="line">        &lt;View style=&#123;&#123; flex: <span class="number">1</span>, flexDirection: <span class="string">'column'</span> &#125;&#125;&gt;</div><div class="line">          &lt;View style=&#123;&#123; <span class="built_in">width</span>: <span class="number">60</span>, backgroundColor: <span class="string">'red'</span> &#125;&#125;/&gt;</div><div class="line">         <span class="comment">//滚动效果都在下面这个组件</span></div><div class="line">          &lt;ParallaxScrollView</div><div class="line">              style=&#123;&#123; flex: <span class="number">1</span>, backgroundColor: <span class="string">'hotpink'</span>, overflow: <span class="string">'hidden'</span> &#125;&#125;</div><div class="line">             <span class="comment">//下面渲染背景</span></div><div class="line">              renderBackground=&#123;() =&gt;  &lt;Image style=&#123;&#123;<span class="built_in">width</span>:window.<span class="built_in">width</span>,<span class="built_in">height</span>:<span class="number">350</span>&#125;&#125; source=&#123;require(<span class="string">'./images/schedule-background.png'</span>)&#125;/&gt;&#125;</div><div class="line">             <span class="comment">//下面是渲染前景</span></div><div class="line">              renderForeground=&#123;() =&gt; (</div><div class="line">                &lt;View&gt;</div><div class="line">                &lt;View style=&#123;&#123;alignItems: <span class="string">'center'</span>, justifyContent: <span class="string">'center'</span>,marginTop:<span class="number">50</span>&#125;&#125;&gt;</div><div class="line">              </div><div class="line">                &lt;Image style=&#123;&#123;borderRadius:<span class="number">50</span></div><div class="line">              &#125;&#125; source=&#123;&#123;</div><div class="line">                  uri: <span class="string">'https://pbs.twimg.com/profile_images/2694242404/5b0619220a92d391534b0cd89bf5adc1_400x400.jpeg'</span>,</div><div class="line">                  <span class="built_in">width</span>: <span class="number">100</span>,</div><div class="line">                  <span class="built_in">height</span>: <span class="number">100</span></div><div class="line">                &#125;&#125;/&gt;</div><div class="line">                &lt;/View&gt;</div><div class="line">               </div><div class="line">                  &lt;Text style=&#123;&#123;paddingVertical: <span class="number">5</span>,<span class="built_in">textAlign</span>:<span class="string">'center'</span>,<span class="built_in">color</span>:<span class="string">'white'</span>&#125;&#125;&gt;</div><div class="line">                    Talks by Rich Hickey</div><div class="line">                   &lt;/Text&gt;</div><div class="line">                   &lt;Text style=&#123;&#123;paddingVertical: <span class="number">5</span> ,<span class="built_in">textAlign</span>:<span class="string">'center'</span>,<span class="built_in">color</span>:<span class="string">'white'</span>&#125;&#125;&gt;</div><div class="line">                    CTO of Cognitec, Creator of Clojure</div><div class="line">                  &lt;/Text&gt;</div><div class="line">                </div><div class="line">                &lt;/View&gt;</div><div class="line">                </div><div class="line">            )&#125;</div><div class="line">             <span class="comment">//渲染固定头部</span></div><div class="line">              renderFixedHeader=&#123;() =&gt; &lt;Text style=&#123;&#123; <span class="built_in">textAlign</span>: <span class="string">'right'</span>, <span class="built_in">color</span>: <span class="string">'white'</span>, padding: <span class="number">5</span>, fontSize: <span class="number">20</span>,marginTop:<span class="number">20</span> &#125;&#125;&gt;Hello&lt;/Text&gt;&#125;</div><div class="line">              parallaxHeaderHeight=&#123; <span class="number">350</span> &#125;&gt;</div><div class="line">                        &lt;View style=&#123;&#123; alignItems: <span class="string">'center'</span>&#125;&#125;&gt;&lt;Text style=&#123;&#123; fontSize: <span class="number">20</span> ,backgroundColor:<span class="string">"#519caf"</span>,<span class="built_in">width</span>:window.<span class="built_in">width</span>,<span class="built_in">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;This is parallaxbox&lt;/Text&gt;&lt;/View&gt;          </div><div class="line"></div><div class="line">          &lt;/ParallaxScrollView&gt;</div><div class="line">          </div><div class="line">        &lt;/View&gt;</div><div class="line">        &lt;View style=&#123;&#123; <span class="built_in">height</span>: <span class="number">30</span>, backgroundColor: <span class="string">'#6577cc'</span> &#125;&#125;/&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> Nested;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'parallaxBox'</span>, () =&gt; Nested);</div></pre></td></tr></table></figure></p>
<p>背景图片用了一张f8app的背景图片，曲线有动态变化效果。<br>这个组件的api还是有一些，用好了效果就出来了。具体的看github介绍</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到许多app在界面上实现了头部的图片和文字的渐隐效果，在网上找到一个组件，实现了这个功能。如果要体现比较好的效果还需要在细节地方多研究。&lt;br&gt;这里写出来仅供学习的进一步的研究&lt;/p&gt;
&lt;p&gt;   看看效果图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.
    
    </summary>
    
      <category term="React-native" scheme="http://yoursite.com/categories/React-native/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Velocity动画库学习</title>
    <link href="http://yoursite.com/2017/03/24/Velocity%E5%8A%A8%E7%94%BB%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/24/Velocity动画库学习/</id>
    <published>2017-03-23T21:37:04.000Z</published>
    <updated>2017-03-23T13:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="1661.987.big.jpg.png"></p>
<blockquote>
<p>看velocity.js的内容有段时间了，源于图片这本书。前面看直观的感受是：这个库的操作很简单。要解决一个rn的动画问题，把这本书又拿出来看，刚好看到也有了velocity-react版，考虑是否以后可以用在react-native上，这样的话应用范围就大很多。<br><a href="http://velocityjs.org" target="_blank" rel="external">Velocity.js文档</a><br><a href="https://github.com/twitter-fabric/velocity-react" target="_blank" rel="external">velocity-react github地址</a>；<br><a href="https://fabric.io/blog/introducing-the-velocityreact-library" target="_blank" rel="external">velocity-react的内容</a>；</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a00dfb63a7e5f09d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1443477710321.png"><br>初始化比较简单，网页中先导入jquery库，然后导入velocity.js库<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  //最好是配合jquery来使用，可以使用jquery的链式操作。</div><div class="line">  //jquery的函数操作在完成以后会有一句 return this,由此链式操作的</div><div class="line"> //的后一个方法的对象和前一个方法的对象是相同的</div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/velocity.min.js"</span>&gt;</span><span class="javascript">/script&gt; </span></div><div class="line">   $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $div=$(<span class="string">"div"</span>);   <span class="comment">//jQuery对象缓存起来</span></div><div class="line">    $div.velocity(&#123;<span class="attr">opacity</span>:<span class="number">0.5</span>&#125;);  <span class="comment">//调用方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><em>Velocity接受多个参数</em>，第一个参数是一个对象，用于将css属性映射到对应的目标值，第二个参数是指定动画的选项<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,&#123;<span class="string">duration:</span><span class="number">400</span>,<span class="string">easing:</span><span class="string">"swing"</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">//也可以使用简写</span></div><div class="line">$element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,<span class="number">400</span>，<span class="string">"ease-in-out"</span>);</div></pre></td></tr></table></figure></p>
<p><em>对于css属性，velocity不支持简写，只能一个一个的写，而且css属性也和react一样是驼峰命名。</em></p>
<p>链式操作；如果为了效率放弃使用jquery,那么就不能使用链式操作了<br>每个操作单独写就可以了。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$elemnt</span><span class="selector-class">.velocity</span>(&#123;<span class="attribute">width</span>:<span class="string">"400px"</span>&#125;).velocity(&#123;opacity:<span class="number">0.6</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>使用这个库实现旋转动画 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-5ddc998c6c858840.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow.gif"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;image id=<span class="string">"pic"</span> src=<span class="string">"img/pic.jpg"</span>/&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">         $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             $pic=$(<span class="string">"#pic"</span>);</div><div class="line">            $pic.velocity(  <span class="comment">//loop表示无限循环</span></div><div class="line">                    &#123;<span class="attr">rotateZ</span>: <span class="string">"360deg"</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">5000</span>,<span class="attr">loop</span>: <span class="literal">true</span> &#125;,<span class="string">"linear"</span>)；   </div><div class="line">         &#125;);   </div><div class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://twitter-fabric.github.io/velocity-react/" target="_blank" rel="external">这是官方的一个示例</a><br><img src="http://upload-images.jianshu.io/upload_images/2044710-019b0a1d63961dd2.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow3.gif"><br>下面是react组件的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm install --save velocity-react</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate/velocity.ui'</span>);</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">VelocityComponent</span> <span class="attr">animation</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">this.state.showSubComponent</span> ? <span class="attr">1</span> <span class="attr">:</span> <span class="attr">0</span> &#125;&#125; <span class="attr">duration</span>=<span class="string">&#123;500&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">MySubComponent</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">VelocityComponent</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; a
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-1/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式-1/</id>
    <published>2017-03-23T21:30:54.000Z</published>
    <updated>2017-03-23T13:30:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式/</id>
    <published>2017-03-23T21:29:41.000Z</published>
    <updated>2017-03-23T13:30:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在react/react-native的代码中都有这样的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; View,  </div><div class="line">               StyleSheet, </div><div class="line">               ScrollView, </div><div class="line">               ListView,  </div><div class="line">               StatusBar,</div><div class="line">              InteractionManager,</div><div class="line">              Navigator, &#125;</div><div class="line">              <span class="keyword">from</span> <span class="string">'react-native'</span></div></pre></td></tr></table></figure>
<p>通过这样的方式引入组件对象。 今天又一次读js设计模式的时候发现原来的理解是错误的，误解了组件的外部状态和内部状态，从而没有领会组件的微妙之处。今天把正确的概念写出来。</p>
<p>在曾探的《javascript 设计模式与开发实践》关于享元模式的内部状态和外部状态有这样的描述</p>
<blockquote>
<p>-内部状态存储于对象内部<br>  -内部状态可以被一些对象共享<br>  -内部状态可以独立于场景，通常不会变<br>  -外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</p>
</blockquote>
<p>怎么解释呢？意思是页面中出现的所有View组件实际是同一个共享对象，外部状态从对象上剥离开来，并存储在外部。<br>   剥离了外部状态的就是共享组件。 外部状态必要时传入共享组件就可以组成一个完整的对象。这些外部状态包括 state，props,style等<br>组装外部状态需要时间，但是可以大大减少系统中的对象数量，享元模式是用时间换空间的做法。<br>通过import导入的就是公共组件对象。 公共组件内部可以为外部状态加上标签以示区别，这就是ref参数存在的含义。</p>
<p>这就是借助享元模式理解的react组件的构造和用法。</p>
<p>借助模式设计慢慢读代码，写代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在react/react-native的代码中都有这样的代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;di
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0-2/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数-2/</id>
    <published>2017-03-23T21:12:02.000Z</published>
    <updated>2017-03-23T13:12:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
