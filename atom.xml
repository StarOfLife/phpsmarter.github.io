<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://phpsmarter.github.com/"/>
  <updated>2017-04-16T06:26:00.000Z</updated>
  <id>https://phpsmarter.github.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>翻译|A Dummy’s Guide to Redux and Thunk in React</title>
    <link href="https://phpsmarter.github.com/2017/04/16/%E7%BF%BB%E8%AF%91-A-Dummy%E2%80%99s-Guide-to-Redux-and-Thunk-in-React/"/>
    <id>https://phpsmarter.github.com/2017/04/16/翻译-A-Dummy’s-Guide-to-Redux-and-Thunk-in-React/</id>
    <published>2017-04-15T21:36:07.000Z</published>
    <updated>2017-04-16T06:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux和Thunk的使用傻瓜教程"><a href="#Redux和Thunk的使用傻瓜教程" class="headerlink" title="Redux和Thunk的使用傻瓜教程"></a>Redux和Thunk的使用傻瓜教程</h1><blockquote>
<p><a href="https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3" target="_blank" rel="external">原文参见</a><br>  <a href="https://github.com/stowball/dummys-guide-to-redux-and-thunk-react" target="_blank" rel="external">Github repo</a><br>  强烈推荐这篇文章.</p>
</blockquote>
<p>  如果你和我一样,读了Redux的文档,看了Dan的录像,Wes的课程,仍然不能抓住怎么使用Redux的核心,希望这个傻瓜教程能够帮到你.<br>  在真正实施之前,我做了一些尝试,所以我决定写一点从已经存在的使用fetch JSON数据的app一步步转变为使用Redux和Redux Thunk的app.如果你不知道Thunk是什么,也不要担心,我们会在”Redux 之路”部分来使用它执行函数的异步调用.<br>  这个教程需要你对React和ES6/2015有基本的掌握.</p>
<h2 id="非Redux方法"><a href="#非Redux方法" class="headerlink" title="非Redux方法"></a>非Redux方法</h2><p>  在<code>components/ItemList.js</code>中创建一个React组件,用于fetch和显示items列表.</p>
<h2 id="罗列一下基础组件"><a href="#罗列一下基础组件" class="headerlink" title="罗列一下基础组件"></a>罗列一下基础组件</h2><p>  首先我们使用包含各种items的state配置一个静态的组件,2 个boolean state分别用于根据loading和error来渲染出各自的单独显示组件.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">items</span>: [<span class="comment">//items在列表中现实的内容</span></div><div class="line">                &#123;</div><div class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">                    <span class="attr">label</span>: <span class="string">'List item 1'</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">                    <span class="attr">label</span>: <span class="string">'List item 2'</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">id</span>: <span class="number">3</span>,</div><div class="line">                    <span class="attr">label</span>: <span class="string">'List item 3'</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">id</span>: <span class="number">4</span>,</div><div class="line">                    <span class="attr">label</span>: <span class="string">'List item 4'</span></div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            <span class="attr">hasErrored</span>: <span class="literal">false</span>, <span class="comment">//网络请求错误的状态</span></div><div class="line">            isLoading: <span class="literal">false</span>   <span class="comment">//网络请求中的状态</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state.hasErrored) &#123;<span class="comment">//根据Errored的状态决</span></div><div class="line">        <span class="comment">//定是否加载这个组件,网络请求错误时,false=&gt;true</span></div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Sorry! There was an error loading the items<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state.isLoading) &#123;</div><div class="line">        <span class="comment">//网络请求中的组件,发出请求时,false=&gt;true</span></div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading…<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></div><div class="line">                &#123;this.state.items.map((item) =&gt; (</div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span></div><div class="line">                        &#123;item.label&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                ))&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> ItemList;</div></pre></td></tr></table></figure>
<p>  可能看起来还不是特别能说明问题,但是已经是一个好的开端了.<br>  渲染的时候,组件输出四个items列表,但是如果你把<code>isLoading</code>和<code>hasError</code>的state由false改为false的时候,对应的<code>&lt;p&gt;&lt;/p&gt;</code>就会显示出来.(注意每个组件都是return出来的,每次只显示一个).</p>
<h2 id="改为动态值"><a href="#改为动态值" class="headerlink" title="改为动态值"></a>改为动态值</h2><p>  直接编码items对于组件来说不是特别有用,所以最好从JSON API来fetch <code>items</code>数据,如果这样做的话,我们就可以把<code>isLoading</code>和<code>hasError</code>改为合适的状态.<br>  响应值和我们直接编码是一样,但是在实际生产中,你可能会拉回一个图书畅销榜的列表,最新的blog帖子或者其他app中需要的内容.<br>  为了fetch items,我们将使用合适的Fetch API.Fetch使得执行请求比传统的XMLHttpRequest更容易,并且返回的是响应值的promise对象(这一点对于Thunk很重要).Fetch并不是在所有的浏览器中都可以使用,所以你需要在项目中添加依赖项.</p>
  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> whatwg-<span class="keyword">fetch</span> <span class="comment">--save</span></div></pre></td></tr></table></figure>
<p>  转变实际上相当简单.</p>
<ul>
<li>首先把<code>items</code>的初始化state设置为空数组</li>
<li><p>现在我们添加一个方法fetch数据,同时还要设定loading和error的状态.</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">  fetchData(url) &#123;<span class="regexp">//</span>fetch的包装方法</div><div class="line">    <span class="regexp">//</span>进入函数首先设定isLoading state <span class="literal">false</span>=&gt;<span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123; isLoading: <span class="literal">true</span> &#125;);</div><div class="line">    fetch(url)</div><div class="line">        .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> &#123;<span class="regexp">//</span>返回promise独享</div><div class="line">            <span class="keyword">if</span> (!response.ok) &#123;</div><div class="line">                <span class="keyword">throw</span> Error(response.statusText);</div><div class="line">            &#125;</div><div class="line">            <span class="regexp">//</span>不管返回的数据是什么,只要返回数据</div><div class="line">            <span class="regexp">//</span>就修改isLoading state <span class="literal">true</span>=&gt;<span class="literal">false</span></div><div class="line">            <span class="keyword">this</span>.setState(&#123; isLoading: <span class="literal">false</span> &#125;);</div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;)</div><div class="line">        .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.json())</div><div class="line">        .<span class="keyword">then</span>(<span class="function"><span class="params">(items)</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; items &#125;)) </div><div class="line">        <span class="regexp">//</span> ES6 property value shorthand <span class="keyword">for</span> &#123; items: items &#125;</div><div class="line">        .<span class="keyword">catch</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; hasErrored: <span class="literal">true</span> &#125;));<span class="regexp">//</span>返回数据的解析为json,如果捕获到错误就hasErrored:</div><div class="line">        <span class="regexp">//</span> <span class="literal">false</span>=&gt;<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>函数写完以后,在组件加载的时候就调用函数</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  componentDidMount() &#123;</div><div class="line">  <span class="keyword">this</span>.fetchData(<span class="string">'http://      5826ed963900d612000138bd.mockapi.io/items'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p> 完成以后,代码如下<br> <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ItemList</span> <span class="keyword">extends</span> <span class="title">Component</span> &#123;</span></div><div class="line">    constructor() &#123;</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            items: [],</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    fetchData(url) &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123; isLoading: <span class="literal">true</span> &#125;);</div><div class="line">        fetch(url)</div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!response.ok) &#123;</div><div class="line">                    <span class="keyword">throw</span> Error(response.statusText);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">this</span>.setState(&#123; isLoading: <span class="literal">false</span> &#125;);</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;)</div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.json())</div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(items)</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; items &#125;))</div><div class="line">            .<span class="keyword">catch</span>(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; hasErrored: <span class="literal">true</span> &#125;));</div><div class="line">    &#125;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.fetchData(<span class="string">'http://5826ed963900d612000138bd.mockapi.io/items'</span>);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 差不多了,组件现在从REST API  fetch <code>items</code>数据,在4个items到达之前,你希望看”Loading…”出现提示.如果URL不能返回数据,你应该看到error 的信息.</p>
<p> 然而(译注：讨厌的然而),在现实中,组件不应该包含具体的fetch逻辑,data也不应该储存在组件的state中,所以Redux实时的出现了.</p>
<h2 id="转变到Redux"><a href="#转变到Redux" class="headerlink" title="转变到Redux"></a>转变到Redux</h2><p> 需要添加Redux, React Redux 和Redux Thunk作为依赖项.</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> redux react-redux redux-thunk <span class="comment">--save</span></div></pre></td></tr></table></figure>
<h2 id="理解Redux"><a href="#理解Redux" class="headerlink" title="理解Redux"></a>理解Redux</h2><p> 有几个Redux的核心原理,我们必须要理解(译注：话很简单,但是要在大脑里构建出Redux的工作流程是有花很多时间的和精力的).</p>
<ol>
<li>Redux中有一个全局state对象来管理整个应用的state.在篇文章中,全局对象就是我们组件的初始化对象.</li>
<li>唯一能改变state的是触发一个action,action是一个描述state应该怎么改变的对象,Action Creators可以被<code>dispatch</code>ed的函数,触发一个变化,执行的内容是返回一个action</li>
<li>当一个action被dispatch以后,Reducer执行根据action的内容实际改变state对象,如果action没有找到匹配项,就会返回默认的state.</li>
<li><code>Reducers是纯函数,他们不能有任何的异步操作和mutate-必须要返回一个修改的copy</code>.</li>
<li>单个的Reducer可以被combine为一个单一的<code>rootReducer</code>,从而创建一个离散的state聚合体.</li>
<li>Store是把action和reducer组织到一起的工具,他包含了<code>rootReducer</code>代表的状态,中间件,允许你执行实际的<code>dispatch</code>actions</li>
<li>为了在React中使用Redux,<code>&lt;Provider /&gt;</code>组件包装整个应用,传递<code>store</code>到子代组件们.</li>
</ol>
<h2 id="设计我们的state"><a href="#设计我们的state" class="headerlink" title="设计我们的state"></a>设计我们的state</h2><p>从我们现在已有的代码里,可以知道我们的state需要3个属性(properties)：<code>items</code>,<code>hasErrored</code>,<code>isLoading</code>,这个三个属性相应的需要三个独立的actions.</p>
<p>现在,这里讲讲为什么Action Creator和Action是不同的,他们也不是1：1的关系:我们需要第四个actiong creator来根据fetch data的不同状态调用其他三个action(creators).这第四个action creator几乎和我们原先的<code>fetchData()</code>一样,但是它不会直接的使用<code>this.setState({isLoading:true})</code>来设置状态,我们将<code>dispatch</code>一个action去做同样的事情:<code>dispatch(isLoading(true))</code>.</p>
<h2 id="创建actions"><a href="#创建actions" class="headerlink" title="创建actions"></a>创建actions</h2><p>在actions目录下创建itmes.js文件,其中包含我们的action creators.创建三个简单的actions.<br> <figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">     export <span class="keyword">function</span> <span class="title">itemsHasErrored</span>(bool) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">&#123;</span></div><div class="line">        <span class="keyword">type</span>: <span class="symbol">'ITEMS_HAS_ERRORED</span>',</div><div class="line">        hasErrored: bool</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">export <span class="keyword">function</span> <span class="title">itemsIsLoading</span>(bool) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">&#123;</span></div><div class="line">        <span class="keyword">type</span>: <span class="symbol">'ITEMS_IS_LOADING</span>',</div><div class="line">        isLoading: bool</div><div class="line">    &#125;;</div><div class="line"> &#125;</div><div class="line">export <span class="keyword">function</span> <span class="title">itemsFetchDataSuccess</span>(items) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">&#123;</span></div><div class="line">        <span class="keyword">type</span>: <span class="symbol">'ITEMS_FETCH_DATA_SUCCESS</span>',</div><div class="line">        items</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 如前面提到的,action creators似能返回函数的函数,使用<code>export</code>输出单个action creators,便于在代码中使用.<br>    第二个action creators接受一个布尔值(true/false)最为参数,返回一个有意义的<code>type</code>和布尔值,分配合适的属性.<br>    第三个,<code>itemsFetchSuccess()</code>,当数据成功返回以后,传递数据作为<code>items</code>属性的值.通过ES6的魔术属性缩写,我们能够返回一个对象含有属性名叫做<code>items</code>,他的值是<code>items</code>的数组.</p>
<p>   （Note: that the value you use for type and the name of the other property that is returned is important, because you will re-use them in your reducers）这一句不知道怎么翻译.<br>   现在,我们有了三个actions,代表我们的状态,把原来的组件方法<code>fetchData</code>该给<code>itemFetchDaga()</code>action creator.<br>   默认情况下,Redux action creators是不支持异步actions的,像是fetching data的操作,所以这里我们使用Redux Thunk.Thunk允许你在action creator里返回一个函数代替实际的action.内部函数接受<code>dispatch</code>和<code>getState</code>作为参数,但是我们仅仅使用<code>dispatch</code>.<br>   实际的简单例子中五秒以后将会触发<code>itemHasErrored()</code>函数.</p>
   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">errorAfterFiveSeconds</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// We return a function instead of an action object</span></div><div class="line">    <span class="comment">//dispatch作为参数传递给胖箭头函数</span></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">// This function is able to dispatch other action creators</span></div><div class="line">            dispatch(itemsHasErrored(<span class="literal">true</span>));</div><div class="line">        &#125;, <span class="number">5000</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>   现在我们知道thunk是什么了.编写<code>itemsFetchData()</code>.</p>
   <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">export</span> function itemsFetchData(url) &#123;</div><div class="line">    <span class="keyword">return</span> (dispatch) =&gt; &#123;</div><div class="line">        <span class="regexp">//</span>已进入fetchdata,按顺序把isLoading state 由</div><div class="line">        <span class="regexp">//</span> <span class="literal">false</span>=&gt;<span class="literal">true</span></div><div class="line">        dispatch(itemsIsLoading(<span class="literal">true</span>));</div><div class="line">        <span class="regexp">//</span>fetch执行实际的异步远程获取数据操作</div><div class="line">        fetch(url) </div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!response.ok) &#123;<span class="regexp">//</span>根据状态抛出错误</div><div class="line">                    <span class="keyword">throw</span> Error(response.statusText);</div><div class="line">                &#125;</div><div class="line">                <span class="regexp">//i</span>sLoading又改为<span class="literal">false</span>,加载Loading组件</div><div class="line">                dispatch(itemsIsLoading(<span class="literal">false</span>));</div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125;)</div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(response)</span> =&gt;</span> response.json())</div><div class="line">            .<span class="keyword">then</span>(<span class="function"><span class="params">(items)</span> =&gt;</span> dispatch(itemsFetchDataSuccess(items)))</div><div class="line">            .<span class="keyword">catch</span>(<span class="function"><span class="params">()</span> =&gt;</span> </div><div class="line">            dispatch(itemsHasErrored(<span class="literal">true</span>)));</div><div class="line">            <span class="regexp">//</span>捕获错误以后HasError的状态 <span class="literal">false</span>=&gt;<span class="literal">true</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建我们的reducers"><a href="#创建我们的reducers" class="headerlink" title="创建我们的reducers"></a>创建我们的reducers</h2><p> action定义好了以后,可以编写reducers接受actions,接着返回appliction的新状态(译注：实际上store中返回的对象都是一个新的对象,不是原对象的引用,这个就叫做immutable,facebook定义了一个immutable.js的技术实际是也是返回一个新的对象的硬拷贝,但是在原对象和修改对象之间共享了一部分内容,这一点有点微妙).<br> 注意：在Redux中,所有的reducers不考虑action,都会调用,所以即就是没有action被应用,你也必须要返回一个原来的定义的<code>state</code>.</p>
<p> 每一个reducer接收两个参数,之前的state和一个<code>action</code>对象.也可以使用ES6的属性来调用默认的参数设定到默认的<code>初始化state</code>.</p>
<p> 在每个reducer内部,使用<code>switch</code>申明来决定到底哪个<code>action.type</code>相匹配.如果是简单的reducer,可能没有必要使用<code>switch</code>,理论上使用<code>if/else</code>可能更快一点.</p>
<p> 如果<code>action.type</code>一点匹配,然后会返回和<code>action</code>相关的属性.和前面提到的一样,<code>type</code>和<code>action[属性名]</code>是在action creators里定义的.</p>
<p> 好啦,了解到这些内容,在<code>reducers/item.js</code>中创建items reducers<br> <figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"> export function itemsHasErrored(<span class="keyword">state</span> = false, action) &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case 'ITEMS_HAS_ERRORED':</div><div class="line">            return action.hasErrored;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            return <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export function itemsIsLoading(<span class="keyword">state</span> = false, action) &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case 'ITEMS_IS_LOADING':</div><div class="line">            return action.isLoading;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            return <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export function items(<span class="keyword">state</span> = [], action) &#123;</div><div class="line">    switch (action.type) &#123;</div><div class="line">        case 'ITEMS_FETCH_DATA_SUCCESS':</div><div class="line">            return action.items;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            return <span class="keyword">state</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 注意reducer根据结果store的state属性来命名,<code>action.type</code>没有必要想对应.前两个表达完整的意思,第三个<code>items()</code>就稍微有点不同.</p>
<p> 这是因为,可能会有很多条件返回<code>items</code>数组:有可能返回所有的数组,有可能在删除dispatch以后返回<code>items</code>的次级结构.或者所有的items都被删除了,会返回一个空数组.</p>
<p> 为了重新遍历,每一个reducer都会返回一个截然不同的state属性,不需要考虑reducer内部的条件到底有多少.刚开始花了我很长时间想明白这个问题.<br> 单个的reducers创建好了以后,我们需要把单个的reducer合并(combine)成一个<code>rootReducer</code>,创建单一对象.</p>
<p> 创建文件<code>reducers/index.js</code></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; items, itemsHasErrored, itemsIsLoading &#125; <span class="keyword">from</span> <span class="string">'./items'</span>;</div><div class="line"><span class="comment">//由于每个reducer返回的都是一个对象</span></div><div class="line"><span class="comment">//所以这里的操作就是合并对象的操作,在underscore和loadsh</span></div><div class="line"><span class="comment">//里面可以找到合并js对象的代码</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</div><div class="line">    items,</div><div class="line">    itemsHasErrored,</div><div class="line">    itemsIsLoading</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 我们从<code>items</code>里导入每个reducers,使用redux的<code>combineReducers()</code>函数来合并输出单一对象(译注:所以每一个reducer返回的对象的属性名应该是唯一的,否则就覆盖了,前面的内容表达过这个意思)<br>因为我们的reducer的名字和在store中使用的属性名一样,所以我们可以使用ES6的对象字面量.</p>
<p>注意,我有意提到了reducer的前缀,所以当我们的application变得比较复杂的时候,不能出现全局性的<code>hasErrored</code>和<code>isLoading</code>属性.可以使用不同的error和loading state,所以前缀可以给你很大的灵活性.例如<br>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; items, itemsHasErrored, itemsIsLoading &#125; <span class="keyword">from</span> <span class="string">'./items'</span>;</div><div class="line"><span class="keyword">import</span> &#123; posts, postsHasErrored, postsIsLoading &#125; <span class="keyword">from</span> <span class="string">'./posts'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</div><div class="line">    items,</div><div class="line">    itemsHasErrored,</div><div class="line">    itemsIsLoading,</div><div class="line">    posts,</div><div class="line">    postsHasErrored,</div><div class="line">    postsIsLoading</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>   替代方法是,可以在import的时候使用别名.但是我更愿意使用独一无二的名字.</p>
<h2 id="配置store-注入到你的app中"><a href="#配置store-注入到你的app中" class="headerlink" title="配置store,注入到你的app中"></a>配置store,注入到你的app中</h2><p>操作很直接,创建<code>store/configureStore.js</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</div><div class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> createStore(</div><div class="line">        rootReducer,</div><div class="line">        initialState,</div><div class="line">        applyMiddleware(thunk)</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  现在在index.js中包含<code>&lt;Provider /&gt;</code>组件,<code>configureStore</code>,配置<code>store</code>.包装app(<code>&lt;ItemList /&gt;</code>),传递进去<code>store</code>和<code>props</code>.</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/configureStore'</span>;</div><div class="line"><span class="keyword">import</span> ItemList <span class="keyword">from</span> <span class="string">'./components/ItemList'</span>;</div><div class="line"><span class="keyword">const</span> store = configureStore(); <span class="comment">// You can also pass in an initialState here</span></div><div class="line">render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">ItemList</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>  我知道,其实花了很多努力才到了这一步,但是随着设置的完成,我们就可以使用配置来操纵我们的组件了(译注:这里是意译,组件又称为木偶组件,意思很清楚吧？谁是拿着吊线的人呢？就是redux).</p>
<h2 id="把组件转化为使用Redux-store和方法"><a href="#把组件转化为使用Redux-store和方法" class="headerlink" title="把组件转化为使用Redux store和方法"></a>把组件转化为使用Redux store和方法</h2><p>  跳回到<code>components/ItemList.js</code></p>
<p>  在顶部导入需要的部分<br>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; itemsFetchData &#125; <span class="keyword">from</span> <span class="string">'../actions/items'</span>;</div></pre></td></tr></table></figure></p>
<p>  <code>connect</code>可以让组件链接到Redux的store,<code>itemsFetchData</code>是在开始写的action creator.我们仅仅需要导入actin creator.使用<code>dispatch</code>来触发actions.(译注:redux里面有很多内容其实是很基础的,例如这里,javascript的函数是一类对象,在js中函数是传引用的,所以函数名可以作为函数的引用,通过另一函数的参数来传递. 厉害 👍).<br>  在组件类定义好了以后,我们可以把Redux的state和action creator的dispatch映射到props上.<br>  创建一个函数,接受<code>state</code>返回一个props对象.在简单的组件中,可以把前缀去掉.</p>
  <figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   const mapStateToProps = (<span class="keyword">state</span>) =&gt; &#123;</div><div class="line">    return &#123;</div><div class="line">        items: <span class="keyword">state</span>.items,</div><div class="line">        hasErrored: <span class="keyword">state</span>.itemsHasErrored,</div><div class="line">        isLoading: <span class="keyword">state</span>.itemsIsLoading</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p> 接着我们需要另一函数在props中<code>dispatch</code>我们的<code>itemsFetchData()</code>函数.</p>
 <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  const mapDispatchToProps = (dispatch) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line"><span class="symbol">        fetchData:</span> (url) =&gt; dispatch(itemsFetchData(url))</div><div class="line">    &#125;<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div><div class="line"> ``` </div><div class="line"> </div><div class="line"> 还是把`item`前缀去掉.这里的fetchData函数接受一个`url`参数,返回</div><div class="line"> 派发调用`itemsFetchData(url)`操作.</div><div class="line"> </div><div class="line"> 现在,`mapStatetoProps()`和`mapDispatchToProps()`还不能做什么事情,需要改变一下代码</div></pre></td></tr></table></figure>
<p> export default connect(mapStateToProps, mapDispatchToProps)(ItemList);<br> <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">`connect`函数把组件连接到Redux,同时映射了需要用到的props.</div><div class="line"></div><div class="line">最后一步是使用props替换掉state.</div><div class="line"></div><div class="line">* 删掉`constructor()&#123;&#125;`和`fetchData()&#123;&#125;`</div><div class="line">* 在`componentDidMount()`里把`this.fetchData()`改为`this.props.fetchData()`.</div><div class="line">* `this.state.x` 统一改为`this.props.X`.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">  你的组件看起来应该是</div></pre></td></tr></table></figure></p>
<pre><code>    import React, { Component } from &apos;react&apos;;
  import { connect } from &apos;react-redux&apos;;
 import { itemsFetchData } from &apos;../actions/items&apos;;
 class ItemList extends Component {
componentDidMount() {
    this.props.fetchData(&apos;http://5826ed963900d612000138bd.mockapi.io/items&apos;);
}
render() {
    if (this.props.hasErrored) {
        return &lt;p&gt;Sorry! There was an error loading the items&lt;/p&gt;;
    }
    if (this.props.isLoading) {
        return &lt;p&gt;Loading…&lt;/p&gt;;
    }
    return (
        &lt;ul&gt;
            {this.props.items.map((item) =&gt; (
                &lt;li key={item.id}&gt;
                    {item.label}
                &lt;/li&gt;
            ))}
        &lt;/ul&gt;
    );
}
}
 const mapStateToProps = (state) =&gt; {
return {
    items: state.items,
    hasErrored: state.itemsHasErrored,
    isLoading: state.itemsIsLoading
};
};
const mapDispatchToProps = (dispatch) =&gt; {
return {
    fetchData: (url) =&gt; dispatch(itemsFetchData(url))
};
};
 export default connect(mapStateToProps, mapDispatchToProps)(ItemList);
</code></pre><p>   ```</p>
<p>  好了,application现在使用Redux和Redux thunk来fetch和显示数据.</p>
<p>  也不是太困难，是不是？</p>
<p>  你现在也是Redux大师了 :D</p>
<h2 id="接下来做什么？"><a href="#接下来做什么？" class="headerlink" title="接下来做什么？"></a>接下来做什么？</h2><p>  我在github提交了每一步的代码.我希望你克隆和理解他,然后添加根据items的id删除item的功能.</p>
<p>  我没有真正提到Redux的内容是,state是immutable,意识是你不能修改他.所以在reducers中每次都要返回一个新的state,上面的三个reducers比较简单,刚刚好可以工作.但是如果是从items的数组中删除操作,你可能不熟悉.<br>  你不能再使用<code>Array.protype.splice()</code>来从数组中移除items.因为这样做会mutate之前的state.<a href="https://egghead.io/lessons/javascript-redux-avoiding-array-mutations-with-concat-slice-and-spread" target="_blank" rel="external">Dan在视频中讲解了怎么从数组中删除一个元素</a>.如果你坚持要做,可以看看<code>delete-items</code>分支,可以找到解决办法.</p>
<p>  我真切的希望这篇文章讲明了Redux和Thunk的原理以及怎么把现有的React application转变到使用redux.写作过程巩固了我对Redux的理解(译注:翻译过程也巩固了我的理解),所以我很高兴这么做(译注：so do I 😁).</p>
<p>   下面有点不翻了。</p>
<blockquote>
<p>我个人觉得这篇文章却似写的非常的好.强烈推荐.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux和Thunk的使用傻瓜教程&quot;&gt;&lt;a href=&quot;#Redux和Thunk的使用傻瓜教程&quot; class=&quot;headerlink&quot; title=&quot;Redux和Thunk的使用傻瓜教程&quot;&gt;&lt;/a&gt;Redux和Thunk的使用傻瓜教程&lt;/h1&gt;&lt;blockquo
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Using normalizr.js in a Redux store – Farmdrop – Medium</title>
    <link href="https://phpsmarter.github.com/2017/04/13/%E7%BF%BB%E8%AF%91-Using-normalizr-js-in-a-Redux-store-%E2%80%93-Farmdrop-%E2%80%93-Medium/"/>
    <id>https://phpsmarter.github.com/2017/04/13/翻译-Using-normalizr-js-in-a-Redux-store-–-Farmdrop-–-Medium/</id>
    <published>2017-04-12T20:19:25.000Z</published>
    <updated>2017-04-13T21:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文请<a href="https://medium.com/farmdrop/using-normalizr-js-in-a-redux-store-96ab33991369" target="_blank" rel="external">参见</a>,程序设计我理解简单一句话就是处理数据和展现数据.数组,对象和数据库都是展现数据的不同形式.自从意识到这一点以后,就突然冒出一个念头,React中引入的Redux就可以作为一个数据库来思考啊,至少是能使用已经学过的开发web模式,框架+数据库的概念来辅助理解.但是Redux中的state还显的很简单,所以有程序员就引入了normalizr.js来继续扩展state的能力,最终这篇文章就也提出了简单数据库的概念.我对这个问题还不是太清楚,前面看文档的时候并没有意识到他的价值,现在返回头来看,发现这个可能还挺有用的.后面会继续学习这部分的内容.翻译部分完成,但是有些内容不理解.<strong>所以内容以原文为准</strong></p>
</blockquote>
<h1 id="在Redux-store中使用normalizr-js"><a href="#在Redux-store中使用normalizr-js" class="headerlink" title="在Redux store中使用normalizr.js"></a>在Redux store中使用normalizr.js</h1><p>   最近我们在app中开始使用React,但是我们意识到当app规模扩大的时候,单凭Props来传递数据是不能适应app的大规模结构需求.单纯使用React,要维护和添加额外的功能或者重构(refactor,是这么翻译的吗？)都非常的困难.因此我们决定在app中整合使用Redux,我们花费了很多精力来重构代码,由此我觉得可以分享一下我学到的东西.<code>第一件事就是怎么在Redux store中组织数据</code>.</p>
<h2 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h2><p>   我们的app是e-commerce,所以里面有订单和商品的概念,把订单和商品联系起来的是每一条 Line Items(订单项).一个 Line Item连接一个产品到订单,可以储存客户订单中每种产品的数量.<br>   为了确保我们的app的性能,我想确认在app运行中没有实体(entities)在内存中被复制.在我们以前的Angular app中,我们在内从中复制产品类似下面<br>   (译注:这里的复制的意思是有没有存在重复的问题)</p>
 <figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// BAD - notice how the 'Carrots' object is </span></div><div class="line">  <span class="selector-tag">duplicated</span>.</div><div class="line">  <span class="comment">//不好的方法-注意Carrots对象被复制</span></div><div class="line">&#123;</div><div class="line">  <span class="attribute">order</span>: &#123;</div><div class="line">    <span class="attribute">id</span>: <span class="number">10</span>,</div><div class="line">    <span class="attribute">line_items</span>: [</div><div class="line">      &#123; </div><div class="line">        <span class="attribute">id</span>: <span class="number">483</span>,</div><div class="line">        <span class="attribute">quantity</span>: <span class="number">2</span>,</div><div class="line">        <span class="attribute">product</span>: &#123;<span class="comment">//这个产品和下面的产品是重复的,有内存浪费</span></div><div class="line">          <span class="attribute">id</span>: <span class="number">924</span>,</div><div class="line">          <span class="attribute">name</span>: <span class="string">'Carrots'</span>,</div><div class="line">          <span class="attribute">price</span>: <span class="string">'1.50'</span>,</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attribute">products</span>: [ <span class="comment">//这里的产品和上面的是一摸一样的,用一个引用就可以</span></div><div class="line">    &#123;</div><div class="line">      <span class="attribute">id</span>: <span class="number">924</span>,</div><div class="line">      <span class="attribute">name</span>: <span class="string">'Carrots'</span>,</div><div class="line">      <span class="attribute">price</span>: <span class="string">'1.50'</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是我们使用Redux的时候也应该这么做吗?reducers在这种情况下应该是什么样子？(上面的两个产品的重复,怎么在reducer中来减少重复)</p>
<h2 id="应对对象冗余复制的解决办法"><a href="#应对对象冗余复制的解决办法" class="headerlink" title="应对对象冗余复制的解决办法"></a>应对对象冗余复制的解决办法</h2><p>在看了<a href="https://blog.risingstack.com/react-js-best-practices-for-2016" target="_blank" rel="external">这篇伟大的文章</a>后,我意识到normalizr.js应该非常符合我的要求.简明扼要,normalizr接收一个巢式(nested) javascirpt对象(类似上面的订单),然后输出扁平化的对象.在<a href="https://github.com/gaearon/normalizr" target="_blank" rel="external">Github repo</a>中查看它的具体工作原理.</p>
<p>为了让normalizr正常工作,必须为需要储存在store中的entity创建不同的图式(schema).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// schemas.js</span></div><div class="line"><span class="keyword">import</span> &#123; Schema, arrayOf &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"><span class="keyword">const</span> orderSchema     = Schema(<span class="string">'orders'</span>);</div><div class="line"><span class="keyword">const</span> lineItemSchema  = Schema(<span class="string">'lineItems'</span>);</div><div class="line"><span class="keyword">const</span> productSchema   = Schema(<span class="string">'products'</span>);</div><div class="line"><span class="comment">// An Order has an array of line items</span></div><div class="line"><span class="comment">//订单含有line items的数组</span></div><div class="line">orderSchema.define(&#123;</div><div class="line">  <span class="attr">lineItems</span>: arrayOf(lineItemSchema)</div><div class="line">&#125;);</div><div class="line"><span class="comment">// A Line Item has one product attached</span></div><div class="line"><span class="comment">//每个line item有一个产品附着到上面</span></div><div class="line">lineItems.define(&#123;</div><div class="line">  <span class="attr">product</span>: productSchema</div><div class="line">&#125;);</div><div class="line"><span class="keyword">export</span> &#123; orderSchema, lineItemSchema, productSchema &#125;;</div></pre></td></tr></table></figure>
<p>接着我们需要配置一个简单的action,目的是去序列化我们的订单,输入到redux store中.</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// shop_actions.js</span></div><div class="line">module.exports = &#123;</div><div class="line">  deserializeOrder: (<span class="keyword">order</span>) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="keyword">type</span>: <span class="string">'DESERIALIZE_ORDER'</span>,</div><div class="line">      <span class="keyword">order</span>: <span class="keyword">order</span>    </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>一旦你已经有了schema和actions,reducer会变得出奇的简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// shop_reducer.js</span></div><div class="line"><span class="keyword">import</span> &#123; normalize &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"><span class="keyword">import</span> &#123; orderSchema &#125; <span class="keyword">from</span> <span class="string">'./schemas'</span>;</div><div class="line"><span class="comment">// We use seamless-immutable but thats for another time.</span></div><div class="line"><span class="comment">//还要两个比较好的immutable.js的实现方法,可以在github中看看</span></div><div class="line"><span class="keyword">import</span> Immutable <span class="keyword">from</span> <span class="string">'seamless-immutable'</span>;</div><div class="line"><span class="keyword">const</span> defaultState = Immutable(&#123;</div><div class="line">  <span class="attr">order</span>: [],</div><div class="line">  <span class="attr">product</span>: [],</div><div class="line">  <span class="attr">lineItem</span>: []</div><div class="line">&#125;);</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">shopReducer</span>(<span class="params">state = defaultState, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'DESERIALIZE_ORDER'</span>:</div><div class="line">      <span class="comment">// This is the magic part - the normalize method will flatten </span></div><div class="line">      <span class="comment">// my deeply nested order according to my schemas defined</span></div><div class="line">      <span class="comment">// above.</span></div><div class="line">      <span class="comment">//巢式结构被扁平化</span></div><div class="line">      <span class="keyword">var</span> normalizedOrder = normalize(action, &#123; </div><div class="line">        <span class="attr">order</span>: orderSchema </div><div class="line">      &#125;);</div><div class="line">      <span class="comment">// Due to using seamless-immutable we have to merge the new</span></div><div class="line">      <span class="comment">// entities into the state.</span></div><div class="line">      <span class="keyword">return</span> state.merge(normalizedOrder.entities);</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我们也可以很容易的在actions和reducers一起工作时进行测试工作.<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./path/to/reducer'</span>;</div><div class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./path/to/actions'</span>;</div><div class="line">const fakeOrder = &#123;</div><div class="line">  id: <span class="number">10</span>,</div><div class="line">  lineItems: [</div><div class="line">    &#123;</div><div class="line">      id: <span class="number">483</span>,</div><div class="line">      quantity: <span class="number">2</span>,</div><div class="line">      product: &#123;</div><div class="line">        id: <span class="number">924</span>,</div><div class="line">        name: <span class="string">'Carrots'</span>,</div><div class="line">        price: <span class="number">1.50</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;;</div><div class="line">describe(<span class="string">'shopReducer'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  describe(<span class="string">'DESERIALIZE_ORDER'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    let state;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      state = reducer(</div><div class="line">        <span class="literal">undefined</span>, </div><div class="line">        actions.deserializeOrder(fakeOrder)</div><div class="line">      );</div><div class="line">    &#125;);    </div><div class="line">    </div><div class="line">    it(<span class="string">'should deserialize the order correctly'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(state.orders[<span class="number">10</span>]).toEqual(&#123;</div><div class="line">        id: <span class="number">10</span>,</div><div class="line">        lineItems: [ <span class="number">483</span>]</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    it(<span class="string">'should deserialize the lineItems correctly'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(state.lineItems[<span class="number">483</span>]).toEqual(&#123;</div><div class="line">        id: <span class="number">483</span>,</div><div class="line">        quantity: <span class="number">2</span>,</div><div class="line">        product: <span class="number">924</span></div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  </div><div class="line">    it(<span class="string">'should desialize the product correctly'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      expect(state.products[<span class="number">924</span>]).toEqual(&#123;</div><div class="line">        id: <span class="number">924</span>,</div><div class="line">        name: <span class="string">'Carrots'</span>,</div><div class="line">        price: <span class="number">1.50</span></div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>所以,现在如果你在订单中传递文章开头的数据,去序列化,redux store看起来像这样</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;  </div><div class="line">  <span class="attribute">orders</span>: &#123;</div><div class="line">    <span class="number">10</span>: &#123;</div><div class="line">      <span class="attribute">id</span>: <span class="number">10</span>,</div><div class="line">      <span class="attribute">line_items</span>: [ <span class="number">483</span> ]<span class="comment">//关联到lineItems的483</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attribute">lineItems</span>: &#123;</div><div class="line">    <span class="number">483</span>: &#123;</div><div class="line">      <span class="attribute">id</span>: <span class="number">483</span>,</div><div class="line">      <span class="attribute">quantity</span>: <span class="number">2</span>,</div><div class="line">      <span class="attribute">product</span>: <span class="number">924</span> <span class="comment">//关联到product 924</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attribute">products</span>: &#123;</div><div class="line">    <span class="number">924</span>: &#123;</div><div class="line">      <span class="attribute">id</span>: <span class="number">924</span>,</div><div class="line">      <span class="attribute">name</span>: <span class="string">'Carrots'</span>,</div><div class="line">      <span class="attribute">price</span>: <span class="number">1.50</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面所有在javascript store中的结果表现的像是一个简单的数据库.现在只要我们知道每一个想更新的entity的id,我们就可以在store中发现他.例如,在新store中,如果我们想更新line item的数量,我们不在需要知道和他相关联的订单id.</p>
<p>这一切都非常的精彩,但是如果我想在store之外重构一个订单?我们的解决办法是创建一些助手 class(helper class).下面的例子相当的简单,但是这些classes可以帮助改进一下复杂的方法.</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">orderHelper</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(store) &#123;</div><div class="line">    <span class="keyword">this</span>.store = store;</div><div class="line">    <span class="comment">// We store the current order id on the store too</span></div><div class="line">    <span class="comment">//在store中储存当前订单id   </span></div><div class="line">    <span class="keyword">this</span>.currentOrder = store.orders[store.currentOrderId];</div><div class="line">  &#125;</div><div class="line">  currentLineItems() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.currentOrder.lineItems.map(lineItemId =&gt;</div><div class="line">      <span class="keyword">return</span> (<span class="keyword">this</span>.store.lineItems[liId])</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让我们看看,如果我们构建一个组件来显示items的总数量,你可以这样配置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React       <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> OrderHelper <span class="keyword">from</span> <span class="string">'./path/to/orderHelper'</span>;</div><div class="line"><span class="comment">// First of all we create the React Component</span></div><div class="line"><span class="comment">//创建React 组件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderCount</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line">    <span class="attr">lineItems</span>: React.PropTypes.array.isRequired,</div><div class="line">  &#125;</div><div class="line">  totalQuantity() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.lineItems.reduce(<span class="function">(<span class="params">total, lineItem</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">return</span> (total + lineItem.quantity);</div><div class="line">    &#125;, <span class="number">0</span>); </div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="comment">// We're using the jsx format</span></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.totalQuantity() &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// We now bind the component to the redux store</span></div><div class="line"><span class="comment">//连接组件到redux的store中</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> helper = <span class="keyword">new</span> OrderHelper(state);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">lineItems</span>: helper.currentLineItems(),</div><div class="line">  &#125;</div><div class="line">&#125;)(OrderCount);</div></pre></td></tr></table></figure>
<p>如果其他的组件更新了联系到这个store的line items时,这个组件将会更新.</p>
<p>到目前为止,我们已经发现这种形式使用起来非常的简单.我们的reducers仅仅关注store中的结构数据,非常容易测试,因为他们是vanilla.js,不和Dom或其他内容交互.我们可以把React变为其他的框架,仍然使用相同的reducers和actions</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>   在app中改用Redux,使我们思考app的不同结构方式.从app其他部分把Redux(还有 reducers,actions)分离出来,这个过程给了我们继续构建的信心,即使不使用React,我们构建的单元测试让人感觉很舒服,使用normalizr.js改进了我们组织数据的方式.<br>   虽然这个项目目前还在继续进展中,但是截至目前我们做的已经够的上精彩了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文请&lt;a href=&quot;https://medium.com/farmdrop/using-normalizr-js-in-a-redux-store-96ab33991369&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参见&lt;
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Redux和GraphQL入门</title>
    <link href="https://phpsmarter.github.com/2017/04/11/%E7%BF%BB%E8%AF%91-Redux%E5%92%8CGraphQL%E5%85%A5%E9%97%A8/"/>
    <id>https://phpsmarter.github.com/2017/04/11/翻译-Redux和GraphQL入门/</id>
    <published>2017-04-11T15:09:32.000Z</published>
    <updated>2017-04-11T16:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当GraphQL发布以来,非常清楚的显示出,他将会成为非常好的技术.社区都在耐心的等待技术评价.<br>但是你可能和我一样,发现文档比我们期待的更难理解.可能的原因是由于GraphQL和Relay的联合使用.</p>
</blockquote>
<p>我也感觉到了你的痛苦.我的大脑都要融化掉了,我告诉我自己我将会尝试在其他的框架里是用它.我做到了!这一次我仅仅把关注点放在GraphQL自身,其他的地方保持尽可能的简单.</p>
<h1 id="Sharing-is-Caring"><a href="#Sharing-is-Caring" class="headerlink" title="Sharing is Caring"></a>Sharing is Caring</h1><p>这个教程的配置部分尽可能的简单,结合GraphQL和Redux.减少复杂的部分,所有的内容你可以直接从这里看到(指代码部分).</p>
<p>我们将使用Redux来代替Relay,在服务器上使用es5而不是es6/babel-node.所有的GraphQL的东西都保持尽可能的简单.</p>
<p>下面配置一下项目</p>
<h1 id="项目文件配置"><a href="#项目文件配置" class="headerlink" title="项目文件配置"></a>项目文件配置</h1><p>创建新文件件(graphql-app).<br>需要一个package.json.<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> init</div></pre></td></tr></table></figure></p>
<p>需要在服务器上安装一下模块:graphql-js,express-graphql,express,webpack和webpack-dev-server.</p>
<p>编写服务器的编码使用es5,避免编译过程.</p>
<p>创建<code>sevsr.js</code>文件,导入我们安装的模块<br><code>server.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> webpack = <span class="built_in">require</span>(‘webpack’);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(‘webpack-dev-server’);</div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(‘express’);</div><div class="line"><span class="keyword">var</span> graphqlHTTP = <span class="built_in">require</span>(‘express-graphql’);</div><div class="line"><span class="keyword">var</span> graphql = <span class="built_in">require</span>(‘graphql’);</div><div class="line"><span class="comment">//下面是有关graphql使用的配置,有对象和类型</span></div><div class="line"><span class="keyword">var</span> GraphQLSchema = graphql.GraphQLSchema;</div><div class="line"><span class="keyword">var</span> GraphQLObjectType = graphql.GraphQLObjectType;</div><div class="line"><span class="keyword">var</span> GraphQLString = graphql.GraphQLString;</div><div class="line"><span class="keyword">var</span> GraphQLInt = graphql.GraphQLInt;</div></pre></td></tr></table></figure></p>
<p>你可以看到我们给graphQL的类型定义了变量,后面我们要使用这些变量.</p>
<p>接着我们为GraphQL创建可以获取的数据.这里使用<code>Goldbergs</code>的数据作为来源.</p>
<p>我们的数据</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"> var goldbergs = &#123;</div><div class="line"> <span class="number">1</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Beverly Goldberg"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"Wendi McLendon-Covey"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"matriarch"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"embarrassing, overprotective"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">1</span></div><div class="line"> &#125;,</div><div class="line"> <span class="number">2</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Murray Goldberg"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"Jeff Garlin"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"patriarch"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"gruff, lazy"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">2</span></div><div class="line"> &#125;,</div><div class="line"> <span class="number">3</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Erica Goldberg"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"Hayley Orrantia"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"oldest child"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"rebellious, nonchalant"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">3</span></div><div class="line"> &#125;,</div><div class="line"> <span class="number">4</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Barry Goldberg"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"Troy Gentile"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"middle child"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"dim-witted, untalented"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">4</span></div><div class="line"> &#125;,</div><div class="line"> <span class="number">5</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Adam Goldberg"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"Sean Giambrone"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"youngest child"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"geeky, pop-culture obsessed"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">5</span></div><div class="line"> &#125;,</div><div class="line"> <span class="number">6</span>: &#123;</div><div class="line"><span class="symbol">   character:</span> <span class="string">"Albert 'Pops' Solomon"</span>,</div><div class="line"><span class="symbol">   actor:</span> <span class="string">"George Segal"</span>,</div><div class="line"><span class="symbol">   role:</span> <span class="string">"grandfather"</span>,</div><div class="line"><span class="symbol">   traits:</span> <span class="string">"goofy, laid back"</span>,</div><div class="line"><span class="symbol">   id:</span> <span class="number">6</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="GraophQL"><a href="#GraophQL" class="headerlink" title="GraophQL"></a>GraophQL</h1><p>GraphQL从简化的角度考虑,有一个类型系统构成-这是我们用来理解他的心理模型-我们将看到这里有三种”类型”.</p>
<ol>
<li>模型的类型</li>
<li>查询的类型</li>
<li>schema的类型</li>
</ol>
<p>在实际的编码中,类型可能比这个简单,这里只是为了到入门的目的,所以比较简单</p>
<h1 id="模型的类型"><a href="#模型的类型" class="headerlink" title="模型的类型"></a>模型的类型</h1><p>我们将创建一个”模型类型”,实际相当于实际的数据的镜像.</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> var goldbergType = new GraphQLObjectType(&#123;</div><div class="line"><span class="symbol">  name:</span> <span class="string">"Goldberg"</span>,</div><div class="line"><span class="symbol">  description:</span> <span class="string">"Member of The Goldbergs"</span>,</div><div class="line"><span class="symbol">  fields:</span> &#123;</div><div class="line"><span class="symbol">   character:</span> &#123;</div><div class="line"><span class="symbol">     type:</span> GraphQLString,</div><div class="line"><span class="symbol">     description:</span> <span class="string">"Name of the character"</span>,</div><div class="line">   &#125;,</div><div class="line"><span class="symbol">   actor:</span> &#123;</div><div class="line"><span class="symbol">     type:</span> GraphQLString,</div><div class="line"><span class="symbol">     description:</span> <span class="string">"Actor playing the character"</span>,</div><div class="line">   &#125;,</div><div class="line"><span class="symbol">   role:</span> &#123;</div><div class="line"><span class="symbol">     type:</span> GraphQLString,</div><div class="line"><span class="symbol">     description:</span> <span class="string">"Family role"</span></div><div class="line">   &#125;,</div><div class="line"><span class="symbol">   traits:</span> &#123;</div><div class="line"><span class="symbol">     type:</span> GraphQLString,</div><div class="line"><span class="symbol">     description:</span> <span class="string">"Traits this Goldberg is known for"</span></div><div class="line">   &#125;,</div><div class="line"><span class="symbol">   id:</span> &#123;</div><div class="line"><span class="symbol">     type:</span> GraphQLInt,</div><div class="line"><span class="symbol">     description:</span> <span class="string">"ID of this Goldberg"</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们创建了一个GraphQLObjectType的对象实例,取名为”Goldberg”.<br>在“fields”下,每一个“type”表明一个期待的类型.例如 string(GraphQLString)最为演员角色的类型,int(GraphQLInt)作为Id的类型约束.</p>
<p>你可能也注意到了”description”字段,GraphQL自带说明文档.当我们结合express-graphql使用GraphiQL的时候可以在action中刚看到这个描述内容.</p>
<h1 id="Query-Type"><a href="#Query-Type" class="headerlink" title="Query Type"></a>Query Type</h1><p>“Query type”定义了我们怎么查询我们的数据<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var queryType = new GraphQLObjectType(&#123;</div><div class="line"><span class="symbol">  name:</span> <span class="string">"query"</span>,</div><div class="line"><span class="symbol">  description:</span> <span class="string">"Goldberg query"</span>,</div><div class="line"><span class="symbol">  fields:</span> &#123;</div><div class="line"><span class="symbol">    goldberg:</span> &#123;</div><div class="line"><span class="symbol">      type:</span> goldbergType,</div><div class="line"><span class="symbol">      args:</span> &#123;</div><div class="line"><span class="symbol">        id:</span> &#123;</div><div class="line"><span class="symbol">          type:</span> GraphQLInt</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line"><span class="symbol">      resolve:</span> function(_, args)&#123;</div><div class="line">        return getGoldberg(args.id)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>“query type”也是GraphQLObjectType的实例.只是用于不同的目的.<br>我们创建goldberg这个查询字段,设定的类型是goldbergType.在args(参数)下我们可以看到新的goldberg字段,它将接受id作为参数.</p>
<p>但我们解析查询的时候,我们返回gegGoldberg()函数的调用返回值</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">function</span> <span class="title">getGoldberg</span>(id) &#123;</div><div class="line"> <span class="keyword">return</span> <span class="type">goldbergs[id]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从查询中的id从data中返回其中一个Goldberg.</p>
<h1 id="Schema-type"><a href="#Schema-type" class="headerlink" title="Schema type"></a>Schema type</h1><p>最终”schema type”把类型放到一起.</p>
<h1 id="为schema提供服务"><a href="#为schema提供服务" class="headerlink" title="为schema提供服务"></a>为schema提供服务</h1><p>我们可以使用express和graphqlHTTP 中间件来提供schma服务.<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> var graphQLServer = express()<span class="comment">;</span></div><div class="line">graphQLServer.use(<span class="string">'/'</span>, graphqlHTTP(&#123; <span class="keyword">schema: </span><span class="keyword">schema, </span>graphiql: true &#125;))<span class="comment">;</span></div><div class="line">graphQLServer.listen(<span class="number">8080</span>)<span class="comment">;</span></div><div class="line">console.log(<span class="string">"The GraphQL Server is running."</span>)</div></pre></td></tr></table></figure></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">node</span> <span class="title">server</span></div></pre></td></tr></table></figure>
<p>浏览器打开<a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a>.可以看到GraphiQL IDE工作了.<br>如果我们执行了查询<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &#123; </div><div class="line"> goldberg(<span class="name">id:</span> <span class="number">2</span>) &#123; </div><div class="line">   id,</div><div class="line">   character</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>返回的结果是<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line"> <span class="attr">"data"</span>: &#123;</div><div class="line">   <span class="attr">"goldberg"</span>: &#123;</div><div class="line">     <span class="attr">"id"</span>: <span class="number">2</span>,</div><div class="line">     <span class="attr">"character"</span>: <span class="string">"Murray Goldberg"</span></div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再做一些其他查询也非常的有意思.</p>
<p><code>提示：</code>在屏幕的顶部右边，有一个按钮,标签为”Docs”,如果我们点击按钮,可以看到之前在”description”中添加的字段内容.可以探索一下文档.</p>
<h2 id="为app提供服务"><a href="#为app提供服务" class="headerlink" title="为app提供服务"></a>为app提供服务</h2><p>为了在我们app的前端使用GraphQL,需要安装babel,babel-loader以及一组babel-presets的约定.</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install </span>--save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-es2015 </span><span class="keyword">babel-preset-stage-0 </span><span class="keyword">babel-preset-react</span></div></pre></td></tr></table></figure>
<p>创建文件<code>.babelrc</code>,这个文件告诉babel,我们的预先设定.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line"> <span class="attr">"presets"</span>: [<span class="string">"es2015"</span>, <span class="string">"stage-0"</span>, <span class="string">"react"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个新的<code>index.js</code>文件.目前还没有内容.</p>
<p>创建新的文件夹<code>static</code>,在文件夹中添加<code>index.html</code>文件.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在我们的项目结构看起来像这样<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">graphql-app</div><div class="line"><span class="string">| -- index.js</span></div><div class="line"><span class="string">| -- server.js</span></div><div class="line"><span class="string">| -- package.json</span></div><div class="line"><span class="string">| -- .babelrc</span></div><div class="line"><span class="string">| -- static</span></div><div class="line">   <span class="string">| -- index.hml</span></div></pre></td></tr></table></figure></p>
<p>在server.js文件中,我们需要配置webpack,借助babel打包项目的js文件.</p>
<p>在graphQLServer.listen(8080)下<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> var compiler = webpack(&#123;</div><div class="line"><span class="symbol">  entry:</span> <span class="string">"./index.js"</span>,</div><div class="line"><span class="symbol">  output:</span> &#123;</div><div class="line"><span class="symbol">    path:</span> __dirname,</div><div class="line"><span class="symbol">    filename:</span> <span class="string">"bundle.js"</span>,</div><div class="line"><span class="symbol">    publicPath:</span> <span class="string">"/static/"</span></div><div class="line">  &#125;,</div><div class="line"><span class="symbol">  module:</span> &#123;</div><div class="line"><span class="symbol">    loaders:</span> [</div><div class="line">      &#123; test: /\.js$/, </div><div class="line"><span class="symbol">        exclude:</span> /node_modules/, </div><div class="line"><span class="symbol">        loader:</span> <span class="string">"babel-loader"</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>Webpack 将会接受index.js文件，编译一个est的版本到/static/bundle.js文件.</p>
<p>接下来我们创建一个新的WebpackDevServer 来提供bundled的项目.</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> <span class="keyword">app</span> = new WebpackDevServer(compiler, &#123;</div><div class="line"> contentBase: <span class="string">"/public/"</span>,</div><div class="line"> proxy: &#123;<span class="string">"/graphql"</span>: `http:<span class="comment">//localhost:$&#123;8080&#125;`&#125;,</span></div><div class="line"> publicPath: <span class="string">"/static/"</span>,</div><div class="line"> stats: &#123;colors: true&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">app</span>.<span class="keyword">use</span>(<span class="string">"/"</span>, express.static(<span class="string">"static"</span>));</div><div class="line"><span class="keyword">app</span>.listen(3000);</div><div class="line">console.<span class="built_in">log</span>(<span class="string">"The App Server is running."</span>)</div></pre></td></tr></table></figure>
<p>proxy字段添加了我们已经创建的GraphQL服务到我们的app server,这可以使我们直接在app内部进行查询,不会有跨域问题.</p>
<p>启动一下<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">noder <span class="keyword">server</span></div></pre></td></tr></table></figure></p>
<p>浏览器打开<a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a>,我们会看到”hello world”的消息.<br>再到<a href="http://localhost:3000/graphql" target="_blank" rel="external">http://localhost:3000/graphql</a>.</p>
<h1 id="React和Redux"><a href="#React和Redux" class="headerlink" title="React和Redux"></a>React和Redux</h1><p>为了添加react和react-redux,app需要额外的组件:React,Redux,React-Redux,Redux-thunk和Immutable.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> <span class="comment">--save react react-dom redux react-redux redux-thunk immutable</span></div></pre></td></tr></table></figure>
<p>因为我们使用babel配置了webpack,我们可以在前端使用es6</p>
<p>从static/index.html文件中删除掉”hello world”,使用React添加新的信息.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</div><div class="line"><span class="keyword">const</span> Main = React.createClass(&#123;</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello react!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">ReactDOM.render(</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">Main</span> /&gt;</span>,</span></div><div class="line"> document.getElementById("example")</div><div class="line">);</div></pre></td></tr></table></figure>
<p>重新启动<a href="http://localhost:3000" target="_blank" rel="external">localhost:300</a>,可以看到信息.</p>
<h1 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h1><p>添加新的文件夹,取名”app”最为子文件夹<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">| -- app</span></div><div class="line">  <span class="string">| -- actions</span></div><div class="line">  <span class="string">| -- components</span></div><div class="line">  <span class="string">| -- reducers</span></div></pre></td></tr></table></figure></p>
<p>在reducerS 文件夹中创建reducer.js的文件,里面将执行我们的reducer函数.</p>
<p>我们会使用利用Immuatable模块为state服务,以便我们形成好的习惯.<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> <span class="keyword">Immutable</span> <span class="keyword">from</span> <span class="string">"immutable"</span>;</div><div class="line">const immutableState = <span class="keyword">Immutable</span>.Map(&#123;</div><div class="line">  fetching: <span class="keyword">false</span>,</div><div class="line">  data: <span class="keyword">Immutable</span>.Map(&#123;&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们的state有两个字段-一个让我们知道是否在查询/等待响应的中间阶段,另一个包含着返回的响应数据.</p>
<p>下一步我么把ImmutableState添加到reducer 函数中<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> export const queryReducer = (<span class="keyword">state</span> = immutableState, action) =&gt; &#123;</div><div class="line">  switch (action.type) &#123;</div><div class="line">    case <span class="string">"STARTING_REQUEST"</span>:</div><div class="line">      return <span class="keyword">state</span>.<span class="built_in">set</span>(<span class="string">"fetching"</span>, true);</div><div class="line">    case <span class="string">"FINISHED_REQUEST"</span>:</div><div class="line">      return <span class="keyword">state</span>.<span class="built_in">set</span>(<span class="string">"fetching"</span>, false)</div><div class="line">             .<span class="built_in">set</span>(<span class="string">"data"</span>, Immutable.Map(action.response.data.goldberg));</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      return <span class="keyword">state</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当我们在执行“STARING_REQUEST” action的时候,分发的动作改变”fecthing”的state 为true,表示在获取数据中.</p>
<p>当执行“FINISHED_REQUEST” action的时候,分发的工作改变 “feching”的state为false,data的state设定为我们的响应数据.</p>
<h1 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h1><p>返回到index.js文件,我们想在reducer之外创建store,store接入到我们的主组件.我们需要借助redux和react-redux的助手函数来把刚刚创建的reducer导入store.</p>
<p>还需要使用redux-thunk 中间件来协助后面的数据请求动过.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</div><div class="line"><span class="keyword">import</span> &#123; queryReducer &#125; <span class="keyword">from</span> <span class="string">"./app/reducers/reducers.js"</span>;</div><div class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">"redux-thunk"</span>;</div></pre></td></tr></table></figure>
<p>首先我们应用redux-thunk中间件<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> const createStoreWithMiddleware = applyMiddleware(</div><div class="line">  <span class="name">thunkMiddleware</span></div><div class="line">)(<span class="name">createStore</span>)</div></pre></td></tr></table></figure></p>
<p>然后在Redux Provider中包装我们的主组件,传递queryReducer到createStoreWithMiddleware.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> ReactDOM.render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;createStoreWithMiddleware(queryReducer)&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>完成了！创建了store.</p>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>在actions文件夹中创建新文件actions.js</p>
<p>我们需要创建两个action来分发动作到我们的reducer,其中之一为“STARTING_REQUEST”,另一个为”FINISHED_REQUES”<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> startingRequest = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">"STARTING_REQUEST"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> finishedRequest = <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">"FINISHED_REQUEST"</span>,</div><div class="line">    <span class="attr">response</span>: response</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在store中之前应用的中间件redux-thunk是一件非常伟大的事情,当一个action返回一个函数,这个函数可以使用dispatch来注入到reducer.(译注:对于一部操作,返回响应值以后,可以在发起一个dispatch来通知reducer对state做出改变).</p>
<p>在一个新的getGraph action中,使用了两次dispatch()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> getGraph = <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</div><div class="line">    dispatch(startingRequest());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      <span class="keyword">let</span> request=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">      request.open(<span class="string">"POST"</span>, <span class="string">"/graphql"</span>, <span class="literal">true</span>);</div><div class="line">      request.setRequestHeader(<span class="string">"Content-Type"</span>,</div><div class="line">                               <span class="string">"application/graphql"</span>);</div><div class="line">      request.send(payload);</div><div class="line">      request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</div><div class="line">          resolve(request.responseText)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span></div><div class="line">            dispatch(finishedRequest(<span class="built_in">JSON</span>.parse(response))))</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当getGraph()函数调用的时候,我们dispatch startingRequest(),表示开始一个新的查询.然后开始一个异步的请求(提示:”header”中有application/graphql的类型).当我们的查询完成的时候,我们dispatch finishedRequest() action，提供我们查询的结果.</p>
<h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><p>在”component”文件夹中,我们创建一个新的文件, Query.js文件</p>
<p>我们需要导入react,几个助手函数,还有刚刚创建的getGraph函数.</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> ‘react’;</div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> ‘react-redux’;</div><div class="line"><span class="keyword">import</span> &#123; getGraph &#125; <span class="keyword">from</span> ‘../actions/actions.js’;</div></pre></td></tr></table></figure>
<p>目前我们创建了空的出查询组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Query = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们要在组件中挂载我们的store和dispatch方法,方式是通过创建container组件和react-redux connect()函数</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const mapStateToProps = (<span class="keyword">state</span>) =&gt; &#123;</div><div class="line">  return &#123;</div><div class="line">    store: <span class="keyword">state</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">export const QueryContainer = connect(</div><div class="line"> mapStateToProps</div><div class="line">)(Query);</div></pre></td></tr></table></figure>
<p>在我们的Query组件中,我们需要接入componentDidMount 生命周期函数,从而可以在组件挂载的时候获取数据.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Query = React.createClass(&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.props.dispatch(</div><div class="line">      getGraph(<span class="string">"&#123;goldberg(id: 2) &#123;id, character, actor&#125;&#125;"</span>)</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后我们要添加组件来用于填充获取的响应的数据,一个提交额外查询的按钮.我们想知道在数据查询过程中的状态,并且显示在页面中.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Query = React.createClass(&#123;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.props.dispatch(</div><div class="line">      getGraph(<span class="string">"&#123;goldberg(id: 2) &#123;id, character, actor&#125;&#125;"</span>)</div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> dispatch = <span class="keyword">this</span>.props.dispatch;</div><div class="line">    <span class="keyword">let</span> fetchInProgress = <span class="built_in">String</span>(<span class="keyword">this</span>.props.store.get(<span class="string">'fetching'</span>));</div><div class="line">    <span class="keyword">let</span> queryText;</div><div class="line">    <span class="keyword">let</span> goldberg = <span class="keyword">this</span>.props.store.get(<span class="string">'data'</span>).toObject();</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Fetch in progress: &#123;fetchInProgress&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123; goldberg.character &#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; goldberg.actor &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; goldberg.role &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; goldberg.traits &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;node</span> =&gt;</span> &#123;queryText = node&#125;&#125;&gt;<span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</div><div class="line">          dispatch(getGraph(queryText.value))&#125;</div><div class="line">        &#125;&gt;</div><div class="line">          query</div><div class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面这一步做完以后,最后一件事情就是把QueryContainer组件添加到我们的主组件.</p>
<p><code>index.js</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; QueryContainer &#125; <span class="keyword">from</span> “.<span class="regexp">/app/</span>components<span class="regexp">/Query.js”;</span></div></pre></td></tr></table></figure></p>
<p>使用QueryConatiner组件替代”hello react”组件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> Main = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">QueryContainer</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>完成!现在运行编制好的GraphQL查询就可以获得核心内容.试着查询：{gold-berg(id:4)}{id,charactar,actor,traits},看看可以获得什么结果.</p>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>感谢阅读,我希望这篇文章能对你有帮助.你可以在<a href="https://github.com/thisbejim/getting-started-with-redux-and-graphql" target="_blank" rel="external">这里</a>查看源代码.现在我们使用Redux和GraphQL构建了非常好的app.</p>
<p>另外感谢Dan Abramov指出教程中的一个错误.</p>
<h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当GraphQL发布以来,非常清楚的显示出,他将会成为非常好的技术.社区都在耐心的等待技术评价.&lt;br&gt;但是你可能和我一样,发现文档比我们期待的更难理解.可能的原因是由于GraphQL和Relay的联合使用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>normalizr-Redux state flatten</title>
    <link href="https://phpsmarter.github.com/2017/04/08/normalizr-Redux-state-flatten/"/>
    <id>https://phpsmarter.github.com/2017/04/08/normalizr-Redux-state-flatten/</id>
    <published>2017-04-08T14:37:17.000Z</published>
    <updated>2017-04-08T06:47:31.000Z</updated>
    
    <content type="html"><![CDATA[<p> Normalizr Guide</p>
<h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><p>Consider a typical blog post. The API response for a single post might look something like this:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="string">"123"</span>,</div><div class="line">  <span class="attr">"author"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="string">"1"</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Paul"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"My awesome blog post"</span>,</div><div class="line">  <span class="attr">"comments"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"id"</span>: <span class="string">"324"</span>,</div><div class="line">      <span class="attr">"commenter"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"2"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Nicole"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>We have two nested entity types within our <code>article</code>: <code>users</code> and <code>comments</code>. Using various <code>schema</code>, we can normalize all three entity types down:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; normalize, schema &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Define a users schema</span></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Define your comments schema</span></div><div class="line"><span class="keyword">const</span> comment = <span class="keyword">new</span> schema.Entity(<span class="string">'comments'</span>, &#123;</div><div class="line">  <span class="attr">commenter</span>: user</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Define your article </span></div><div class="line"><span class="keyword">const</span> article = <span class="keyword">new</span> schema.Entity(<span class="string">'articles'</span>, &#123; </div><div class="line">  <span class="attr">author</span>: user,</div><div class="line">  <span class="attr">comments</span>: [ comment ]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(originalData, article);</div></pre></td></tr></table></figure>
<p>Now, <code>normalizedData</code> will be:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">result</span>: <span class="string">"123"</span>,</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="string">"articles"</span>: &#123; </div><div class="line">      <span class="string">"123"</span>: &#123; </div><div class="line">        <span class="attr">id</span>: <span class="string">"123"</span>,</div><div class="line">        <span class="attr">author</span>: <span class="string">"1"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"My awesome blog post"</span>,</div><div class="line">        <span class="attr">comments</span>: [ <span class="string">"324"</span> ]</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"users"</span>: &#123;</div><div class="line">      <span class="string">"1"</span>: &#123; <span class="string">"id"</span>: <span class="string">"1"</span>, <span class="string">"name"</span>: <span class="string">"Paul"</span> &#125;,</div><div class="line">      <span class="string">"2"</span>: &#123; <span class="string">"id"</span>: <span class="string">"2"</span>, <span class="string">"name"</span>: <span class="string">"Nicole"</span> &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"comments"</span>: &#123;</div><div class="line">      <span class="string">"324"</span>: &#123; <span class="attr">id</span>: <span class="string">"324"</span>, <span class="string">"commenter"</span>: <span class="string">"2"</span> &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Many APIs, public or not, return JSON data that has deeply nested objects. Using data in this kind of structure is often <a href="https://groups.google.com/forum/#!topic/reactjs/jbh50-GJxpg" target="_blank" rel="external">very difficult</a> for JavaScript applications, especially those using <a href="http://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> or <a href="http://redux.js.org/" target="_blank" rel="external">Redux</a>.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Normalizr is a small, but powerful utility for taking JSON with a schema definition and returning nested entities with their IDs, gathered in dictionaries.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>The following nested object:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">'Some Article'</span>,</div><div class="line">  <span class="attr">author</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">'Dan'</span></div><div class="line">  &#125;</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">title</span>: <span class="string">'Other Article'</span>,</div><div class="line">  <span class="attr">author</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">name</span>: <span class="string">'Dan'</span></div><div class="line">  &#125;</div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>Can be normalized to:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">result</span>: [<span class="number">1</span>, <span class="number">2</span>],</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">articles</span>: &#123;</div><div class="line">      <span class="number">1</span>: &#123;</div><div class="line">        <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'Some Article'</span>,</div><div class="line">        <span class="attr">author</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="number">2</span>: &#123;</div><div class="line">        <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'Other Article'</span>,</div><div class="line">        <span class="attr">author</span>: <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">users</span>: &#123;</div><div class="line">      <span class="number">1</span>: &#123;</div><div class="line">        <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'Dan'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul>
<li><a href="#normalizedata-schema">normalize</a></li>
<li><a href="#denormalizeinput-schema-entities">denormalize</a></li>
<li><a href="#schema">schema</a><ul>
<li><a href="#arraydefinition-schemaattribute">Array</a></li>
<li><a href="#entitykey-definition---options--">Entity</a></li>
<li><a href="#objectdefinition">Object</a></li>
<li><a href="#uniondefinition-schemaattribute">Union</a></li>
<li><a href="#valuesdefinition-schemaattribute">Values</a></li>
</ul>
</li>
</ul>
<h2 id="normalize-data-schema"><a href="#normalize-data-schema" class="headerlink" title="normalize(data, schema)"></a><code>normalize(data, schema)</code></h2><p>Normalizes input data per the schema definition provided.</p>
<ul>
<li><code>data</code>: <strong>required</strong> Input JSON (or plain JS object) data that needs normalization.</li>
<li><code>schema</code>: <strong>required</strong> A schema definition</li>
</ul>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; normalize, schema &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> myData = &#123; <span class="attr">users</span>: [ &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span> &#125; ] &#125;;</div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> mySchema = &#123; <span class="attr">users</span>: [ user ] &#125;</div><div class="line"><span class="keyword">const</span> normalizedData = normalize(myData, mySchema);</div></pre></td></tr></table></figure>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">result</span>: &#123; <span class="attr">users</span>: [ <span class="number">1</span>, <span class="number">2</span> ] &#125;,</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">users</span>: &#123;</div><div class="line">      <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</div><div class="line">      <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="denormalize-input-schema-entities"><a href="#denormalize-input-schema-entities" class="headerlink" title="denormalize(input, schema, entities)"></a><code>denormalize(input, schema, entities)</code></h2><p>Denormalizes an input based on schema and provided entities from a plain object or Immutable data. The reverse of <code>normalize</code>.</p>
<p><em>Special Note:</em> Be careful with denormalization. Prematurely reverting your data to large, nested objects could cause performance impacts in React (and other) applications.</p>
<p>If your schema and data have recursive references, only the first instance of an entity will be given. Subsequent references will be returned as the <code>id</code> provided.</p>
<ul>
<li><code>input</code>: <strong>required</strong> The normalized result that should be <em>de-normalized</em>. Usually the same value that was given in the <code>result</code> key of the output of <code>normalize</code>.</li>
<li><code>schema</code>: <strong>required</strong> A schema definition that was used to get the value for <code>input</code>.</li>
<li><code>entities</code>: <strong>required</strong> An object, keyed by entity schema names that may appear in the denormalized output. Also accepts an object with Immutable data.</li>
</ul>
<h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; denormalize, schema &#125; <span class="keyword">from</span> <span class="string">'normalizr'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> mySchema = &#123; <span class="attr">users</span>: [ user ] &#125;</div><div class="line"><span class="keyword">const</span> entities = &#123; <span class="attr">users</span>: &#123; <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125; &#125; &#125;;</div><div class="line"><span class="keyword">const</span> denormalizedData = denormalize(&#123; <span class="attr">users</span>: [ <span class="number">1</span>, <span class="number">2</span> ] &#125;, mySchema, entities);</div></pre></td></tr></table></figure>
<h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">  <span class="attr">users</span>: [</div><div class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</div><div class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="schema"><a href="#schema" class="headerlink" title="schema"></a><code>schema</code></h2><h3 id="Array-definition-schemaAttribute"><a href="#Array-definition-schemaAttribute" class="headerlink" title="Array(definition, schemaAttribute)"></a><code>Array(definition, schemaAttribute)</code></h3><p>Creates a schema to normalize an array of entities. If the input value is an <code>Object</code> instead of an <code>Array</code>, the normalized result will be an <code>Array</code> of the <code>Object</code>‘s values. </p>
<p><em>Note: The same behavior can be defined with shorthand syntax: <code>[ mySchema ]</code></em></p>
<ul>
<li><code>definition</code>: <strong>required</strong> A singular schema that this array contains <em>or</em> a mapping of schema to attribute values.</li>
<li><code>schemaAttribute</code>: <em>optional</em> (required if <code>definition</code> is not a singular schema) The attribute on each entity found that defines what schema, per the definition mapping, to use when normalizing.<br>Can be a string or a function. If given a function, accepts the following arguments:  <ul>
<li><code>value</code>: The input value of the entity.</li>
<li><code>parent</code>: The parent object of the input array.</li>
<li><code>key</code>: The key at which the input array appears on the parent object.</li>
</ul>
</li>
</ul>
<h4 id="Instance-Methods"><a href="#Instance-Methods" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul>
<li><code>define(definition)</code>: When used, the <code>definition</code> passed in will be merged with the original definition passed to the <code>Array</code> constructor. This method tends to be useful for creating circular references in schema.</li>
</ul>
<h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><p>To describe a simple array of a singular entity type:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [ &#123; <span class="attr">id</span>: <span class="string">'123'</span>, <span class="attr">name</span>: <span class="string">'Jim'</span> &#125;, &#123; <span class="attr">id</span>: <span class="string">'456'</span>, <span class="attr">name</span>: <span class="string">'Jane'</span> &#125; ];</div><div class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> userListSchema = <span class="keyword">new</span> schema.Array(userSchema);</div><div class="line"><span class="comment">// or use shorthand syntax:</span></div><div class="line"><span class="keyword">const</span> userListSchema = [ userSchema ];</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, userListSchema);</div></pre></td></tr></table></figure>
<h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">users</span>: &#123;</div><div class="line">      <span class="string">'123'</span>: &#123; <span class="attr">id</span>: <span class="string">'123'</span>, <span class="attr">name</span>: <span class="string">'Jim'</span> &#125;,</div><div class="line">      <span class="string">'456'</span>: &#123; <span class="attr">id</span>: <span class="string">'456'</span>, <span class="attr">name</span>: <span class="string">'Jane'</span> &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: [ <span class="string">'123'</span>, <span class="string">'456'</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If your input data is an array of more than one type of entity, it is necessary to define a schema mapping. </p>
<p><em>Note: If your data returns an object that you did not provide a mapping for, the original object will be returned in the result and an entity will not be created.</em></p>
<p>For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = [ &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'admin'</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'user'</span> &#125; ];</div><div class="line"></div><div class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> adminSchema = <span class="keyword">new</span> schema.Entity(<span class="string">'admins'</span>);</div><div class="line"><span class="keyword">const</span> myArray = <span class="keyword">new</span> schema.Array(&#123;</div><div class="line">  <span class="attr">admins</span>: adminSchema,</div><div class="line">  <span class="attr">users</span>: userSchema</div><div class="line">&#125;, (input, parent, key) =&gt; <span class="string">`<span class="subst">$&#123;input.type&#125;</span>s`</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, myArray);</div></pre></td></tr></table></figure>
<h4 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">admins</span>: &#123; <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'admin'</span> &#125; &#125;,</div><div class="line">    <span class="attr">users</span>: &#123; <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'user'</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: [</div><div class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">schema</span>: <span class="string">'admins'</span> &#125;,</div><div class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">schema</span>: <span class="string">'users'</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Entity-key-definition-options"><a href="#Entity-key-definition-options" class="headerlink" title="Entity(key, definition = {}, options = {})"></a><code>Entity(key, definition = {}, options = {})</code></h3><ul>
<li><code>key</code>: <strong>required</strong> The key name under which all entities of this type will be listed in the normalized response. Must be a string name.</li>
<li><code>definition</code>: A definition of the nested entities found within this entity. Defaults to empty object.<br>You <em>do not</em> need to define any keys in your entity other than those that hold nested entities. All other values will be copied to the normalized entity’s output.</li>
<li><code>options</code>:<ul>
<li><code>idAttribute</code>: The attribute where unique IDs for each of this entity type can be found.<br>Accepts either a string key or a function. Defaults to <code>id</code>.<br>As a function, accepts the following arguments, in order: <ul>
<li><code>value</code>: The input value of the entity.</li>
<li><code>parent</code>: The parent object of the input array.</li>
<li><code>key</code>: The key at which the input array appears on the parent object.</li>
</ul>
</li>
<li><code>mergeStrategy(entityA, entityB)</code>: Strategy to use when merging two entities with the same <code>id</code> value. Defaults to merge the more recently found entity onto the previous.</li>
<li><code>processStrategy(value, parent, key)</code>: Strategy to use when pre-processing the entity. Use this method to add extra data, defaults, and/or completely change the entity before normalization is complete. Defaults to returning a shallow copy of the input entity.<br><em>Note: It is recommended to always return a copy of your input and not modify the original.</em><br>The function accepts the following arguments, in order: <ul>
<li><code>value</code>: The input value of the entity.</li>
<li><code>parent</code>: The parent object of the input array.</li>
<li><code>key</code>: The key at which the input array appears on the parent object.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Instance-Methods-1"><a href="#Instance-Methods-1" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul>
<li><code>define(definition)</code>: When used, the <code>definition</code> passed in will be merged with the original definition passed to the <code>Entity</code> constructor. This method tends to be useful for creating circular references in schema.</li>
<li><code>key</code>: Returns the key provided to the constructor.</li>
<li><code>idAttribute</code>: Returns the idAttribute provided to the constructor in options.</li>
</ul>
<h4 id="Usage-3"><a href="#Usage-3" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = &#123; <span class="attr">id_str</span>: <span class="string">'123'</span>, <span class="attr">url</span>: <span class="string">'https://twitter.com'</span>, <span class="attr">user</span>: &#123; <span class="attr">id_str</span>: <span class="string">'456'</span>, <span class="attr">name</span>: <span class="string">'Jimmy'</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>, &#123;&#125;, &#123; <span class="attr">idAttribute</span>: <span class="string">'id_str'</span> &#125;);</div><div class="line"><span class="keyword">const</span> tweet = <span class="keyword">new</span> schema.Entity(<span class="string">'tweets'</span>, &#123; <span class="attr">user</span>: user &#125;, &#123; </div><div class="line">    <span class="attr">idAttribute</span>: <span class="string">'id_str'</span>,</div><div class="line">    <span class="comment">// Apply everything from entityB over entityA, except for "favorites"</span></div><div class="line">    mergeStrategy: <span class="function">(<span class="params">entityA, entityB</span>) =&gt;</span> (&#123;</div><div class="line">      ...entityA,</div><div class="line">      ...entityB,</div><div class="line">      <span class="attr">favorites</span>: entityA.favorites</div><div class="line">    &#125;),</div><div class="line">    <span class="comment">// Remove the URL field from the entity</span></div><div class="line">    processStrategy: <span class="function">(<span class="params">entity</span>) =&gt;</span> omit(entity, <span class="string">'url'</span>)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, tweet);</div></pre></td></tr></table></figure>
<h4 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">tweets</span>: &#123; <span class="string">'123'</span>: &#123; <span class="attr">id_str</span>: <span class="string">'123'</span>, <span class="attr">user</span>: <span class="string">'456'</span> &#125; &#125;,</div><div class="line">    <span class="attr">users</span>: &#123; <span class="string">'456'</span>: &#123; <span class="attr">id_str</span>: <span class="string">'456'</span>, <span class="attr">name</span>: <span class="string">'Jimmy'</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: <span class="string">'123'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Object-definition"><a href="#Object-definition" class="headerlink" title="Object(definition)"></a><code>Object(definition)</code></h3><p>Define a plain object mapping that has values needing to be normalized into Entities. <em>Note: The same behavior can be defined with shorthand syntax: <code>{ ... }</code></em></p>
<ul>
<li><code>definition</code>: <strong>required</strong> A definition of the nested entities found within this object. Defaults to empty object.<br>You <em>do not</em> need to define any keys in your object other than those that hold other entities. All other values will be copied to the normalized output.</li>
</ul>
<h4 id="Instance-Methods-2"><a href="#Instance-Methods-2" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul>
<li><code>define(definition)</code>: When used, the <code>definition</code> passed in will be merged with the original definition passed to the <code>Object</code> constructor. This method tends to be useful for creating circular references in schema.</li>
</ul>
<h4 id="Usage-4"><a href="#Usage-4" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Example data response</span></div><div class="line"><span class="keyword">const</span> data = &#123; <span class="attr">users</span>: [ &#123; <span class="attr">id</span>: <span class="string">'123'</span>, <span class="attr">name</span>: <span class="string">'Beth'</span> &#125; ] &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> responseSchema = <span class="keyword">new</span> schema.Object(&#123; <span class="attr">users</span>: <span class="keyword">new</span> schema.Array(user) &#125;);</div><div class="line"><span class="comment">// or shorthand</span></div><div class="line"><span class="keyword">const</span> responseSchema = &#123; <span class="attr">users</span>: <span class="keyword">new</span> schema.Array(user) &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, responseSchema);</div></pre></td></tr></table></figure>
<h4 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">users</span>: &#123; <span class="string">'123'</span>: &#123; <span class="attr">id_str</span>: <span class="string">'123'</span>, <span class="attr">name</span>: <span class="string">'Beth'</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: &#123; <span class="attr">users</span>: [ <span class="string">'123'</span> ] &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Union-definition-schemaAttribute"><a href="#Union-definition-schemaAttribute" class="headerlink" title="Union(definition, schemaAttribute)"></a><code>Union(definition, schemaAttribute)</code></h3><p>Describe a schema which is a union of multiple schemas. This is useful if you need the polymorphic behavior provided by <code>schema.Array</code> or <code>schema.Values</code> but for non-collection fields.</p>
<ul>
<li><code>definition</code>: <strong>required</strong> An object mapping the definition of the nested entities found within the input array</li>
<li><code>schemaAttribute</code>: <strong>required</strong> The attribute on each entity found that defines what schema, per the definition mapping, to use when normalizing.<br>Can be a string or a function. If given a function, accepts the following arguments:  <ul>
<li><code>value</code>: The input value of the entity.</li>
<li><code>parent</code>: The parent object of the input array.</li>
<li><code>key</code>: The key at which the input array appears on the parent object.</li>
</ul>
</li>
</ul>
<h4 id="Instance-Methods-3"><a href="#Instance-Methods-3" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul>
<li><code>define(definition)</code>: When used, the <code>definition</code> passed in will be merged with the original definition passed to the <code>Union</code> constructor. This method tends to be useful for creating circular references in schema.</li>
</ul>
<h4 id="Usage-5"><a href="#Usage-5" class="headerlink" title="Usage"></a>Usage</h4><p><em>Note: If your data returns an object that you did not provide a mapping for, the original object will be returned in the result and an entity will not be created.</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = &#123; <span class="attr">owner</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'user'</span>, <span class="attr">name</span>: <span class="string">'Anne'</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> group = <span class="keyword">new</span> schema.Entity(<span class="string">'groups'</span>);</div><div class="line"><span class="keyword">const</span> unionSchema = <span class="keyword">new</span> schema.Union(&#123;</div><div class="line">  <span class="attr">user</span>: user,</div><div class="line">  <span class="attr">group</span>: group</div><div class="line">&#125;, <span class="string">'type'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, &#123; <span class="attr">owner</span>: unionSchema &#125;);</div></pre></td></tr></table></figure>
<h4 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">users</span>: &#123; <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'user'</span>, <span class="attr">name</span>: <span class="string">'Anne'</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: &#123; <span class="attr">owner</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">schema</span>: <span class="string">'user'</span> &#125; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Values-definition-schemaAttribute"><a href="#Values-definition-schemaAttribute" class="headerlink" title="Values(definition, schemaAttribute)"></a><code>Values(definition, schemaAttribute)</code></h3><p>Describes a map whose values follow the given schema.</p>
<ul>
<li><code>definition</code>: <strong>required</strong> A singular schema that this array contains <em>or</em> a mapping of schema to attribute values.</li>
<li><code>schemaAttribute</code>: <em>optional</em> (required if <code>definition</code> is not a singular schema) The attribute on each entity found that defines what schema, per the definition mapping, to use when normalizing.<br>Can be a string or a function. If given a function, accepts the following arguments:  <ul>
<li><code>value</code>: The input value of the entity.</li>
<li><code>parent</code>: The parent object of the input array.</li>
<li><code>key</code>: The key at which the input array appears on the parent object.</li>
</ul>
</li>
</ul>
<h4 id="Instance-Methods-4"><a href="#Instance-Methods-4" class="headerlink" title="Instance Methods"></a>Instance Methods</h4><ul>
<li><code>define(definition)</code>: When used, the <code>definition</code> passed in will be merged with the original definition passed to the <code>Values</code> constructor. This method tends to be useful for creating circular references in schema.</li>
</ul>
<h4 id="Usage-6"><a href="#Usage-6" class="headerlink" title="Usage"></a>Usage</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = &#123; <span class="attr">firstThing</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="attr">secondThing</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125; &#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> schema.Entity(<span class="string">'items'</span>);</div><div class="line"><span class="keyword">const</span> valuesSchema = <span class="keyword">new</span> schema.Values(item);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, valuesSchema);</div></pre></td></tr></table></figure>
<h4 id="Output-7"><a href="#Output-7" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">items</span>: &#123; <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: &#123; <span class="attr">firstThing</span>: <span class="number">1</span>, <span class="attr">secondThing</span>: <span class="number">2</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If your input data is an object that has values of more than one type of entity, but their schema is not easily defined by the key, you can use a mapping of schema, much like <code>schema.Union</code> and <code>schema.Array</code>.</p>
<p><em>Note: If your data returns an object that you did not provide a mapping for, the original object will be returned in the result and an entity will not be created.</em></p>
<p>For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> data = &#123;</div><div class="line">  <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'admin'</span> &#125;, </div><div class="line">  <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'user'</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> schema.Entity(<span class="string">'users'</span>);</div><div class="line"><span class="keyword">const</span> adminSchema = <span class="keyword">new</span> schema.Entity(<span class="string">'admins'</span>);</div><div class="line"><span class="keyword">const</span> valuesSchema = <span class="keyword">new</span> schema.Values(&#123;</div><div class="line">  <span class="attr">admins</span>: adminSchema,</div><div class="line">  <span class="attr">users</span>: userSchema</div><div class="line">&#125;, (input, parent, key) =&gt; <span class="string">`<span class="subst">$&#123;input.type&#125;</span>s`</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> normalizedData = normalize(data, valuesSchema);</div></pre></td></tr></table></figure>
<h4 id="Output-8"><a href="#Output-8" class="headerlink" title="Output"></a>Output</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">entities</span>: &#123;</div><div class="line">    <span class="attr">admins</span>: &#123; <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">type</span>: <span class="string">'admin'</span> &#125; &#125;,</div><div class="line">    <span class="attr">users</span>: &#123; <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">'user'</span> &#125; &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">result</span>: &#123;</div><div class="line">    <span class="string">'1'</span>: &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">schema</span>: <span class="string">'admins'</span> &#125;,</div><div class="line">    <span class="string">'2'</span>: &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">schema</span>: <span class="string">'users'</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Normalizr Guide&lt;/p&gt;
&lt;h1 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h1&gt;&lt;p&gt;Consider a
    
    </summary>
    
      <category term="Readme" scheme="https://phpsmarter.github.com/categories/Readme/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>airbnb-javascript-style</title>
    <link href="https://phpsmarter.github.com/2017/04/08/airbnb-javascript-style/"/>
    <id>https://phpsmarter.github.com/2017/04/08/airbnb-javascript-style/</id>
    <published>2017-04-08T01:52:26.000Z</published>
    <updated>2017-04-07T17:53:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Airbnb-JavaScript-Style-Guide"><a href="#Airbnb-JavaScript-Style-Guide" class="headerlink" title="Airbnb JavaScript Style Guide() {"></a>Airbnb JavaScript Style Guide() {</h1><p><em>用更合理的方式写 JavaScript</em></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="table-of-contents">目录</a></h2><ol>
<li><a href="#types">类型</a></li>
<li><a href="#objects">对象</a></li>
<li><a href="#arrays">数组</a></li>
<li><a href="#strings">字符串</a></li>
<li><a href="#functions">函数</a></li>
<li><a href="#properties">属性</a></li>
<li><a href="#variables">变量</a></li>
<li><a href="#hoisting">提升</a></li>
<li><a href="#comparison-operators--equality">比较运算符 &amp; 等号</a></li>
<li><a href="#blocks">块</a></li>
<li><a href="#comments">注释</a></li>
<li><a href="#whitespace">空白</a></li>
<li><a href="#commas">逗号</a></li>
<li><a href="#semicolons">分号</a></li>
<li><a href="#type-casting--coercion">类型转化</a></li>
<li><a href="#naming-conventions">命名规则</a></li>
<li><a href="#accessors">存取器</a></li>
<li><a href="#constructors">构造函数</a></li>
<li><a href="#events">事件</a></li>
<li><a href="#modules">模块</a></li>
<li><a href="#jquery">jQuery</a></li>
<li><a href="#ecmascript-5-compatibility">ECMAScript 5 兼容性</a></li>
<li><a href="#testing">测试</a></li>
<li><a href="#performance">性能</a></li>
<li><a href="#resources">资源</a></li>
<li><a href="#in-the-wild">谁在使用</a></li>
<li><a href="#translation">翻译</a></li>
<li><a href="#the-javascript-style-guide-guide">JavaScript 风格指南说明</a></li>
<li><a href="#chat-with-us-about-javascript">与我们讨论 JavaScript</a></li>
<li><a href="#contributors">贡献者</a></li>
<li><a href="#license">许可</a></li>
</ol>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a name="types">类型</a></h2><ul>
<li><p><strong>原始值</strong>: 存取直接作用于它自身。</p>
<ul>
<li><code>string</code></li>
<li><code>number</code></li>
<li><code>boolean</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line"></div><div class="line">bar = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>复杂类型</strong>: 存取时作用于它自身值的引用。</p>
<ul>
<li><code>object</code></li>
<li><code>array</code></li>
<li><code>function</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line"></div><div class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a name="objects">对象</a></h2><ul>
<li><p>使用直接量创建对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用<a href="http://es5.github.io/#x7.6.1" target="_blank" rel="external">保留字</a>作为键名，它们在 IE8 下不工作。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="external">更多信息</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">private</span>: <span class="literal">true</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">defaults</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>使用同义词替换需要使用的保留字。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">class</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">klass</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superman = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'alien'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a name="arrays">数组</a></h2><ul>
<li><p>使用直接量创建数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = [];</div></pre></td></tr></table></figure>
</li>
<li><p>向数组增加元素时使用 Array#push 来替代直接赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someStack = [];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">someStack.push(<span class="string">'abracadabra'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>当你需要拷贝数组时，使用 Array#slice。<a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="external">jsPerf</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = items.length;</div><div class="line"><span class="keyword">var</span> itemsCopy = [];</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">  itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">itemsCopy = items.slice();</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Array#slice 将类数组对象转换成数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a name="strings">字符串</a></h2><ul>
<li><p>使用单引号 <code>&#39;&#39;</code> 包裹字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</div></pre></td></tr></table></figure>
</li>
<li><p>超过 100 个字符的字符串应该使用连接符写成多行。</p>
</li>
<li><p>注：若过度使用，通过连接符连接的长字符串可能会影响性能。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="external">讨论</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></div><div class="line">of Batman. When you stop to think about how Batman had anything to do \</div><div class="line">with this, you would get nowhere \</div><div class="line">fast.';</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</div><div class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</div><div class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>程序化生成的字符串使用 Array#join 连接而不是使用连接符。尤其是 IE 下：<a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">jsPerf</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> items;</div><div class="line"><span class="keyword">var</span> messages;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div><div class="line"></div><div class="line">messages = [&#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'success'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one worked.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'success'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one worked as well.'</span></div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">state</span>: <span class="string">'error'</span>,</div><div class="line">  <span class="attr">message</span>: <span class="string">'This one did not work.'</span></div><div class="line">&#125;];</div><div class="line"></div><div class="line">length = messages.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</div><div class="line">  items = [];</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">    <span class="comment">// use direct assignment in this case because we're micro-optimizing.</span></div><div class="line">    items[i] = <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a name="functions">函数</a></h2><ul>
<li><p>函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匿名函数表达式</span></div><div class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 命名函数表达式</span></div><div class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 立即调用的函数表达式（IIFE）</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
</li>
<li><p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p>
</li>
<li><p><strong>注：</strong> ECMA-262 把 <code>块</code> 定义为一组语句。函数声明不是语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="external">阅读对 ECMA-262 这个问题的说明</a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> test;</div><div class="line"><span class="keyword">if</span> (currentUser) &#123;</div><div class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>永远不要把参数命名为 <code>arguments</code>。这将取代函数作用域内的 <code>arguments</code> 对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a name="properties">属性</a></h2><ul>
<li><p>使用 <code>.</code> 来访问对象的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">'jedi'</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> isJedi = luke.jedi;</div></pre></td></tr></table></figure>
</li>
<li><p>当通过变量访问属性时使用中括号 <code>[]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luke = &#123;</div><div class="line">  <span class="attr">jedi</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">28</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> luke[prop];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a name="variables">变量</a></h2><ul>
<li><p>总是使用 <code>var</code> 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">superPower = <span class="keyword">new</span> SuperPower();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>var</code> 声明每一个变量。<br>这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>,</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// （跟上面的代码比较一下，看看哪里错了）</span></div><div class="line"><span class="keyword">var</span> items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line">    dragonball = <span class="string">'z'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i, len, dragonball,</div><div class="line">    items = getItems(),</div><div class="line">    goSportsTeam = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> i;</div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> len;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> items = getItems();</div><div class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> dragonball;</div><div class="line"><span class="keyword">var</span> length;</div><div class="line"><span class="keyword">var</span> i;</div></pre></td></tr></table></figure>
</li>
<li><p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  test();</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</div><div class="line"></div><div class="line">  <span class="comment">//..other stuff..</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad - 不必要的函数调用</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = getName();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.setFirstName(name);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  name = getName();</div><div class="line">  <span class="keyword">this</span>.setFirstName(name);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a><a name="hoisting">提升</a></h2><ul>
<li><p>变量声明会提升至作用域顶部，但赋值不会。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span></div><div class="line"><span class="comment">// 注：变量赋值为 `true` 不会提升。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> declaredButNotAssigned;</div><div class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></div><div class="line">  declaredButNotAssigned = <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当函数名跟变量名一样时，表现也是如此。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数声明提升它们的名字和函数体。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  superPower(); <span class="comment">// =&gt; Flying</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>了解更多信息在 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="external">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="external">Ben Cherry</a>.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="比较运算符-amp-等号"><a href="#比较运算符-amp-等号" class="headerlink" title="比较运算符 &amp; 等号"></a><a name="comparison-operators--equality">比较运算符 &amp; 等号</a></h2><ul>
<li>优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</li>
<li><p>条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p>
<ul>
<li><strong>对象</strong> 被计算为 <strong>true</strong></li>
<li><strong>Undefined</strong> 被计算为 <strong>false</strong></li>
<li><strong>Null</strong> 被计算为 <strong>false</strong></li>
<li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li>
<li><strong>数字</strong> 如果是 <strong>+0、-0 或 NaN</strong> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li>
<li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</div><div class="line">  <span class="comment">// true</span></div><div class="line">  <span class="comment">// 一个数组就是一个对象，对象被计算为 true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用快捷方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>了解更多信息在 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="external">Truth Equality and JavaScript</a> by Angus Croll.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="块"><a href="#块" class="headerlink" title="块"></a><a name="blocks">块</a></h2><ul>
<li><p>使用大括号包裹所有的多行代码块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test)</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (test) &#123;</div><div class="line">  thing1();</div><div class="line">  thing2();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  thing3();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a name="comments">注释</a></h2><ul>
<li><p>使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="comment">// make() returns a new element</span></div><div class="line"><span class="comment">// based on the passed in tag name</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// @param &#123;String&#125; tag</span></div><div class="line"><span class="comment">// @return &#123;Element&#125; element</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * make() returns a new element</div><div class="line"> * based on the passed in tag name</div><div class="line"> *</div><div class="line"> * @param &#123;String&#125; tag</div><div class="line"> * @return &#123;Element&#125; element</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">// is current tab</span></div><div class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// set the default type to 'no type'</span></div><div class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> type;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p>
</li>
<li><p>使用 <code>// FIXME:</code> 标注问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></div><div class="line">  total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>// TODO:</code> 标注问题的解决方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></div><div class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a><a name="whitespace">空白</a></h2><ul>
<li><p>使用 2 个空格作为缩进。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙∙∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">∙∙<span class="keyword">var</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在大括号前放一个空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dog.set(<span class="string">'attr'</span>,&#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span>,</div><div class="line">  <span class="attr">breed</span>: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dog.set(<span class="string">'attr'</span>, &#123;</div><div class="line">  <span class="attr">age</span>: <span class="string">'1 year'</span>,</div><div class="line">  <span class="attr">breed</span>: <span class="string">'Bernese Mountain Dog'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(isJedi) &#123;</div><div class="line">  fight ();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (isJedi) &#123;</div><div class="line">  fight();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用空格把运算符隔开。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>在文件末尾插入一个空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div><div class="line">↵</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;)(<span class="keyword">this</span>);↵</div></pre></td></tr></table></figure>
</li>
<li><p>在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'#items'</span>).</div><div class="line">  find(<span class="string">'.selected'</span>).</div><div class="line">    highlight().</div><div class="line">    end().</div><div class="line">  find(<span class="string">'.open'</span>).</div><div class="line">    updateCount();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">  .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end()</div><div class="line">  .find(<span class="string">'.open'</span>)</div><div class="line">    .updateCount();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</div><div class="line">    .data(data)</div><div class="line">  .enter().append(<span class="string">'svg:svg'</span>)</div><div class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</div><div class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</div><div class="line">  .append(<span class="string">'svg:g'</span>)</div><div class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</div><div class="line">    .call(tron.led);</div></pre></td></tr></table></figure>
</li>
<li><p>在块末和新语句前插入空行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (foo) &#123;</div><div class="line">  <span class="keyword">return</span> bar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> baz;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">return</span> obj;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><a name="commas">逗号</a></h2><ul>
<li><p>行首逗号: <strong>不需要</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">    once</div><div class="line">  , upon</div><div class="line">  , aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> story = [</div><div class="line">  once,</div><div class="line">  upon,</div><div class="line">  aTime</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Bob'</span></div><div class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></div><div class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></div><div class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Bob'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Parr'</span>,</div><div class="line">  <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span>,</div><div class="line">  <span class="attr">superPower</span>: <span class="string">'strength'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>额外的行末逗号：<strong>不需要</strong>。这样做会在 IE6/7 和 IE9 怪异模式下引起问题。同样，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经澄清了 (<a href="http://es5.github.io/#D" target="_blank" rel="external">source</a>)：</p>
<blockquote>
<p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Kevin'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Flynn'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span>,</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hero = &#123;</div><div class="line">  <span class="attr">firstName</span>: <span class="string">'Kevin'</span>,</div><div class="line">  <span class="attr">lastName</span>: <span class="string">'Flynn'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> heroes = [</div><div class="line">  <span class="string">'Batman'</span>,</div><div class="line">  <span class="string">'Superman'</span></div><div class="line">];</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a><a name="semicolons">分号</a></h2><ul>
<li><p><strong>使用分号。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)()</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数</span></div><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</div><div class="line">  <span class="keyword">return</span> name;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p><a href="http://stackoverflow.com/a/7365214/1712802" target="_blank" rel="external">了解更多</a>.</p>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a name="type-casting--coercion">类型转换</a></h2><ul>
<li>在语句开始时执行类型转换。</li>
<li><p>字符串：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>parseInt</code> 转换数字时总是带上类型转换的基数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = +inputValue;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>如果因为某些原因 <code>parseInt</code> 成为你所做的事的瓶颈而需要使用位操作解决<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="external">性能问题</a>时，留个注释说清楚原因和你的目的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * parseInt was the reason my code was slow.</div><div class="line"> * Bitshifting the String to coerce it to a</div><div class="line"> * Number made it a lot faster.</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>注：</strong> 小心使用位操作运算符。数字会被当成 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="external">64 位值</a>，但是位操作运算符总是返回 32 位的整数（<a href="http://es5.github.io/#x11.7" target="_blank" rel="external">source</a>）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。<a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="external">讨论</a>。最大的 32 位整数是 2,147,483,647：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></div><div class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></div><div class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></div></pre></td></tr></table></figure>
</li>
<li><p>布尔:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hasAge = !!age;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><a name="naming-conventions">命名规则</a></h2><ul>
<li><p>避免单字母命名。命名应具备描述性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ..stuff..</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用驼峰式命名对象、函数和实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用帕斯卡式命名构造函数或类。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'nope'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = options.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'yup'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>不要使用下划线前/后缀。</p>
<blockquote>
<p>为什么？JavaScript 并没有私有属性或私有方法的概念。虽然使用下划线是表示「私有」的一种共识，但实际上这些属性是完全公开的，它本身就是你公共接口的一部分。这种习惯或许会导致开发者错误的认为改动它不会造成破坏或者不需要去测试。长话短说：如果你想要某处为「私有」，它必须不能是显式提出的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</div><div class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>不要保存 <code>this</code> 的引用。使用 Function#bind。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(self);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(that);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(_this);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;.bind(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给函数命名。这在做堆栈轨迹时很有帮助。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(msg);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>注：</strong> IE8 及以下版本对命名函数表达式的处理有些怪异。了解更多信息到 <a href="http://kangax.github.io/nfe/" target="_blank" rel="external">http://kangax.github.io/nfe/</a>。</p>
</li>
<li><p>如果你的文件导出一个类，你的文件名应该与类名完全相同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// file contents</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = CheckBox;</div><div class="line"></div><div class="line"><span class="comment">// in some other file</span></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a><a name="accessors">存取器</a></h2><ul>
<li>属性的存取函数不是必须的。</li>
<li><p>如果你需要存取函数时使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.getAge();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">dragon.age(<span class="number">25</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">dragon.setAge(<span class="number">25</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>如果属性是布尔值，使用 <code>isVal()</code> 或 <code>hasVal()</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建 get() 和 set() 函数是可以的，但要保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</div><div class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>[key] = val;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><a name="constructors">构造函数</a></h2><ul>
<li><p>给对象原型分配方法，而不是使用一个新对象覆盖原型。覆盖原型将导致继承出现问题：重设原型将覆盖原有原型！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype = &#123;</div><div class="line">  <span class="attr">fight</span>: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">block</span>: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>方法可以返回 <code>this</code> 来实现方法链式使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line">luke.jump(); <span class="comment">// =&gt; true</span></div><div class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.height = height;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</div><div class="line"></div><div class="line">luke.jump()</div><div class="line">  .setHeight(<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>写一个自定义的 <code>toString()</code> 方法是可以的，但是确保它可以正常工作且不会产生副作用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  options || (options = &#123;&#125;);</div><div class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a name="events">事件</a></h2><ul>
<li><p>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, listingId</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>更好的写法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with data.listingId</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a name="modules">模块</a></h2><ul>
<li>模块应该以 <code>!</code> 开始。这样确保了当一个不好的模块忘记包含最后的分号时，在合并代码到生产环境后不会产生错误。<a href="https://github.com/airbnb/javascript/issues/44#issuecomment-13063933" target="_blank" rel="external">详细说明</a></li>
<li>文件应该以驼峰式命名，并放在同名的文件夹里，且与导出的名字一致。</li>
<li>增加一个名为 <code>noConflict()</code> 的方法来设置导出的模块为前一个版本并返回它。</li>
<li><p>永远在模块顶部声明 <code>&#39;use strict&#39;;</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// fancyInput/fancyInput.js</span></div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    global.FancyInput = previousFancyInput;</div><div class="line">    <span class="keyword">return</span> FancyInput;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  global.FancyInput = FancyInput;</div><div class="line">&#125;(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><a name="jquery">jQuery</a></h2><ul>
<li><p>使用 <code>$</code> 作为存储 jQuery 对象的变量名前缀。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>缓存 jQuery 查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</div><div class="line">  $sidebar.hide();</div><div class="line"></div><div class="line">  <span class="comment">// ...stuff...</span></div><div class="line"></div><div class="line">  $sidebar.css(&#123;</div><div class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="external">jsPerf</a></p>
</li>
<li><p>对有作用域的 jQuery 对象查询使用 <code>find</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a><a name="ecmascript-5-compatibility">ECMAScript 5 兼容性</a></h2><ul>
<li>参考 <a href="https://twitter.com/kangax/" target="_blank" rel="external">Kangax</a> 的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="external">兼容表</a>.</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a name="testing">测试</a></h2><ul>
<li><p><strong>Yup.</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a><a name="performance">性能</a></h2><ul>
<li><a href="http://kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="external">On Layout &amp; Web Performance</a></li>
<li><a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="external">String vs Array Concat</a></li>
<li><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="external">Try/Catch Cost In a Loop</a></li>
<li><a href="http://jsperf.com/bang-function" target="_blank" rel="external">Bang Function</a></li>
<li><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="external">jQuery Find vs Context, Selector</a></li>
<li><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="external">innerHTML vs textContent for script text</a></li>
<li><a href="http://jsperf.com/ya-string-concat" target="_blank" rel="external">Long String Concatenation</a></li>
<li>Loading…</li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a><a name="resources">资源</a></h2><p><strong>推荐阅读</strong></p>
<ul>
<li><a href="http://es5.github.com/" target="_blank" rel="external">Annotated ECMAScript 5.1</a></li>
</ul>
<p><strong>工具</strong></p>
<ul>
<li>Code Style Linters<ul>
<li><a href="http://www.jshint.com/" target="_blank" rel="external">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc" target="_blank" rel="external">Airbnb Style .jshintrc</a></li>
<li><a href="https://github.com/jscs-dev/node-jscs" target="_blank" rel="external">JSCS</a> - <a href="https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json" target="_blank" rel="external">Airbnb Style Preset</a></li>
</ul>
</li>
</ul>
<p><strong>其它风格指南</strong></p>
<ul>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li><a href="http://docs.jquery.com/JQuery_Core_Style_Guidelines" target="_blank" rel="external">jQuery Core Style Guidelines</a></li>
<li><a href="https://github.com/rwldrn/idiomatic.js/" target="_blank" rel="external">Principles of Writing Consistent, Idiomatic JavaScript</a></li>
<li><a href="https://github.com/feross/standard" target="_blank" rel="external">JavaScript Standard Style</a></li>
</ul>
<p><strong>其它风格</strong></p>
<ul>
<li><a href="https://gist.github.com/4135065" target="_blank" rel="external">Naming this in nested functions</a> - Christian Johansen</li>
<li><a href="https://github.com/airbnb/javascript/issues/52" target="_blank" rel="external">Conditional Callbacks</a> - Ross Allen</li>
<li><a href="http://sideeffect.kr/popularconvention/#javascript" target="_blank" rel="external">Popular JavaScript Coding Conventions on Github</a> - JeongHoon Byun</li>
<li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/" target="_blank" rel="external">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li>
</ul>
<p><strong>进一步阅读</strong></p>
<ul>
<li><a href="http://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="external">Understanding JavaScript Closures</a> - Angus Croll</li>
<li><a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="external">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li>
<li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="external">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li>
<li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">ES6 Features</a> - Luke Hoban</li>
<li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="external">Frontend Guidelines</a> - Benjamin De Cock</li>
</ul>
<p><strong>书籍</strong></p>
<ul>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="external">JavaScript: The Good Parts</a> - Douglas Crockford</li>
<li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752" target="_blank" rel="external">JavaScript Patterns</a> - Stoyan Stefanov</li>
<li><a href="http://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X" target="_blank" rel="external">Pro JavaScript Design Patterns</a>  - Ross Harmes and Dustin Diaz</li>
<li><a href="http://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309" target="_blank" rel="external">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li>
<li><a href="http://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680" target="_blank" rel="external">Maintainable JavaScript</a> - Nicholas C. Zakas</li>
<li><a href="http://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X" target="_blank" rel="external">JavaScript Web Applications</a> - Alex MacCaw</li>
<li><a href="http://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273" target="_blank" rel="external">Pro JavaScript Techniques</a> - John Resig</li>
<li><a href="http://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595" target="_blank" rel="external">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li>
<li><a href="http://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X" target="_blank" rel="external">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li>
<li><a href="http://humanjavascript.com/" target="_blank" rel="external">Human JavaScript</a> - Henrik Joreteg</li>
<li><a href="http://superherojs.com/" target="_blank" rel="external">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li>
<li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="external">JSBooks</a> - Julien Bouquillon</li>
<li><a href="http://manning.com/vinegar/" target="_blank" rel="external">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li>
<li><a href="http://amzn.com/0321812182" target="_blank" rel="external">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li>
<li><a href="http://eloquentjavascript.net" target="_blank" rel="external">Eloquent JavaScript</a> - Marijn Haverbeke</li>
<li><a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You Don’t Know JS</a> - Kyle Simpson</li>
</ul>
<p><strong>博客</strong></p>
<ul>
<li><a href="http://dailyjs.com/" target="_blank" rel="external">DailyJS</a></li>
<li><a href="http://javascriptweekly.com/" target="_blank" rel="external">JavaScript Weekly</a></li>
<li><a href="http://javascriptweblog.wordpress.com/" target="_blank" rel="external">JavaScript, JavaScript…</a></li>
<li><a href="http://weblog.bocoup.com/" target="_blank" rel="external">Bocoup Weblog</a></li>
<li><a href="http://www.adequatelygood.com/" target="_blank" rel="external">Adequately Good</a></li>
<li><a href="http://www.nczonline.net/" target="_blank" rel="external">NCZOnline</a></li>
<li><a href="http://perfectionkills.com/" target="_blank" rel="external">Perfection Kills</a></li>
<li><a href="http://benalman.com/" target="_blank" rel="external">Ben Alman</a></li>
<li><a href="http://dmitry.baranovskiy.com/" target="_blank" rel="external">Dmitry Baranovskiy</a></li>
<li><a href="http://dustindiaz.com/" target="_blank" rel="external">Dustin Diaz</a></li>
<li><a href="http://net.tutsplus.com/?s=javascript" target="_blank" rel="external">nettuts</a></li>
</ul>
<p><strong>播客</strong></p>
<ul>
<li><a href="http://devchat.tv/js-jabber/" target="_blank" rel="external">JavaScript Jabber</a></li>
</ul>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h2 id="谁在使用"><a href="#谁在使用" class="headerlink" title="谁在使用"></a><a name="in-the-wild">谁在使用</a></h2><p>  这是一个使用本风格指南的组织列表。给我们发 pull request 或开一个 issue 让我们将你增加到列表上。</p>
<ul>
<li><strong>Aan Zee</strong>: <a href="https://github.com/AanZee/javascript" target="_blank" rel="external">AanZee/javascript</a></li>
<li><strong>Adult Swim</strong>: <a href="https://github.com/adult-swim/javascript" target="_blank" rel="external">adult-swim/javascript</a></li>
<li><strong>Airbnb</strong>: <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">airbnb/javascript</a></li>
<li><strong>Apartmint</strong>: <a href="https://github.com/apartmint/javascript" target="_blank" rel="external">apartmint/javascript</a></li>
<li><strong>Avalara</strong>: <a href="https://github.com/avalara/javascript" target="_blank" rel="external">avalara/javascript</a></li>
<li><strong>Billabong</strong>: <a href="https://github.com/billabong/javascript" target="_blank" rel="external">billabong/javascript</a></li>
<li><strong>Compass Learning</strong>: <a href="https://github.com/compasslearning/javascript-style-guide" target="_blank" rel="external">compasslearning/javascript-style-guide</a></li>
<li><strong>DailyMotion</strong>: <a href="https://github.com/dailymotion/javascript" target="_blank" rel="external">dailymotion/javascript</a></li>
<li><strong>Digitpaint</strong> <a href="https://github.com/digitpaint/javascript" target="_blank" rel="external">digitpaint/javascript</a></li>
<li><strong>Evernote</strong>: <a href="https://github.com/evernote/javascript-style-guide" target="_blank" rel="external">evernote/javascript-style-guide</a></li>
<li><strong>ExactTarget</strong>: <a href="https://github.com/ExactTarget/javascript" target="_blank" rel="external">ExactTarget/javascript</a></li>
<li><strong>Flexberry</strong>: <a href="https://github.com/Flexberry/javascript-style-guide" target="_blank" rel="external">Flexberry/javascript-style-guide</a></li>
<li><strong>Gawker Media</strong>: <a href="https://github.com/gawkermedia/javascript" target="_blank" rel="external">gawkermedia/javascript</a></li>
<li><strong>General Electric</strong>: <a href="https://github.com/GeneralElectric/javascript" target="_blank" rel="external">GeneralElectric/javascript</a></li>
<li><strong>GoodData</strong>: <a href="https://github.com/gooddata/gdc-js-style" target="_blank" rel="external">gooddata/gdc-js-style</a></li>
<li><strong>Grooveshark</strong>: <a href="https://github.com/grooveshark/javascript" target="_blank" rel="external">grooveshark/javascript</a></li>
<li><strong>How About We</strong>: <a href="https://github.com/howaboutwe/javascript" target="_blank" rel="external">howaboutwe/javascript</a></li>
<li><strong>InfoJobs</strong>: <a href="https://github.com/InfoJobs/JavaScript-Style-Guide" target="_blank" rel="external">InfoJobs/JavaScript-Style-Guide</a></li>
<li><strong>Intent Media</strong>: <a href="https://github.com/intentmedia/javascript" target="_blank" rel="external">intentmedia/javascript</a></li>
<li><strong>Jam3</strong>: <a href="https://github.com/Jam3/Javascript-Code-Conventions" target="_blank" rel="external">Jam3/Javascript-Code-Conventions</a></li>
<li><strong>JSSolutions</strong>: <a href="https://github.com/JSSolutions/javascript" target="_blank" rel="external">JSSolutions/javascript</a></li>
<li><strong>Kinetica Solutions</strong>: <a href="https://github.com/kinetica/javascript" target="_blank" rel="external">kinetica/javascript</a></li>
<li><strong>Mighty Spring</strong>: <a href="https://github.com/mightyspring/javascript" target="_blank" rel="external">mightyspring/javascript</a></li>
<li><strong>MinnPost</strong>: <a href="https://github.com/MinnPost/javascript" target="_blank" rel="external">MinnPost/javascript</a></li>
<li><strong>ModCloth</strong>: <a href="https://github.com/modcloth/javascript" target="_blank" rel="external">modcloth/javascript</a></li>
<li><strong>Money Advice Service</strong>: <a href="https://github.com/moneyadviceservice/javascript" target="_blank" rel="external">moneyadviceservice/javascript</a></li>
<li><strong>Muber</strong>: <a href="https://github.com/muber/javascript" target="_blank" rel="external">muber/javascript</a></li>
<li><strong>National Geographic</strong>: <a href="https://github.com/natgeo/javascript" target="_blank" rel="external">natgeo/javascript</a></li>
<li><strong>National Park Service</strong>: <a href="https://github.com/nationalparkservice/javascript" target="_blank" rel="external">nationalparkservice/javascript</a></li>
<li><strong>Nimbl3</strong>: <a href="https://github.com/nimbl3/javascript" target="_blank" rel="external">nimbl3/javascript</a></li>
<li><strong>Nordic Venture Family</strong>: <a href="https://github.com/CodeDistillery/javascript" target="_blank" rel="external">CodeDistillery/javascript</a></li>
<li><strong>Orion Health</strong>: <a href="https://github.com/orionhealth/javascript" target="_blank" rel="external">orionhealth/javascript</a></li>
<li><strong>Peerby</strong>: <a href="https://github.com/Peerby/javascript" target="_blank" rel="external">Peerby/javascript</a></li>
<li><strong>Razorfish</strong>: <a href="https://github.com/razorfish/javascript-style-guide" target="_blank" rel="external">razorfish/javascript-style-guide</a></li>
<li><strong>reddit</strong>: <a href="https://github.com/reddit/styleguide/tree/master/javascript" target="_blank" rel="external">reddit/styleguide/javascript</a></li>
<li><strong>REI</strong>: <a href="https://github.com/reidev/js-style-guide" target="_blank" rel="external">reidev/js-style-guide</a></li>
<li><strong>Ripple</strong>: <a href="https://github.com/ripple/javascript-style-guide" target="_blank" rel="external">ripple/javascript-style-guide</a></li>
<li><strong>SeekingAlpha</strong>: <a href="https://github.com/seekingalpha/javascript-style-guide" target="_blank" rel="external">seekingalpha/javascript-style-guide</a></li>
<li><strong>Shutterfly</strong>: <a href="https://github.com/shutterfly/javascript" target="_blank" rel="external">shutterfly/javascript</a></li>
<li><strong>StudentSphere</strong>: <a href="https://github.com/studentsphere/javascript" target="_blank" rel="external">studentsphere/javascript</a></li>
<li><strong>Super</strong>: <a href="https://github.com/SuperJobs/javascript" target="_blank" rel="external">SuperJobs/javascript</a></li>
<li><strong>SysGarage</strong>: <a href="https://github.com/sysgarage/javascript-style-guide" target="_blank" rel="external">sysgarage/javascript-style-guide</a></li>
<li><strong>Target</strong>: <a href="https://github.com/target/javascript" target="_blank" rel="external">target/javascript</a></li>
<li><strong>TheLadders</strong>: <a href="https://github.com/TheLadders/javascript" target="_blank" rel="external">TheLadders/javascript</a></li>
<li><strong>T4R Technology</strong>: <a href="https://github.com/T4R-Technology/javascript" target="_blank" rel="external">T4R-Technology/javascript</a></li>
<li><strong>VoxFeed</strong>: <a href="https://github.com/VoxFeed/javascript-style-guide" target="_blank" rel="external">VoxFeed/javascript-style-guide</a></li>
<li><strong>Weggo</strong>: <a href="https://github.com/Weggo/javascript" target="_blank" rel="external">Weggo/javascript</a></li>
<li><strong>Zillow</strong>: <a href="https://github.com/zillow/javascript" target="_blank" rel="external">zillow/javascript</a></li>
<li><strong>ZocDoc</strong>: <a href="https://github.com/ZocDoc/javascript" target="_blank" rel="external">ZocDoc/javascript</a></li>
</ul>
<h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a><a name="translation">翻译</a></h2><p>  这份风格指南也提供了其它语言的版本：</p>
<ul>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png" alt="br"> <strong>Brazilian Portuguese</strong>: <a href="https://github.com/armoucar/javascript-style-guide" target="_blank" rel="external">armoucar/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png" alt="bg"> <strong>Bulgarian</strong>: <a href="https://github.com/borislavvv/javascript" target="_blank" rel="external">borislavvv/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png" alt="ca"> <strong>Catalan</strong>: <a href="https://github.com/fpmweb/javascript-style-guide" target="_blank" rel="external">fpmweb/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png" alt="tw"> <strong>Chinese(Traditional)</strong>: <a href="https://github.com/jigsawye/javascript" target="_blank" rel="external">jigsawye/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png" alt="cn"> <strong>Chinese(Simplified)</strong>: <a href="https://github.com/sivan/javascript" target="_blank" rel="external">sivan/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png" alt="fr"> <strong>French</strong>: <a href="https://github.com/nmussy/javascript-style-guide" target="_blank" rel="external">nmussy/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png" alt="de"> <strong>German</strong>: <a href="https://github.com/timofurrer/javascript-style-guide" target="_blank" rel="external">timofurrer/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png" alt="it"> <strong>Italian</strong>: <a href="https://github.com/sinkswim/javascript-style-guide" target="_blank" rel="external">sinkswim/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png" alt="jp"> <strong>Japanese</strong>: <a href="https://github.com/mitsuruog/javacript-style-guide" target="_blank" rel="external">mitsuruog/javacript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png" alt="kr"> <strong>Korean</strong>: <a href="https://github.com/tipjs/javascript-style-guide" target="_blank" rel="external">tipjs/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png" alt="pl"> <strong>Polish</strong>: <a href="https://github.com/mjurczyk/javascript" target="_blank" rel="external">mjurczyk/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png" alt="ru"> <strong>Russian</strong>: <a href="https://github.com/uprock/javascript" target="_blank" rel="external">uprock/javascript</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png" alt="es"> <strong>Spanish</strong>: <a href="https://github.com/paolocarrasco/javascript-style-guide" target="_blank" rel="external">paolocarrasco/javascript-style-guide</a></li>
<li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png" alt="th"> <strong>Thai</strong>: <a href="https://github.com/lvarayut/javascript-style-guide" target="_blank" rel="external">lvarayut/javascript-style-guide</a></li>
</ul>
<h2 id="JavaScript-风格指南说明"><a href="#JavaScript-风格指南说明" class="headerlink" title="JavaScript 风格指南说明"></a><a name="the-javascript-style-guide-guide">JavaScript 风格指南说明</a></h2><ul>
<li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide" target="_blank" rel="external">Reference</a></li>
</ul>
<h2 id="与我们讨论-JavaScript"><a href="#与我们讨论-JavaScript" class="headerlink" title="与我们讨论 JavaScript"></a><a name="chat-with-us-about-javascript">与我们讨论 JavaScript</a></h2><ul>
<li>Find us on <a href="https://gitter.im/airbnb/javascript" target="_blank" rel="external">gitter</a>.</li>
</ul>
<h2 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a><a name="contributors">贡献者</a></h2><ul>
<li><a href="https://github.com/airbnb/javascript/graphs/contributors" target="_blank" rel="external">View Contributors</a></li>
</ul>
<h2 id="许可"><a href="#许可" class="headerlink" title="许可"></a><a name="license">许可</a></h2><p>(The MIT License)</p>
<p>Copyright (c) 2014 Airbnb</p>
<p>Permission is hereby granted, free of charge, to any person obtaining<br>a copy of this software and associated documentation files (the<br>‘Software’), to deal in the Software without restriction, including<br>without limitation the rights to use, copy, modify, merge, publish,<br>distribute, sublicense, and/or sell copies of the Software, and to<br>permit persons to whom the Software is furnished to do so, subject to<br>the following conditions:</p>
<p>The above copyright notice and this permission notice shall be<br>included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND,<br>EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF<br>MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.<br>IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY<br>CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,<br>TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE<br>SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>
<h1 id=""><a href="#" class="headerlink" title="};"></a>};</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Airbnb-JavaScript-Style-Guide&quot;&gt;&lt;a href=&quot;#Airbnb-JavaScript-Style-Guide&quot; class=&quot;headerlink&quot; title=&quot;Airbnb JavaScript Style Guide() {&quot;
    
    </summary>
    
      <category term="Readme" scheme="https://phpsmarter.github.com/categories/Readme/"/>
    
    
      <category term="javascript" scheme="https://phpsmarter.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React-native-tween-mixin</title>
    <link href="https://phpsmarter.github.com/2017/04/08/React-native-tween-mixin/"/>
    <id>https://phpsmarter.github.com/2017/04/08/React-native-tween-mixin/</id>
    <published>2017-04-07T18:03:58.000Z</published>
    <updated>2017-04-07T10:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Tween-State"><a href="#React-Tween-State" class="headerlink" title="React Tween State"></a><a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a> Tween State</h1><p>For React 0.13+ users: see the subtle differences [here] vs 0.12.</p>
<p>The equivalent of React’s <code>this.setState</code>, but for animated tweening: <code>this.tweenState</code>.</p>
<p><a href="https://rawgit.com/chenglou/react-tween-state/master/examples/index.html" target="_blank" rel="external">Live demo</a> and <a href="https://github.com/chenglou/react-tween-state/tree/master/examples" target="_blank" rel="external">source</a>.</p>
<p>Npm:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install react-tween-state</div></pre></td></tr></table></figure></p>
<p>Bower:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bower install react-tween-state</div></pre></td></tr></table></figure></p>
<p><em>For Bower</em>: the single source file is <code>index-bower.js</code>.</p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>Example usage:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tweenState = <span class="built_in">require</span>(<span class="string">'react-tween-state'</span>);</div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">  <span class="attr">mixins</span>: [tweenState.Mixin],</div><div class="line">  <span class="attr">getInitialState</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">left</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">handleClick</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.tweenState(<span class="string">'left'</span>, &#123;</div><div class="line">      <span class="attr">easing</span>: tweenState.easingTypes.easeInOutQuad,</div><div class="line">      <span class="attr">duration</span>: <span class="number">500</span>,</div><div class="line">      <span class="attr">endValue</span>: <span class="keyword">this</span>.state.left === <span class="number">0</span> ? <span class="number">400</span> : <span class="number">0</span></div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> style = &#123;</div><div class="line">      <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">      <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">      <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">      <span class="attr">backgroundColor</span>: <span class="string">'lightblue'</span>,</div><div class="line">      <span class="attr">left</span>: <span class="keyword">this</span>.getTweeningValue(<span class="string">'left'</span>)</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span> /&gt;</span>;</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="General"><a href="#General" class="headerlink" title="General"></a>General</h3><h4 id="this-tweenState-stateNameString-configurationObject"><a href="#this-tweenState-stateNameString-configurationObject" class="headerlink" title="this.tweenState(stateNameString, configurationObject)"></a><code>this.tweenState(stateNameString, configurationObject)</code></h4><p>This immediately calls <code>setState</code> on your state name under the hood, and also creates a virtual “layer”, in which your state didn’t jump straight to the final value: rather, it is being tweened. <code>this.getTweeningValue(stateNameString)</code> lets you access the tweening value on that layer. Formal API below.</p>
<p><code>stateNameString</code> is the name of the state you want to tween.</p>
<p><code>configurationObject</code> is an object of the following format:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">easing</span>: easingFunction,</div><div class="line">  <span class="attr">duration</span>: timeInMilliseconds,</div><div class="line">  <span class="attr">delay</span>: timeInMilliseconds,</div><div class="line">  <span class="attr">beginValue</span>: aNumber,</div><div class="line">  <span class="attr">endValue</span>: aNumber,</div><div class="line">  <span class="attr">onEnd</span>: endCallback,</div><div class="line">  <span class="attr">stackBehavior</span>: behaviorOption</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>easing</code> (default: <code>tweenState.easingTypes.easeInOutQuad</code>): the interpolation function used. react-tween-state provides <a href="https://github.com/chenglou/react-tween-state/blob/master/easingTypes.js" target="_blank" rel="external">frequently used interpolation</a> (all exposed inside <code>tweenState.easingTypes</code>). In case you ever create your own, the function signature is: <code>(currentTime: Number, beginValue: Number, endValue: Number, totalDuration: Number): Number</code>.</li>
<li><code>duration</code> (default: <code>300</code>).</li>
<li><code>delay</code> (default: <code>0</code>). *</li>
<li><code>beginValue</code> (default: the current value the state being tweened, <code>this.state[stateNameString]</code>).</li>
<li><code>endValue</code>.</li>
<li><code>onEnd</code>: the callback to trigger when the animation’s done. **</li>
<li><code>stackBehavior</code> (default: <code>tweenState.stackBehavior.ADDITIVE</code>). Subsequent tweening to the same state value will be stacked (added together). This gives a smooth tweening effect that is iOS 8’s new default. <a href="http://ronnqvi.st/multiple-animations/" target="_blank" rel="external">This blog post</a> describes it well. The other option is <code>tweenState.stackBehavior.DESTRUCTIVE</code>, which replaces all current animations of that state value by this new one.</li>
</ul>
<p>* For a destructive animation, starting the next one with a delay still immediately kills the previous tween. If that’s not your intention, try <code>setTimeout</code> or additive animation. <code>DESTRUCTIVE</code> + <code>duration</code> 0 effectively cancels all in-flight animations.</p>
<p>** For an additive animation, since the tweens stack and never get destroyed, the end callback is effectively fired at the end of <code>duration</code>.</p>
<h4 id="this-getTweeningValue-stateNameString"><a href="#this-getTweeningValue-stateNameString" class="headerlink" title="this.getTweeningValue(stateNameString)"></a><code>this.getTweeningValue(stateNameString)</code></h4><p>After you call <code>this.tweenState(...)</code>, the state value is set just like after a normal <code>setState()</code>. To actually get the current, tweening value of that state, you’d use <code>this.getTweeningValue(stateNameString)</code> (typically used in <code>render</code>).</p>
<h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><h4 id="this-tweenState-stateRefFunction-stateNameString-configurationObject"><a href="#this-tweenState-stateRefFunction-stateNameString-configurationObject" class="headerlink" title="this.tweenState(stateRefFunction, stateNameString, configurationObject)"></a><code>this.tweenState(stateRefFunction, stateNameString, configurationObject)</code></h4><p>Sometimes, you want to tween not <code>this.state.myValue</code>, but the value in <code>this.state.myObject.myArray[4]</code>, in which case passing only a string of the state name isn’t enough. The second form of <code>tweenState()</code> accepts a function and expects you to return the state path of the value you tween, like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">rectangles</span>: [</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>&#125;,</div><div class="line">      &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">40</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ... tween this.state.rectangles[0].x</span></div><div class="line"><span class="keyword">this</span>.tweenState(<span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;<span class="keyword">return</span> state.rectangles[<span class="number">0</span>]&#125;, <span class="string">'x'</span>, configurationObject);</div></pre></td></tr></table></figure>
<p><code>configurationObject</code> is the same.</p>
<h4 id="this-getTweeningValue-stateRefFunction-stateNameString"><a href="#this-getTweeningValue-stateRefFunction-stateNameString" class="headerlink" title="this.getTweeningValue(stateRefFunction, stateNameString)"></a><code>this.getTweeningValue(stateRefFunction, stateNameString)</code></h4><p>See above. Usage: <code>this.getTweeningValue(function(state) {return state.rectangles[0]}, &#39;x&#39;)</code>.</p>
<h2 id="Goal-of-this-library"><a href="#Goal-of-this-library" class="headerlink" title="Goal of this library"></a>Goal of this library</h2><p>React’s powerful model allows us to build apps the functional way. Having a sensible API for animation is a less explored area. This library leverages React’s concept of state and render to let you specify transitions declaratively. If everything goes alright, we can make React expose powerful hooks to make this even better.</p>
<p>Part of a few animation API experimentations.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>BSD.</p>
<h2 id="tween的实际代码"><a href="#tween的实际代码" class="headerlink" title="tween的实际代码"></a>tween的实际代码</h2><h3 id="tween函数"><a href="#tween函数" class="headerlink" title="tween函数"></a>tween函数</h3><p><code>tween函数的实际代码</code><br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line">use strict';</div><div class="line"></div><div class="line">var easingTypes = require('tween-functions');</div><div class="line"></div><div class="line">// additive is the new iOS <span class="number">8</span> <span class="keyword">default</span>. In most cases it simulates a physics-</div><div class="line">// looking overshoot behavior (especially with easeInOut. You can test that <span class="keyword">in</span></div><div class="line">// the example</div><div class="line">var DEFAULT_STACK_BEHAVIOR = 'ADDITIVE';</div><div class="line">var DEFAULT_EASING = easingTypes.easeInOutQuad;</div><div class="line">var DEFAULT_DURATION = <span class="number">300</span>;</div><div class="line">var DEFAULT_DELAY = <span class="number">0</span>;</div><div class="line"></div><div class="line">// see usage below</div><div class="line">function returnState(<span class="keyword">state</span>) &#123;</div><div class="line">  return <span class="keyword">state</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var tweenState = &#123;</div><div class="line">  easingTypes: easingTypes,</div><div class="line">  stackBehavior: &#123;</div><div class="line">    ADDITIVE: 'ADDITIVE',</div><div class="line">    DESTRUCTIVE: 'DESTRUCTIVE',</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">tweenState.Mixin = &#123;</div><div class="line">  getInitialState: function() &#123;</div><div class="line">    return &#123;</div><div class="line">      tweenQueue: [],</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  tweenState: function(a, b, c) &#123;</div><div class="line">    // tweenState(<span class="keyword">state</span>NameString, config)</div><div class="line">    // tweenState(<span class="keyword">state</span>RefFunc, <span class="keyword">state</span>NameString, config)</div><div class="line"></div><div class="line">    // passing a <span class="keyword">state</span> name string and retrieving it later <span class="keyword">from</span> this.<span class="keyword">state</span></div><div class="line">    // doesn't work <span class="keyword">for</span> values <span class="keyword">in</span> deeply nested collections (unless you design</div><div class="line">    // the API <span class="keyword">to</span> be able <span class="keyword">to</span> parse 'this.<span class="keyword">state</span>.my.nested[<span class="number">1</span>]', meh). Passing a</div><div class="line">    // direct, resolved reference wouldn't work either, since that reference</div><div class="line">    // points <span class="keyword">to</span> the old <span class="keyword">state</span> rather than the subsequent new ones.</div><div class="line">    if (typeof a === 'string') &#123;</div><div class="line">      c = b;</div><div class="line">      b = a;</div><div class="line">      a = returnState;</div><div class="line">    &#125;</div><div class="line">    this._tweenState(a, b, c);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  _tweenState: function(<span class="keyword">state</span>RefFunc, <span class="keyword">state</span>Name, config) &#123;</div><div class="line">    // _pendingState doesn't exist <span class="keyword">in</span> React <span class="number">0.13</span> anymore. No harm leaving it</div><div class="line">    // here <span class="keyword">for</span> backward compat</div><div class="line">    var <span class="keyword">state</span> = this._pendingState || this.<span class="keyword">state</span>;</div><div class="line">    var <span class="keyword">state</span>Ref = <span class="keyword">state</span>RefFunc(<span class="keyword">state</span>);</div><div class="line"></div><div class="line">    // see the reasoning <span class="keyword">for</span> these defaults at the top</div><div class="line">    var newConfig = &#123;</div><div class="line">      easing: config.easing || DEFAULT_EASING,</div><div class="line">      duration: config.duration == null ? DEFAULT_DURATION : config.duration,</div><div class="line">      delay: config.delay == null ? DEFAULT_DELAY : config.delay,</div><div class="line">      beginValue: config.beginValue == null ? <span class="keyword">state</span>Ref[<span class="keyword">state</span>Name] : config.beginValue,</div><div class="line">      endValue: config.endValue,</div><div class="line">      <span class="keyword">on</span>End: config.<span class="keyword">on</span>End,</div><div class="line">      stackBehavior: config.stackBehavior || DEFAULT_STACK_BEHAVIOR,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    var newTweenQueue = <span class="keyword">state</span>.tweenQueue;</div><div class="line">    if (newConfig.stackBehavior === tweenState.stackBehavior.DESTRUCTIVE) &#123;</div><div class="line">      newTweenQueue = <span class="keyword">state</span>.tweenQueue.filter(function(item) &#123;</div><div class="line">        return item.<span class="keyword">state</span>Name !== <span class="keyword">state</span>Name || item.<span class="keyword">state</span>RefFunc(<span class="keyword">state</span>) !== <span class="keyword">state</span>Ref;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    newTweenQueue.push(&#123;</div><div class="line">      <span class="keyword">state</span>RefFunc: <span class="keyword">state</span>RefFunc,</div><div class="line">      <span class="keyword">state</span>Name: <span class="keyword">state</span>Name,</div><div class="line">      config: newConfig,</div><div class="line">      initTime: Date.now() + newConfig.delay,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    // tweenState calls <span class="built_in">set</span>State</div><div class="line">    // sorry <span class="keyword">for</span> mutating. No idea where <span class="keyword">in</span> the <span class="keyword">state</span> the value is</div><div class="line">    <span class="keyword">state</span>Ref[<span class="keyword">state</span>Name] = newConfig.endValue;</div><div class="line">    // this will also include the above update</div><div class="line">    this.<span class="built_in">set</span>State(&#123;tweenQueue: newTweenQueue&#125;);</div><div class="line"></div><div class="line">    if (newTweenQueue.length === <span class="number">1</span>) &#123;</div><div class="line">      this.startRaf();</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  getTweeningValue: function(a, b) &#123;</div><div class="line">    // see tweenState API</div><div class="line">    if (typeof a === 'string') &#123;</div><div class="line">      b = a;</div><div class="line">      a = returnState;</div><div class="line">    &#125;</div><div class="line">    return this._getTweeningValue(a, b);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  _getTweeningValue: function(<span class="keyword">state</span>RefFunc, <span class="keyword">state</span>Name) &#123;</div><div class="line">    var <span class="keyword">state</span> = this.<span class="keyword">state</span>;</div><div class="line">    var <span class="keyword">state</span>Ref = <span class="keyword">state</span>RefFunc(<span class="keyword">state</span>);</div><div class="line">    var tweeningValue = <span class="keyword">state</span>Ref[<span class="keyword">state</span>Name];</div><div class="line">    var now = Date.now();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i <span class="variable">&lt; state.tweenQueue.length; i++) &#123;</span></div><div class="line">      var item = state.tweenQueue[i];</div><div class="line">      var itemStateRef = item.stateRefFunc(state);</div><div class="line">      if (item.stateName !== stateName || itemStateRef !== stateRef) &#123;</div><div class="line">        continue;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      var progressTime = now - item.initTime &gt; item.config.duration ?</div><div class="line">        item.config.duration :</div><div class="line">        Math.<span class="keyword">max</span>(<span class="number">0</span>, now - item.initTime);</div><div class="line">      // `now - item.initTime` can be negative if initTime is scheduled <span class="keyword">in</span> the</div><div class="line">      // future by a delay. In this case we take <span class="number">0</span></div><div class="line"></div><div class="line">      var contrib = -item.config.endValue + item.config.easing(</div><div class="line">        progressTime,</div><div class="line">        item.config.beginValue,</div><div class="line">        item.config.endValue,</div><div class="line">        item.config.duration</div><div class="line">        // TODO: some funcs accept a <span class="number">5</span>th param</div><div class="line">      );</div><div class="line">      tweeningValue += contrib;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return tweeningValue;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  _rafCb: function() &#123;</div><div class="line">    var <span class="keyword">state</span> = this.<span class="keyword">state</span>;</div><div class="line">    if (<span class="keyword">state</span>.tweenQueue.length === <span class="number">0</span>) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var now = Date.now();</div><div class="line">    var newTweenQueue = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (var i = <span class="number">0</span>; i <span class="variable">&lt; state.tweenQueue.length; i++) &#123;</span></div><div class="line">      var item = state.tweenQueue[i];</div><div class="line">      if (now - item.initTime &lt; item.config.duration) &#123;</div><div class="line">        newTweenQueue.push(item);</div><div class="line">      &#125; else &#123;</div><div class="line">        item.config.onEnd &amp;&amp; item.config.onEnd();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // onEnd might trigger a parent callback that removes this component</div><div class="line">    if (!this.isMounted()) &#123;</div><div class="line">      return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    this.setState(&#123;</div><div class="line">      tweenQueue: newTweenQueue,</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    requestAnimationFrame(this._rafCb);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  startRaf: function() &#123;</div><div class="line">    requestAnimationFrame(this._rafCb);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = tweenState;</div></pre></td></tr></table></figure></p>
<h3 id="ease-type"><a href="#ease-type" class="headerlink" title="ease type"></a>ease type</h3><p><code>ease type的函数</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="comment">// t: current time, b: beginning value, _c: final value, d: total duration</span></div><div class="line"><span class="keyword">var</span> tweenFunctions = &#123;</div><div class="line">  <span class="attr">linear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * t / d + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * (t /= d) * t + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> -c * (t /= d) * (t - <span class="number">2</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutQuad</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> -c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * (t /= d) * t * t + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutCubic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t + <span class="number">2</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * (t /= d) * t * t * t + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> -c * ((t = t / d - <span class="number">1</span>) * t * t * t - <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutQuart</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> -c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t - <span class="number">2</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutQuint</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * t * t * t * t * t + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * t * t * t + <span class="number">2</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> -c * <span class="built_in">Math</span>.cos(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + c + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * <span class="built_in">Math</span>.sin(t / d * (<span class="built_in">Math</span>.PI / <span class="number">2</span>)) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutSine</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI * t / d) - <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> _ref;</div><div class="line">    <span class="keyword">return</span> (_ref = t === <span class="number">0</span>) !== <span class="literal">null</span> ? _ref : &#123;</div><div class="line">      <span class="attr">b</span>: c * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t / d - <span class="number">1</span>)) + b</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> _ref;</div><div class="line">    <span class="keyword">return</span> (_ref = t === d) !== <span class="literal">null</span> ? _ref : b + &#123;</div><div class="line">      <span class="attr">c</span>: c * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t / d) + <span class="number">1</span>) + b</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutExpo</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">      b;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (t === d) &#123;</div><div class="line">      b + c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t - <span class="number">1</span>)) + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * (-<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * --t) + <span class="number">2</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> -c * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t /= d) * t) - <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">return</span> c * <span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t = t / d - <span class="number">1</span>) * t) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutCirc</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> -c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - t * t) - <span class="number">1</span>) + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * (<span class="built_in">Math</span>.sqrt(<span class="number">1</span> - (t -= <span class="number">2</span>) * t) + <span class="number">1</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> a, p, s;</div><div class="line">    s = <span class="number">1.70158</span>;</div><div class="line">    p = <span class="number">0</span>;</div><div class="line">    a = c;</div><div class="line">    <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">      b;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((t /= d) === <span class="number">1</span>) &#123;</div><div class="line">      b + c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!p) &#123;</div><div class="line">      p = d * <span class="number">0.3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">      a = c;</div><div class="line">      s = p / <span class="number">4</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -(a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> a, p, s;</div><div class="line">    s = <span class="number">1.70158</span>;</div><div class="line">    p = <span class="number">0</span>;</div><div class="line">    a = c;</div><div class="line">    <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">      b;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((t /= d) === <span class="number">1</span>) &#123;</div><div class="line">      b + c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!p) &#123;</div><div class="line">      p = d * <span class="number">0.3</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">      a = c;</div><div class="line">      s = p / <span class="number">4</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * t) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) + c + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutElastic</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> a, p, s;</div><div class="line">    s = <span class="number">1.70158</span>;</div><div class="line">    p = <span class="number">0</span>;</div><div class="line">    a = c;</div><div class="line">    <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">      b;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) === <span class="number">2</span>) &#123;</div><div class="line">      b + c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!p) &#123;</div><div class="line">      p = d * (<span class="number">0.3</span> * <span class="number">1.5</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">      a = c;</div><div class="line">      s = p / <span class="number">4</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      s = p / (<span class="number">2</span> * <span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin(c / a);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (t &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">-0.5</span> * (a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p)) + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> a * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-10</span> * (t -= <span class="number">1</span>)) * <span class="built_in">Math</span>.sin((t * d - s) * (<span class="number">2</span> * <span class="built_in">Math</span>.PI) / p) * <span class="number">0.5</span> + c + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d, s</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> (s === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">      s = <span class="number">1.70158</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> c * (t /= d) * t * ((s + <span class="number">1</span>) * t - s) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d, s</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> (s === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">      s = <span class="number">1.70158</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * ((s + <span class="number">1</span>) * t + s) + <span class="number">1</span>) + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutBack</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d, s</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> (s === <span class="keyword">void</span> <span class="number">0</span>) &#123;</div><div class="line">      s = <span class="number">1.70158</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ((t /= d / <span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * (t * t * (((s *= <span class="number">1.525</span>) + <span class="number">1</span>) * t - s)) + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c / <span class="number">2</span> * ((t -= <span class="number">2</span>) * t * (((s *= <span class="number">1.525</span>) + <span class="number">1</span>) * t + s) + <span class="number">2</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> v;</div><div class="line">    v = tweenFunctions.easeOutBounce(d - t, <span class="number">0</span>, c, d);</div><div class="line">    <span class="keyword">return</span> c - v + b;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">if</span> ((t /= d) &lt; <span class="number">1</span> / <span class="number">2.75</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c * (<span class="number">7.5625</span> * t * t) + b;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">2</span> / <span class="number">2.75</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= <span class="number">1.5</span> / <span class="number">2.75</span>) * t + <span class="number">0.75</span>) + b;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">2.5</span> / <span class="number">2.75</span>) &#123;</div><div class="line">      <span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= <span class="number">2.25</span> / <span class="number">2.75</span>) * t + <span class="number">0.9375</span>) + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> c * (<span class="number">7.5625</span> * (t -= <span class="number">2.625</span> / <span class="number">2.75</span>) * t + <span class="number">0.984375</span>) + b;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">easeInOutBounce</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, _c, d</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = _c - b;</div><div class="line">    <span class="keyword">var</span> v;</div><div class="line">    <span class="keyword">if</span> (t &lt; d / <span class="number">2</span>) &#123;</div><div class="line">      v = tweenFunctions.easeInBounce(t * <span class="number">2</span>, <span class="number">0</span>, c, d);</div><div class="line">      <span class="keyword">return</span> v * <span class="number">0.5</span> + b;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      v = tweenFunctions.easeOutBounce(t * <span class="number">2</span> - d, <span class="number">0</span>, c, d);</div><div class="line">      <span class="keyword">return</span> v * <span class="number">0.5</span> + c * <span class="number">0.5</span> + b;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = tweenFunctions;</div><div class="line">s</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;React-Tween-State&quot;&gt;&lt;a href=&quot;#React-Tween-State&quot; class=&quot;headerlink&quot; title=&quot;React Tween State&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://facebook.github.io/
    
    </summary>
    
      <category term="Readme" scheme="https://phpsmarter.github.com/categories/Readme/"/>
    
    
      <category term="React-native" scheme="https://phpsmarter.github.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>设计模式|javascript缓存函数</title>
    <link href="https://phpsmarter.github.com/2017/04/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-javascript%E7%BC%93%E5%AD%98%E5%87%BD%E6%95%B0/"/>
    <id>https://phpsmarter.github.com/2017/04/07/设计模式-javascript缓存函数/</id>
    <published>2017-04-07T09:42:46.000Z</published>
    <updated>2017-04-07T01:45:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>vscode的代码块</code></p>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> functionName = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> funcMemoized = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cacheKey = <span class="built_in">JSON</span>.stringify(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>));</div><div class="line">    <span class="keyword">var</span> result;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!funcMemoized.cache.hasOwnProperty(cacheKey)) &#123;</div><div class="line">        <span class="comment">// your expensive computation goes here</span></div><div class="line">        <span class="comment">// to reference the paramaters passed, use arguments[n]</span></div><div class="line">        <span class="comment">// eg.: result = arguments[0] + arguments[1];</span></div><div class="line">        funcMemoized.cache[cacheKey] = result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> funcMemoized.cache[cacheKey];</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  funcMemoized.cache = &#123;&#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> funcMemoized;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;vscode的代码块&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
    
    </summary>
    
      <category term="设计模式" scheme="https://phpsmarter.github.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="javascript" scheme="https://phpsmarter.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>redux-logger</title>
    <link href="https://phpsmarter.github.com/2017/04/07/redux-logger/"/>
    <id>https://phpsmarter.github.com/2017/04/07/redux-logger/</id>
    <published>2017-04-07T00:57:13.000Z</published>
    <updated>2017-04-06T17:38:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Logger-for-Redux"><a href="#Logger-for-Redux" class="headerlink" title="Logger for Redux"></a>Logger for Redux</h1><p><a href="https://www.npmjs.com/package/redux-logger" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/redux-logger.svg?maxAge=2592000?style=plastic" alt="npm"></a><br><a href="https://www.npmjs.com/package/redux-logger" target="_blank" rel="external"><img src="https://img.shields.io/npm/dm/redux-logger.svg?maxAge=2592000?style=plastic" alt="npm"></a><br><a href="https://travis-ci.org/evgenyrodionov/redux-logger" target="_blank" rel="external"><img src="https://travis-ci.org/evgenyrodionov/redux-logger.svg?branch=master" alt="Build Status"></a></p>
<p><img src="http://i.imgur.com/CgAuHlE.png" alt="redux-logger"></p>
<h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><ul>
<li><a href="#install">Install</a></li>
<li><a href="#usage">Usage</a></li>
<li><a href="#options">Options</a></li>
<li><a href="#recipes">Recipes</a><ul>
<li><a href="#log-only-in-development">Log only in development</a></li>
<li><a href="#log-everything-except-actions-with-certain-type">Log everything except actions with certain type</a></li>
<li><a href="#collapse-actions-with-certain-type">Collapse actions with certain type</a></li>
<li><a href="#transform-immutable-without-combinereducers">Transform Immutable (without <code>combineReducers</code>)</a></li>
<li><a href="#transform-immutable-with-combinereducers">Transform Immutable (with <code>combineReducers</code>)</a></li>
<li><a href="#log-batched-actions">Log batched actions</a></li>
</ul>
</li>
<li><a href="#to-do">To Do</a></li>
<li><a href="#known-issues">Known issues</a> (with <code>react-native</code> only at this moment)</li>
<li><a href="#license">License</a></li>
</ul>
<h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><code>npm i --save redux-logger</code></p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Logger with default options</span></div><div class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(logger)</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Note passing middleware as the third argument requires redux@&gt;=3.1.0</span></div></pre></td></tr></table></figure>
<p>Or you can create your own logger with custom <a href="https://github.com/evgenyrodionov/redux-logger#options" target="_blank" rel="external">options</a>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createLogger &#125; <span class="keyword">from</span> <span class="string">'redux-logger'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = createLogger(&#123;</div><div class="line">  <span class="comment">// ...options</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(</div><div class="line">  reducer,</div><div class="line">  applyMiddleware(logger)</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>Note: logger <strong>must be</strong> the last middleware in chain, otherwise it will log thunk and promise, not actual actions (<a href="https://github.com/evgenyrodionov/redux-logger/issues/20" target="_blank" rel="external">#20</a>).</p>
<h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  predicate, <span class="comment">// if specified this function will be called before each action is processed with this middleware.</span></div><div class="line">  collapsed, <span class="comment">// takes a Boolean or optionally a Function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.</span></div><div class="line">  duration = <span class="literal">false</span>: <span class="built_in">Boolean</span>, <span class="comment">// print the duration of each action?</span></div><div class="line">  timestamp = <span class="literal">true</span>: <span class="built_in">Boolean</span>, <span class="comment">// print the timestamp with each action?</span></div><div class="line"></div><div class="line">  level = <span class="string">'log'</span>: <span class="string">'log'</span> | <span class="string">'console'</span> | <span class="string">'warn'</span> | <span class="string">'error'</span> | <span class="string">'info'</span>, <span class="comment">// console's level</span></div><div class="line">  colors: ColorsObject, <span class="comment">// colors for title, prev state, action and next state: https://github.com/evgenyrodionov/redux-logger/blob/master/src/defaults.js#L12-L18</span></div><div class="line">  titleFormatter, <span class="comment">// Format the title used when logging actions.</span></div><div class="line"></div><div class="line">  stateTransformer, <span class="comment">// Transform state before print. Eg. convert Immutable object to plain JSON.</span></div><div class="line">  actionTransformer, <span class="comment">// Transform action before print. Eg. convert Immutable object to plain JSON.</span></div><div class="line">  errorTransformer, <span class="comment">// Transform error before print. Eg. convert Immutable object to plain JSON.</span></div><div class="line"></div><div class="line">  logger = <span class="built_in">console</span>: LoggerObject, <span class="comment">// implementation of the `console` API.</span></div><div class="line">  logErrors = <span class="literal">true</span>: <span class="built_in">Boolean</span>, <span class="comment">// should the logger catch, log, and re-throw errors?</span></div><div class="line"></div><div class="line">  diff = <span class="literal">false</span>: <span class="built_in">Boolean</span>, <span class="comment">// (alpha) show diff between states?</span></div><div class="line">  diffPredicate <span class="comment">// (alpha) filter function for showing states diff, similar to `predicate`</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Options-description"><a href="#Options-description" class="headerlink" title="Options description"></a>Options description</h3><h4 id="level-String-Function-Object"><a href="#level-String-Function-Object" class="headerlink" title="level (String | Function | Object)"></a><strong>level (String | Function | Object)</strong></h4><p>Level of <code>console</code>. <code>warn</code>, <code>error</code>, <code>info</code> or <a href="https://developer.mozilla.org/en/docs/Web/API/console" target="_blank" rel="external">else</a>.</p>
<p>It can be a function <code>(action: Object) =&gt; level: String</code>.</p>
<p>It can be an object with level string for: <code>prevState</code>, <code>action</code>, <code>nextState</code>, <code>error</code></p>
<p>It can be an object with getter functions: <code>prevState</code>, <code>action</code>, <code>nextState</code>, <code>error</code>. Useful if you want to print<br>message based on specific state or action. Set any of them to <code>false</code> if you want to hide it.</p>
<ul>
<li><code>prevState(prevState: Object) =&gt; level: String</code></li>
<li><code>action(action: Object) =&gt; level: String</code></li>
<li><code>nextState(nextState: Object) =&gt; level: String</code></li>
<li><code>error(error: Any, prevState: Object) =&gt; level: String</code></li>
</ul>
<p><em>Default: <code>log</code></em></p>
<h4 id="duration-Boolean"><a href="#duration-Boolean" class="headerlink" title="duration (Boolean)"></a><strong>duration (Boolean)</strong></h4><p>Print duration of each action?</p>
<p><em>Default: <code>false</code></em></p>
<h4 id="timestamp-Boolean"><a href="#timestamp-Boolean" class="headerlink" title="timestamp (Boolean)"></a><strong>timestamp (Boolean)</strong></h4><p>Print timestamp with each action?</p>
<p><em>Default: <code>true</code></em></p>
<h4 id="colors-Object"><a href="#colors-Object" class="headerlink" title="colors (Object)"></a><strong>colors (Object)</strong></h4><p>Object with color getter functions: <code>title</code>, <code>prevState</code>, <code>action</code>, <code>nextState</code>, <code>error</code>. Useful if you want to paint<br>message based on specific state or action. Set any of them to <code>false</code> if you want to show plain message without colors.</p>
<ul>
<li><code>title(action: Object) =&gt; color: String</code></li>
<li><code>prevState(prevState: Object) =&gt; color: String</code></li>
<li><code>action(action: Object) =&gt; color: String</code></li>
<li><code>nextState(nextState: Object) =&gt; color: String</code></li>
<li><code>error(error: Any, prevState: Object) =&gt; color: String</code></li>
</ul>
<h4 id="logger-Object"><a href="#logger-Object" class="headerlink" title="logger (Object)"></a><strong>logger (Object)</strong></h4><p>Implementation of the <code>console</code> API. Useful if you are using a custom, wrapped version of <code>console</code>.</p>
<p><em>Default: <code>console</code></em></p>
<h4 id="logErrors-Boolean"><a href="#logErrors-Boolean" class="headerlink" title="logErrors (Boolean)"></a><strong>logErrors (Boolean)</strong></h4><p>Should the logger catch, log, and re-throw errors? This makes it clear which action triggered the error but makes “break<br>on error” in dev tools harder to use, as it breaks on re-throw rather than the original throw location.</p>
<p><em>Default: <code>true</code></em></p>
<h4 id="collapsed-getState-Function-action-Object-logEntry-Object-gt-Boolean"><a href="#collapsed-getState-Function-action-Object-logEntry-Object-gt-Boolean" class="headerlink" title="collapsed = (getState: Function, action: Object, logEntry: Object) =&gt; Boolean"></a><strong>collapsed = (getState: Function, action: Object, logEntry: Object) =&gt; Boolean</strong></h4><p>Takes a boolean or optionally a function that receives <code>getState</code> function for accessing current store state and <code>action</code> object as parameters. Returns <code>true</code> if the log group should be collapsed, <code>false</code> otherwise.</p>
<p><em>Default: <code>false</code></em></p>
<h4 id="predicate-getState-Function-action-Object-gt-Boolean"><a href="#predicate-getState-Function-action-Object-gt-Boolean" class="headerlink" title="predicate = (getState: Function, action: Object) =&gt; Boolean"></a><strong>predicate = (getState: Function, action: Object) =&gt; Boolean</strong></h4><p>If specified this function will be called before each action is processed with this middleware.<br>Receives <code>getState</code> function for  accessing current store state and <code>action</code> object as parameters. Returns <code>true</code> if action should be logged, <code>false</code> otherwise.</p>
<p><em>Default: <code>null</code> (always log)</em></p>
<h4 id="stateTransformer-state-Object-gt-state"><a href="#stateTransformer-state-Object-gt-state" class="headerlink" title="stateTransformer = (state: Object) =&gt; state"></a><strong>stateTransformer = (state: Object) =&gt; state</strong></h4><p>Transform state before print. Eg. convert Immutable object to plain JSON.</p>
<p><em>Default: identity function</em></p>
<h4 id="actionTransformer-action-Object-gt-action"><a href="#actionTransformer-action-Object-gt-action" class="headerlink" title="actionTransformer = (action: Object) =&gt; action"></a><strong>actionTransformer = (action: Object) =&gt; action</strong></h4><p>Transform action before print. Eg. convert Immutable object to plain JSON.</p>
<p><em>Default: identity function</em></p>
<h4 id="errorTransformer-error-Any-gt-error"><a href="#errorTransformer-error-Any-gt-error" class="headerlink" title="errorTransformer = (error: Any) =&gt; error"></a><strong>errorTransformer = (error: Any) =&gt; error</strong></h4><p>Transform error before print.</p>
<p><em>Default: identity function</em></p>
<h4 id="titleFormatter-action-Object-time-String-took-Number-gt-title"><a href="#titleFormatter-action-Object-time-String-took-Number-gt-title" class="headerlink" title="titleFormatter = (action: Object, time: String?, took: Number?) =&gt; title"></a><strong>titleFormatter = (action: Object, time: String?, took: Number?) =&gt; title</strong></h4><p>Format the title used for each action.</p>
<p><em>Default: prints something like <code>action @ ${time} ${action.type} (in ${took.toFixed(2)} ms)</code></em></p>
<h4 id="diff-Boolean"><a href="#diff-Boolean" class="headerlink" title="diff (Boolean)"></a><strong>diff (Boolean)</strong></h4><p>Show states diff.</p>
<p><em>Default: <code>false</code></em></p>
<h4 id="diffPredicate-getState-Function-action-Object-gt-Boolean"><a href="#diffPredicate-getState-Function-action-Object-gt-Boolean" class="headerlink" title="diffPredicate = (getState: Function, action: Object) =&gt; Boolean"></a><strong>diffPredicate = (getState: Function, action: Object) =&gt; Boolean</strong></h4><p>Filter states diff for certain cases.</p>
<p><em>Default: <code>undefined</code></em></p>
<h2 id="Using-redux-presist"><a href="#Using-redux-presist" class="headerlink" title="Using redux-presist"></a>Using redux-presist</h2><p>add some extra code<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; compose,applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123;autoRehydrate&#125; <span class="keyword">from</span> <span class="string">'redux-persist'</span>;</div><div class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</div><div class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers'</span>;</div><div class="line"><span class="built_in">console</span>.log(logger);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params">initialState</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> createStore(</div><div class="line">    rootReducer,</div><div class="line">    initialState,</div><div class="line">    compose(</div><div class="line">    applyMiddleware(logger),</div><div class="line">    autoRehydrate()</div><div class="line">    )</div><div class="line">  );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//using compose function</span></div></pre></td></tr></table></figure></p>
<h2 id="Recipes"><a href="#Recipes" class="headerlink" title="Recipes"></a>Recipes</h2><h3 id="Log-only-in-development"><a href="#Log-only-in-development" class="headerlink" title="Log only in development"></a>Log only in development</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> middlewares = [];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">`development`</span>) &#123;</div><div class="line">  <span class="keyword">const</span> &#123; logger &#125; = <span class="built_in">require</span>(<span class="string">`redux-logger`</span>);</div><div class="line"></div><div class="line">  middlewares.push(logger);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = compose(applyMiddleware(...middlewares))(createStore)(reducer);</div></pre></td></tr></table></figure>
<h3 id="Log-everything-except-actions-with-certain-type"><a href="#Log-everything-except-actions-with-certain-type" class="headerlink" title="Log everything except actions with certain type"></a>Log everything except actions with certain type</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">createLogger(&#123;</div><div class="line">  <span class="attr">predicate</span>: <span class="function">(<span class="params">getState, action</span>) =&gt;</span> action.type !== AUTH_REMOVE_TOKEN</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Collapse-actions-with-certain-type"><a href="#Collapse-actions-with-certain-type" class="headerlink" title="Collapse actions with certain type"></a>Collapse actions with certain type</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">createLogger(&#123;</div><div class="line">  <span class="attr">collapsed</span>: <span class="function">(<span class="params">getState, action</span>) =&gt;</span> action.type === FORM_CHANGE</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Collapse-actions-that-don’t-have-errors"><a href="#Collapse-actions-that-don’t-have-errors" class="headerlink" title="Collapse actions that don’t have errors"></a>Collapse actions that don’t have errors</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">createLogger(&#123;</div><div class="line">  <span class="attr">collapsed</span>: <span class="function">(<span class="params">getState, action, logEntry</span>) =&gt;</span> !logEntry.error</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Transform-Immutable-without-combineReducers"><a href="#Transform-Immutable-without-combineReducers" class="headerlink" title="Transform Immutable (without combineReducers)"></a>Transform Immutable (without <code>combineReducers</code>)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Iterable &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> stateTransformer = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (Iterable.isIterable(state)) <span class="keyword">return</span> state.toJS();</div><div class="line">  <span class="keyword">else</span> <span class="keyword">return</span> state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = createLogger(&#123;</div><div class="line">  stateTransformer,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Transform-Immutable-with-combineReducers"><a href="#Transform-Immutable-with-combineReducers" class="headerlink" title="Transform Immutable (with combineReducers)"></a>Transform Immutable (with <code>combineReducers</code>)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> logger = createLogger(&#123;</div><div class="line">  <span class="attr">stateTransformer</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> newState = &#123;&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="built_in">Object</span>.keys(state)) &#123;</div><div class="line">      <span class="keyword">if</span> (Immutable.Iterable.isIterable(state[i])) &#123;</div><div class="line">        newState[i] = state[i].toJS();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        newState[i] = state[i];</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newState;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Log-batched-actions"><a href="#Log-batched-actions" class="headerlink" title="Log batched actions"></a>Log batched actions</h3><p>Thanks to <a href="https://github.com/smashercosmo" target="_blank" rel="external">@smashercosmo</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> actionTransformer = <span class="function"><span class="params">action</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'BATCHING_REDUCER.BATCH'</span>) &#123;</div><div class="line">    action.payload.type = action.payload.map(<span class="function"><span class="params">next</span> =&gt;</span> next.type).join(<span class="string">' =&gt; '</span>);</div><div class="line">    <span class="keyword">return</span> action.payload;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> action;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> level = <span class="string">'info'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> logger = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> method <span class="keyword">in</span> <span class="built_in">console</span>) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">console</span>[method] === <span class="string">'function'</span>) &#123;</div><div class="line">    logger[method] = <span class="built_in">console</span>[method].bind(<span class="built_in">console</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">logger[level] = <span class="function"><span class="keyword">function</span> <span class="title">levelFn</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> lastArg = args.pop();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(lastArg)) &#123;</div><div class="line">    <span class="keyword">return</span> lastArg.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>[level].apply(<span class="built_in">console</span>, [...args, item]);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>[level].apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> createLogger(&#123;</div><div class="line">  level,</div><div class="line">  actionTransformer,</div><div class="line">  logger</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><ul>
<li>[x] Update eslint config to <a href="https://www.npmjs.com/package/eslint-config-airbnb" target="_blank" rel="external">airbnb’s</a></li>
<li>[ ] Clean up code, because it’s very messy, to be honest</li>
<li>[ ] Write tests</li>
<li>[ ] Node.js support</li>
<li>[ ] React-native support</li>
</ul>
<p>Feel free to create PR for any of those tasks!</p>
<h2 id="Known-issues"><a href="#Known-issues" class="headerlink" title="Known issues"></a>Known issues</h2><ul>
<li>Performance issues in react-native (<a href="https://github.com/evgenyrodionov/redux-logger/issues/32" target="_blank" rel="external">#32</a>)</li>
</ul>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Logger-for-Redux&quot;&gt;&lt;a href=&quot;#Logger-for-Redux&quot; class=&quot;headerlink&quot; title=&quot;Logger for Redux&quot;&gt;&lt;/a&gt;Logger for Redux&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https
    
    </summary>
    
      <category term="Readme" scheme="https://phpsmarter.github.com/categories/Readme/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>乱花渐欲迷人眼,返璞归真F8(2)</title>
    <link href="https://phpsmarter.github.com/2017/04/06/%E4%B9%B1%E8%8A%B1%E6%B8%90%E6%AC%B2%E8%BF%B7%E4%BA%BA%E7%9C%BC-%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9FF8-2/"/>
    <id>https://phpsmarter.github.com/2017/04/06/乱花渐欲迷人眼-返璞归真F8-2/</id>
    <published>2017-04-06T10:45:08.000Z</published>
    <updated>2017-04-06T12:29:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入口和配置文件"><a href="#入口和配置文件" class="headerlink" title="入口和配置文件"></a>入口和配置文件</h1><h2 id="F8APP-js-setup-js文件"><a href="#F8APP-js-setup-js文件" class="headerlink" title="./F8APP/js/setup.js文件"></a>./F8APP/js/setup.js文件</h2><blockquote>
<p>这一部分我们从index.ios.js文件顺藤摸瓜找到了</p>
</blockquote>
<p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1fed886n41zj306g0ac74b.jpg" alt=""><br><code>setup.js</code>文件<br><code>./F8APP/js/setup.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> F8App = <span class="built_in">require</span>(<span class="string">'F8App'</span>);<span class="comment">//主程序文件的入口</span></div><div class="line"><span class="keyword">var</span> FacebookSDK = <span class="built_in">require</span>(<span class="string">'FacebookSDK'</span>);<span class="comment">//处理facebook登录和好友的API</span></div><div class="line"><span class="keyword">var</span> Parse = <span class="built_in">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//parse的客户端</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</div><div class="line"><span class="keyword">var</span> Relay = <span class="built_in">require</span>(<span class="string">'react-relay'</span>);<span class="comment">//react程序的组件也可以使用Relay的数据层,这个在info这个组件中使用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; Provider &#125; = <span class="built_in">require</span>(<span class="string">'react-redux'</span>);<span class="comment">//Redux的包装器</span></div><div class="line"><span class="keyword">var</span> configureStore = <span class="built_in">require</span>(<span class="string">'./store/configureStore'</span>);<span class="comment">//store</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;serverURL&#125; = <span class="built_in">require</span>(<span class="string">'./env'</span>);<span class="comment">//环境配置，是parsesever的配置地址</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>): <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="built_in">console</span>.disableYellowBox = <span class="literal">true</span>;</div><div class="line">  <span class="comment">//parseServer后面会结合leancloud来看看代码,两者的API是一样的</span></div><div class="line">  Parse.initialize(<span class="string">'oss-f8-app-2016'</span>);<span class="comment">//初始化一个parse</span></div><div class="line">  Parse.serverURL = <span class="string">`<span class="subst">$&#123;serverURL&#125;</span>/parse`</span>;<span class="comment">//parse的url地址</span></div><div class="line"></div><div class="line">  FacebookSDK.init();<span class="comment">//初始化Facebook的配置</span></div><div class="line">  Parse.FacebookUtils.init();</div><div class="line">  Relay.injectNetworkLayer(<span class="comment">//Realy数据层的配置</span></div><div class="line">    <span class="keyword">new</span> Relay.DefaultNetworkLayer(<span class="string">`<span class="subst">$&#123;serverURL&#125;</span>/graphql`</span>, &#123;</div><div class="line">      <span class="attr">fetchTimeout</span>: <span class="number">30000</span>,</div><div class="line">      <span class="attr">retryDelays</span>: [<span class="number">5000</span>, <span class="number">10000</span>],</div><div class="line">    &#125;)</div><div class="line">  );</div><div class="line"></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">super</span>();</div><div class="line">      <span class="keyword">this</span>.state = &#123;<span class="comment">//初始化state</span></div><div class="line">        isLoading: <span class="literal">true</span>,</div><div class="line">        <span class="attr">store</span>: configureStore(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;<span class="attr">isLoading</span>: <span class="literal">false</span>&#125;)),</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.isLoading) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> (<span class="comment">//注入store给ui组件使用</span></div><div class="line">        &lt;Provider store=&#123;<span class="keyword">this</span>.state.store&#125;&gt;</div><div class="line">          <span class="xml"><span class="tag">&lt;<span class="name">F8App</span> /&gt;</span></span></div><div class="line">        <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Root;</div><div class="line">&#125;</div><div class="line"></div><div class="line">global.LOG = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'/------------------------------\\'</span>);</div><div class="line">  <span class="built_in">console</span>.log(...args);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'\\------------------------------/'</span>);</div><div class="line">  <span class="keyword">return</span> args[args.length - <span class="number">1</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = setup;</div></pre></td></tr></table></figure></p>
<p>这个文件在去年阅读的时候直接忽略了.最近研究了parseServer的本地部署和相关的graphql的使用以及leancloud的使用,才发现这个部分真的是非常便利.只要是有了数据对象最好还能有schema,model.后台基本都不需要了.当然不可能是完全替代服务器的所有功能.这个到了相应的地方再说.</p>
<p>接下来是F8APP的入口文件</p>
<h2 id="F8APP-js-F8App-js"><a href="#F8APP-js-F8App-js" class="headerlink" title="./F8APP/js/F8App.js"></a>./F8APP/js/F8App.js</h2><p><code>./F8APP/js/F8App.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> </span></div><div class="line">'use strict';</div><div class="line"></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'React'</span>);</div><div class="line"><span class="keyword">var</span> AppState = <span class="built_in">require</span>(<span class="string">'AppState'</span>);</div><div class="line"><span class="keyword">var</span> LoginScreen = <span class="built_in">require</span>(<span class="string">'./login/LoginScreen'</span>);<span class="comment">//登录组件</span></div><div class="line"><span class="keyword">var</span> PushNotificationsController = <span class="built_in">require</span>(<span class="string">'./PushNotificationsController'</span>);<span class="comment">//推送组件</span></div><div class="line"><span class="keyword">var</span> StyleSheet = <span class="built_in">require</span>(<span class="string">'StyleSheet'</span>);</div><div class="line"><span class="keyword">var</span> F8Navigator = <span class="built_in">require</span>(<span class="string">'F8Navigator'</span>);<span class="comment">//导航组件</span></div><div class="line"><span class="keyword">var</span> CodePush = <span class="built_in">require</span>(<span class="string">'react-native-code-push'</span>);<span class="comment">//热更新组件</span></div><div class="line"><span class="keyword">var</span> View = <span class="built_in">require</span>(<span class="string">'View'</span>);</div><div class="line"><span class="keyword">var</span> StatusBar = <span class="built_in">require</span>(<span class="string">'StatusBar'</span>);<span class="comment">//状态栏组件</span></div><div class="line"><span class="keyword">var</span> &#123;<span class="comment">//这里的每一action最终都会形成state这棵树下的次级分枝</span></div><div class="line">  <span class="comment">//名字都非常的醒目和直接,我们可以直接先看action和reducer都干了些什么工作</span></div><div class="line">  loadConfig,</div><div class="line">  loadMaps,</div><div class="line">  loadNotifications,</div><div class="line">  loadSessions,</div><div class="line">  loadFriendsSchedules,</div><div class="line">  loadSurveys,</div><div class="line">&#125; = <span class="built_in">require</span>(<span class="string">'./actions'</span>);<span class="comment">//加载初始化配置的action</span></div><div class="line"><span class="comment">//这个地方的初始化的一些state是在这里加载的,对比ireading软件的//内容加载是在组件中的componentdidMount加载的,放在这里性能是不//是有些优化,</span></div><div class="line"><span class="keyword">var</span> &#123; updateInstallation &#125; = <span class="built_in">require</span>(<span class="string">'./actions/installation'</span>);</div><div class="line"><span class="keyword">var</span> &#123; connect &#125; = <span class="built_in">require</span>(<span class="string">'react-redux'</span>);<span class="comment">//connect函数</span></div><div class="line"><span class="comment">//没想到在这里也是可以用的,在f8app中那个组件要使用state和dispatch就在哪里导入connect函数.</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; version &#125; = <span class="built_in">require</span>(<span class="string">'./env.js'</span>);<span class="comment">//获取当前版本号码</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> F8App = React.createClass(&#123;</div><div class="line">  <span class="attr">componentDidMount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//监听change事件</span></div><div class="line">    AppState.addEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.handleAppStateChange);</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Make this list smaller, we basically download the whole internet</span></div><div class="line">    <span class="comment">//这个地方在先于UI组件之前加载了所有的state，</span></div><div class="line">    <span class="comment">//根据UI导航的默认项是session，我觉得这里可以先加载//session这个state，在首页加载的时候速度就快了,其他的//state在切换到需要某部分的state的时候在加载</span></div><div class="line">    <span class="comment">//是不是惰性加载的意思？</span></div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadNotifications());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadMaps());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadConfig());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadSessions());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadFriendsSchedules());</div><div class="line">    <span class="keyword">this</span>.props.dispatch(loadSurveys());</div><div class="line"></div><div class="line">    updateInstallation(&#123;version&#125;);<span class="comment">//热更新版本.</span></div><div class="line">    CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//移除change事件</span></div><div class="line">    AppState.removeEventListener(<span class="string">'change'</span>, <span class="keyword">this</span>.handleAppStateChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">handleAppStateChange</span>: <span class="function"><span class="keyword">function</span>(<span class="params">appState</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (appState === <span class="string">'active'</span>) &#123;<span class="comment">//在线就分发动作</span></div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadSessions());</div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadNotifications());</div><div class="line">      <span class="keyword">this</span>.props.dispatch(loadSurveys());</div><div class="line">      CodePush.sync(&#123;<span class="attr">installMode</span>: CodePush.InstallMode.ON_NEXT_RESUME&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//下面这个地方对于初学redux的就有点绕了</span></div><div class="line">    <span class="comment">//在reducer/user.js中定义了初始化的state,isLoggedIn</span></div><div class="line">    <span class="comment">//就是false，所以初次加载的时候就会显示登录按钮了</span></div><div class="line">    <span class="comment">//如果登录了以后根据登录回调函数的返回值来修改isLoggedIn的state为//true，同时由于还使用了redux-presist的组件持久化state，在下一//次打开的时候就不会显示登录按钮了</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.props.isLoggedIn) &#123;</div><div class="line">      <span class="keyword">return</span> &lt;LoginScreen /&gt;;</div><div class="line">    &#125;</div><div class="line">    return (//如果已经登录过就直接显示导航界面了.</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;StatusBar</div><div class="line">          translucent=&#123;true&#125;</div><div class="line">          backgroundColor="rgba(0, 0, 0, 0.2)"</div><div class="line">          barStyle="light-content"</div><div class="line">         /&gt;</div><div class="line">        &lt;F8Navigator /&gt;</div><div class="line">        &lt;PushNotificationsController /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">var styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function select(store) &#123;//这里只需要获取是否登录的state就可以了</div><div class="line">  //select函数截取和映射组件需要的那部分state，这和数据库是一样的</div><div class="line">  //select * from 获取所有的数据, 加了where条件就会返回一部分数据</div><div class="line">  return &#123;</div><div class="line">    isLoggedIn: store.user.isLoggedIn || store.user.hasSkippedLogin,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = connect(select)(F8App);</div></pre></td></tr></table></figure>
<h2 id="connect文件的源码的一点研究-函数式编程的启蒙"><a href="#connect文件的源码的一点研究-函数式编程的启蒙" class="headerlink" title="connect文件的源码的一点研究-函数式编程的启蒙"></a>connect文件的源码的一点研究-函数式编程的启蒙</h2><p>如果你对于react-redux有了一定了解,会在connect()中找dispatch在哪里？实际上如果没有<code>mapDiaptchToProps</code>也是可以工作的,在<code>node_modules/react-redux/commponents/connect.js</code><br><code>connect.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//部分代码</span></div><div class="line"> <span class="keyword">const</span> defaultMapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123; dispatch &#125;)<span class="comment">//不传递也是可以的</span></div><div class="line"> </div><div class="line"> <span class="keyword">let</span> mapDispatch</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mapDispatchToProps === <span class="string">'function'</span>) &#123;</div><div class="line">    mapDispatch = mapDispatchToProps</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!mapDispatchToProps) &#123;<span class="comment">//如果没传dispatch函数</span></div><div class="line">  <span class="comment">//就是默认的参数,还是dispatch</span></div><div class="line">    mapDispatch = defaultMapDispatchToProps</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    mapDispatch = wrapActionCreators(mapDispatchToProps)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>入口文件和初始化配置和加载项就看这么多,下面我们直接先跳到reducer目录<br>看看数据state是怎么组织的.</p>
<h1 id="Reducer文件夹的内容"><a href="#Reducer文件夹的内容" class="headerlink" title="Reducer文件夹的内容"></a>Reducer文件夹的内容</h1><p><img src="https://ww4.sinaimg.cn/large/006tNc79ly1fed889pmbej305509z0sn.jpg" alt="图片2 reducer的结构目录"><br>除了测试文件夹和假数据文件夹和createParseReducer.js文件,其他的文件都导入到index.js文件</p>
<h2 id="F8App-reducers-index-js"><a href="#F8App-reducers-index-js" class="headerlink" title="./F8App/reducers/index.js"></a><code>./F8App/reducers/index.js</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123; combineReducers &#125; = <span class="built_in">require</span>(<span class="string">'redux'</span>);</div><div class="line"><span class="comment">//每个导入的文件都是对象,combinReducers函数负责把小对象合成一个大的单一对象.</span></div><div class="line"><span class="comment">//如果是多人开发我觉得可以每个开发者：一个组件-一组相关的actions-</span></div><div class="line"><span class="comment">//-一个单一的reducer,如果比喻的话像是一根粗绳子,实际是有小股的绳子拧在</span></div><div class="line"><span class="comment">//一起形成的,各自在出力,旁边的小股如果出问题了不影响其他部分.</span></div><div class="line"><span class="built_in">module</span>.exports = combineReducers(&#123;</div><div class="line">  <span class="attr">config</span>: <span class="built_in">require</span>(<span class="string">'./config'</span>),</div><div class="line">  <span class="attr">notifications</span>: <span class="built_in">require</span>(<span class="string">'./notifications'</span>),</div><div class="line">  <span class="attr">maps</span>: <span class="built_in">require</span>(<span class="string">'./maps'</span>),</div><div class="line">  <span class="attr">sessions</span>: <span class="built_in">require</span>(<span class="string">'./sessions'</span>),</div><div class="line">  <span class="attr">user</span>: <span class="built_in">require</span>(<span class="string">'./user'</span>),</div><div class="line">  <span class="attr">schedule</span>: <span class="built_in">require</span>(<span class="string">'./schedule'</span>),</div><div class="line">  <span class="attr">topics</span>: <span class="built_in">require</span>(<span class="string">'./topics'</span>),</div><div class="line">  <span class="attr">filter</span>: <span class="built_in">require</span>(<span class="string">'./filter'</span>),</div><div class="line">  <span class="attr">navigation</span>: <span class="built_in">require</span>(<span class="string">'./navigation'</span>),</div><div class="line">  <span class="attr">friendsSchedules</span>: <span class="built_in">require</span>(<span class="string">'./friendsSchedules'</span>),</div><div class="line">  <span class="attr">surveys</span>: <span class="built_in">require</span>(<span class="string">'./surveys'</span>),</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//现在在我眼里，index.js就是一个数据库,其中的每一个reducer就是一张、数</span></div><div class="line"><span class="comment">//据表,这么比喻我觉得还是可以接受的,有助于概念的理解</span></div></pre></td></tr></table></figure>
<ul>
<li>在数据库中数据库的名字只是一个标示,真正实现具体内容的是每张表的内容,所以要具体看看每个<code>表(state)</code>都是有哪些内容.知道了表里的内容,就可以相应的理解对于表的操作方法(action).</li>
<li><p>combinReducers的源码实际就是合并对象的,如果是简单的对象还好处理，复杂在上面的<code>每一个reducer</code>实际还可以合并<code>更小的reducer</code>,这对于大型项目的state结构有好处,但是源码不太好理解,我没搞懂,而且更大型的state的组织形式还没有看到那个源码使用,半路出家的基础薄弱,这个地方有点免为其难了,不过怎么做应该是很好操作的.以后努力熟悉这个方面的内容.这个是state的组织形式.在redux和react-redux中到处弥漫着函数式编程的思想,可惜道行不深,无法完全理解.留待日后再说O(∩_∩)O~.</p>
</li>
<li><p>单独看每个导入的reducer就涉及到了具体的逻辑了.这部分的reducer的文件名和action中的文件名是对应的.所以在看这部分的时候要两个文件一起打开看.我在mac上使用了sizeUP软件,点击两个文件以后,选left或者right就可以把两个文件视图平分到屏幕上,不用手动去拉视窗大小,非常方便.</p>
</li>
</ul>
<h1 id="action和reducer配对出现"><a href="#action和reducer配对出现" class="headerlink" title="action和reducer配对出现"></a>action和reducer配对出现</h1><h2 id="login-js-action和user-js-reducer"><a href="#login-js-action和user-js-reducer" class="headerlink" title="login.js action和user.js reducer"></a>login.js action和user.js reducer</h2><p><code>user.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="meta"> 'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> type &#123;Action&#125; <span class="keyword">from</span> <span class="string">'../actions/types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> type State = &#123;<span class="comment">//类型约束</span></div><div class="line">  isLoggedIn: boolean;</div><div class="line">  hasSkippedLogin: boolean;</div><div class="line">  sharedSchedule: ?boolean;</div><div class="line">  id: ?string;</div><div class="line">  name: ?string;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialState = &#123;<span class="comment">//初始化的state</span></div><div class="line">  isLoggedIn: <span class="literal">false</span>,</div><div class="line">  <span class="attr">hasSkippedLogin</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">sharedSchedule</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">id</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">name</span>: <span class="literal">null</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">state: State = initialState, action: Action</span>): <span class="title">State</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'LOGGED_IN'</span>) &#123;处理登录的action</div><div class="line">    <span class="comment">//获取action的负载内容</span></div><div class="line">    <span class="keyword">let</span> &#123;id, name, sharedSchedule&#125; = action.data;</div><div class="line">    <span class="keyword">if</span> (sharedSchedule === <span class="literal">undefined</span>) &#123;</div><div class="line">      sharedSchedule = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">isLoggedIn</span>: <span class="literal">true</span>, <span class="comment">//根据这个属性就可以在UI中做出相应的改变了</span></div><div class="line">      hasSkippedLogin: <span class="literal">false</span>,</div><div class="line">      sharedSchedule,</div><div class="line">      id,<span class="comment">//下面这两个参数要在到达reducer之前获得,所以在action中</span></div><div class="line">      <span class="comment">//执行远程数据的获取</span></div><div class="line">      name,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SKIPPED_LOGIN'</span>) &#123;<span class="comment">//跳过登录的action</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">isLoggedIn</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">hasSkippedLogin</span>: <span class="literal">true</span>,<span class="comment">//改变这个属性</span></div><div class="line">      sharedSchedule: <span class="literal">null</span>,</div><div class="line">      <span class="attr">id</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">name</span>: <span class="literal">null</span>,</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'LOGGED_OUT'</span>) &#123;<span class="comment">//处理登出的action</span></div><div class="line">    <span class="keyword">return</span> initialState;<span class="comment">//返回初始值就可以了</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SET_SHARING'</span>) &#123;<span class="comment">//设置分享的action</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      ...state,</div><div class="line">      <span class="attr">sharedSchedule</span>: action.enabled,<span class="comment">//组件根据这个state就//可以决定是可以分享还是不可以分享</span></div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (action.type === <span class="string">'RESET_NUXES'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> &#123;...state, <span class="attr">sharedSchedule</span>: <span class="literal">null</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> state;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = user;</div></pre></td></tr></table></figure></p>
<p>user的reducer还比较简单,最后一句<code>module.expors=user;</code>使用了javascript中函数是第一类对象的定义,user是这个<code>函数对象的引用</code><br>那么user对象中是什么呢？😁,里面是<code>闭包</code>啊! 要不然combineReducers里面调用user函数的时候state能记住改变的内容呢？要理解这些概念,对javascript的闭包的理解是不可少的. </p>
<p><code>login.js</code><br><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">use</span> <span class="title">strict</span>';</div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="keyword">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//连接parse的客户端包</span></div><div class="line"><span class="keyword">const</span> FacebookSDK = <span class="keyword">require</span>(<span class="string">'FacebookSDK'</span>);</div><div class="line"><span class="keyword">const</span> ActionSheetIOS = <span class="keyword">require</span>(<span class="string">'ActionSheetIOS'</span>);<span class="comment">//上拉组件</span></div><div class="line"><span class="keyword">const</span> &#123;Platform&#125; = <span class="keyword">require</span>(<span class="string">'react-native'</span>);<span class="comment">//</span></div><div class="line"><span class="keyword">const</span> Alert = <span class="keyword">require</span>(<span class="string">'Alert'</span>);</div><div class="line"><span class="keyword">const</span> &#123;restoreSchedule, loadFriendsSchedules&#125; = <span class="keyword">require</span>(<span class="string">'./schedule'</span>);</div><div class="line"><span class="keyword">const</span> &#123;updateInstallation&#125; = <span class="keyword">require</span>(<span class="string">'./installation'</span>);</div><div class="line"><span class="keyword">const</span> &#123;loadSurveys&#125; = <span class="keyword">require</span>(<span class="string">'./surveys'</span>);</div><div class="line"></div><div class="line">import type &#123; Action, ThunkAction &#125; from <span class="string">'./types'</span>;</div><div class="line"><span class="comment">//下面两个函数是使用ParseFacebook登录的异步操作</span></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">ParseFacebookLogin</span><span class="params">(scope)</span>: <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    Parse.FacebookUtils.logIn(scope, &#123;</div><div class="line">      success: resolve,</div><div class="line">      error: (user, error) =&gt; reject(error &amp;&amp; error.error || error),</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">queryFacebookAPI</span><span class="params">(path, ...args)</span>: <span class="title">Promise</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise((resolve, reject) =&gt; &#123;</div><div class="line">    FacebookSDK.api(path, ...args, (response) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (response &amp;&amp; !response.error) &#123;</div><div class="line">        resolve(response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(response &amp;&amp; response.error);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">_logInWithFacebook</span><span class="params">(source: ?string)</span>: <span class="title">Promise</span>&lt;<span class="title">Array</span>&lt;<span class="title">Action</span>&gt;&gt; </span>&#123;</div><div class="line">  await ParseFacebookLogin(<span class="string">'public_profile,email,user_friends'</span>);<span class="comment">//es7的异步操作</span></div><div class="line">  <span class="keyword">const</span> profile = await queryFacebookAPI(<span class="string">'/me'</span>, &#123;fields: <span class="string">'name,email'</span>&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> user = await Parse.User.currentAsync();</div><div class="line">  user.set(<span class="string">'facebook_id'</span>, profile.id);</div><div class="line">  user.set(<span class="string">'name'</span>, profile.name);</div><div class="line">  user.set(<span class="string">'email'</span>, profile.email);</div><div class="line">  await user.save();</div><div class="line">  await updateInstallation(&#123;user&#125;);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> action = &#123;<span class="comment">//配置action对象</span></div><div class="line">    type: <span class="string">'LOGGED_IN'</span>, <span class="comment">//传到reducer的actioType</span></div><div class="line">    source,</div><div class="line">    data: &#123;</div><div class="line">      id: profile.id,</div><div class="line">      name: profile.name,</div><div class="line">      sharedSchedule: user.get(<span class="string">'sharedSchedule'</span>),</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> Promise.all([</div><div class="line">    Promise.resolve(action),</div><div class="line">    restoreSchedule(),</div><div class="line">  ]);</div><div class="line">&#125;</div><div class="line"><span class="comment">//这一步就有点绕了,由于是远程操作,需要异步处理,等待结果以后才能dispatch</span></div><div class="line"><span class="comment">//获取的结果,</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logInWithFacebook</span><span class="params">(source: ?string)</span>: <span class="title">ThunkAction</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (dispatch) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> login = _logInWithFacebook(source);<span class="comment">//返回的就是上面的const action</span></div><div class="line">    </div><div class="line">    <span class="comment">// Loading friends schedules shouldn't block the login process</span></div><div class="line">    login.then(</div><div class="line">      (result) =&gt; &#123;</div><div class="line">        dispatch(result);</div><div class="line">        dispatch(loadFriendsSchedules());</div><div class="line">        dispatch(loadSurveys());</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> login;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">skipLogin</span><span class="params">()</span>: <span class="title">Action</span> </span>&#123;<span class="comment">//跳过登录的action</span></div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    type: <span class="string">'SKIPPED_LOGIN'</span>,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOut</span><span class="params">()</span>: <span class="title">ThunkAction</span> </span>&#123;<span class="comment">//登出也是异步操作,等待两个远程数据的相应结果</span></div><div class="line">  <span class="keyword">return</span> (dispatch) =&gt; &#123;</div><div class="line">    Parse.User.logOut();</div><div class="line">    FacebookSDK.logout();</div><div class="line">    updateInstallation(&#123;user: <span class="keyword">null</span>, channels: []&#125;);</div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> Make sure reducers clear their state</span></div><div class="line">    <span class="keyword">return</span> dispatch(&#123;</div><div class="line">      type: <span class="string">'LOGGED_OUT'</span>,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logOutWithPrompt</span><span class="params">()</span>: <span class="title">ThunkAction</span> </span>&#123;<span class="comment">//对话框退出,也是异步操作</span></div><div class="line">  <span class="comment">//确认以后再dispatch一个action</span></div><div class="line">  <span class="keyword">return</span> (dispatch, getState) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> name = getState().user.name || <span class="string">'there'</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</div><div class="line">      ActionSheetIOS.showActionSheetWithOptions(</div><div class="line">        &#123;</div><div class="line">          title: `Hi, $&#123;name&#125;`,</div><div class="line">          options: [<span class="string">'Log out'</span>, <span class="string">'Cancel'</span>],</div><div class="line">          destructiveButtonIndex: <span class="number">0</span>,</div><div class="line">          cancelButtonIndex: <span class="number">1</span>,</div><div class="line">        &#125;,</div><div class="line">        (buttonIndex) =&gt; &#123;</div><div class="line">          <span class="keyword">if</span> (buttonIndex === <span class="number">0</span>) &#123;<span class="comment">//根据逻辑判dispatch退出操作</span></div><div class="line">            dispatch(logOut());</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      );</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      Alert.alert(<span class="comment">//andoid弹出对话框</span></div><div class="line">        `Hi, $&#123;name&#125;`,</div><div class="line">        <span class="string">'Log out from F8?'</span>,</div><div class="line">        [</div><div class="line">          &#123; text: <span class="string">'Cancel'</span> &#125;,</div><div class="line">          &#123; text: <span class="string">'Log out'</span>, onPress: () =&gt; dispatch(logOut()) &#125;,</div><div class="line">        ]</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//初看代码logInWithFacebook这个action是没有在ationType中的,但是其实</span></div><div class="line"><span class="comment">//这个函数有返回了LoginedIn对象,这一点有仔细看看</span></div><div class="line">module.exports = &#123;logInWithFacebook, skipLogin, logOut, logOutWithPrompt&#125;;</div></pre></td></tr></table></figure></p>
<p>登录的具体逻辑和实现就是这些.UI组件要怎么做呢？好了我这里在举一个生活中的例子来说明.这个思想从我的电灯模型开始演化成为了自动贩卖机模型或者ATM机模型了. 我们姑且称为ATM机模型好了.回想你去ATM取钱,输入密码,输入钱的数目.你是大款一次想取十万块,点击按键或者触摸屏输入十万块,可惜ATM的钱箱没有装那么多,告诉你ATM机没有这么多钱，这个消息反应的ATM钱箱的<code>state</code>是没有十万.于是你按键或者触摸操作输入1000块,于是乎ATM机器给你吐出了1000块.你的账户的余额<code>state</code>减掉了1000块.这个过程居然和counter的过程是一样的.那么为什么要介绍这个模型呢？我们按键或者触摸操作,并没有在屏幕上实现具体的操作,钞票的制作,钱箱的打开,钞票的数量计算都是有机器来完成的.我们点击的屏幕和按键其实就是UI用户界面,界面上的按键其实只是实际操作的代理.javacript的函数可以<code>传引用赋值</code>,我们就可以使用函数名字来调用实际的函数具体操作.尽管屏幕上没有钱箱,但是我们却可以取到钱.从这个例子看,redux是多么的简单.但是琢磨出这个原理也是花了很长时间的.这实际就是中介者模式.<br>哈哈那个钱箱就是一个<code>闭包</code>,你看看是不是？</p>
<h2 id="Actions文件夹中的工具文件parse-js"><a href="#Actions文件夹中的工具文件parse-js" class="headerlink" title="Actions文件夹中的工具文件parse.js"></a>Actions文件夹中的工具文件parse.js</h2><p><code>parse.js</code></p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"></div><div class="line"><span class="javascript"><span class="meta">'use strict'</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="built_in">require</span>(<span class="string">'parse/react-native'</span>);<span class="comment">//parseServer的客户端</span></div><div class="line"><span class="keyword">const</span> logError = <span class="built_in">require</span>(<span class="string">'logError'</span>);</div><div class="line"><span class="keyword">const</span> InteractionManager = <span class="built_in">require</span>(<span class="string">'InteractionManager'</span>);</div><div class="line"></div><div class="line"><span class="keyword">import</span> type &#123; ThunkAction &#125; <span class="keyword">from</span> <span class="string">'./types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Maps = Parse.Object.extend(<span class="string">'Maps'</span>);<span class="comment">//ParseServer的对象</span></div><div class="line"><span class="comment">//可以参看ireading app feedback模块里的反馈意见的远程存储,使用的是leancloud</span></div><div class="line"><span class="comment">//但是API是完全一样的.</span></div><div class="line"><span class="keyword">const</span> Notification = Parse.Object.extend(<span class="string">'Notification'</span>);</div><div class="line"><span class="comment">//总的ParseQuery查询函数,根据type和查询筛选结果动态dispatch action</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadParseQuery</span>(<span class="params">type: string, query: Parse.Query</span>): <span class="title">ThunkAction</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> query.find(&#123;</div><div class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// We don't want data loading to interfere with smooth animations</span></div><div class="line">        InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">          <span class="comment">// Flow can't guarantee &#123;type, list&#125; is a valid action</span></div><div class="line">          dispatch((&#123;type, list&#125;: any));</div><div class="line">        &#125;);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>: logError,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">//load就是tabbar默认tab加载的会议日程state</span></div><div class="line">  loadSessions: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//加载会议日程,这里不是浏览器的session，映射</span></div><div class="line">    loadParseQuery(</div><div class="line">      <span class="string">'LOADED_SESSIONS'</span>,</div><div class="line">      <span class="keyword">new</span> Parse.Query(<span class="string">'Agenda'</span>)</div><div class="line">        .include(<span class="string">'speakers'</span>)</div><div class="line">        .ascending(<span class="string">'startTime'</span>)</div><div class="line">    ),</div><div class="line"></div><div class="line">  <span class="attr">loadMaps</span>: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//映射</span></div><div class="line">    loadParseQuery(<span class="string">'LOADED_MAPS'</span>, <span class="keyword">new</span> Parse.Query(Maps)),</div><div class="line"></div><div class="line">  <span class="attr">loadNotifications</span>: (): <span class="function"><span class="params">ThunkAction</span> =&gt;</span><span class="comment">//映射对象</span></div><div class="line">    loadParseQuery(<span class="string">'LOADED_NOTIFICATIONS'</span>, <span class="keyword">new</span> Parse.Query(Notification)),</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="actions-config-js"><a href="#actions-config-js" class="headerlink" title="actions/config.js"></a>actions/config.js</h2><p><code>config.js</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">use</span> <span class="title">strict</span>';</div><div class="line"></div><div class="line"><span class="keyword">const</span> Parse = <span class="keyword">require</span>(<span class="string">'parse/react-native'</span>);</div><div class="line"><span class="keyword">const</span> InteractionManager = <span class="keyword">require</span>(<span class="string">'InteractionManager'</span>);</div><div class="line"></div><div class="line">import type &#123; Action &#125; from <span class="string">'./types'</span>; <span class="comment">//获得所有的type</span></div><div class="line"></div><div class="line"><span class="comment">//获取配置文件的异步操作</span></div><div class="line">async <span class="function"><span class="keyword">function</span> <span class="title">loadConfig</span><span class="params">()</span>: <span class="title">Promise</span>&lt;<span class="title">Action</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">const</span> config = await Parse.Config.get();<span class="comment">// 从parse服务器获取配置数据</span></div><div class="line">  await InteractionManager.runAfterInteractions();</div><div class="line">  <span class="keyword">return</span> &#123;<span class="comment">//操作逻辑在这里返回config数据然后拷贝到state</span></div><div class="line">    type: <span class="string">'LOADED_CONFIG'</span>,</div><div class="line">    config,<span class="comment">//配置负载或者载荷</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = &#123;loadConfig&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入口和配置文件&quot;&gt;&lt;a href=&quot;#入口和配置文件&quot; class=&quot;headerlink&quot; title=&quot;入口和配置文件&quot;&gt;&lt;/a&gt;入口和配置文件&lt;/h1&gt;&lt;h2 id=&quot;F8APP-js-setup-js文件&quot;&gt;&lt;a href=&quot;#F8APP-js-setup
    
    </summary>
    
      <category term="F8App源码阅读" scheme="https://phpsmarter.github.com/categories/F8App%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="React-native" scheme="https://phpsmarter.github.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>乱花渐欲迷人眼,返璞归真F8(1)</title>
    <link href="https://phpsmarter.github.com/2017/04/05/%E4%B9%B1%E8%8A%B1%E6%B8%90%E6%AC%B2%E8%BF%B7%E4%BA%BA%E7%9C%BC-%E8%BF%94%E7%92%9E%E5%BD%92%E7%9C%9F-1/"/>
    <id>https://phpsmarter.github.com/2017/04/05/乱花渐欲迷人眼-返璞归真-1/</id>
    <published>2017-04-05T10:00:23.000Z</published>
    <updated>2017-04-05T18:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>去年写了几篇f8app的代码阅读,基本是站在UI组件的角度来的,随着学习的深入,对其中的代码有了更深的体会,现在有很多开源的RN项目可以供参考,但是有一些都存在某些问题.细节考虑的不周到,学习的意义打了折扣.F8APP是facebook的亲儿子，所以开发者的水平是很高的,前面阅读的时候觉得怎么写的很难懂,甚至还有些地方对Redux的实现都感觉不太标准,这两天在回头看的时候,不得不佩服人家的开发水平.代码里对于组件的实现,Redux的渗透,多数据源的接入,代码组织方面都是独居匠心的.我自从重新阅读了以后,感觉写代码当如此啊. </p>
</blockquote>
<p>但是到了现在的这个觉悟并不是一蹴而就的.经过一段时间的学习,学习工具箱里就有一些工具了.</p>
<ul>
<li>函数式编程的思想,javascript里的函数是一等对象,其实意思是函数和对象在javascript中都是<code>引用赋值的</code>,<strong>这一点非常的非常的关键</strong>.这并非危言耸听,一旦你在读代码中有了这个觉悟的话,javascript的功力会大增的.我们随时可以把一个函数映射到一个变量上,这就是引用赋值,一旦这样做以后,函数可以使用这个变量在代码中传来传去,灵活性大增.有没有思考过React/Redux中组件dispatch一个action到底发生了什么?bindActionCreator是怎么实现的？这还没完,继续挖掘函数编程是怎么在f8里实现的</li>
<li>模式设计的思想：中介者模式,发布订阅者模式,等等模式,在这面也很好的实现了。要有一点模式设计的知识</li>
<li>React-native跨平台开发的代码复用问题,功能,逻辑和表现形式的结合思考。先逻辑后表现。</li>
<li>临机应变,刚开始看f8app的代码的时候看不下去,尤其是在对redux有了初步的了解,产生盲目崇拜以后,在React中必须要找到几个文件夹在才能是根正苗红的Redux应用.于是在里面找,这里面更本就没有container文件夹么？怎么办？其实在container文件中也只是用connect对象注入了组件是组件订阅了需要的props，具有了dispatch方法.仅此而已.所以在f8app中直接在UI组件中使用了connect对象.这样对于编码实际更好操作，更直观.另外带来的好处是,组价其实不一定非要用redux来处理,可以使用其他的框架来处理.info这个模块就没有采用redux的框架.要从功能上灵活处理。能达到随机应变要对功能的实现有深刻的认识。</li>
<li>对于state的思考,后面如果要继续提高RN的编程能力,要不断的思考state的问题.目前看到的两个大型程序的state，一个是f8的，一个是cnode的state.<br>我前面写过文章把state看成是内存的数据库,围绕着state做增删改查工作，是不是这个意思呢？f8中的state实现是一颗倒立的树,为什么是树呢？这是相对于网状结构来的,state中是没有之间的连接关系的.数据以节点来组织.看到f8app中combineReducer中的映射的时候，那感觉真爽啊。编程真有意思.回头看代码在解释.</li>
<li>parse-server和graghql的问题,</li>
<li><p>观察的视点选择问题,如果会你看过<a href="https://medium.com/@rajaraodv/step-by-step-guide-to-building-react-redux-apps-using-mocks-48ca0f47f9a" target="_blank" rel="external">这篇文章</a>,<a href="https://wenku.baidu.com/view/881a48f8aaea998fcd220ea5.html?from=search" target="_blank" rel="external">中文翻译版</a>的话,这篇文章实际是从UI组件的角度来找视点的,对于初学者俩说,这篇文章的确是很好的,但是对于F8app这样的大型app,从视图就有点喧宾夺主了.在f8app中state和Actions的复杂程度更高,从组件上面去学习就有点麻烦,尤其是这里面有几个地方的组件组合真的是太厉害了，看完组件的组合关系就已经没耐心了.从action和state开始读似乎是可行的.当然因人而异.我提出这个观点至少是说明我思考过这个问题.</p>
</li>
<li><p>贪心原理 f8APP中已经包含和了很多组件和中间件了,多学几遍就可以在其他地方用了.太好了.</p>
</li>
</ul>
<blockquote>
<p>时间太晚了，有些地方白天想明白了,现在又忘了.先写这么多.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;去年写了几篇f8app的代码阅读,基本是站在UI组件的角度来的,随着学习的深入,对其中的代码有了更深的体会,现在有很多开源的RN项目可以供参考,但是有一些都存在某些问题.细节考虑的不周到,学习的意义打了折扣.F8APP是facebook的亲儿子，所
    
    </summary>
    
      <category term="F8App源码阅读" scheme="https://phpsmarter.github.com/categories/F8App%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="React-native" scheme="https://phpsmarter.github.com/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|redux undo/redo reducer增强组件</title>
    <link href="https://phpsmarter.github.com/2017/04/04/%E7%BF%BB%E8%AF%91-redux-undo-redo-reucer%E5%A2%9E%E5%BC%BA%E7%BB%84%E4%BB%B6/"/>
    <id>https://phpsmarter.github.com/2017/04/04/翻译-redux-undo-redo-reucer增强组件/</id>
    <published>2017-04-04T13:18:28.000Z</published>
    <updated>2017-04-04T15:36:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装了一下,内部实现细节仍然没有变.只需要把reducer用这个增强组件包装一下就可以用了.</p>
<hr>
</blockquote>
<h1 id="redux-undo-redo"><a href="#redux-undo-redo" class="headerlink" title="redux undo/redo"></a>redux undo/redo</h1><p><img src="https://ww1.sinaimg.cn/large/006tNc79ly1feb2dpdu5xg30eo01k0t1.gif" alt=""></p>
<p>提示:你可以使用<a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external">redux-undo-boilerplate</a>来开始项目.</p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p><code>npm install --save redux-undo</code></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div><div class="line">undoable(reducer)</div><div class="line">undoable(reducer, config)</div></pre></td></tr></table></figure>
<h2 id="让你的reducers变得可以重做"><a href="#让你的reducers变得可以重做" class="headerlink" title="让你的reducers变得可以重做"></a>让你的reducers变得可以重做</h2><p><code>redux-undo</code>是一个reducer增强组件,它提供了<code>undoable</code>函数,这个函数接收已经存在的reducer和配置对象,使用undo函数增强已经存在的reducer.</p>
<p><strong>注意：</strong>如果在<code>state.counter</code>之前接入,你必须要在包装<code>reducer</code>之后接入<code>state.coutner.present</code>.</p>
<p>首先导入<code>redux-undo</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Redux utility functions </span></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="comment">// redux-undo higher-order reducer </span></div><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>接着,添加<code>undoable</code>到你的reducer<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">combineReducers</span>(&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="built_in">undoable</span>(counter)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><code>配置项</code>想这样传递<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">combineReducers</span>(&#123;</div><div class="line">  <span class="attribute">counter</span>: <span class="built_in">undoable</span>(counter, &#123;</div><div class="line">    limit: 10 // set a limit for the history </div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="历史API"><a href="#历史API" class="headerlink" title="历史API"></a>历史API</h2><p>使用reducer包装你的reducer想这样<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  past: [...pastStatesHere...],</div><div class="line">  present: <span class="meta">&#123;...currentStateHere...&#125;</span>,</div><div class="line">  future: [...futureStatesHere...]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在你可以使用<code>state.present</code>获取当前的state<br>获取所有过去的state使用<code>state.past</code>.</p>
<h2 id="Undo-Redo-Actions"><a href="#Undo-Redo-Actions" class="headerlink" title="Undo/Redo Actions"></a>Undo/Redo Actions</h2><p>首先导入undo/redo action creators<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>然后就可以使用<code>store.dispatch()</code>和undo/redo action creators来执行undo/redo操作.<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">store.dispatch<span class="comment">(ActionCreators.undo()</span>) <span class="comment">// undo the last action </span></div><div class="line">store.dispatch<span class="comment">(ActionCreators.redo()</span>) <span class="comment">// redo the last action </span></div><div class="line"> </div><div class="line">store.dispatch<span class="comment">(ActionCreators.jumpToPast(index)</span>) <span class="comment">// jump to requested index in the past[] array </span></div><div class="line">store.dispatch<span class="comment">(ActionCreators.jumpToFuture(index)</span>) <span class="comment">// jump to requested index in the future[] array</span></div></pre></td></tr></table></figure></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置对象传递给<code>undoable()</code>(值是默认值)</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  limi<span class="variable">t:</span> false, // <span class="keyword">set</span> <span class="keyword">to</span> <span class="keyword">a</span> <span class="keyword">number</span> <span class="keyword">to</span> turn <span class="keyword">on</span> <span class="keyword">a</span> limit <span class="keyword">for</span> the <span class="keyword">history</span> </div><div class="line"> </div><div class="line">  <span class="built_in">filter</span>: () =&gt; true, // see `Filtering Actions` section </div><div class="line"> </div><div class="line">  undoType: ActionTypes.UNDO, // define <span class="keyword">a</span> custom action <span class="built_in">type</span> <span class="keyword">for</span> this <span class="keyword">undo</span> action </div><div class="line">  redoType: ActionTypes.REDO, // define <span class="keyword">a</span> custom action <span class="built_in">type</span> <span class="keyword">for</span> this <span class="keyword">redo</span> action </div><div class="line"> </div><div class="line">  jumpToPastType: ActionTypes.JUMP_TO_PAST, // define custom action <span class="built_in">type</span> <span class="keyword">for</span> this jumpToPast action </div><div class="line">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, // define custom action <span class="built_in">type</span> <span class="keyword">for</span> this jumpToFuture action </div><div class="line"> </div><div class="line">  initialState: undefined, // initial state (<span class="keyword">e</span>.g. <span class="keyword">for</span> loading) </div><div class="line">  initType<span class="variable">s:</span> [<span class="string">'@@redux/INIT'</span>, <span class="string">'@@INIT'</span>] // <span class="keyword">history</span> will <span class="keyword">be</span> (re)<span class="keyword">set</span> upon init action <span class="built_in">type</span> </div><div class="line">  initialHistory: &#123; // initial <span class="keyword">history</span> (<span class="keyword">e</span>.g. <span class="keyword">for</span> loading) </div><div class="line">    pas<span class="variable">t:</span> [],</div><div class="line">    presen<span class="variable">t:</span> config.initialState,</div><div class="line">    future: []</div><div class="line">  &#125;,</div><div class="line"> </div><div class="line">  debu<span class="variable">g:</span> false, // <span class="keyword">set</span> <span class="keyword">to</span> `true` <span class="keyword">to</span> turn <span class="keyword">on</span> debugging </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="过滤Actions"><a href="#过滤Actions" class="headerlink" title="过滤Actions"></a>过滤Actions</h2><p>如果你不想包含每一步的action,可以传递一个函数到<code>undoable</code><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, <span class="keyword">function</span> <span class="title">filterActions</span>(action, currentState, previousState) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">action.type</span> === SOME_ACTION; // only add to history <span class="keyword">if</span> action <span class="keyword">is</span> SOME_ACTION只有some_action的action才能记录 </div><div class="line">&#125;)</div><div class="line"> </div><div class="line">// <span class="keyword">or</span> you could <span class="keyword">do</span>... </div><div class="line"> </div><div class="line">undoable(reducer, <span class="keyword">function</span> <span class="title">filterState</span>(action, currentState, previousState) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="type">currentState</span> !== previousState; // only add to history <span class="keyword">if</span> state changed只有state变化的才能记录重做 </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>或者你可以使用<code>distinctState</code>,<code>includeAction</code>,<code>excludeAction</code>助手函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123; distinctState, includeAction, excludeAction &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure></p>
<p>现在你可以使用助手函数了,相当简单<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: includeAction(SOME_ACTION)</span></span> &#125;)</div><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: excludeAction(SOME_ACTION)</span></span> &#125;)</div><div class="line"> </div><div class="line"><span class="comment">// or you could do... </span></div><div class="line"> </div><div class="line"><span class="function"><span class="title">undoable</span><span class="params">(reducer, &#123; filter: distinctState()</span></span> &#125;)</div></pre></td></tr></table></figure></p>
<p>甚至还支持数组<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">undoable</span>(<span class="selector-tag">reducer</span>, &#123; <span class="attribute">filter</span>: <span class="built_in">includeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class="line"><span class="selector-tag">undoable</span>(<span class="selector-tag">reducer</span>, &#123; <span class="attribute">filter</span>: <span class="built_in">excludeAction</span>([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="有什么魔法？怎么工作的"><a href="#有什么魔法？怎么工作的" class="headerlink" title="有什么魔法？怎么工作的"></a>有什么魔法？怎么工作的</h2><p>Redux文档中的<a href="https://rackt.github.io/redux/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="external"><code>实现Undo历史的方案</code></a>解释了redux-undo工作的具体细节.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Redux的文档中提供一个可以做undo/redo的解决办法,实际是有previous,current,prew的对象,围绕这数据的压入和弹出来实现操作步骤的记忆,结合persist就可以实现更强大的记忆功能.今天的这个增强组件实际把这个功能给包装
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Immutable Data Structures and JavaScript</title>
    <link href="https://phpsmarter.github.com/2017/04/04/%E7%BF%BB%E8%AF%91-Immutable-Data-Structures-and-JavaScript/"/>
    <id>https://phpsmarter.github.com/2017/04/04/翻译-Immutable-Data-Structures-and-JavaScript/</id>
    <published>2017-04-04T12:28:01.000Z</published>
    <updated>2017-04-04T05:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>不久以前我简单的谈了谈我的想法,把最新的blog重写一下,发誓要涉及一些学到的有深度的东西.现在我要谈谈javascript中的immutable数据结构,尤其是两个库<a href="https://github.com/facebook/immutable-js" target="_blank" rel="external">immutable.js</a>和<a href="https://github.com/rtfeldman/seamless-immutable" target="_blank" rel="external">seamliess-immutable</a>.还有其他的库,但是选择标标准是真正的持久数据结构或者拷贝javascript对象的概念区别.比较这两个重点,不要管到底是选择什么库.我还要谈一点<a href="https://github.com/cognitect/transit-js" target="_blank" rel="external">transit-js</a>，它在做数据的序列化方面很好.</p>
<p>有关Redux的应用谈的少一点.大体是谈谈immutable数据结构的使用,但是也提供一些在Redux中使用的特殊点.在Redux中,你有单个的state对象,并且不复制他,有很多方法可以达到这个目的,每一个都有所权衡.我会在在下面探索一下.</p>
<p>在Redux中有一件事是要考虑怎么聚合reducers来形成单个的app state原子.Redux默认提供的方式(combineReducers)假定你把多个值合并成一个单一的javascript对象.如果你想把他们合并成一个Immutable.js对象,例如你可能需要编写你自己的<em>combinReducers</em>来达到这个目的.这一点可能会非常有必要如果你需要序列化你的app state,并且你设定state整个都是由Immutable.js对象组成的.</p>
<p>大多数这种应用一般都使用immutable对象.有时候有点尴尬,因为你要和默认的语法斗争,这感觉就像你在用types玩杂耍.然而,根据你的app和你的配置,你可以从中跳出来.</p>
<p>目前,有一个为原生Javascript应用添加immutable数据结构的<a href="https://github.com/sebmarkbage/ecmascript-immutable-data-structures" target="_blank" rel="external">建议</a></p>
<h2 id="Immutable-js"><a href="#Immutable-js" class="headerlink" title="Immutable.js"></a>Immutable.js</h2><p>Immutable.js来自Facebook,它是实现immutable数据结构最流行的方法.规模很庞大,使用类似<code>tries</code>的高级方法实现结构化共享,实现整个数据的持久化.所有的更新都返回新值,但是内部结构是共享的,这一点大大的降低了内存的使用(GC thrashing).这就意味着如果你应用一个有1000个元素的矢量,他不会实际创建一个有1001个元素的新矢量.大多数情况下,内部仅仅有一些小的对象被分配.</p>
<p>数据结构共享的先进性,很大一部分是由Okasaki的开创性工作启发的,</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不久以前我简单的谈了谈我的想法,把最新的blog重写一下,发誓要涉及一些学到的有深度的东西.现在我要谈谈javascript中的immutable数据结构,尤其是两个库&lt;a href=&quot;https://github.com/facebook/immutable-js&quot; ta
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="javascript" scheme="https://phpsmarter.github.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Redux undo/redo</title>
    <link href="https://phpsmarter.github.com/2017/04/04/Redux-undo-redo/"/>
    <id>https://phpsmarter.github.com/2017/04/04/Redux-undo-redo/</id>
    <published>2017-04-04T00:18:11.000Z</published>
    <updated>2017-04-03T16:20:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-undo-redo"><a href="#redux-undo-redo" class="headerlink" title="redux undo/redo"></a>redux undo/redo</h1><blockquote>
<p>这是把redux undo的堆栈操作有包装了一下</p>
</blockquote>
<p><a href="https://www.npmjs.com/package/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/npm/v/redux-undo.svg?style=flat-square" alt="NPM version (&gt;=0.4)"></a> <a href="https://www.npmjs.com/package/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/npm/dm/redux-undo.svg?style=flat-square" alt="NPM Downloads"></a> <a href="https://coveralls.io/r/omnidan/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/coveralls/omnidan/redux-undo.svg?style=flat-square" alt="Coverage Status"></a> <a href="https://david-dm.org/omnidan/redux-undo" target="_blank" rel="external"><img src="https://img.shields.io/david/omnidan/redux-undo.svg?style=flat-square" alt="Dependencies"></a> <a href="http://standardjs.com/" target="_blank" rel="external"><img src="https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square" alt="js-standard-style"></a> <a href="https://raw.githubusercontent.com/omnidan/redux-undo/master/LICENSE.md" target="_blank" rel="external"><img src="https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square" alt="GitHub license"></a></p>
<p><em>simple undo/redo functionality for redux state containers</em></p>
<p><a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external"><img src="https://i.imgur.com/M2KR4uo.gif" alt="https://i.imgur.com/M2KR4uo.gif"></a></p>
<p><strong>Protip:</strong> Check out the <a href="https://github.com/omnidan/redux-undo/tree/master/examples/todos-with-undo" target="_blank" rel="external">todos-with-undo example</a> or the <a href="https://github.com/omnidan/redux-undo-boilerplate" target="_blank" rel="external">redux-undo-boilerplate</a> to quickly get started with <code>redux-undo</code>.</p>
<p><strong>Switching from 0.x to 1.0 (beta):</strong> Make sure to update your programs to the <a href="#history-api">latest History API</a>.</p>
<hr>
<p><strong>This README is about the new 1.0-beta branch of redux-undo, if you are using<br>or plan on using 0.6, check out <a href="https://github.com/omnidan/redux-undo/tree/0.6" target="_blank" rel="external">the <code>0.6</code> branch</a></strong></p>
<hr>
<h2 id="Note-on-1-0-0-beta7"><a href="#Note-on-1-0-0-beta7" class="headerlink" title="Note on 1.0.0-beta7"></a>Note on 1.0.0-beta7</h2><p>If you use Redux Undo in CommonJS environment, <strong>don’t forget to add <code>.default</code> to your import</strong>.</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="deletion">- var ReduxUndo = require('redux-undo')</span></div><div class="line"><span class="addition">+ var ReduxUndo = require('redux-undo').default</span></div></pre></td></tr></table></figure>
<p>If your environment support es modules just go by:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ReduxUndo <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>We are also supporting UMD build:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ReduxUndo = <span class="built_in">window</span>.ReduxUndo.default;</div></pre></td></tr></table></figure>
<p><strong>once again <code>.default</code> is required.</strong></p>
<h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install --save redux-undo@beta</div></pre></td></tr></table></figure>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div><div class="line">undoable(reducer)</div><div class="line">undoable(reducer, config)</div></pre></td></tr></table></figure>
<h2 id="Making-your-reducers-undoable"><a href="#Making-your-reducers-undoable" class="headerlink" title="Making your reducers undoable"></a>Making your reducers undoable</h2><p><code>redux-undo</code> is a reducer enhancer (higher-order reducer), it provides the <code>undoable</code> function, which<br>takes an existing reducer and a configuration object and enhances your existing<br>reducer with undo functionality.</p>
<p><strong>Note:</strong> If you were accessing <code>state.counter</code> before, you have to access<br><code>state.counter.present</code> after wrapping your reducer with <code>undoable</code>.</p>
<p>To install, firstly import <code>redux-undo</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Redux utility functions</span></div><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="comment">// redux-undo higher-order reducer</span></div><div class="line"><span class="keyword">import</span> undoable <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Then, add <code>undoable</code> to your reducer(s) like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">combineReducers(&#123;</div><div class="line">  <span class="attr">counter</span>: undoable(counter)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>A <a href="#configuration">configuration</a> can be passed like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">combineReducers(&#123;</div><div class="line">  <span class="attr">counter</span>: undoable(counter, &#123;</div><div class="line">    <span class="attr">limit</span>: <span class="number">10</span> <span class="comment">// set a limit for the history</span></div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><p>Wrapping your reducer with <code>undoable</code> makes the state look like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">past</span>: [...pastStatesHere...],</div><div class="line">  <span class="attr">present</span>: &#123;...currentStateHere...&#125;,</div><div class="line">  <span class="attr">future</span>: [...futureStatesHere...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Now you can get your current state like this: <code>state.present</code></p>
<p>And you can access all past states (e.g. to show a history) like this: <code>state.past</code></p>
<h2 id="Undo-Redo-Actions"><a href="#Undo-Redo-Actions" class="headerlink" title="Undo/Redo Actions"></a>Undo/Redo Actions</h2><p>Firstly, import the undo/redo action creators:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Then, you can use <code>store.dispatch()</code> and the undo/redo action creators to<br>perform undo/redo operations on your state:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">store.dispatch(ActionCreators.undo()) <span class="comment">// undo the last action</span></div><div class="line">store.dispatch(ActionCreators.redo()) <span class="comment">// redo the last action</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.jump(<span class="number">-2</span>)) <span class="comment">// undo 2 steps</span></div><div class="line">store.dispatch(ActionCreators.jump(<span class="number">5</span>)) <span class="comment">// redo 5 steps</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.jumpToPast(index)) <span class="comment">// jump to requested index in the past[] array</span></div><div class="line">store.dispatch(ActionCreators.jumpToFuture(index)) <span class="comment">// jump to requested index in the future[] array</span></div><div class="line"></div><div class="line">store.dispatch(ActionCreators.clearHistory()) <span class="comment">// [beta only] Remove all items from past[] and future[] arrays</span></div></pre></td></tr></table></figure>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>A configuration object can be passed to <code>undoable()</code> like this (values shown<br>are default values):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">limit</span>: <span class="literal">false</span>, <span class="comment">// set to a number to turn on a limit for the history</span></div><div class="line"></div><div class="line">  filter: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">true</span>, <span class="comment">// see `Filtering Actions` section</span></div><div class="line"></div><div class="line">  undoType: ActionTypes.UNDO, <span class="comment">// define a custom action type for this undo action</span></div><div class="line">  redoType: ActionTypes.REDO, <span class="comment">// define a custom action type for this redo action</span></div><div class="line"></div><div class="line">  jumpType: ActionTypes.JUMP, <span class="comment">// define custom action type for this jump action</span></div><div class="line"></div><div class="line">  jumpToPastType: ActionTypes.JUMP_TO_PAST, <span class="comment">// define custom action type for this jumpToPast action</span></div><div class="line">  jumpToFutureType: ActionTypes.JUMP_TO_FUTURE, <span class="comment">// define custom action type for this jumpToFuture action</span></div><div class="line"></div><div class="line">  clearHistoryType: ActionTypes.CLEAR_HISTORY, <span class="comment">// [beta only] define custom action type for this clearHistory action</span></div><div class="line">  <span class="comment">// you can also pass an array of strings to define several action types that would clear the history</span></div><div class="line">  <span class="comment">// beware: those actions will not be passed down to the wrapped reducers</span></div><div class="line"></div><div class="line">  initTypes: [<span class="string">'@@redux-undo/INIT'</span>] <span class="comment">// history will be (re)set upon init action type</span></div><div class="line">  <span class="comment">// beware: those actions will not be passed down to the wrapped reducers</span></div><div class="line"></div><div class="line">  debug: <span class="literal">false</span>, <span class="comment">// set to `true` to turn on debugging</span></div><div class="line"></div><div class="line">  neverSkipReducer: <span class="literal">false</span>, <span class="comment">// prevent undoable from skipping the reducer on undo/redo and clearHistoryType actions</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> If you want to use just the <code>initTypes</code> functionality, but not import<br>the whole redux-undo library, use <a href="https://github.com/omnidan/redux-recycle" target="_blank" rel="external">redux-recycle</a>!</p>
<h4 id="Initial-State-and-History"><a href="#Initial-State-and-History" class="headerlink" title="Initial State and History"></a>Initial State and History</h4><p>You can use your redux store to set an initial history for your undoable reducers:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> initialHistory = &#123;</div><div class="line">  <span class="attr">past</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">  <span class="attr">present</span>: <span class="number">4</span>,</div><div class="line">  <span class="attr">future</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(undoable(counter), initialHistory);</div></pre></td></tr></table></figure>
<p>Or just set the current state like you’re used to with Redux. Redux-undo will create the history for you:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(undoable(counter), &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">// will make the state look like this:</span></div><div class="line">&#123;</div><div class="line">  <span class="attr">past</span>: [],</div><div class="line">  <span class="attr">present</span>: &#123;<span class="attr">foo</span>: <span class="string">'bar'</span>&#125;,</div><div class="line">  <span class="attr">future</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Filtering-Actions"><a href="#Filtering-Actions" class="headerlink" title="Filtering Actions"></a>Filtering Actions</h3><p>If you don’t want to include every action in the undo/redo history, you can<br>add a <code>filter</code> function to <code>undoable</code>. <code>redux-undo</code> provides you with the<br><code>includeAction</code> and <code>excludeAction</code> helpers for basic filtering.</p>
<p>They should be imported like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123; includeAction, excludeAction &#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span>;</div></pre></td></tr></table></figure>
<p>Now you can use the helper functions:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: includeAction(SOME_ACTION) &#125;)</div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: excludeAction(SOME_ACTION) &#125;)</div><div class="line"></div><div class="line"><span class="comment">// they even support Arrays:</span></div><div class="line"></div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: includeAction([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div><div class="line">undoable(reducer, &#123; <span class="attr">filter</span>: excludeAction([SOME_ACTION, SOME_OTHER_ACTION]) &#125;)</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> Since <a href="https://github.com/omnidan/redux-undo/releases/tag/beta4" target="_blank" rel="external"><code>beta4</code></a>,<br>          only actions resulting in a new state are recorded. This means the<br>          (now deprecated) <code>distinctState()</code> filter is auto-applied.</p>
<h4 id="Custom-filters"><a href="#Custom-filters" class="headerlink" title="Custom filters"></a>Custom filters</h4><p>If you want to create your own filter, pass in a function with the signature<br><code>(action, currentState, previousHistory)</code>. For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: <span class="function"><span class="keyword">function</span> <span class="title">filterActions</span>(<span class="params">action, currentState, previousHistory</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> action.type === SOME_ACTION; <span class="comment">// only add to history if action is SOME_ACTION</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// The entire `history` state is available to your filter, so you can make</span></div><div class="line"><span class="comment">// decisions based on past or future states:</span></div><div class="line"></div><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: <span class="function"><span class="keyword">function</span> <span class="title">filterState</span>(<span class="params">action, currentState, previousHistory</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> &#123; past, present, future &#125; = previousHistory;</div><div class="line">    <span class="keyword">return</span> future.length === <span class="number">0</span>; <span class="comment">// only add to history if future is empty</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Combining-Filters"><a href="#Combining-Filters" class="headerlink" title="Combining Filters"></a>Combining Filters</h3><p>You can also use our helper to combine filters.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> undoable, &#123;combineFilters&#125; <span class="keyword">from</span> <span class="string">'redux-undo'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActionSelfExcluded</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> action.wouldLikeToBeInHistory</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">areWeRecording</span>(<span class="params">action, state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> state.recording</div><div class="line">&#125;</div><div class="line"></div><div class="line">undoable(reducer, &#123;</div><div class="line">  <span class="attr">filter</span>: combineFilters(isActionSelfExcluded, areWeRecording)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Ignoring-Actions"><a href="#Ignoring-Actions" class="headerlink" title="Ignoring Actions"></a>Ignoring Actions</h3><p>When implementing a filter function, it only prevents the old state from being<br>stored in the history. <strong><code>filter</code> does not prevent the present state from being<br>updated.</strong></p>
<p>If you want to ignore an action completely, as in, not even update the present<br>state, you can make use of <a href="https://github.com/omnidan/redux-ignore" target="_blank" rel="external">redux-ignore</a>.</p>
<p>It can be used like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ignoreActions &#125; <span class="keyword">from</span> <span class="string">'redux-ignore'</span></div><div class="line"></div><div class="line">ignoreActions(</div><div class="line">  undoable(reducer),</div><div class="line">  [IGNORED_ACTION, ANOTHER_IGNORED_ACTION]</div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// or define your own function:</span></div><div class="line"></div><div class="line">ignoreActions(</div><div class="line">  undoable(reducer),</div><div class="line">  (action) =&gt; action.type === SOME_ACTION <span class="comment">// only add to history if action is SOME_ACTION</span></div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="What-is-this-magic-How-does-it-work"><a href="#What-is-this-magic-How-does-it-work" class="headerlink" title="What is this magic? How does it work?"></a>What is this magic? How does it work?</h2><p>Have a read of the <a href="http://redux.js.org/docs/recipes/ImplementingUndoHistory.html" target="_blank" rel="external">Implementing Undo History recipe</a> in the Redux documents, which explains in detail how redux-undo works.</p>
<h2 id="Gitter-Chat-Support"><a href="#Gitter-Chat-Support" class="headerlink" title="Gitter Chat / Support"></a>Gitter Chat / Support</h2><p>If you have a question or just want to discuss something with other redux-undo users/maintainers, <a href="https://gitter.im/omnidan/redux-undo" target="_blank" rel="external">chat with the community on gitter.im/omnidan/redux-undo</a></p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT, see <code>LICENSE.md</code> for more information.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;redux-undo-redo&quot;&gt;&lt;a href=&quot;#redux-undo-redo&quot; class=&quot;headerlink&quot; title=&quot;redux undo/redo&quot;&gt;&lt;/a&gt;redux undo/redo&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是把re
    
    </summary>
    
      <category term="Readme" scheme="https://phpsmarter.github.com/categories/Readme/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|Simple React Native forms with redux-form, immutable.js and styled-components - Esben Petersen</title>
    <link href="https://phpsmarter.github.com/2017/04/04/%E7%BF%BB%E8%AF%91-Simple-React-Native-forms-with-redux-form-immutable-js-and-styled-components-Esben-Petersen/"/>
    <id>https://phpsmarter.github.com/2017/04/04/翻译-Simple-React-Native-forms-with-redux-form-immutable-js-and-styled-components-Esben-Petersen/</id>
    <published>2017-04-03T16:07:15.000Z</published>
    <updated>2017-04-03T12:09:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在React中处理表单还不怎么好弄,看看这篇文章讲的挺好的看看,试着翻译一下<br>  <a href="http://esbenp.github.io/2017/01/06/react-native-redux-form-immutable-styled-components/" target="_blank" rel="external">原文参看</a></p>
</blockquote>
<h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>如果你想看看怎么在react-native 想使用redux-form和immutable.js.你看可以看看<a href="https://github.com/esbenp/react-native-redux-form-example" target="_blank" rel="external">这篇文章的代码</a></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>在<code>Traede</code>,我使用redux整合redux-form来创建表单.redux-form是一个非常好的库,但是没有什么好的示例代码介绍怎么和React-native配合使用.所以当我开始在React-Natvie中使用redux-form的时候,发现还是有一点难度的.大多数的情况都因为我发现在React-Native中使用Immutable.js的时候会中断redux-form运行的bug.Redux-form主版本号已经到了6.4.2了.所以我考虑可以根据我的学习过程来写一点怎么在应用中同时使用redux-form和Immutable.js的文档.</p>
<h2 id="Agenda"><a href="#Agenda" class="headerlink" title="Agenda"></a>Agenda</h2><p>大体的步骤是:</p>
<ol>
<li>看看redux-form在native和web之间的差异点</li>
<li>看看怎么使redux-form和Immutable.js一起使用</li>
<li>使用react-native-clean-form的完整实例</li>
</ol>
<p>鸡冻不？好了,开始了</p>
<h2 id="在React-native中使用redux-form"><a href="#在React-native中使用redux-form" class="headerlink" title="在React-native中使用redux-form"></a>在React-native中使用redux-form</h2><p>如果你不太熟悉redux-form,我建议你看看<a href="http://redux-form.com/6.4.3/docs/GettingStarted.md/" target="_blank" rel="external">redux-form简单文档</a><br>.<em>注意：这个指南假定你使用的redux-form的版本大于6.4.2</em>.如果不是这个版本,并且还在使用Immutable.js,那么要看看这个<a href="https://github.com/erikras/redux-form/pull/2336" target="_blank" rel="external">issue</a>.创建一个表单基础的三个步骤是:</p>
<ol>
<li>在你的redux store中加入redux-form reducer</li>
<li>使用<code>reduxForm</code>包装器把你的表单连接到store</li>
<li>使用<code>Field</code>包装器把特定的表单字段连接到Store</li>
</ol>
<h3 id="0-创建React-Native-项目"><a href="#0-创建React-Native-项目" class="headerlink" title="0. 创建React Native 项目"></a>0. 创建React Native 项目</h3><p>假设你已经有了可以运行的React Native项目.如果没有,使用<code>react-native init MyReduxFormProjct</code>终端命令行命令也很容易创建项目.</p>
<h3 id="1-把redux-form-reducer添加到你的redux-store"><a href="#1-把redux-form-reducer添加到你的redux-store" class="headerlink" title="1.把redux-form reducer添加到你的redux store"></a>1.把redux-form reducer添加到你的redux store</h3><p>做这一步,请参考<a href="http://redux-form.com/6.4.3/docs/GettingStarted.md/" target="_blank" rel="external">redux-form文档</a></p>
<h3 id="2-使用redux-form包装器把你的form连接到store"><a href="#2-使用redux-form包装器把你的form连接到store" class="headerlink" title="2.使用redux-form包装器把你的form连接到store"></a>2.使用redux-form包装器把你的form连接到store</h3><p>我们使用一个简单的表单来开始工作.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  TextInput,</div><div class="line">  TouchableOpacity,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;styles.input&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default Form</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  button: &#123;</div><div class="line">    backgroundColor: 'blue',</div><div class="line">    color: 'white',</div><div class="line">    height: 30,</div><div class="line">    lineHeight: 30,</div><div class="line">    marginTop: 10,</div><div class="line">    textAlign: 'center',</div><div class="line">    width: 250</div><div class="line">  &#125;,</div><div class="line">  container: &#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  input: &#123;</div><div class="line">    borderColor: 'black',</div><div class="line">    borderWidth: 1,</div><div class="line">    height: 37,</div><div class="line">    width: 250</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tKfTcly1fe9qllp362j30680b4743.jpg" alt=""></p>
<p>好了,我们已经有了表单,看起来和十亿美元级别的app差不多.下面我们需要使用<code>reduxForm</code>包装器把表单连接到redux form上.这是因为在表单中的每一个按键操作都会发送输入字段的值到store.当我们按下提交按钮,redux-form将会从store中获取保存的值发送到一个我们定制的回调函数.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; reduxForm &#125; <span class="keyword">from</span> <span class="string">'redux-form'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> submit = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'submitting form'</span>, values)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Form = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; handleSubmit &#125; = props</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TextInput</span> <span class="attr">style</span>=<span class="string">&#123;styles.input&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;handleSubmit(submit)&#125;</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.button&#125;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(&#123;</div><div class="line">  form: 'test'</div><div class="line">&#125;)(Form)</div></pre></td></tr></table></figure>
<p><em>注释：为了简单,省略了样式和对象的导入代码</em></p>
<p>好了,首先我们使用<code>reduxForm</code>包装form并连接到store.这是<code>react-redux</code>的基础版本之上的一点修改,可能你比较熟悉了.</p>
<p>接着,我们使用了redux-form的<code>handleSubmit</code>(这个函数是通过<code>redux-Form注入到组件中的</code>).submit函数附加到我们的submit按钮上,所以点击按钮的时候,表单会被提交.这一点和web开发的submit函数是不同的,web开发中这个函数附加到form元素上.在移动平台上没有form元素,所以我们直接把它添加到button上,或者<code>TouchableOpaticy</code>.就是这么回事.</p>
<p>到了这一步,可以使用模拟器运行代码试试.我高度推荐<code>react-native-debugger</code>作为Debugger.你可以看看<a href="https://facebook.github.io/react-native/docs/debugging.html" target="_blank" rel="external">React Native 有关degugging文档</a>的建议.</p>
<p>当你在模拟器中试着点击提交表单时,你可以看到回调函数返回了空值.</p>
<p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe9qmb54t8j31aq0e0dh3.jpg" alt=""></p>
<p>值在哪里呢？</p>
<h3 id="3-使用Field包装器把fields连接到store"><a href="#3-使用Field包装器把fields连接到store" class="headerlink" title="3.使用Field包装器把fields连接到store"></a>3.使用Field包装器把fields连接到store</h3><p>所以说,redux-form要工作,你必须要使用<code>Field</code>包装器把每一个field连接到store.</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml"> import </span><span class="template-variable">&#123; Field, reduxForm &#125;</span><span class="xml"> from 'redux-form'</span></div><div class="line"></div><div class="line">const submit = values =&gt; <span class="template-variable">&#123;</span></div><div class="line">  console.log('submitting form', values)</div><div class="line">&#125;<span class="xml"></span></div><div class="line"></div><div class="line">const renderInput = (<span class="template-variable">&#123; input: &#123; onChange, ...restInput &#125;</span><span class="xml">&#125;) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line">  return &lt;TextInput style=&#123;styles.input&#125;<span class="xml"> onChangeText=</span><span class="template-variable">&#123;onChange&#125;</span><span class="xml"> </span><span class="template-variable">&#123;...restInput&#125;</span><span class="xml"> /&gt;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">const Form = props =&gt; <span class="template-variable">&#123;</span></div><div class="line">  const &#123; handleSubmit &#125;<span class="xml"> = props</span></div><div class="line"></div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.container&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;renderInput&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=</span><span class="template-variable">&#123;handleSubmit(submit)&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.button&#125;</span><span class="xml"><span class="tag">&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(<span class="template-variable">&#123;</span></div><div class="line">  form: 'test'</div><div class="line">&#125;<span class="xml">)(Form)</span></div></pre></td></tr></table></figure>
<p>注意,我们添加了<code>Field</code>组件,给定了name属性,和web开发中的<code>input</code>field工作是类似的.我们也添加了一个渲染函数告诉reduxForm,这个字段应该怎么渲染.(基本上就是一个<code>TextInput</code>组件).</p>
<p><em>现在</em>这里有些小技巧,很多人可能会出错.<strong>所以留心一下</strong>.在web Reac中<code>input</code>组件中,当field的值发生变化时,触发一个<code>onChange</code>回调函数.在React Native中<code>TextInput</code>组件触发的是<code>onChangeText</code>回调函数.为了应对这个问题,我们手动添加变化的句柄<code>onChangeText={onChange}</code>.</p>
<p><img src="https://ww1.sinaimg.cn/large/006tKfTcly1fe9qmuwabmj31ao0cmdh6.jpg" alt=""><br>现在当我们提交的时候,表单工作了.</p>
<h2 id="使用Immutable-js时候也可以工作"><a href="#使用Immutable-js时候也可以工作" class="headerlink" title="使用Immutable.js时候也可以工作"></a>使用Immutable.js时候也可以工作</h2><p>如果你想在state的管理中使用immutable.js,那么需要一些额外的步骤了配合redux-form工作.我建议你读读<a href="http://redux-form.com/6.4.3/examples/immutable/" target="_blank" rel="external">使用immutable.js和redux-form的官方文档</a>.但是我们通过一些步骤马上开始.</p>
<h3 id="1-使用redux-immutablejs-combineReducers和redux-form-reducer的immutable版本"><a href="#1-使用redux-immutablejs-combineReducers和redux-form-reducer的immutable版本" class="headerlink" title="1.使用redux-immutablejs combineReducers和redux-form reducer的immutable版本"></a>1.使用redux-immutablejs combineReducers和redux-form reducer的immutable版本</h3><p>找到你穿件redux store的代码处</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux-immutablejs'</span></div><div class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> form &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span> <span class="comment">// &lt;--- immutable import</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> reducer = combineReducers(&#123; form &#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</div></pre></td></tr></table></figure>
<p>这里有两件事:(1)你必须使用从redux-immutable或者redux-immutablejs注入<code>combineReducers</code>方法.重要的是输入的reducer是从<code>redux-form/immutable</code>.<strong>并不是redux-form</strong>.</p>
<h3 id="2-使用reduxForm包装器和Field的immutable版本"><a href="#2-使用reduxForm包装器和Field的immutable版本" class="headerlink" title="2.使用reduxForm包装器和Field的immutable版本"></a>2.使用reduxForm包装器和Field的immutable版本</h3><p>这一步和第一步实际有点类似.当你在<code>reduxForm</code>中包装一个表单连接到redux store的时候,确保是从<code>redux-form/immutable</code>导入的.类似<br><code>Field</code>也是从这里导入的.<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="xml">import </span><span class="template-variable">&#123; Field, reduxForm &#125;</span><span class="xml"> from 'redux-form/immutable' // <span class="tag">&lt;<span class="name">----</span> <span class="attr">LOOK</span> <span class="attr">HERE</span></span></span></div><div class="line"></div><div class="line"><span class="attr">const</span> <span class="attr">submit</span> = <span class="string">values</span> =&gt; <span class="template-variable">&#123;</span></div><div class="line">  console.log('submitting form', values.toJS()) &lt;--- use toJS() to cast to plain object</div><div class="line">&#125;<span class="xml"></span></div><div class="line"></div><div class="line">const renderInput = (<span class="template-variable">&#123; input: &#123; onChange, ...restInput &#125;</span><span class="xml">&#125;) =&gt; </span><span class="template-variable">&#123;</span></div><div class="line">  return &lt;TextInput style=&#123;styles.input&#125;<span class="xml"> onChangeText=</span><span class="template-variable">&#123;onChange&#125;</span><span class="xml"> </span><span class="template-variable">&#123;...restInput&#125;</span><span class="xml"> /&gt;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">const Form = props =&gt; <span class="template-variable">&#123;</span></div><div class="line">  const &#123; handleSubmit &#125;<span class="xml"> = props</span></div><div class="line"></div><div class="line">  return (</div><div class="line">    <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.container&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Email:<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">component</span>=</span><span class="template-variable">&#123;renderInput&#125;</span><span class="xml"><span class="tag"> /&gt;</span></span></div><div class="line">      <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=</span><span class="template-variable">&#123;handleSubmit(submit)&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=</span><span class="template-variable">&#123;styles.button&#125;</span><span class="xml"><span class="tag">&gt;</span>Submit<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default reduxForm(<span class="template-variable">&#123;</span></div><div class="line">  form: 'test'</div><div class="line">&#125;<span class="xml">)(Form)</span></div></pre></td></tr></table></figure></p>
<h3 id="3-完成了"><a href="#3-完成了" class="headerlink" title="3.完成了"></a>3.完成了</h3><p>就这些内容,是不是很简单？</p>
<h2 id="加点样式组件让我们的app看起来像十亿美元级别的app"><a href="#加点样式组件让我们的app看起来像十亿美元级别的app" class="headerlink" title="加点样式组件让我们的app看起来像十亿美元级别的app"></a>加点样式组件让我们的app看起来像十亿美元级别的app</h2><p>使用绝对酷炫的React样式库<a href="https://github.com/styled-components/styled-components" target="_blank" rel="external">styled-components</a> .<br>看看源代码<a href="https://github.com/esbenp/react-native-clean-form" target="_blank" rel="external">esbenp/react-native-clean-form</a></p>
<h3 id="第一步-安装react-native-clean-form"><a href="#第一步-安装react-native-clean-form" class="headerlink" title="第一步:安装react-native-clean-form"></a>第一步:安装react-native-clean-form</h3><p>使用<code>npm install —save react-native-clean-form</code>安装form元素.<br>也需要vector icon fonts.<a href="https://github.com/esbenp/react-native-clean-form#installation" target="_blank" rel="external">Readme</a></p>
<h3 id="第二步-设计酷炫的表单"><a href="#第二步-设计酷炫的表单" class="headerlink" title="第二步:设计酷炫的表单"></a>第二步:设计酷炫的表单</h3><p><img src="https://ww4.sinaimg.cn/large/006tKfTcly1fe9qnc5uf1j30ku0cdaag.jpg" alt=""></p>
<p>看看代码</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="xml"> import React, </span><span class="template-variable">&#123; Component &#125;</span><span class="xml"> from 'react'</span></div><div class="line">import <span class="template-variable">&#123;</span></div><div class="line">  ActionsContainer,</div><div class="line">  Button,</div><div class="line">  FieldsContainer,</div><div class="line">  Fieldset,</div><div class="line">  Form,</div><div class="line">  FormGroup,</div><div class="line">  Label,</div><div class="line">  Input,</div><div class="line">  <span class="keyword">Select</span>,</div><div class="line">  Switch</div><div class="line">&#125;<span class="xml"> from 'react-native-clean-form'</span></div><div class="line"></div><div class="line">const countryOptions = [</div><div class="line">  <span class="template-variable">&#123;label: 'Denmark', value: 'DK'&#125;</span><span class="xml">,</span></div><div class="line">  <span class="template-variable">&#123;label: 'Germany', value: 'DE'&#125;</span><span class="xml">,</span></div><div class="line">  <span class="template-variable">&#123;label: 'United State', value: 'US'&#125;</span><span class="xml"></span></div><div class="line">]</div><div class="line"></div><div class="line">const FormView = props =&gt; (</div><div class="line">  <span class="tag">&lt;<span class="name">Form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">FieldsContainer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Fieldset</span> <span class="attr">label</span>=<span class="string">"Contact details"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"John"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Last name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Doe"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"+45 88 88 88 88"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>First name<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"John"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Fieldset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Fieldset</span> <span class="attr">label</span>=<span class="string">"Shipping details"</span> <span class="attr">last</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Hejrevej 33"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>City<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"Copenhagen"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>ZIP Code<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"2400"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Select</span></span></div><div class="line">              <span class="attr">name</span>=<span class="string">"country"</span></div><div class="line">              <span class="attr">label</span>=<span class="string">"Country"</span></div><div class="line">              <span class="attr">options</span>=<span class="template-variable">&#123;countryOptions&#125;</span><span class="xml"><span class="tag"></span></span></div><div class="line">              <span class="attr">placeholder</span>=<span class="string">"Denmark"</span></div><div class="line">          /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FormGroup</span> <span class="attr">border</span>=</span><span class="template-variable">&#123;false&#125;</span><span class="xml"><span class="tag">&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Label</span>&gt;</span>Save my details<span class="tag">&lt;/<span class="name">Label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Switch</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">FormGroup</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Fieldset</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">FieldsContainer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ActionsContainer</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">icon</span>=<span class="string">"md-checkmark"</span> <span class="attr">iconPlacement</span>=<span class="string">"right"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ActionsContainer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></div><div class="line">)</div><div class="line"></div><div class="line">export default FormView</div></pre></td></tr></table></figure>
<p>如果你比较熟悉Twitter Bootstrap你可以从react-native-clean-form中看到类似的句法.好了输入<code>Input</code>,<code>Select</code>和<code>Switch</code>.这里的元素已经被包装在<code>FromGroup</code>和<code>Label</code>.此外我们也支持验证</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; reduxForm &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  ActionsContainer,</div><div class="line">  Button,</div><div class="line">  FieldsContainer,</div><div class="line">  Fieldset,</div><div class="line">  Form</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native-clean-form'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Input,</div><div class="line">  Select,</div><div class="line">  Switch</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native-clean-form/redux-form-immutable'</span></div><div class="line"><span class="keyword">import</span> &#123; View,Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line">const onSubmit = <span class="function"><span class="params">(values, dispatch)</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve)</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(values.toJS())</div><div class="line">      resolve()</div><div class="line">    &#125;, <span class="number">1500</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">const countryOptions = [</div><div class="line">  &#123;label: <span class="string">'Denmark'</span>, value: <span class="string">'DK'</span>&#125;,</div><div class="line">  &#123;label: <span class="string">'Germany'</span>, value: <span class="string">'DE'</span>&#125;,</div><div class="line">  &#123;label: <span class="string">'United State'</span>, value: <span class="string">'US'</span>&#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormView</span> <span class="keyword">extends</span> <span class="title">Component</span> &#123;</span></div><div class="line">  render() &#123;</div><div class="line">    const &#123; handleSubmit, submitting &#125; = <span class="keyword">this</span>.props</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Form&gt;</div><div class="line">        &lt;FieldsContainer&gt;</div><div class="line">          &lt;Fieldset label=<span class="string">"Contact details"</span>&gt;</div><div class="line">            &lt;Input name=<span class="string">"first_name"</span> label=<span class="string">"First name"</span> placeholder=<span class="string">"John"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"last_name"</span> label=<span class="string">"Last name"</span> placeholder=<span class="string">"Doe"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"email"</span> label=<span class="string">"Email"</span> placeholder=<span class="string">"something@domain.com"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"telephone"</span> label=<span class="string">"Phone"</span> placeholder=<span class="string">"+45 88 88 88 88"</span> /&gt;</div><div class="line">          &lt;/Fieldset&gt;</div><div class="line">          &lt;Fieldset label=<span class="string">"Shipping details"</span> last&gt;</div><div class="line">            &lt;Input name=<span class="string">"address"</span> label=<span class="string">"Address"</span> placeholder=<span class="string">"Hejrevej 33"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"city"</span> label=<span class="string">"City"</span> placeholder=<span class="string">"Copenhagen"</span> /&gt;</div><div class="line">            &lt;Input name=<span class="string">"zip"</span> label=<span class="string">"ZIP Code"</span> placeholder=<span class="string">"2400"</span> /&gt;</div><div class="line">            &lt;Select</div><div class="line">              name=<span class="string">"country"</span></div><div class="line">              label=<span class="string">"Country"</span></div><div class="line">              options=&#123;countryOptions&#125;</div><div class="line">              placeholder=<span class="string">"Denmark"</span></div><div class="line">            /&gt;</div><div class="line">            &lt;Switch label=<span class="string">"Save my details"</span> border=&#123;<span class="literal">false</span>&#125; name=<span class="string">"save_details"</span> /&gt;</div><div class="line">          &lt;/Fieldset&gt;</div><div class="line">        &lt;/FieldsContainer&gt;</div><div class="line">        &lt;ActionsContainer&gt;</div><div class="line">          &lt;Button icon=<span class="string">"md-checkmark"</span> iconPlacement=<span class="string">"right"</span> onPress=&#123;handleSubmit(onSubmit)&#125; submitting=&#123;submitting&#125;&gt;Save&lt;/Button&gt;</div><div class="line">        &lt;/ActionsContainer&gt;</div><div class="line">      &lt;/Form&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> reduxForm(&#123;</div><div class="line">  form: <span class="string">'Form'</span>,</div><div class="line">  validate: values =&gt; &#123;</div><div class="line">    const errors = &#123;&#125;</div><div class="line"></div><div class="line">    values = values.toJS()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.first_name) &#123;</div><div class="line">      errors.first_name = <span class="string">'First name is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.last_name) &#123;</div><div class="line">      errors.last_name = <span class="string">'Last name is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!values.email) &#123;</div><div class="line">      errors.email = <span class="string">'Email is required.'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> errors</div><div class="line">  &#125;</div><div class="line">&#125;)(FormView)</div></pre></td></tr></table></figure>
<p>很简单，是吗？现在我们有了一个连接到store的好看的表单,还能支持数据验证,异步的按钮反馈.你可以在<a href="https://github.com/esbenp/react-native-clean-form" target="_blank" rel="external">repository查看更多特性</a>.</p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在React中处理表单还不怎么好弄,看看这篇文章讲的挺好的看看,试着翻译一下&lt;br&gt;  &lt;a href=&quot;http://esbenp.github.io/2017/01/06/react-native-redux-form-immutable-st
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Redux" scheme="https://phpsmarter.github.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(8)-Views</title>
    <link href="https://phpsmarter.github.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-8-Views/"/>
    <id>https://phpsmarter.github.com/2017/03/30/翻译-React-navigation导航系统-8-Views/</id>
    <published>2017-03-30T14:04:48.000Z</published>
    <updated>2017-03-30T10:31:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h1><p>Navigation 视图是接受<code>router</code>和<code>navigaion</code> 的prop的表征组件,通过<code>navigation.state</code>的设定,可以显示几个screens.<br>Navigation view是被控制的React组件,表征当前的navigation state.他们管理screen之间的切换,动画和手势.他们也持久化navigation view例如tab bars和headers</p>
<h2 id="内建的Views"><a href="#内建的Views" class="headerlink" title="内建的Views"></a>内建的Views</h2><ul>
<li><p>CardStack-代表stack在任何平台上都匹配</p>
<ul>
<li>代表一个从Card stack来的card.</li>
<li>Header-card stack的header view</li>
</ul>
</li>
<li><p>Tabs-tab切换器/页面的配置</p>
</li>
<li>Drawer-从左侧滑出的Drawer的view</li>
</ul>
<h1 id="Transitioner"><a href="#Transitioner" class="headerlink" title="Transitioner"></a>Transitioner</h1><p><code>transitioner</code>是一个React 组件帮助管理复杂动画组件之间演变的工具.它管理动画的时间调度,保留各种screen的进入离开的记录,但是它不知道具体的事件是什么,应为具体的渲染过程委托给了开发者.<br>在内部,<code>Transitioner</code>被用来实施<code>CardStack</code>,因此是<code>StackNavigator</code>.<br><code>Transiioner</code>最有用的用途是接受当前navigation的state.当routes从navigation state移除的时候,<code>Transitioner</code></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyNavView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Transitioner</span></div><div class="line">        configureTransition=&#123;<span class="keyword">this</span>._configureTransition&#125;</div><div class="line">        navigation=&#123;<span class="keyword">this</span>.props.navigation&#125;</div><div class="line">        render=&#123;<span class="keyword">this</span>._render&#125;</div><div class="line">        onTransitionStart=&#123;<span class="keyword">this</span>.onTransitionStart&#125;</div><div class="line">        onTransitionEnd=&#123;<span class="keyword">this</span>.onTransitionEnd&#125;</div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="configureTransitionfunction"><a href="#configureTransitionfunction" class="headerlink" title="configureTransitionfunction"></a><code>configureTransition</code>function</h3><p>被<code>Transitioner.componentWillReceiveProps</code>,这个函数允许定制动画的参数,例如<code>延续时间</code>.这个函数返回的值将会传递进入时间序列函数,默认是<code>Animated.timing()</code>.</p>
<h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">_configureTransition</span>(transitionProps, prevTransitionProps) &#123;</div><div class="line">  return &#123;</div><div class="line">    // duration <span class="keyword">in</span> milliseconds, <span class="keyword">default</span>: 250</div><div class="line">    duration: <span class="number">500</span>,</div><div class="line">    // <span class="type">An</span> easing function from `<span class="type">Easing</span>`, <span class="keyword">default</span>: <span class="type">Easing</span>.inOut(<span class="type">Easing</span>.<span class="title">ease</span>)</div><div class="line">    easing: <span class="type">Easing</span>.bounce,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:<code>duration</code>和<code>easing</code>只用当时间序列函数是<code>Animated.timing</code>的时候才可以应用.我们可以根据不同的config参数来使用不同的时间函数.<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> _configureTransition(transitionProps, prevTransitionProps) &#123;</div><div class="line">  <span class="class">return </span>&#123;</div><div class="line">    <span class="comment">// A timing function, default: Animated.timing.</span></div><div class="line"><span class="symbol">    timing:</span> Animated.spring,</div><div class="line">    <span class="comment">// Some parameters relevant to Animated.spring</span></div><div class="line"><span class="symbol">    friction:</span> <span class="number">1</span>,</div><div class="line"><span class="symbol">    tension:</span> <span class="number">0.5</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Flow-definition"><a href="#Flow-definition" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">configureTransition:</span> (</div><div class="line"><span class="symbol">    transitionProps:</span> NavigationTransitionProps,</div><div class="line"><span class="symbol">    prevTransitionProps:</span> ?NavigationTransitionProps,</div><div class="line">  ) =&gt; NavigationTransitionSpec,</div></pre></td></tr></table></figure>
<h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><ul>
<li><code>transitionProps</code>:有当前的navigation state和props创建的当前<code>NavigationTransitionProps</code></li>
<li><code>prevTransitionProps</code>:从前一个navigation stae和props创建的前一个NavigationTransitionProps</li>
</ul>
<h3 id="Returns"><a href="#Returns" class="headerlink" title="Returns"></a>Returns</h3><ul>
<li>NavigationTransitionSpec类型的对象,作为参数传递进动画时间序列函数</li>
</ul>
<p><code>navigationState</code>对象<br>代表navigation state的简单对象</p>
<h3 id="实例值"><a href="#实例值" class="headerlink" title="实例值"></a>实例值</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="comment">// Index refers to the active child route in the routes array.</span></div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>,</div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'DF2FGWGAS-12'</span>, <span class="attribute">routeName</span>: <span class="string">'ContactHome'</span> &#125;,</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'DF2FGWGAS-13'</span>, <span class="attribute">routeName</span>: <span class="string">'ContactDetail'</span>, <span class="attribute">params</span>: &#123; <span class="attribute">personId</span>: <span class="number">123</span> &#125; &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Flow-definition-1"><a href="#Flow-definition-1" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="class"><span class="keyword">type</span> <span class="type">NavigationState</span> = &#123;</span></div><div class="line">  <span class="title">index</span>: <span class="title">number</span>,</div><div class="line">  <span class="title">routes</span>: <span class="type">Array</span>&lt;<span class="type">NavigationRoute</span>&gt;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>了解更多的<code>NavigationRoute</code>的类型,查看<a href="https://github.com/react-community/react-navigation/blob/master/src/TypeDefinition.js#L32" target="_blank" rel="external">flow definition</a></p>
<h2 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a><code>render</code>函数</h2><p>由<code>Transition.render()</code>调用.这个函数代理了<code>Transitioner</code>的实际渲染功能.在这个函数中,我们可以使用包含在<code>transitionProps</code>和<code>prevTransitionProps</code>中的参数来渲染scene,创建动画和处理手势操作.</p>
<p><code>transitionProps</code>和<code>prevTransitionProps</code>有一些重要的属性对于上面提到的一些任务是十分有用的.</p>
<ul>
<li><code>scenes:Array&lt;NavigationScene&gt;</code>-可以使用的scenes的列表</li>
<li><code>position:NavigationAnimation</code>- transitioner的navigation  state的进度索引</li>
<li><code>progress:NavigationAnimationedValue</code>-当navigation state从一个转变到另一的时候,这个值代表了演变的进度.从0-1的数值</li>
</ul>
<p>查看完整的<code>NavigationTransitionProps</code>的属性列表.查看看<a href="https://github.com/react-community/react-navigation/blob/master/src/TypeDefinition.js#L273" target="_blank" rel="external">flow definition</a></p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p><code>transitionProps.scenes</code>是可以使用的scenes的列表.这个列表依赖于实施者准备怎么来列出screen.例如,可以像下面的代码来渲染cards的堆栈</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> _render(transitionProps, prevTransitionProps) &#123;</div><div class="line">  <span class="keyword">const</span> scenes = transitionProps.scenes.map(<span class="function"><span class="params">scene</span> =&gt;</span> <span class="keyword">this</span>._renderScene(transitionProps, scene));</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.stack&#125;</span>&gt;</span></span></div><div class="line">      &#123;scenes&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以使用<code>Animated.View</code>去执行演变动画.为了创建必要的动画样式属性,例如<code>透明度</code>,我们可以在<code>position</code>和<code>progress</code>中利用<code>transitionProps</code>来插值.</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> _renderScene(transitionProps, <span class="built_in">scene</span>) &#123;</div><div class="line">  const &#123; <span class="built_in">position</span> &#125; = transitionProps;</div><div class="line">  const &#123; index &#125; = <span class="built_in">scene</span>;</div><div class="line">  const <span class="built_in">opacity</span> = <span class="built_in">position</span>.interpolate(&#123;</div><div class="line">    inputRange: [index-<span class="number">1</span>, index, index+<span class="number">1</span>],</div><div class="line">    outputRange: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</div><div class="line">  &#125;);</div><div class="line">  // The prop `router` <span class="built_in">is</span> populated when we call `createNavigator`.</div><div class="line">  const Scene = this.<span class="built_in">props</span>.router.getComponent(<span class="built_in">scene</span>.route.routeName);</div><div class="line">  <span class="built_in">return</span> (</div><div class="line">    &lt;Animated.View <span class="built_in">style</span>=&#123;&#123; <span class="built_in">opacity</span> &#125;&#125;&gt;</div><div class="line">      &#123; Scene &#125;</div><div class="line">    &lt;/Animated.View&gt;</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码创建交叉渐隐的动画.<br>深入理解如何创建定制的transitions,看看这个<a href="http://www.reactnativediary.com/2016/12/20/navigation-experimental-custom-transition-1.html" target="_blank" rel="external">博客帖子</a></p>
<h3 id="Flow-definition-2"><a href="#Flow-definition-2" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="params">(transitionProps: NavigationTransitionProps, prevTransitionProps: ?NavigationTransitionProps)</span> =&gt;</span> React.Element&lt;*&gt;,</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><code>transitionProps</code>:从当前state和props创建的NavigationTransitionProps.</li>
<li><code>prevTransitionProps</code>:从之前的state和props创建的先前<code>NavigationTransitionProps</code></li>
</ul>
<h3 id="Returns-1"><a href="#Returns-1" class="headerlink" title="Returns"></a>Returns</h3><ul>
<li>React元素,用来渲染Transitioner 组件</li>
</ul>
<h2 id="onTransitionEnd函数"><a href="#onTransitionEnd函数" class="headerlink" title="onTransitionEnd函数"></a><code>onTransitionEnd</code>函数</h2><p>动画演变完成后调用一次.</p>
<h3 id="Flow-definition-3"><a href="#Flow-definition-3" class="headerlink" title="Flow definition"></a>Flow definition</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onTransitionEnd: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span></div></pre></td></tr></table></figure>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul>
<li>none<h3 id="Returns-2"><a href="#Returns-2" class="headerlink" title="Returns"></a>Returns</h3></li>
<li>none</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Views&quot;&gt;&lt;a href=&quot;#Views&quot; class=&quot;headerlink&quot; title=&quot;Views&quot;&gt;&lt;/a&gt;Views&lt;/h1&gt;&lt;p&gt;Navigation 视图是接受&lt;code&gt;router&lt;/code&gt;和&lt;code&gt;navigaion&lt;/code&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="https://phpsmarter.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(7)-Router</title>
    <link href="https://phpsmarter.github.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-7-Router/"/>
    <id>https://phpsmarter.github.com/2017/03/30/翻译-React-navigation导航系统-7-Router/</id>
    <published>2017-03-30T09:57:00.000Z</published>
    <updated>2017-03-30T06:04:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Routers"><a href="#Routers" class="headerlink" title="Routers"></a>Routers</h1><blockquote>
<p>Router定义一个组件的navigation state,允许开发者定义路径和可以操作的actions.</p>
<h2 id="内建的Routers"><a href="#内建的Routers" class="headerlink" title="内建的Routers"></a>内建的Routers</h2><ul>
<li>StackRouter</li>
<li>TabRouter</li>
</ul>
</blockquote>
<h2 id="使用Routers"><a href="#使用Routers" class="headerlink" title="使用Routers"></a>使用Routers</h2><p>为了手动定制一个navigator,在组件里可以放一个静态的<code>router</code>.(使用内建的组件快速的定制一个navigator,使用<a href="https://reactnavigation.org/docs/navigators" target="_blank" rel="external">Navigator Factory</a>更容易实现).</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyNavigator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    static router = <span class="type">StackRouter</span>(routes, config);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你可以把这个组件作为另一个navigator的<code>screen</code>对待,<code>MyNavigator</code>的导航逻辑在<code>StackRouter</code>中定义.</p>
<h2 id="定制化Router"><a href="#定制化Router" class="headerlink" title="定制化Router"></a>定制化Router</h2><p>看看<code>[定制Router API 部分](https://reactnavigation.org/docs/routers/api)</code>学习<code>StackRouter</code>和<code>TabRouter</code>的API.<br>只要你愿意也可以重写router的函数.</p>
<h2 id="定制Navigation的Actions"><a href="#定制Navigation的Actions" class="headerlink" title="定制Navigation的Actions"></a>定制Navigation的Actions</h2><p>为了重写navigation的行为,你可以在<code>getStateForAction</code>中重写navigation state的逻辑,从而手动处理<code>routes</code>和<code>index</code>.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> const MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: 'Home',</div><div class="line">&#125;)</div><div class="line">MyApp.router = &#123;</div><div class="line">  ...MyApp.router,</div><div class="line">  getStateForAction(action, <span class="keyword">state</span>) &#123;</div><div class="line">    if (<span class="keyword">state</span> &amp;&amp; action.type === 'PushTwoProfiles') &#123;</div><div class="line">      const routes = [</div><div class="line">        ...<span class="keyword">state</span>.routes,</div><div class="line">        &#123;key: 'A', routeName: 'Profile', params: &#123; name: action.name1 &#125;&#125;,</div><div class="line">        &#123;key: 'B', routeName: 'Profile', params: &#123; name: action.name2 &#125;&#125;,</div><div class="line">      ];</div><div class="line">      return &#123;</div><div class="line">        ...<span class="keyword">state</span>,</div><div class="line">        routes,</div><div class="line">        index: routes.length - <span class="number">1</span>,</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">    return MyApp.router.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="阻止某些Navigation的Actions"><a href="#阻止某些Navigation的Actions" class="headerlink" title="阻止某些Navigation的Actions"></a>阻止某些Navigation的Actions</h2><p>有时候根据你的route,需要阻止某些navigation的活动</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> const MyStackRouter = StackRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: 'Home',</div><div class="line">&#125;)</div><div class="line">const MyAppRouter = &#123;</div><div class="line">  ...MyStackRouter,</div><div class="line">  getStateForAction(action, <span class="keyword">state</span>) &#123;</div><div class="line">    if (</div><div class="line">      <span class="keyword">state</span> &amp;&amp;</div><div class="line">      action.type === NavigationActions.BACK &amp;&amp;</div><div class="line">      <span class="keyword">state</span>.routes[<span class="keyword">state</span>.index].params.isEditing</div><div class="line">    ) &#123;</div><div class="line">      // Returning null <span class="keyword">from</span> getStateForAction means that the action</div><div class="line">      // has been handled/blocked, but there is not a new <span class="keyword">state</span></div><div class="line">      return null;</div><div class="line">    &#125;</div><div class="line">    return MyStackRouter.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="操作定制URIs"><a href="#操作定制URIs" class="headerlink" title="操作定制URIs"></a>操作定制URIs</h2><p>或许你的app有一个独特的URI,内建的routers处理不了.你可以通过<code>getActionForPathAndParams</code>来扩展router.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"> import &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> MyApp = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> previousGetActionForPathAndParams = MyApp.router.getActionForPathAndParams</div><div class="line">Object.assign(MyApp.router, &#123;</div><div class="line">  getActionForPathAndParams(path, <span class="keyword">params</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (</div><div class="line">      path === <span class="string">'my/custom/path'</span> &amp;&amp;</div><div class="line">      <span class="keyword">params</span>.magic === <span class="string">'yes'</span></div><div class="line">    ) &#123;</div><div class="line">      <span class="comment">// returns a profile navigate action for /my/custom/path?magic=yes</span></div><div class="line">      <span class="keyword">return</span> NavigationActions.navigate(&#123;</div><div class="line">        routeName: <span class="string">'Profile'</span>,</div><div class="line">        action: NavigationActions.navigate(&#123;</div><div class="line">          <span class="comment">// This child action will get passed to the child router</span></div><div class="line">          <span class="comment">// ProfileScreen.router.getStateForAction to get the child</span></div><div class="line">          <span class="comment">// navigation state.</span></div><div class="line">          routeName: <span class="string">'Friends'</span>,</div><div class="line">        &#125;),</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> previousGetActionForPathAndParams(path, <span class="keyword">params</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="定制Router-API"><a href="#定制Router-API" class="headerlink" title="定制Router API"></a>定制Router API</h2><p>你可以童工下面的函数来构建自己的router对象,</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> const MyRouter = &#123;</div><div class="line">  getStateForAction: <span class="function"><span class="params">(action, state)</span> =&gt;</span> (&#123;&#125;),</div><div class="line">  getActionForPathAndParams: <span class="function"><span class="params">(path, params)</span> =&gt;</span> <span class="literal">null</span>,</div><div class="line">  getPathAndParamsForState: <span class="function"><span class="params">(state)</span> =&gt;</span> <span class="literal">null</span>,</div><div class="line">  getComponentForState: <span class="function"><span class="params">(state)</span> =&gt;</span> MyScreen,</div><div class="line">  getComponentForRouteName: <span class="function"><span class="params">(routeName)</span> =&gt;</span> MyScreen,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="regexp">//</span> Now, you can make a navigator <span class="keyword">by</span> putting the router <span class="literal">on</span> it:</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNavigator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> &#123;</span></div><div class="line">  static router = MyRouter;</div><div class="line">  render() &#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe4np8ce9xj313l0v9jss.jpg" alt=""></p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getStateForAction(action,<span class="keyword">state</span>)</div></pre></td></tr></table></figure>
<p> 根据给定的action来定义返回的navigation sate.当一个action通过<code>props.navigation.dispatch()</code>传递,或者任何其他的助手函数被调用,例如<code>navigation.navitate()</code>的时候,这个函数将会运行.</p>
<p> 通常这个函数将会以下面的形式返回navitaion state.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>, <span class="comment">// identifies which route in the routes array is active</span></div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Each route needs a name to identify the type.</span></div><div class="line">      <span class="attribute">routeName</span>: <span class="string">'MyRouteName'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// A unique identifier for this route in the routes array:</span></div><div class="line">      <span class="attribute">key</span>: <span class="string">'myroute-123'</span>,</div><div class="line">      <span class="comment">// (used to specify the re-ordering of routes)</span></div><div class="line"></div><div class="line">      <span class="comment">// Routes can have any data, as long as key and routeName are correct</span></div><div class="line">      ...randomRouteData,</div><div class="line">    &#125;,</div><div class="line">    ..<span class="selector-class">.moreRoutes</span>,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果router已经在外部处理了acion,或者想不改变任何的navigation state就消化它,这个函数就返回<code>null</code>.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">getComponentForRouterName</span><span class="params">(routeName)</span></span></div></pre></td></tr></table></figure>
<p>为给定的route name返回子组件或者navigator.<br>像这样声明一个router<code>getStateForAction</code>输出的state.</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>,</div><div class="line">  routes: [</div><div class="line">    &#123; key: <span class="string">'A'</span>, routeName: <span class="string">'Foo'</span> &#125;,</div><div class="line">    &#123; <span class="attribute">key</span>: <span class="string">'B'</span>, routeName: <span class="string">'Bar'</span> &#125;,</div><div class="line">  ],</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于state中的额routeName,router将会调用<code>router.getComponentForRouteName(&#39;Foo&#39;)</code>或<code>router.getComponentForRouteName(&#39;Bar&#39;)</code>来返回对应的有效组件.</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getComponentForState(<span class="keyword">state</span>)</div></pre></td></tr></table></figure>
<p>从深度嵌套navigation state返回激活的组件</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getActionForPathAndParams</span></div></pre></td></tr></table></figure>
<p>返回一个可选配置的navigation action,在用户导航到这个路径并且有可选的查询参数的时候使用这个action.</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getPathAndParamsForState</span></div></pre></td></tr></table></figure>
<p>用户在app中返回同一个URL链接的点时,这个函数返回路径和参数.<br>从这个函数返回的路径和参数应该是从一个action获得的,这个action是重传进入router的<code>getActionForPathAndParams</code>的.这个action一旦通过<code>getStateForAction</code>传递,会给你返回形似的state.</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">getScreenConfig</span></div></pre></td></tr></table></figure>
<p>这个函数从一个route获取navigation的可选项.必须要提供screen的当前navigation prop和被返回的选项的名字.</p>
<ul>
<li><code>navigation</code>-这是screen将会使用的navigation prop,对应在screen的route和state.Dispatch将会根据screen的上下文来触发actions.</li>
<li><code>optionName</code>-被获取的选项的名字,例如’title’</li>
</ul>
<p>在实例的视图内,或许你需要远程获取配置的标题</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> // First, prepare a navigation prop <span class="keyword">for</span> your child, or re-use one if already available.</div><div class="line">const childNavigation = addNavigationHelpers(&#123;</div><div class="line">  // In this case we use navigation.<span class="keyword">state</span>.index because we want the title <span class="keyword">for</span> the active route.</div><div class="line">  <span class="keyword">state</span>: navigation.<span class="keyword">state</span>.routes[navigation.<span class="keyword">state</span>.index],</div><div class="line">  dispatch: navigation.dispatch,</div><div class="line">&#125;)</div><div class="line">const screenTitle = this.props.router.getScreenConfig(childNavigation, 'title');</div></pre></td></tr></table></figure>
<h1 id="StackRouter"><a href="#StackRouter" class="headerlink" title="StackRouter"></a>StackRouter</h1><p>管理navigation堆栈的逻辑,包括入栈,出栈,操作路径解析创建深层次的堆栈.</p>
<p>让我们看看简单的stack router<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> const MyApp = StackRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="RouteConfig"><a href="#RouteConfig" class="headerlink" title="RouteConfig"></a>RouteConfig</h2><p>最简单的stack router期待的参数是一个config对象,这里是示例配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = StackRouter(&#123; <span class="comment">// This is the RouteConfig:</span></div><div class="line">  Home: &#123;</div><div class="line">    <span class="attr">screen</span>: HomeScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">''</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">Profile</span>: &#123;</div><div class="line">    <span class="attr">screen</span>: ProfileScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">'profile/:name'</span>,</div><div class="line">  &#125;,</div><div class="line">  Settings &#123;</div><div class="line">    <span class="comment">// This can be handy to lazily require a screen:</span></div><div class="line">    getScreen: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'Settings'</span>).default,</div><div class="line">    <span class="comment">// Note: Child navigators cannot be configured using getScreen because</span></div><div class="line">    <span class="comment">// the router will not be accessible. Navigators must be configured</span></div><div class="line">    <span class="comment">// using `screen: MyNavigator`</span></div><div class="line">    path: <span class="string">'settings'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>每一个在config中的条目有如下内容</p>
<ul>
<li><code>path</code>-设定条目的路径和参数可以在stack中被解析</li>
<li><code>screen</code>-设定screen组件或者子navigator</li>
<li><code>getScreen</code>-为screen组件设定惰性加载的设定</li>
</ul>
<h2 id="StackConfig"><a href="#StackConfig" class="headerlink" title="StackConfig"></a>StackConfig</h2><p>配置的选项也被传递进入stack router.</p>
<ul>
<li><code>initalRouteName</code>-stack首次加载的默认路由的routeName</li>
<li><code>initialRouteParams</code>-初始化route的默认参数</li>
<li><code>paths</code>-提供routeName到path配置的映射,将会重写routeConfigs里的path设置</li>
</ul>
<h2 id="Supported-Actions"><a href="#Supported-Actions" class="headerlink" title="Supported Actions"></a>Supported Actions</h2><p>stack router可以对下面的导航actions作为响应.如果有可能,router将会代理到子代router的action操作.</p>
<ul>
<li>Navigate-如果routeName和router的routerConfigs其中之一匹配,将会push一个新的route到堆栈.</li>
<li>Back-返回(props)</li>
<li>Reset-清除堆栈,提供一个新的actions创建新的navigation state</li>
<li>SetParams-screen dispatch一个action去改变当前route的参数</li>
</ul>
<h1 id="TabRouter"><a href="#TabRouter" class="headerlink" title="TabRouter"></a>TabRouter</h1><p>管理应用中的一套tabs,处理tabs之间的跳转,处理back键的操作返回到初始化的tab.<br>看看简单的tabs router<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> const MyApp = TabRouter(&#123;</div><div class="line">  Home: &#123; screen: HomeScreen &#125;,</div><div class="line">  Settings: &#123; screen: SettingsScreen &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  initialRouteName: <span class="string">'Home'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="RouteConfig-1"><a href="#RouteConfig-1" class="headerlink" title="RouteConfig"></a>RouteConfig</h2><p>tabs router有为每一个tab的routeConfig<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = TabRouter(&#123; <span class="comment">// This is the RouteConfig:</span></div><div class="line">  Home: &#123;</div><div class="line">    <span class="attr">screen</span>: HomeScreen,</div><div class="line">    <span class="attr">path</span>: <span class="string">'main'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">Settings</span>: &#123;</div><div class="line">    <span class="comment">// This can be handy to lazily require a tab:</span></div><div class="line">    getScreen: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">require</span>(<span class="string">'./SettingsScreen'</span>).default,</div><div class="line">    <span class="comment">// Note: Child navigators cannot be configured using getScreen because</span></div><div class="line">    <span class="comment">// the router will not be accessible. Navigators must be configured</span></div><div class="line">    <span class="comment">// using `screen: MyNavigator`</span></div><div class="line">    path: <span class="string">'settings'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>config中的每一个config可能有</p>
<ul>
<li><code>config</code>-每一个tab的path</li>
<li><code>screen</code>-定制screen组件或者子代navigator</li>
<li><code>getScreen</code>-为一个screen组件设定惰性加载的设置(navigator没有这样的配置)</li>
</ul>
<h2 id="Tab-Router-Config"><a href="#Tab-Router-Config" class="headerlink" title="Tab Router Config"></a>Tab Router Config</h2><p>被传递到router的可配置选项</p>
<ul>
<li><code>initialRouteName</code>-首次加载的tab的routeName</li>
<li><code>order</code>-tabs的顺序</li>
<li><code>path</code>-提供routeName到path config的映射,映射重写routeConfig中的path设定</li>
<li><code>backBehavior</code>-点击back按钮应该返回到初始化的tab吗？如果是的话,设置<code>initialRoute</code>,否则就是<code>none</code>,默认到<code>initialRoute</code>的行为.</li>
</ul>
<h2 id="Support-Actions"><a href="#Support-Actions" class="headerlink" title="Support Actions"></a>Support Actions</h2><p>tabs router会对下面的navigation actions做出响应.如果有可能,router将代理到子代router的action.</p>
<ul>
<li>Navigate-如果和tab的routeName匹配,就会跳转到对应的tab</li>
<li>Back-如果不是第一个默认的tab,就跳转到第一个tab</li>
<li>SetParams-screen dispatch一个Action来改变当前route的state</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Routers&quot;&gt;&lt;a href=&quot;#Routers&quot; class=&quot;headerlink&quot; title=&quot;Routers&quot;&gt;&lt;/a&gt;Routers&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Router定义一个组件的navigation state,允许开发者定义
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="https://phpsmarter.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(6)-Redux的整合实例</title>
    <link href="https://phpsmarter.github.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-6-Redux%E7%9A%84%E6%95%B4%E5%90%88%E5%AE%9E%E4%BE%8B/"/>
    <id>https://phpsmarter.github.com/2017/03/30/翻译-React-navigation导航系统-6-Redux的整合实例/</id>
    <published>2017-03-29T23:42:14.000Z</published>
    <updated>2017-03-29T16:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了"><a href="#整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了" class="headerlink" title="整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看,github的例子,代码就比较全了."></a>整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看,<a href="https://github.com/react-community/react-navigation/blob/master/examples/ReduxExample/index.js" target="_blank" rel="external">github的例子</a>,代码就比较全了.</h1><p>对Redux的概念理解了这个看起来就简单一点.如果对于Redux的概念不理解,可以看我的几篇翻译文章和前面写的Redux的理解文章.<br>简书没有目录导航,不是太好看.可以看看我的<a href="https://phpsmarter.github.io" target="_blank" rel="external">博客</a>，里面有目录结构.<br>我理解其中的流程就是,</p>
<ol>
<li>React组件接受props，获取state和dispatch.</li>
<li>组件dispatch action改变navigation的state.<br>3.根据state的相应变化加载对应的screen.<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @flow</div><div class="line"> */</div><div class="line"></div><div class="line">import React <span class="keyword">from</span> 'react';</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  AsyncStorage,</div><div class="line">  Button,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> 'react-native';</div><div class="line">import &#123;</div><div class="line">  NavigationActions,</div><div class="line">  addNavigationHelpers,</div><div class="line">  StackNavigator,</div><div class="line">&#125; <span class="keyword">from</span> 'react-navigation';</div><div class="line">import &#123;</div><div class="line">  Provider,</div><div class="line">  connect,//redux,connect函数,负责向展示组件注入<span class="keyword">state</span>和dispatch</div><div class="line">&#125; <span class="keyword">from</span> 'react-redux';</div><div class="line">import &#123;</div><div class="line">  createStore,</div><div class="line">  combineReducers,</div><div class="line">&#125; <span class="keyword">from</span> 'redux';</div><div class="line">import &#123;</div><div class="line">  persistStore,</div><div class="line">  autoRehydrate,</div><div class="line">&#125; <span class="keyword">from</span> 'redux-persist';//redux <span class="keyword">state</span>持久化的中间件</div><div class="line"></div><div class="line">const ProfileScreen = (&#123; navigation &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">      Profile Screen</div><div class="line">    &lt;/Text&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">ProfileScreen.navigationOptions = &#123;</div><div class="line">  title: 'Profile',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const LoginScreen = (&#123; navigation &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">      Screen A</div><div class="line">    &lt;/Text&gt;</div><div class="line">    <span class="variable">&lt;Text style=&#123;styles.instructions&#125;&gt;</span></div><div class="line">      This is great</div><div class="line">    &lt;/Text&gt;</div><div class="line">    <span class="variable">&lt;Button</span></div><div class="line">      onPress=&#123;() =&gt; navigation.dispatch(&#123; type: 'Login' &#125;)&#125;</div><div class="line">      title=<span class="string">"Log in"</span></div><div class="line">    /&gt;</div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">LoginScreen.navigationOptions = &#123;</div><div class="line">  title: 'Log In',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">//connect 注入<span class="keyword">state</span>和dispatch</div><div class="line">const LoginStatusMessage = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  isLoggedIn: <span class="keyword">state</span>.auth.isLoggedIn,</div><div class="line">&#125;))((&#123; isLoggedIn, dispatch &#125;) =&gt; &#123;</div><div class="line">  if (!isLoggedIn) &#123;</div><div class="line">    return <span class="variable">&lt;Text&gt;</span>Please <span class="keyword">log</span> in&lt;/Text&gt;;</div><div class="line">  &#125;</div><div class="line">  return (</div><div class="line">    <span class="variable">&lt;View&gt;</span></div><div class="line">      <span class="variable">&lt;Text style=&#123;styles.welcome&#125;&gt;</span></div><div class="line">        &#123;'You are <span class="string">"logged in"</span> right now'&#125;</div><div class="line">      &lt;/Text&gt;</div><div class="line">      <span class="variable">&lt;Button</span></div><div class="line">        onPress=&#123;() =&gt; dispatch(NavigationActions.navigate(&#123; routeName: 'Profile' &#125;))&#125;</div><div class="line">        title=<span class="string">"Profile"</span></div><div class="line">      /&gt;</div><div class="line">    &lt;/View&gt;</div><div class="line">  );</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const AuthButton = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  isLoggedIn: <span class="keyword">state</span>.auth.isLoggedIn,</div><div class="line">&#125;), dispatch =&gt; (&#123;</div><div class="line">  logout: () =&gt; dispatch(&#123; type: 'Logout' &#125;),</div><div class="line">  login: () =&gt; dispatch(NavigationActions.navigate(&#123; routeName: 'Login' &#125;)),</div><div class="line">&#125;))((&#123; logout, login, isLoggedIn &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;Button</span></div><div class="line">    title=&#123;isLoggedIn ? 'Log Out' : 'Log In'&#125;</div><div class="line">    onPress=&#123;isLoggedIn ? logout : login&#125;</div><div class="line">  /&gt;</div><div class="line">));</div><div class="line"></div><div class="line">const MainScreen = () =&gt; (</div><div class="line">  <span class="variable">&lt;View style=&#123;styles.container&#125;&gt;</span></div><div class="line">    <span class="variable">&lt;LoginStatusMessage /&gt;</span></div><div class="line">    <span class="variable">&lt;AuthButton /&gt;</span></div><div class="line">  &lt;/View&gt;</div><div class="line">);</div><div class="line">MainScreen.navigationOptions = &#123;</div><div class="line">  title: 'Home Screen',</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const AppNavigator = StackNavigator(&#123;</div><div class="line">  Login: &#123; screen: LoginScreen &#125;,</div><div class="line">  Main: &#123; screen: MainScreen &#125;,</div><div class="line">  Profile: &#123; screen: ProfileScreen &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const AppWithNavigationState = connect(<span class="keyword">state</span> =&gt; (&#123;</div><div class="line">  nav: <span class="keyword">state</span>.nav,</div><div class="line">&#125;))((&#123; dispatch, nav &#125;) =&gt; (</div><div class="line">  <span class="variable">&lt;AppNavigator navigation=&#123;addNavigationHelpers(&#123; dispatch, state: nav &#125;)&#125; /&gt;</span></div><div class="line">));</div><div class="line"></div><div class="line">const initialNavState = &#123;</div><div class="line">  index: <span class="number">1</span>,</div><div class="line">  routes: [</div><div class="line">    &#123; key: 'InitA', routeName: 'Main' &#125;,</div><div class="line">    &#123; key: 'InitB', routeName: 'Login' &#125;,</div><div class="line">  ],</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const initialAuthState = &#123; isLoggedIn: false &#125;;</div><div class="line"></div><div class="line">const AppReducer = combineReducers(&#123;</div><div class="line">  nav: (<span class="keyword">state</span> = initialNavState, action) =&gt; &#123;</div><div class="line">    if (action.type === 'Login') &#123;</div><div class="line">      return AppNavigator.router.getStateForAction(NavigationActions.back(), <span class="keyword">state</span>);</div><div class="line">    &#125;</div><div class="line">    if (action.type === 'Logout') &#123;</div><div class="line">      return AppNavigator.router.getStateForAction(NavigationActions.navigate(&#123; routeName: 'Login' &#125;), <span class="keyword">state</span>);</div><div class="line">    &#125;</div><div class="line">    return AppNavigator.router.getStateForAction(action, <span class="keyword">state</span>);</div><div class="line">  &#125;,</div><div class="line">  auth: (<span class="keyword">state</span> = initialAuthState, action) =&gt; &#123;</div><div class="line">    if (action.type === 'Login') &#123;</div><div class="line">      return &#123; ...<span class="keyword">state</span>, isLoggedIn: true &#125;;</div><div class="line">    &#125;</div><div class="line">    if (action.type === 'Logout') &#123;</div><div class="line">      return &#123; ...<span class="keyword">state</span>, isLoggedIn: false &#125;;</div><div class="line">    &#125;</div><div class="line">    return <span class="keyword">state</span>;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">class ReduxExampleApp extends React.Component &#123;</div><div class="line">  store = createStore(AppReducer, undefined, autoRehydrate());</div><div class="line"></div><div class="line">  componentDidMount() &#123;</div><div class="line">    persistStore(this.store, &#123; storage: AsyncStorage &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="variable">&lt;Provider store=&#123;this.store&#125;&gt;</span></div><div class="line">        <span class="variable">&lt;AppWithNavigationState /&gt;</span></div><div class="line">      &lt;/Provider&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: <span class="number">1</span>,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '<span class="comment">#F5FCFF',</span></div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: <span class="number">20</span>,</div><div class="line">    textAlign: 'center',</div><div class="line">    margin: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: 'center',</div><div class="line">    color: '<span class="comment">#333333',</span></div><div class="line">    marginBottom: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('ReduxExample', () =&gt; ReduxExampleApp);</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了&quot;&gt;&lt;a href=&quot;#整合实例，其实这完全是Redux的使用，文档里的例子没有写全所以不太好看-github的例子-代码就比较全了&quot; class=&quot;hea
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="https://phpsmarter.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(5)-高级指南</title>
    <link href="https://phpsmarter.github.com/2017/03/30/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-5-%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97/"/>
    <id>https://phpsmarter.github.com/2017/03/30/翻译-React-navigation导航系统-5-高级指南/</id>
    <published>2017-03-29T16:41:19.000Z</published>
    <updated>2017-03-29T15:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redux-Intergration"><a href="#Redux-Intergration" class="headerlink" title="Redux Intergration"></a>Redux Intergration</h1><p>为了在redux中处理app的navigation state,你可以传递你自己的<code>navigation</code> prop到一个navigator.你的navigation prop必须提供当前的state,还有就是处理navigation配置项的dispatcher.</p>
<p>使用redux,你的app state由reducer来定义.每一个navigation router都有一个reducer,叫做<code>getStateForAction</code>.下面是一在redux应用中使用navigators的简单实例:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; addNavigationHelpers &#125; from <span class="symbol">'react</span>-navigation';</div><div class="line"></div><div class="line">const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">AppRouteConfigs</span>);</div><div class="line"></div><div class="line">const navReducer = (state, action) =&gt; &#123;</div><div class="line">  const newState = <span class="type">AppNavigator</span>.router.getStateForAction(action, state);</div><div class="line">  <span class="keyword">return</span> newState || state;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const appReducer = combineReducers(&#123;</div><div class="line">  nav: navReducer,</div><div class="line">  ...</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="meta">@connect</span>(state =&gt; (&#123;</div><div class="line">  nav: state.nav,</div><div class="line">&#125;))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppWithNavigationState</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> navigation=&#123;addNavigationHelpers(&#123;</div><div class="line">        dispatch: <span class="keyword">this</span>.props.dispatch,</div><div class="line">        state: <span class="keyword">this</span>.props.nav,</div><div class="line">      &#125;)&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = createStore(appReducer);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Provider</span> store=&#123;store&#125;&gt;</div><div class="line">        &lt;<span class="type">AppWithNavigationState</span> /&gt;</div><div class="line">      &lt;/<span class="type">Provider</span>&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一旦按照实例操作,navigation state就存储在redux的store中,这样就可以使用redux的dispatch函数来发起navigation的actions.</p>
<p>牢记在心,当一个navigator给定一个<code>navigation</code>prop,他将失去内部state的控制权.这意味着现在你来负责state的持久化,处理任何的深度链接,整合Back按钮等操作.</p>
<p>当你的navigator是巢式的时候,Navigation state自动从一个navigator传递到另一个navigator.注意,为了让子代navigator可以从父代navigator接收state,它应该定义为一个<code>screen</code>.</p>
<p>对应上面的实例,你可以定义<code>AppNavigator</code>包含一个巢式的<code>TabNavigator</code>:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute"> const AppNavigator</span> = StackNavigator(&#123;</div><div class="line">  Home: &#123; screen: MyTabNavigator &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在这个实例中,一旦你在<code>AppWithNavigationState</code>中<code>connect</code> <code>AppNavigator</code>到Redux,<code>MyTabNavigation</code>将会自动接入到navigation state 作为<code>navigtion</code>的prop.</p>
<h1 id="Web-Integration"><a href="#Web-Integration" class="headerlink" title="Web Integration"></a>Web Integration</h1><p>React Navigation routers工作在web环境下允许你和原生app共享导航的逻辑.绑定在<code>react-navigation</code>的视图目前只能工作在React Native下,但是在react-primitives项目中可能会有所改变.</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><a href="https://reactnavigation.org/" target="_blank" rel="external">这个网站</a>由React Navigation构建,使用了<code>createNavigation</code>和<code>TabRouter</code>.<br>看看网站的源代码<a href="https://github.com/react-community/react-navigation/blob/master/website/src/App.js" target="_blank" rel="external">app.js</a></p>
<p>app如何获得渲染参看<a href="https://github.com/react-community/react-navigation/blob/master/website/src/Server.js" target="_blank" rel="external">server.js</a>.在浏览器中,使用[BrowserAppContainer.js]来唤醒和获得渲染.</p>
<p>##更多内容,很快呈现<br>不久会有详细的教程.</p>
<h1 id="Deep-Linking"><a href="#Deep-Linking" class="headerlink" title="Deep Linking"></a>Deep Linking</h1><p>这一部分指南中,我们将设置app来处理外部URIs.让我们从SimpleApp开始<br><a href="https://reactnavigation.org/docs/intro" target="_blank" rel="external">getting start的指南</a></p>
<p>在这个示例中,我们想使用类似<code>mychat://chat/Taylor</code>的URI来打开我们的app,直接连接到Taylor的chat page.</p>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>在前面我们定义了navigator想下面这样：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="symbol">  Home:</span> &#123; <span class="keyword">screen: </span>HomeScreen &#125;,</div><div class="line"><span class="symbol">  Chat:</span> &#123; <span class="keyword">screen: </span>ChatScreen &#125;,</div><div class="line">&#125;)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>我们想让path类似<code>chat/Taylor</code>链接到“Chat”screen,传递<code>user</code>作为参数.我们重新定义我们的chat screen使用一个<code>path</code>来告诉router需要匹配的path和需要提取的参数.这个路径配置为<code>chat/:user</code>.</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> const SimpleApp = StackNavigator(&#123;</div><div class="line"><span class="attr">  Home:</span> &#123; screen: HomeScreen &#125;,</div><div class="line"><span class="attr">  Chat:</span> &#123;</div><div class="line"><span class="attr">    screen:</span> ChatScreen,</div><div class="line"><span class="attr">    path:</span> <span class="string">'chat/:user'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="URI的前缀"><a href="#URI的前缀" class="headerlink" title="URI的前缀"></a>URI的前缀</h2><p>下面配置navigation container来提取app的path.当配置在顶层navigator上的时候,我们提供<code>containerOperations</code>,</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SimpleApp = StackNavigator(&#123;</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attr">containerOptions</span>: &#123;</div><div class="line">    <span class="comment">// on Android, the URI prefix typically contains a host in addition to scheme</span></div><div class="line">    URIPrefix: Platform.OS == <span class="string">'android'</span> ? <span class="string">'mychat://mychat/'</span> : <span class="string">'mychat://'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><p>基于<code>mychat://</code>URI图式配置原生的iOS app.<br>在<code>SimpleApp/ios/SimpleApp/AppleDelegate.m</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Add the header at the top of the file:</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;React/RCTLinkingManager.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Add this above the `@end`:</span></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application openURL:(<span class="built_in">NSURL</span> *)url</div><div class="line">  sourceApplication:(<span class="built_in">NSString</span> *)sourceApplication annotation:(<span class="keyword">id</span>)annotation</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [RCTLinkingManager application:application openURL:url</div><div class="line">                      sourceApplication:sourceApplication annotation:annotation];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode里,打开项目的<code>simpleApp/ios/SimpleApp.xcodeproj</code>.在边栏中选择项目导航到info tab.向下滑动到“URL Types”并且添加一个.在新的URL type,设定名称和url图式对应想导航到的url图式.<br><img src="https://ww4.sinaimg.cn/large/006tNbRwly1fe3z3gaupxj30ui0fk74v.jpg" alt=""></p>
<p>现在可以在Xcode中点击play,或者在命令行运行<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-ios</span></div></pre></td></tr></table></figure></p>
<p>为了在iOS中测试URI,在safari中打开<code>mychat://chat/Taylor</code></p>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><p>为了在Andorid中链接外链,可以在manifest中创建一个新的intent.<br>在<code>SimpleApp/android/app/src/main/AndroidManifest.xml</code>中<code>MainActivity</code>内添加新的<code>VIEW</code>type<code>intent-filter</code>.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"mychat"</span></span></div><div class="line">          <span class="attr">android:host</span>=<span class="string">"mychat"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在,重新运行:<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native <span class="keyword">run</span><span class="bash">-android</span></div></pre></td></tr></table></figure></p>
<p>在Android中测试intent操作,运行<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -W -<span class="selector-tag">a</span> android<span class="selector-class">.intent</span><span class="selector-class">.action</span><span class="selector-class">.VIEW</span> -d <span class="string">"mychat://mychat/chat/Taylor"</span> com.simpleapp</div></pre></td></tr></table></figure></p>
<p><img src="https://ww3.sinaimg.cn/large/006tNbRwly1fe3zdd1q9gg307i0dc17p.gif" alt=""></p>
<h1 id="Screen-tracking-and-analytics"><a href="#Screen-tracking-and-analytics" class="headerlink" title="Screen tracking and analytics"></a>Screen tracking and analytics</h1><p>这个实例中展示怎么做屏幕追踪并且发到Google Analytics.这个方法应用在其他的移动分析SDK也是可以的.</p>
<h2 id="Screen-tracking"><a href="#Screen-tracking" class="headerlink" title="Screen tracking"></a>Screen tracking</h2><p>当我们使用内建的navigation container,我们使用<code>onNavigationStateChange</code>来追踪screen.</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> import &#123; GoogleAnalyticsTracker &#125; from <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="comment">// gets the current screen from navigation state</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentRouteName</span><span class="params">(navigationState)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!navigationState) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> route = navigationState.routes[navigationState.index];</div><div class="line">  <span class="comment">// dive into nested navigators</span></div><div class="line">  <span class="keyword">if</span> (route.routes) &#123;</div><div class="line">    <span class="keyword">return</span> getCurrentRouteName(route);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> route.routeName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> AppNavigator = StackNavigator(AppRouteConfigs);</div><div class="line"></div><div class="line">export <span class="keyword">default</span> () =&gt; (</div><div class="line">  &lt;AppNavigator</div><div class="line">    onNavigationStateChange=&#123;(prevState, currentState) =&gt; &#123;</div><div class="line">      <span class="keyword">const</span> currentScreen = getCurrentRouteName(currentState);</div><div class="line">      <span class="keyword">const</span> prevScreen = getCurrentRouteName(prevState);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (prevScreen !== currentScreen) &#123;</div><div class="line">        <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">        <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">        tracker.trackScreenView(currentScreen);</div><div class="line">      &#125;</div><div class="line">    &#125;&#125;</div><div class="line">  /&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="使用Redux做Screen-tracking"><a href="#使用Redux做Screen-tracking" class="headerlink" title="使用Redux做Screen tracking"></a>使用Redux做Screen tracking</h2><p>使用Redux的时候,我们可以写Redux 中间件来track screen.为了达到这个目的,我们从前面的部分重新使用<code>getCurrenRouteName</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>;</div><div class="line"><span class="keyword">import</span> &#123; GoogleAnalyticsTracker &#125; <span class="keyword">from</span> <span class="string">'react-native-google-analytics-bridge'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> tracker = <span class="keyword">new</span> GoogleAnalyticsTracker(GA_TRACKING_ID);</div><div class="line"></div><div class="line"><span class="keyword">const</span> screenTracking = <span class="function">(<span class="params">&#123; getState &#125;</span>) =&gt;</span> next =&gt; <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (</div><div class="line">    action.type !== NavigationActions.NAVIGATE</div><div class="line">    &amp;&amp; action.type !== NavigationActions.BACK</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">return</span> next(action);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> currentScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">const</span> result = next(action);</div><div class="line">  <span class="keyword">const</span> nextScreen = getCurrentRouteName(getState().navigation);</div><div class="line">  <span class="keyword">if</span> (nextScreen !== currentScreen) &#123;</div><div class="line">    <span class="comment">// the line below uses the Google Analytics tracker</span></div><div class="line">    <span class="comment">// change the tracker here to use other Mobile analytics SDK.</span></div><div class="line">    tracker.trackScreenView(nextScreen);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> screenTracking;</div></pre></td></tr></table></figure>
<h2 id="创建Redux-store并应用上面的中间件"><a href="#创建Redux-store并应用上面的中间件" class="headerlink" title="创建Redux store并应用上面的中间件"></a>创建Redux store并应用上面的中间件</h2><p>在创建store的时候应用这个<code>screenTracking</code>的中间件.看看Redux Integration了解细节.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> const store = createStore(</div><div class="line">  <span class="name">combineReducers</span>(&#123;</div><div class="line">    navigation: navigationReducer,</div><div class="line">    ...</div><div class="line">  &#125;),</div><div class="line">  applyMiddleware(</div><div class="line">    <span class="name">screenTracking</span>,</div><div class="line">    ...</div><div class="line">    ),</div><div class="line">)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redux-Intergration&quot;&gt;&lt;a href=&quot;#Redux-Intergration&quot; class=&quot;headerlink&quot; title=&quot;Redux Intergration&quot;&gt;&lt;/a&gt;Redux Intergration&lt;/h1&gt;&lt;p&gt;为了在red
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="https://phpsmarter.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(4)</title>
    <link href="https://phpsmarter.github.com/2017/03/29/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-4/"/>
    <id>https://phpsmarter.github.com/2017/03/29/翻译-React-navigation导航系统-4/</id>
    <published>2017-03-29T07:16:17.000Z</published>
    <updated>2017-03-29T16:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigation-Actions"><a href="#Navigation-Actions" class="headerlink" title="Navigation Actions"></a>Navigation Actions</h1><p>所有的Navigation Actions都会返回一个对象,这个对象可以使用<code>navigation.dispatch</code>方法传递到router.<br><em>注意</em>：如果你想dispatch react-navigation,你应该使用这个库提供的action creators.</p>
<p>下面的actions是可以使用的:</p>
<ul>
<li><code>Navigate</code>-导航到其他的route</li>
<li><code>Reset</code>-使用新的state代替目前的state</li>
<li><code>Back</code>-返回上一个state</li>
<li><code>Set Params</code>-给定的route设置参数</li>
<li><code>Init</code>-如果state没有定义,用来初始化第一个state</li>
</ul>
<h2 id="Navigate"><a href="#Navigate" class="headerlink" title="Navigate"></a>Navigate</h2><p><code>Navigatie action</code>会使用<code>Navigate action</code>的结果来更新当前的state.</p>
<ul>
<li><code>routeName</code>-字符串-必选项,在app的router里注册的导航目的地的routeName.</li>
<li><code>params</code>-对象-可选项-融合进目的地route的参数</li>
<li><code>actions</code>-对象-可选项-(高级)-如果screen也是一个navigator,次级action可以在子router中运行.在文档中描述的任何actions都可以作为次级action.</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const navigateAction = NavigationActions.navigate(&#123;</div><div class="line"></div><div class="line">  routeName: <span class="string">'Profile'</span>,</div><div class="line"></div><div class="line">  params: &#123;&#125;,</div><div class="line"></div><div class="line">  action: NavigationActions.navigate(&#123; routeName: <span class="string">'SubProfileRoute'</span>&#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">this.props.navigation.dispatch(navigateAction)</div></pre></td></tr></table></figure>
<h2 id="Reset"><a href="#Reset" class="headerlink" title="Reset"></a>Reset</h2><p><code>Reset</code>action删掉所有的navigation state并且使用几个actions的结果来代替.</p>
<ul>
<li><code>index</code>—数组-必选-navigation <code>state</code>中<code>route</code>数组中激活route的index.</li>
<li><code>actions</code>-数组-必选项-Navigation Actions数组,将会替代navigation state</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> resetAction = NavigationActions.reset(&#123;</div><div class="line">  <span class="attr">index</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">actions</span>: [</div><div class="line">    NavigationActions.navigate(&#123; <span class="attr">routeName</span>: <span class="string">'Profile'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="怎么使用index参数"><a href="#怎么使用index参数" class="headerlink" title="怎么使用index参数"></a>怎么使用<code>index</code>参数</h2><p><code>index</code>参数被用来定制化当前激活的route<br>例如：使用两个routes <code>Profile</code>和<code>Settings</code>给一个基础的stakc navigation设置.为了重置route到经过<code>Settings</code>的激活screen那一点,但是在堆栈中他又存放在<code>Setting</code>screen之上,你可以这么做:</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; from <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line">const resetAction = NavigationActions.reset(&#123;</div><div class="line">  index: <span class="number">1</span>,</div><div class="line">  actions: [</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Profile'</span>&#125;),</div><div class="line">    NavigationActions.navigate(&#123; routeName: <span class="string">'Settings'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line">this.props.navigation.dispatch(resetAction)</div></pre></td></tr></table></figure>
<h2 id="Back"><a href="#Back" class="headerlink" title="Back"></a>Back</h2><p>返回到前一个screen并且关闭当前screen.<code>back</code>action creator接受一个可选的参数:</p>
<ul>
<li><code>key</code>-字符串或者空-可选项-如果设定了,navigation将会从设定的key返回.如果是null,navigation将返回到任何地方.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> backAction = NavigationActions.back(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'Profile'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(backAction)</div></pre></td></tr></table></figure>
<h2 id="SetParams"><a href="#SetParams" class="headerlink" title="SetParams"></a>SetParams</h2><p>当dispatching <code>setParams的时候</code>,router将会产出一个新的state,这个state是已经改变了特定route的参数,以key作为身份验证</p>
<ul>
<li><code>params</code>-对象-必选参数-融合进已经存在的route参数中的新参数</li>
<li><code>key</code>-字符串-必选参数-Route的key,应该分配给新的参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; NavigationActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> setParamsAction = NavigationActions.setParams(&#123;</div><div class="line">  <span class="attr">params</span>: &#123; <span class="attr">title</span>: <span class="string">'Hello'</span> &#125;,</div><div class="line">  <span class="attr">key</span>: <span class="string">'screen-123'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">this</span>.props.navigation.dispatch(setParamsAction)</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h1><p>每个screen都可以配置几个方面的内容,这些内容影响到在父navigators中怎么得到展示.</p>
<h2 id="定制每一个可选项的两种方法"><a href="#定制每一个可选项的两种方法" class="headerlink" title="定制每一个可选项的两种方法"></a>定制每一个可选项的两种方法</h2><p><em>静态配置方法</em>:每一个navigation 可选项都可以被直接设定:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p><em>动态配置方法</em><br>要么就采用函数式的方法,接受参数,然后返回可选项的值.</p>
<ul>
<li><code>navigation</code>-screen的navigation prop和<code>navigation.state</code>中screen的route</li>
<li><code>childRouter</code>-如果screen是一个navigator,这个参数就是子代router.</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: (navigation, childRouter) =&gt; &#123;</div><div class="line">     <span class="keyword">return</span> navigation.state.params.name + <span class="string">"'s Profile!"</span>;</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<h2 id="通用的Navigation-Options"><a href="#通用的Navigation-Options" class="headerlink" title="通用的Navigation Options"></a>通用的Navigation Options</h2><p>navigation的可选项<code>title</code>在每一个navigator之间是通用的,用来设定每一个screen的标题字符串.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"> static navigationOptions = &#123;</div><div class="line">   title: <span class="symbol">'Grea</span>t',</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure>
<p>不像其他的navigation的可配置项仅仅由navigator view来使用,title 选项可以被环境变量使用来更新浏览器的标题或者app切换时候的标题.</p>
<h2 id="默认的Navigation选项"><a href="#默认的Navigation选项" class="headerlink" title="默认的Navigation选项"></a>默认的Navigation选项</h2><p>在screen中定义<code>navigationOption</code>非常普遍,但是有时候在navigator中定义<code>navitationOptions</code>也是非常有用</p>
<p>想象下面的场景:你的<code>TabNavigator</code>代表app中的一个screen.他在顶层<code>StackNavigator</code>之内:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">StackNavigator:</span></div><div class="line"> - <span class="string">route1:</span> A screen</div><div class="line"> - <span class="string">route2:</span> A TabNavigator</div></pre></td></tr></table></figure>
<p>现在<code>route2</code>是激活的,你可能会隐藏header,隐藏<code>route1</code>的header非常容易,<code>route2</code>的header应该也很容易隐藏.这就是默认Navigation Option 要做的.可以在<code>navigationOptions</code>中设定:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">TabNavigator</span>(&#123;</div><div class="line">  <span class="attribute">profile</span>: ProfileScreen,</div><div class="line">  ...</div><div class="line">&#125;, &#123;</div><div class="line">  <span class="attribute">navigationOptions</span>: &#123;</div><div class="line">     header: &#123;</div><div class="line">       visible: false,</div><div class="line">     &#125;,</div><div class="line">   &#125;,</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<p>提示:你仍然可以在子代导航screen上定制<code>navigationOptions</code>.-例如,上面的<code>ProfileScreen</code>.从screen获得的<code>navigationOptions</code>会和从navigator来的配置按照键-键的方式融合在一起.无论在什么而时间,navigator和screen定义相同的配置(例如:<code>header</code>),screen会优先使用.因此,当<code>ProfileScreen</code>激活的时候,你可以使header再次可见.</p>
<p><em>扩展默认配置</em>:为了使用screen特定的properties扩展默认配置,而不是重写它,你可以像下面一样配置选项:</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    header: (navigation, defaultHeader) =&gt; (&#123;</div><div class="line">      ...defaultHeader,</div><div class="line">      visible: <span class="literal">true</span>,</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递到函数的第二个参数作为在navigator中定义的<code>header</code>的默认值.</p>
<h2 id="Tab-Navigation-Options"><a href="#Tab-Navigation-Options" class="headerlink" title="Tab Navigation Options"></a>Tab Navigation Options</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: (&#123; state &#125;) =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Tab</span> <span class="type">Label</span>',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./tab-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">      visible: <span class="literal">true</span></div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li><code>label</code>-可以是字符串或者是React组件</li>
<li><code>icon</code>-函数返回icon组件</li>
<li><code>visible</code>-true或者false,显示或者隐藏tab bar,默认是true</li>
</ul>
<h1 id="Custom-Navigation"><a href="#Custom-Navigation" class="headerlink" title="Custom Navigation"></a>Custom Navigation</h1><p>一个navigator是任何包含router的React组件.这里是一个基本navigator,使用router的API去获得激活组件来渲染<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> class MyNavigator extends React.Component &#123;</div><div class="line">  static router = MyRouter;</div><div class="line">  render() &#123;</div><div class="line">    const &#123; <span class="keyword">state</span>, dispatch &#125; = this.props.navigation;</div><div class="line">    const &#123; routes, index &#125; = <span class="keyword">state</span>;</div><div class="line"></div><div class="line">    // Figure <span class="keyword">out</span> what <span class="keyword">to</span> render based <span class="keyword">on</span> the navigation <span class="keyword">state</span> and the router:</div><div class="line">    const Component = MyRouter.getComponentForState(<span class="keyword">state</span>);</div><div class="line"></div><div class="line">    // The <span class="keyword">state</span> of the active child screen can be found at routes[index]</div><div class="line">    let childNavigation = &#123; dispatch, <span class="keyword">state</span>: routes[index] &#125;;</div><div class="line">    // If we want, we can also tinker with the dispatch function here, <span class="keyword">to</span> <span class="keyword">limit</span></div><div class="line">    // or augment our children's actions</div><div class="line"></div><div class="line">    // Assuming our children want the convenience of calling .navigate() and so <span class="keyword">on</span>,</div><div class="line">    // we should call addNavigationHelpers <span class="keyword">to</span> augment our navigation prop:</div><div class="line">    childNavigation = addNavigationHelpers(childNavigation);</div><div class="line"></div><div class="line">    return <span class="variable">&lt;Component navigation=&#123;childNavigation&#125; /&gt;</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Navigation-Prop"><a href="#Navigation-Prop" class="headerlink" title="Navigation Prop"></a>Navigation Prop</h2><p>navigation prop传递给navigator的仅仅包含<code>state</code>和<code>dispatch</code>,这是当前的navigator的state,但是还有一个事件频道用来发送action request.<br>所有的navigators都是受控组件:他们总是显示根据<code>props.navigation.state</code>来显示,他们要改变state,唯一的办法是发送actions到<code>props.navigation.dispatch</code>.<br>Navigators可以通过定制他们的router来改变父navigators的行为.例如,当action应该从<code>router.getStateForAction</code>返回null来阻止其运行的时候.或者一个navigator可以为了定制URI的操作而改写<code>router.getActionForPathParams</code>,为了输出相对navigation action以及操作<code>router.getStateForAction</code>的action.</p>
<h2 id="Navigation-State"><a href="#Navigation-State" class="headerlink" title="Navigation State"></a>Navigation State</h2><p>传递到<code>props.navigation.state</code>的navigation state有下面的结构:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attribute">index</span>: <span class="number">1</span>, <span class="comment">// identifies which route in the routes array is active</span></div><div class="line">  <span class="attribute">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// Each route needs a name, which routers will use to associate each route</span></div><div class="line">      <span class="comment">// with a react component</span></div><div class="line">      <span class="attribute">routeName</span>: <span class="string">'MyRouteName'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// A unique id for this route, used to keep order in the routes array:</span></div><div class="line">      <span class="attribute">key</span>: <span class="string">'myroute-123'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Routes can have any additional data. The included routers have `params`</span></div><div class="line">      ...customRouteData,</div><div class="line">    &#125;,</div><div class="line">    ..<span class="selector-class">.moreRoutes</span>,</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Navigation-Dispatchers"><a href="#Navigation-Dispatchers" class="headerlink" title="Navigation Dispatchers"></a>Navigation Dispatchers</h2><p>navigator可以dispatch navigation actions,例如Go to URI,Go back.<br>如果action被成功操作了,dispatcher将会返回true,否则就是false</p>
<h2 id="构建定制navigators的API"><a href="#构建定制navigators的API" class="headerlink" title="构建定制navigators的API"></a>构建定制navigators的API</h2><p>为了帮助开发者实施定制navigators,React Navigation提供了下面的工具<br><code>createNavigator</code><br>这个工具使用标准方法把router和navigation view合并在一起.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const MyApp = createNavigator(<span class="name">MyRouter</span>)(<span class="name">MyView</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>幕后所做的是:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> MyApp = <span class="function">(<span class="params">&#123; navigation &#125;</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">MyView</span> <span class="attr">router</span>=<span class="string">&#123;MyRouter&#125;</span> <span class="attr">navigation</span>=<span class="string">&#123;navigation&#125;</span> /&gt;</span></span></div><div class="line">);</div><div class="line">MyApp.router = MyRouter;</div></pre></td></tr></table></figure>
<p><code>addNavigationHelpers</code><br>接收一个拥有<code>state</code>和<code>dispatch</code>的纯navigator的prop,传递的参数是在screen navigation prop中的各种函数,例如<code>navigation.navigate()</code>和<code>navigation.goBack()</code>.这些函数是简单的助手函数帮助创建action并且发送到<code>dispatch</code>.</p>
<p><code>createNavigationContainer</code></p>
<p>如果你想让你的navigator作为顶层组件使用(没有navigation prop传入),你可以使用<code>createNavigationContainer</code>.当缺少navigtion prop的时候,这个工具使你的navigator看起来像一个顶层的导航组件.它将管理app的state,和app级别的导航特性整合在一起,例如操作进出的链接和android的返回按钮行为.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigation-Actions&quot;&gt;&lt;a href=&quot;#Navigation-Actions&quot; class=&quot;headerlink&quot; title=&quot;Navigation Actions&quot;&gt;&lt;/a&gt;Navigation Actions&lt;/h1&gt;&lt;p&gt;所有的Nav
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-Native" scheme="https://phpsmarter.github.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>翻译|React-navigation导航系统(3)</title>
    <link href="https://phpsmarter.github.com/2017/03/28/%E7%BF%BB%E8%AF%91-React-navigation%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F-3/"/>
    <id>https://phpsmarter.github.com/2017/03/28/翻译-React-navigation导航系统-3/</id>
    <published>2017-03-28T07:48:36.000Z</published>
    <updated>2017-03-28T22:59:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Navigators"><a href="#Navigators" class="headerlink" title="Navigators"></a>Navigators</h1><p>Navigators允许你定义你的导航结构.Navigators也可以渲染普通的元素,例如你配置好的header和tab bar.<br>navigators可以是单纯的React组件.</p>
<h2 id="内建的Navigators"><a href="#内建的Navigators" class="headerlink" title="内建的Navigators"></a>内建的Navigators</h2><p><code>react-navigation</code>包含下面的几个函数帮助你创建navigators：</p>
<ul>
<li><code>StackNavigator</code>-一次渲染一个screen,在screen之间切换.当一个新的screen被打开的时候,他被放在栈顶.</li>
<li><code>TabNavigator</code>-渲染出一个tab bar让用户可以在多个screen之间切换.</li>
<li><code>DrawNavigator</code>-渲染一个抽屉,可以从屏幕左边侧滑出.</li>
</ul>
<h2 id="使用Navigators渲染screen"><a href="#使用Navigators渲染screen" class="headerlink" title="使用Navigators渲染screen"></a>使用Navigators渲染screen</h2><p>navigators实际渲染的就是React组件<br>了解怎么创建screen,读读一下内容:</p>
<ul>
<li>Screen<code>navigation</code>props允许screen分发navigation动作,例如操作另外一个screen.</li>
<li>Screen <code>navigationOptions</code>定制screen的展示方式(例如：header title,tab label)<h2 id="在顶层组件上调用导航"><a href="#在顶层组件上调用导航" class="headerlink" title="在顶层组件上调用导航"></a>在顶层组件上调用导航</h2>万一你想在同一级别的Navigation screen之间使用Navigator,你可以使用react的<code>ref</code>选项:</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   const <span class="type">AppNavigator</span> = <span class="type">StackNavigator</span>(<span class="type">SomeAppRouteConfigs</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  someEvent() &#123;</div><div class="line">    <span class="comment">// call navigate for AppNavigator here:</span></div><div class="line">    <span class="keyword">this</span>.navigator &amp;&amp; <span class="keyword">this</span>.navigator.dispatch(&#123; <span class="class"><span class="keyword">type</span></span>: <span class="symbol">'Navigat</span>e', routeName, params &#125;);</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">AppNavigator</span> ref=&#123;nav =&gt; &#123; <span class="keyword">this</span>.navigator = nav; &#125;&#125; /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:这个解决办法只能用在顶层navigator上.</p>
<h2 id="Navigation-Containers"><a href="#Navigation-Containers" class="headerlink" title="Navigation Containers"></a>Navigation Containers</h2><p>如果navigators没有props的话,他就会表现为顶层navigators.这个方式提供了一个透明的navigator container,这是顶层导航props的来源.<br>当渲染其中一个navigators的时候,navigation prop是可选的.如果没有navigation prop,container将会管理自己的导航state.他也可以使用URLs,外部链接以及整合android的back button.</p>
<p>为了使用方便,在幕后内建的navigators有这个能力,因为在幕后他们使用了<code>createNavigationContainer</code>.通常,navigators需要一个navigation prop来执行一定的功能.<br><code>onNavigationStateChange(prevState, newState)</code></p>
<p>当navigation state由顶层navigator变化管理的时候,这一点非常有用.为了达到这个目的,这个函数在每次调用的时候都会使用导航之前的state和导航之后的新state作为参数.</p>
<p><code>containerOptions</code><br>当一个navigator在顶层被使用的时候,这些选项可以来配置这个navigator.<br>如果一个navigator配置了<code>containerOptions</code>,但是也接受了<code>navigation</code>prop,会抛出错误.因为在这种情况下,navigator有两种选择,它就不知道怎么做了.</p>
<ul>
<li><code>URIPrefic</code>-app可以处理的URI前缀.在处理<code>deep link</code>的时候，可以提取路径,并且传递到router.</li>
</ul>
<h1 id="StackNavigator"><a href="#StackNavigator" class="headerlink" title="StackNavigator"></a>StackNavigator</h1><p>给你的app提供screen之间转变的方法,每个转变到的screen会存放在堆栈的栈顶.<br>默认情况下,StackNavigator配置有iOS和android的外观和感觉:在iOS下,新的screen从屏幕的右侧滑入,在android下,新的screen从底部淡入.iOS下也可以配置为从屏幕底部滑入.</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    title: <span class="symbol">'Hom</span>e',</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Profil</span>e', &#123;name: <span class="symbol">'Luc</span>y'&#125;)&#125;</div><div class="line">        title=<span class="string">"Go to Lucy's profile"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const <span class="type">ModalStack</span> = <span class="type">StackNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Profile</span>: &#123;</div><div class="line">    path: <span class="symbol">'people</span>/:name',</div><div class="line">    screen: <span class="type">MyProfileScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="定义API"><a href="#定义API" class="headerlink" title="定义API"></a>定义API</h2><p><code>StackNavigator(Routeconfigs,StackNavigatorConfig)</code></p>
<h2 id="RouteConfigs"><a href="#RouteConfigs" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">StackNavigator(&#123;</div><div class="line"></div><div class="line">  <span class="comment">// For each screen that you can navigate to, create a new entry like this:</span></div><div class="line">  Profile: &#123;</div><div class="line"></div><div class="line">    <span class="comment">// `ProfileScreen` is a React component that will be the main content of the screen.</span></div><div class="line">    screen: ProfileScreen,</div><div class="line">    <span class="comment">// When `ProfileScreen` is loaded by the StackNavigator, it will be given a `navigation` prop.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: When deep linking or using react-navigation in a web app, this path is used:</span></div><div class="line">    path: <span class="string">'people/:username'</span>,</div><div class="line">    <span class="comment">// The action and route params are extracted from the path.</span></div><div class="line"></div><div class="line">    <span class="comment">// Optional: Override the `navigationOptions` for the screen</span></div><div class="line">    navigationOptions: &#123;</div><div class="line">      <span class="attr">title</span>: <span class="function">(<span class="params">&#123;state&#125;</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;state.params.username&#125;</span>'s Profile'`</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  ...MyOtherRoutes,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="StackNavigatorConfi"><a href="#StackNavigatorConfi" class="headerlink" title="StackNavigatorConfi"></a>StackNavigatorConfi</h2><p>Router的Options:</p>
<ul>
<li><code>initialRouteName</code>-设定默认的堆栈的screen.需要和route config的键之一相同.</li>
<li><code>initalRouteParams</code>-初始化route的参数</li>
<li><code>navigationOptions</code>-默认需要使用的可选参数</li>
<li><code>path</code>-覆盖route configs的路径设置</li>
</ul>
<p>可视化选项:</p>
<ul>
<li><code>mode</code>-定义渲染和切换之间的样式:<ul>
<li><code>card</code>-使用iOS和android标准的切换方法.默认值</li>
<li><code>modal</code>-使screen从底部滑动显示.仅仅在iOS下使用,Andorid下没有效果</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>headerMode</code>-定制header渲染的方法</p>
<ul>
<li><code>float</code>-切换界面的时候,用动画效果在screen的顶部渲染header</li>
<li><code>screen</code>-每一个screen都有一个header附着到头部,切换的时候有淡入和淡出的效果.andorid的基本模式</li>
<li><code>none</code>-没有header的渲染.</li>
</ul>
</li>
<li><p><code>cardStyle</code>-使用这个prop来重写或者扩展单个card的默认style</p>
</li>
<li><code>onTransitionStart</code>-当card开始切换动画的时候,这个函数被调用</li>
<li><code>onTransitionEnd</code>-当切换动画完成的时候,这个函数被调用</li>
</ul>
<h2 id="Screen-Navigation-Options"><a href="#Screen-Navigation-Options" class="headerlink" title="Screen Navigation Options"></a>Screen Navigation Options</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line">  static navigationOptions = &#123;</div><div class="line"></div><div class="line">    title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">    header: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">      // Render a button <span class="keyword">on</span> the right side of the header</div><div class="line">      // When pressed switches the screen <span class="keyword">to</span> edit mode.</div><div class="line">      right: (</div><div class="line">        <span class="variable">&lt;Button</span></div><div class="line">          title=&#123;state.params.editing ? 'Done' : 'Edit'&#125;</div><div class="line">          onPress=&#123;() =&gt; <span class="built_in">set</span>Params(&#123;editing: <span class="keyword">state</span>.params.editing ? false : true&#125;)&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;;</div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>stackNavigator</code>的<code>navigationOptions</code>:</p>
<ul>
<li><code>title</code>-scene的标题(字符串)</li>
<li><code>header</code>-header bar的配置对象<ul>
<li><code>visible</code>-header可视性的切换.只有当<code>headerMode</code>是<code>screen</code>的时候才可以工作</li>
<li><code>title</code>-header可以使用的字符串或者React组件,默认是scene的<code>title</code></li>
<li><code>backTitle</code>-iOS back按钮的title字符串或者<code>null</code>到disable标签,默认设定到scene的<code>title</code>.</li>
<li><code>right</code>-显示在header右侧的React组件</li>
<li><code>left</code>-同上,左侧</li>
<li><code>style</code>-header的Style对象</li>
<li><code>titleStyle</code>-title组建的Style对象</li>
<li><code>tintColor</code>-header的着色</li>
</ul>
</li>
<li><code>cardStack</code>-card stack的配置对象<ul>
<li><code>gesturesEnabled</code>-不管你是不是用手势,在iOS上是true,在android里是false.<h2 id="Navigator-Props"><a href="#Navigator-Props" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>StackNavigator(...)</code>创建的navigator组件接收两个props:<br><code>screenProps</code>-向下传递到子screen,例如:</li>
</ul>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> SomeStack = StackNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;SomeStack</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>看看实例<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/SimpleStack.js" target="_blank" rel="external">SimpleStack.js</a>和<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground/js/ModalStack.js" target="_blank" rel="external">ModalStack.js</a>,可以在本地的<a href="https://github.com/react-community/react-navigation/tree/master/examples/NavigationPlayground" target="_blank" rel="external">NavigationPlayground</a>app中运行.</p>
<h1 id="TabNavigator"><a href="#TabNavigator" class="headerlink" title="TabNavigator"></a>TabNavigator</h1><p>通常很容易使用TabRouter来创建有几个tabs的screen.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      <span class="comment">// Note: By default the icon is only shown on iOS. Search the showIcon option below.</span></div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    tabBar: &#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;,</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">26</span>,</div><div class="line">    height: <span class="number">26</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">TabNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;, &#123;</div><div class="line">  tabBarOptions: &#123;</div><div class="line">    activeTintColor: '#e91e63',</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="定义API-1"><a href="#定义API-1" class="headerlink" title="定义API"></a>定义API</h2><p><code>TabNavigator(RouteConfigs,TabNavigator)</code></p>
<h2 id="RouteConfigs-1"><a href="#RouteConfigs-1" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>route的配置对象是route name到route config的映射(译者:这才是重点),配置对象告诉navigator什么来代表route.</p>
<h2 id="TabNavigatorConfig"><a href="#TabNavigatorConfig" class="headerlink" title="TabNavigatorConfig"></a>TabNavigatorConfig</h2><ul>
<li><code>tabBarComponent</code>-作为tab bar的组件.例如,<code>TabView.TabBarBottom</code>(ios的默认配置),<code>TabView.TabBarTop</code>(android的默认配置)</li>
<li><code>tabBarPosition</code>-tab bar的位置,可以是<code>top</code>和<code>bottom</code></li>
<li><code>swipeEnabled</code>-是否在tab之间滑动</li>
<li><code>animationEnabled</code>-变换tabs的时候是否开启动画效果</li>
<li><code>lazyLoad</code>-是否在需要的时候才惰性加载tabs,代替预渲染</li>
<li><code>tabBarOption</code>-配置tab bar,看下面<br>几个Options可以传递到潜在的的router,修改导航的逻辑</li>
<li><code>initialRouteName</code>-初始化时加载的tab route</li>
<li><code>order</code>-定义tabs顺序的routeName的数组</li>
<li><code>paths</code>-提供routeName到path配置的映射,重写routeConfigs里的paths设置</li>
<li><code>backBehavior</code>-back button是不是应该导致tab切换到初始的tab？入如果是的话,设定<code>initialRoute</code>,否则就是<code>none</code>.默认到<code>initialRoute</code>的行为.</li>
</ul>
<p><code>TabBarTop</code>的<code>tabBarOptions</code>设置(android默认的tab bar)</p>
<ul>
<li><code>activeTintColor</code>-激活tab的标签和icon的颜色</li>
<li><code>inactiveTintColor</code>-未激活tab的标签和icon的颜色</li>
<li><code>showIcon</code>-是否在tab中显示icon,默认是false</li>
<li><code>showLabel</code>-是否在tab显示label,默认是true</li>
<li><code>upperCaseLabel</code>-tab的label是否是大写,默认是true</li>
<li><code>pressColor</code>-material涟漪效果的颜色(Android&gt;=5.0)</li>
<li><code>pressOpacity</code>-按下tab的透明度变化(iOS和Android&lt;5.0)</li>
<li><code>scrollEnabled</code>-是否是滑动式tabs.</li>
<li><code>tabStyle</code>-tab的样式配置对象</li>
<li><code>indicatorStyle</code>-tab指示器的样式对象(tab底部的划线)</li>
<li><code>labelStyle</code>-tab label的样式对象</li>
<li><code>style</code>-tab bar的样式对象</li>
</ul>
<p>实例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tabBarOptions</span>: &#123;</div><div class="line">  <span class="attribute">labelStyle</span>: &#123;</div><div class="line">    fontSize: <span class="number">12</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="selector-tag">style</span>: &#123;</div><div class="line">    <span class="attribute">backgroundColor</span>: <span class="string">'blue'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项"><a href="#Screen导航的选项" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在screen组件中定义静态的<code>navigationOptions</code>.例如:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class ProfileScreen extends React.Component &#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; <span class="keyword">state</span> &#125;) =&gt; `$&#123;<span class="keyword">state</span>.params.name&#125;'s Profile!`,</div><div class="line"></div><div class="line">   tabBar: (&#123; <span class="keyword">state</span>, <span class="built_in">set</span>Params &#125;) =&gt; (&#123;</div><div class="line">     icon: (</div><div class="line">       <span class="variable">&lt;Image src=&#123;require('./my-icon.png')&#125; /&gt;</span></div><div class="line">     ),</div><div class="line">   &#125;),</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有<code>TabNavigator</code>的<code>navigationOption</code>:</p>
<ul>
<li><code>title</code>-scene的title(字符串)</li>
<li><code>tabBar</code>-tab bar的config对象:<ul>
<li><code>visible</code>-tab bar的可见性的切换</li>
<li><code>icon</code>-React组件或者函数给出<code>{focused:boolean,tintColor:string}</code>,返回一个React组件,显示在tab bar</li>
<li><code>label</code>-显示在tab bar中的tab的名字.如果定义为undefined,scene的<code>title</code>会被使用.如果要隐藏,看前面部分的<code>tabBarOption.showLabel</code>.<h2 id="Navigator-Props-1"><a href="#Navigator-Props-1" class="headerlink" title="Navigator Props"></a>Navigator Props</h2>由<code>TabNavigator(...)</code>创建的navigator组件接收下面的props:</li>
</ul>
</li>
<li><code>screenProps</code>-向下传递额外的options给子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> TabNav = TabNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;TabNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="抽屉式导航"><a href="#抽屉式导航" class="headerlink" title="抽屉式导航"></a>抽屉式导航</h1><p>用来构建抽屉式导航<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Hom</span>e',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./chats-icon.png')&#125;</div><div class="line">          style=&#123;[styles.icon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.navigate(<span class="symbol">'Notification</span>s')&#125;</div><div class="line">        title=<span class="string">"Go to notifications"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNotificationsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  static navigationOptions = &#123;</div><div class="line">    drawer: () =&gt; (&#123;</div><div class="line">      label: <span class="symbol">'Notification</span>s',</div><div class="line">      icon: (&#123; tintColor &#125;) =&gt; (</div><div class="line">        &lt;<span class="type">Image</span></div><div class="line">          source=&#123;require('./notif-icon.png')&#125;</div><div class="line">          style=&#123;[styles.tabIcon, &#123;tintColor: tintColor&#125;]&#125;</div><div class="line">        /&gt;</div><div class="line">      ),</div><div class="line">    &#125;),</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;<span class="type">Button</span></div><div class="line">        onPress=&#123;() =&gt; <span class="keyword">this</span>.props.navigation.goBack()&#125;</div><div class="line">        title=<span class="string">"Go back home"</span></div><div class="line">      /&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = <span class="type">StyleSheet</span>.create(&#123;</div><div class="line">  icon: &#123;</div><div class="line">    width: <span class="number">24</span>,</div><div class="line">    height: <span class="number">24</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const <span class="type">MyApp</span> = <span class="type">DrawerNavigator</span>(&#123;</div><div class="line">  <span class="type">Home</span>: &#123;</div><div class="line">    screen: <span class="type">MyHomeScreen</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="type">Notifications</span>: &#123;</div><div class="line">    screen: <span class="type">MyNotificationsScreen</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>打开抽屉或者关闭抽屉,分别导航到<code>DrawerOpen</code>和<code>Drawerclose</code>.<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerOpen'</span>); <span class="comment">// open drawer</span></div><div class="line"><span class="keyword">this</span>.props.navigation.navigate(<span class="string">'DrawerClose'</span>); <span class="comment">// close drawer</span></div></pre></td></tr></table></figure></p>
<h2 id="定义API-2"><a href="#定义API-2" class="headerlink" title="定义API"></a>定义API</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">DrawerNavigator</span><span class="params">(RouteConfigs, DrawerNavigatorConfig)</span></span></div></pre></td></tr></table></figure>
<h2 id="RouteConfigs-2"><a href="#RouteConfigs-2" class="headerlink" title="RouteConfigs"></a>RouteConfigs</h2><p>参看前面的内容</p>
<h2 id="DrawerNavigatonConfig"><a href="#DrawerNavigatonConfig" class="headerlink" title="DrawerNavigatonConfig"></a>DrawerNavigatonConfig</h2><ul>
<li><code>drawerWidth</code>-抽屉的宽度</li>
<li><code>drawerPosition</code>-选项是<code>left</code>和<code>right</code>.默认是<code>left</code>.</li>
<li><code>contentComponent</code>-用来渲染抽屉内容的组件,例如,navigation item.接收<code>navigation</code>prop.默认是<code>DrawerView.Items</code>.了解更多内容看下面内容.</li>
<li><code>contentOptions</code>-配置drawer的内容,看下面内容<br>几个选项传递给潜在的router,用来修改navigation的逻辑:</li>
<li><code>initialRouteName</code>-初始化route的routeName</li>
<li><code>order</code>-定义drawer item顺序的routeName数组</li>
<li><code>path</code>-提供一个routeName到path config的映射,重写掉routeConfigs中的path配置</li>
<li><code>backBehavior</code>-back按钮一定要返回到初始化的route吗？如果是的话,设置到<code>initialRoute</code>,否则就用<code>none</code>.默认到<code>initialRoute</code>的行为.<h2 id="提供定制化的contentComponent"><a href="#提供定制化的contentComponent" class="headerlink" title="提供定制化的contentComponent"></a>提供定制化的<em>contentComponent</em></h2>可以使用<code>react-navigation</code>重写默认的组件.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> CustomDrawerContentComponent = <span class="function">(<span class="params">props</span>) =&gt;</span> (</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;style.container&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">DrawerView.Items</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">);</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container : &#123;</div><div class="line">    flex : 1,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>DrawerView.Item</code>的<code>contentOptions</code>配置</p>
<ul>
<li><code>activeTintColor</code>-激活的标签的label和icon的颜色</li>
<li><code>activeBackgroundColor</code>-激活的标签的背景颜色</li>
<li><code>inactiveTintColor</code>-未激活的标签的label和icon的颜色</li>
<li><code>inactiveBackgroundColor</code>-未激活的标签的背景颜色</li>
<li><code>style</code>-内容部分的样式对象</li>
</ul>
<p>示例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-tag">contentOptions</span>: &#123;</div><div class="line">  <span class="attribute">activeTintColor</span>: <span class="string">'#e91e63'</span>,</div><div class="line">  style: &#123;</div><div class="line">    marginVertical: <span class="number">0</span>,</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Screen导航的选项-1"><a href="#Screen导航的选项-1" class="headerlink" title="Screen导航的选项"></a>Screen导航的选项</h2><p>通常在组件中定义静态的<code>navigationOptions</code>.<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProfileScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line"> static navigationOptions = &#123;</div><div class="line"></div><div class="line">   title: (&#123; state &#125;) =&gt; `$&#123;state.params.name&#125;<span class="symbol">'s</span> <span class="type">Profile</span>!`,</div><div class="line"></div><div class="line">   drawer: &#123;</div><div class="line">     icon: (</div><div class="line">       &lt;<span class="type">Image</span> src=&#123;require('./my-icon.png')&#125; /&gt;</div><div class="line">     ),</div><div class="line">   &#125;,</div><div class="line"> &#125;;</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>所有的<code>DrawerNavigation</code> <code>navigationOption</code>配置项</p>
<ul>
<li><code>title</code>-scene的标题</li>
<li><code>drawer</code>-drawer的配置对象<ul>
<li><code>label</code>-字符串,React组件或者函数被设定<code>{fcoused:boolean,tinColor:string}</code>返回一个React组件,显示在drawer的边栏上.当label定义为undefined时,scene的``title被使用.</li>
<li><code>icon</code>-React组件或者函数被设定为<code>{fcoused:boolean,tintColor:string}</code>返回一个React元素,显示在drawer的边栏上.</li>
</ul>
</li>
</ul>
<h2 id="Navigator-的Props"><a href="#Navigator-的Props" class="headerlink" title="Navigator 的Props"></a>Navigator 的Props</h2><p>由<code>DrawerNavigator(...)</code>创建的navigator组件接受下面的props:</p>
<ul>
<li><code>screenProps</code>-向下传递额外的options到子screen,例如:</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> DrawerNav = DrawerNavigator(&#123;</div><div class="line">  <span class="comment">// config</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&lt;DrawerNav</div><div class="line">  screenProps=&#123;<span class="comment">/* this prop will get passed to the screen components as this.props.screenProps */</span>&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h1 id="Screen-Navigation-Prop"><a href="#Screen-Navigation-Prop" class="headerlink" title="Screen Navigation Prop"></a>Screen Navigation Prop</h1><p>app中的每个screen都接收navigation prop 包含下面的内容:</p>
<ul>
<li><code>navigate</code>-(helper)链接的其他的screens</li>
<li><code>state</code>-screen的当前state和routes</li>
<li><code>setParam</code>-(helper)改变route的参数</li>
<li><code>goBack</code>-(helper)关闭激活的screen并且返回</li>
<li><code>dispatch</code>-发送一个action到router</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navigators&quot;&gt;&lt;a href=&quot;#Navigators&quot; class=&quot;headerlink&quot; title=&quot;Navigators&quot;&gt;&lt;/a&gt;Navigators&lt;/h1&gt;&lt;p&gt;Navigators允许你定义你的导航结构.Navigators也可以渲染普
    
    </summary>
    
      <category term="翻译" scheme="https://phpsmarter.github.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="React-native" scheme="https://phpsmarter.github.com/tags/React-native/"/>
    
  </entry>
  
</feed>
