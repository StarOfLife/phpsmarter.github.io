<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>phpsmarter</title>
  <subtitle>A beginner of React-native</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-23T13:15:42.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>phpsmarter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript桥接模式(1)-队列数据结构</title>
    <link href="http://yoursite.com/2017/03/24/javascript%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F(1)-%E9%98%9F%E5%88%97%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/03/24/javascript桥接模式(1)-队列数据结构/</id>
    <published>2017-03-24T11:04:10.000Z</published>
    <updated>2017-03-23T13:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。<br>队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个元素，返回新数组。两个操作对于数组都有结构的改变</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//js中队列的实现是依赖数组的数据结构</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];  <span class="comment">//初始化空数组，let关键字是es6中的</span></div><div class="line">    <span class="comment">//用于形成大括号包围的作用域</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; <span class="comment">//入队操作</span></div><div class="line">        items.push(element); <span class="comment">//数组push操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//出对</span></div><div class="line">        <span class="keyword">return</span> items.shift(); <span class="comment">//数组shift操作</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//队列第一个元素</span></div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];     <span class="comment">//数组第一个元素</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//判断队列有无成员</span></div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>; <span class="comment">//布尔值判断</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//清空队列</span></div><div class="line">        items = [];   <span class="comment">//变量重新赋值空数组</span></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//获得队列的长度</span></div><div class="line">        <span class="keyword">return</span> items.length; </div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//打印队列</span></div><div class="line">        <span class="built_in">console</span>.log(items.toString());</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>下面是优先队列。数据成员入队的时候要携带数据和优先级。<br>优先级在这里的定义是数字越大在数组中的位置靠后。当插入一个数组元素的时候，先要根据它的优先级来判断，最小是直接插入到第一位，紧邻一个比他大的优先级是，就插入到这个邻居的前面。如果是最大的数字就插到数组的最后。<br>一维数组变成了二位数组。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PriorityQueue</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> items = [];</div><div class="line">     </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">QueueElement</span> (<span class="params">element, priority</span>)</span>&#123; </div><div class="line">            <span class="keyword">this</span>.element = element;<span class="comment">//成员本身</span></div><div class="line">        <span class="keyword">this</span>.priority = priority;  <span class="comment">//优先级</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.enqueue = <span class="function"><span class="keyword">function</span>(<span class="params">element, priority</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> added = <span class="literal">false</span>; <span class="comment">//添加标记</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (queueElement.priority &lt;            </div><div class="line"> items[i].priority)&#123;  <span class="comment">//找到优先级数字比他大的那个元素</span></div><div class="line"></div><div class="line">                items.splice(i,<span class="number">0</span>,queueElement);            </div><div class="line">             <span class="comment">// 插到这个元素的前面</span></div><div class="line">                added = <span class="literal">true</span>;</div><div class="line">                <span class="keyword">break</span>; <span class="comment">// 终止</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!added)&#123; <span class="comment">//如果是优先级数字是最大的，直接插入到</span></div><div class="line">        <span class="comment">//数组的末尾</span></div><div class="line">            items.push(queueElement); <span class="comment">//&#123;5&#125;</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//其他操作和普通队列是一样的</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.dequeue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.shift();</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.front = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items[<span class="number">0</span>];</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == <span class="number">0</span>;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//print使用了es6里的拼接字符串的方法</span></div><div class="line">    <span class="keyword">this</span>.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;items.length; i++)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;items[i].element&#125;</span>  - <span class="subst">$&#123;items[i].priority&#125;</span>`</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> priorityQueue = <span class="keyword">new</span> PriorityQueue();</div><div class="line">priorityQueue.enqueue(<span class="string">"John"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Jack"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Camila"</span>, <span class="number">1</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Maxwell"</span>, <span class="number">2</span>);</div><div class="line">priorityQueue.enqueue(<span class="string">"Ana"</span>, <span class="number">3</span>);</div><div class="line">priorityQueue.print();</div><div class="line"><span class="comment">//=&gt;</span></div><div class="line"><span class="comment">//打印出的结果</span></div><div class="line">Jack  - <span class="number">1</span>  <span class="comment">//数组元素--优先级</span></div><div class="line">Camila  - <span class="number">1</span></div><div class="line">John  - <span class="number">2</span></div><div class="line">Maxwell  - <span class="number">2</span></div><div class="line">Ana  - <span class="number">3</span></div></pre></td></tr></table></figure>
<p>在这个队列的基础上可以实现javascript中桥接模式的例子。本文算是一个独立的javascript队列的介绍，也作为桥接模式例子的背景方法。<br><a href="http://www.apress.com/cn/book/9781590599082" target="_blank" rel="external">javascript设计模式 第八章-桥接模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;根据书上例子的实际要求，涉及到js队列的问题。所以先把js中队列的具体实现数据结构贴出来。具体参考《学习javascript数据结构和算法》第四章。&lt;br&gt;队列数据结构遵循先入先出的原则。入队操作添加到数组的末尾，返回新数组。出队操作弹出数组第一个
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Velocity动画库学习</title>
    <link href="http://yoursite.com/2017/03/24/Velocity%E5%8A%A8%E7%94%BB%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/24/Velocity动画库学习/</id>
    <published>2017-03-23T21:37:04.000Z</published>
    <updated>2017-03-23T13:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240" alt="1661.987.big.jpg.png"></p>
<blockquote>
<p>看velocity.js的内容有段时间了，源于图片这本书。前面看直观的感受是：这个库的操作很简单。要解决一个rn的动画问题，把这本书又拿出来看，刚好看到也有了velocity-react版，考虑是否以后可以用在react-native上，这样的话应用范围就大很多。<br><a href="http://velocityjs.org" target="_blank" rel="external">Velocity.js文档</a><br><a href="https://github.com/twitter-fabric/velocity-react" target="_blank" rel="external">velocity-react github地址</a>；<br><a href="https://fabric.io/blog/introducing-the-velocityreact-library" target="_blank" rel="external">velocity-react的内容</a>；</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a00dfb63a7e5f09d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400" alt="1443477710321.png"><br>初始化比较简单，网页中先导入jquery库，然后导入velocity.js库<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  //最好是配合jquery来使用，可以使用jquery的链式操作。</div><div class="line">  //jquery的函数操作在完成以后会有一句 return this,由此链式操作的</div><div class="line"> //的后一个方法的对象和前一个方法的对象是相同的</div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/velocity.min.js"</span>&gt;</span><span class="javascript">/script&gt; </span></div><div class="line">   $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $div=$(<span class="string">"div"</span>);   <span class="comment">//jQuery对象缓存起来</span></div><div class="line">    $div.velocity(&#123;<span class="attr">opacity</span>:<span class="number">0.5</span>&#125;);  <span class="comment">//调用方法</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><em>Velocity接受多个参数</em>，第一个参数是一个对象，用于将css属性映射到对应的目标值，第二个参数是指定动画的选项<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,&#123;<span class="string">duration:</span><span class="number">400</span>,<span class="string">easing:</span><span class="string">"swing"</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">//也可以使用简写</span></div><div class="line">$element.velocity(&#123;<span class="string">width:</span><span class="string">"500px"</span>,<span class="string">opacity:</span><span class="number">0.5</span>&#125;,<span class="number">400</span>，<span class="string">"ease-in-out"</span>);</div></pre></td></tr></table></figure></p>
<p><em>对于css属性，velocity不支持简写，只能一个一个的写，而且css属性也和react一样是驼峰命名。</em></p>
<p>链式操作；如果为了效率放弃使用jquery,那么就不能使用链式操作了<br>每个操作单独写就可以了。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$elemnt</span><span class="selector-class">.velocity</span>(&#123;<span class="attribute">width</span>:<span class="string">"400px"</span>&#125;).velocity(&#123;opacity:<span class="number">0.6</span>&#125;);</div></pre></td></tr></table></figure></p>
<p>使用这个库实现旋转动画 </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-5ddc998c6c858840.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow.gif"><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;image id=<span class="string">"pic"</span> src=<span class="string">"img/pic.jpg"</span>/&gt;</div><div class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span></div><div class="line">         $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             $pic=$(<span class="string">"#pic"</span>);</div><div class="line">            $pic.velocity(  <span class="comment">//loop表示无限循环</span></div><div class="line">                    &#123;<span class="attr">rotateZ</span>: <span class="string">"360deg"</span>&#125;,&#123;<span class="attr">duration</span>:<span class="number">5000</span>,<span class="attr">loop</span>: <span class="literal">true</span> &#125;,<span class="string">"linear"</span>)；   </div><div class="line">         &#125;);   </div><div class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://twitter-fabric.github.io/velocity-react/" target="_blank" rel="external">这是官方的一个示例</a><br><img src="http://upload-images.jianshu.io/upload_images/2044710-019b0a1d63961dd2.gif?imageMogr2/auto-orient/strip" alt="ScreenFlow3.gif"><br>下面是react组件的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ npm install --save velocity-react</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate'</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">'velocity-animate/velocity.ui'</span>);</div><div class="line"> <span class="xml"><span class="tag">&lt;<span class="name">VelocityComponent</span> <span class="attr">animation</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">this.state.showSubComponent</span> ? <span class="attr">1</span> <span class="attr">:</span> <span class="attr">0</span> &#125;&#125; <span class="attr">duration</span>=<span class="string">&#123;500&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">MySubComponent</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">VelocityComponent</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2044710-a6a2735312d5c432.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/240&quot; a
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F-1/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式-1/</id>
    <published>2017-03-23T21:30:54.000Z</published>
    <updated>2017-03-23T13:30:54.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React组件的享元模式</title>
    <link href="http://yoursite.com/2017/03/24/React%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/24/React组件的享元模式/</id>
    <published>2017-03-23T21:29:41.000Z</published>
    <updated>2017-03-23T13:30:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在react/react-native的代码中都有这样的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; View,  </div><div class="line">               StyleSheet, </div><div class="line">               ScrollView, </div><div class="line">               ListView,  </div><div class="line">               StatusBar,</div><div class="line">              InteractionManager,</div><div class="line">              Navigator, &#125;</div><div class="line">              <span class="keyword">from</span> <span class="string">'react-native'</span></div></pre></td></tr></table></figure>
<p>通过这样的方式引入组件对象。 今天又一次读js设计模式的时候发现原来的理解是错误的，误解了组件的外部状态和内部状态，从而没有领会组件的微妙之处。今天把正确的概念写出来。</p>
<p>在曾探的《javascript 设计模式与开发实践》关于享元模式的内部状态和外部状态有这样的描述</p>
<blockquote>
<p>-内部状态存储于对象内部<br>  -内部状态可以被一些对象共享<br>  -内部状态可以独立于场景，通常不会变<br>  -外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</p>
</blockquote>
<p>怎么解释呢？意思是页面中出现的所有View组件实际是同一个共享对象，外部状态从对象上剥离开来，并存储在外部。<br>   剥离了外部状态的就是共享组件。 外部状态必要时传入共享组件就可以组成一个完整的对象。这些外部状态包括 state，props,style等<br>组装外部状态需要时间，但是可以大大减少系统中的对象数量，享元模式是用时间换空间的做法。<br>通过import导入的就是公共组件对象。 公共组件内部可以为外部状态加上标签以示区别，这就是ref参数存在的含义。</p>
<p>这就是借助享元模式理解的react组件的构造和用法。</p>
<p>借助模式设计慢慢读代码，写代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在react/react-native的代码中都有这样的代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;di
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0-2/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数-2/</id>
    <published>2017-03-23T21:12:02.000Z</published>
    <updated>2017-03-23T13:12:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0-1/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数-1/</id>
    <published>2017-03-23T21:10:42.000Z</published>
    <updated>2017-03-23T13:10:42.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redux函数</title>
    <link href="http://yoursite.com/2017/03/24/Redux%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/24/Redux函数/</id>
    <published>2017-03-23T21:06:24.000Z</published>
    <updated>2017-03-23T13:06:24.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript reducer函数实战</title>
    <link href="http://yoursite.com/2017/03/24/Javascript%20reducer%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/03/24/Javascript reducer函数/</id>
    <published>2017-03-23T21:03:59.000Z</published>
    <updated>2017-03-23T13:21:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,又把这个问题翻出来看,又不懂了,还是拉锯战啊. javascript的编程中,我开始感到看别人的源码最难的地方实际还是两个,一个是数组方法的灵活应用,另一个是对象的浅拷贝和深拷贝的问题.这两个问题要是有深刻的体会,看源码的难度会降低很多.reduce,slice,splice,concat函数是明星.遇到这几个函数的时候就有些看不懂,所以掌握这几个函数是非常重要的. 深拷贝和浅拷贝的问题其实和javascript的对象和函数都是传引用赋值息息相关,一句话解决对象的共享还是独享的问题.javascript的设计模式很多都是利用对象很函数的传引用赋值的特点来完成的.所以这儿地方也是非常的重要.javascript的数组元素也可以是对象的引用.</p>
</blockquote>
<p>本人是新手,最大的体会是学到的两个简单原则:1 对象是用来组织数据和相关方法的,所以组织方式越简单,越灵活越好,由于js的对象和函数都可以传引用赋值,所以在js中,以对象字面量和数组的组织方式真的是非常的强大,之所以这么讲,就是要把学习数组的方法提到新的高度.2 编程到底是在干什么？ 我逐渐体会到编程也就是解决信息的传递，存储和处理的问题. 所以很多问题其实稍微抽象一下,问题可能会简单一点. 我简单的写了一个东西,在学习React/Redux的时候,总是掌握不了实质,就是Redux中的state的实质是什么.前面学习的时候,总是言必称state,想了各种办法去了解什么是state，为什么要这样设计.其实再抽象一下,这不就是一个小型的数据库吗？可以这样说吗？当然可以了,我看了一本介绍React的书,有点确认了,当我这几天再读F8 app的代码官方文档的时候,facebook直接就是把Redux称为数据层.我还想了一些办法来理解Redux，比如说借用中介者模式,MVC解耦和模式,但是如果抽象为数据层,那么还有什么问题解决不了的吗？ 如果接触过任何一种web框架语言,例如php/mysql,node/mongodb.每种都是解耦和,每种都是中介者模式.所以在理解这些概念的时候最基础的内容可能是最解决问题的条件.你可以梳理一下这些框架中与数据库操作都有哪些? 连接数据库,数据库操作语句,数据库文件,返回值等等.这些东西在react/redux中都能找到一摸一样的内容.web框架里的数据库操作和redux的操作是完全一样的,有什么奇怪的吗？都是数据库.</p>
<p>Redux的文档中有个redo,undo的例子,我最近又重新看redux文档的时候，感觉这一部分讲的真是好,以前怎么没有理解呢？  有三个缺陷一个是对于state的数据结构的理解,一个是堆栈方法使用理解,另一个就是js的浅拷贝的问题。前面看那本数据结构的书,也不得法,但是硬着头皮把几种数据结构拿下以后,突然觉得好多问题都找到了解决办法,计算机中对于数据结构和算法的重视不是白来的.state如果作为一个简单数据库,他里面就是一些<code>键值对</code>. 由于js中对象可以传引用,所以可以很容易的建立一个类数据库的结构.其他语言可以吗？</p>
<p>#####下面我们就贯彻以上的理念,来研究一些基础的内容。<br>第一个就是Reducer函数,参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">MDN</a> 文档</p>
<p>直接看代码例子</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//accumulator是累加值,currentValue是当前遍历的值</span></div><div class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].reduce( (accumulator, currentValue, currentIndex, array) =&gt; &#123;</div><div class="line">  return accumulator + currentValue;</div><div class="line">&#125;, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<hr>
<table>
<thead>
<tr>
<th style="text-align:left">callback</th>
<th style="text-align:left">accumulate</th>
<th style="text-align:left">currentValue</th>
<th style="text-align:left">currentIndex</th>
<th style="text-align:left">array</th>
<th style="text-align:left">return</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">第一次调用</td>
<td style="text-align:left">10</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">10</td>
</tr>
<tr>
<td style="text-align:left">第二次调用</td>
<td style="text-align:left">10</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">11</td>
</tr>
<tr>
<td style="text-align:left">第三次调用</td>
<td style="text-align:left">11</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">13</td>
</tr>
<tr>
<td style="text-align:left">第四次调用</td>
<td style="text-align:left">13</td>
<td style="text-align:left">3</td>
<td style="text-align:left">3</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">16</td>
</tr>
<tr>
<td style="text-align:left">第五次调用</td>
<td style="text-align:left">16</td>
<td style="text-align:left">4</td>
<td style="text-align:left">4</td>
<td style="text-align:left">[0,1,2,3,4]</td>
<td style="text-align:left">20</td>
</tr>
</tbody>
</table>
<p>第一个遍历，accumulate等于10.遍历的数组元素是0，index是0.这是巧合。数组还是[0,1,2,3,4]。返回的值是初始值加当前的数组元素值，也就是返回accumulate+array[currentIndex]。return的就是 10+array[0]=10.</p>
<p>第二个遍历，accumulate就是10，遍历的数组元素是1，index是1.这也是巧合。数组还是[0,1,2,3,4]。返回的值是accumulate加当前的数组值，accumulate+array[currentIndex]。<br>也就是返回 10+array[1]=11.</p>
<p>第二个遍历和第一个遍历的区别就是初始值来源不同。第一个遍历的是reduce带进来的数据。第二个遍历使用的是第一个遍历返回的值。<br>后面的几个遍历就和第二个遍历一样了。</p>
<p><em>数组扁平化</em><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(function(a, b) &#123;</div><div class="line">    return a.concat(b); <span class="comment">//要了解concat的使用,返回的是</span></div><div class="line">    <span class="comment">//数组合并的返回对象</span></div><div class="line">&#125;, []); <span class="comment">//起始是空数组</span></div><div class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure></p>
<hr>
<p>就这么简单,但是灵活变动起来也不是太好理解啊<br>看这个计算器的React-Native的代码,在UI组件中渲染出计算器的几个按键的方法</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> Types = &#123; <span class="comment">//类型</span></div><div class="line">  NUMBER: <span class="string">'NUMBER'</span>,</div><div class="line">  DECIMAL: <span class="string">'DECIMAL'</span>,</div><div class="line">  SIGN: <span class="string">'SIGN'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> inputs = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">1</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">2</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">3</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">4</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">5</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">6</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">7</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">8</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">9</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+/-'</span>, type: Types.SIGN&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">0</span>, type: Types.NUMBER&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'.'</span>, type: Types.DECIMAL&#125;,</div><div class="line">];</div><div class="line"><span class="comment">//操作符的配置</span></div><div class="line"><span class="keyword">var</span> operations = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'/'</span>, color: <span class="string">'#c77ccc'</span>, altColor: <span class="string">'#b16eb7'</span>, operation: OPERATION_DIVIDE&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'-'</span>, color: <span class="string">'#f8b055'</span>, altColor: <span class="string">'#dc9c4c'</span>, operation: OPERATION_SUBTRACT&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+'</span>, color: <span class="string">'#f796d2'</span>, altColor: <span class="string">'#e088be'</span>, operation: OPERATION_ADD&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'x'</span>, color: <span class="string">'#6fcdf4'</span>, altColor: <span class="string">'#65badd'</span>, operation: OPERATION_MULTIPLY&#125;</div><div class="line">];</div><div class="line"></div><div class="line">renderInputRows() &#123;</div><div class="line">    <span class="keyword">var</span> &#123;inputNumber, inputSigned, inputDecimal&#125; = <span class="keyword">this</span>.props;<span class="comment">//注意在redux中那个地方返回了这三个函数的名字</span></div><div class="line">    <span class="keyword">return</span> inputs.reduce((collection, input) =&gt; &#123;<span class="comment">//这里的reduce是怎么用的呢？</span></div><div class="line">      <span class="keyword">if</span> (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;<span class="comment">//为什么等于3</span></div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length<span class="number">-1</span>].push(input);</div><div class="line">      <span class="keyword">return</span> collection;</div><div class="line">    &#125;, [[]]).map((<span class="keyword">group</span>, rowIndex) =&gt; &#123;</div><div class="line">      <span class="keyword">var</span> columns = <span class="keyword">group</span>.map((item, columnIndex) =&gt; &#123;<span class="comment">//看看map的方法</span></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">          &lt;TouchableHighlight</div><div class="line">            key=&#123;<span class="string">'inputRow_'</span> + rowIndex + <span class="string">'_inputCol_'</span> + columnIndex&#125;</div><div class="line">            underlayColor=<span class="string">"#ededed"</span></div><div class="line">            style=&#123;styles.input&#125;</div><div class="line">            onPress=&#123;() =&gt; &#123; <span class="comment">//dispatch方法</span></div><div class="line">              <span class="keyword">if</span> (item.type === Types.NUMBER) &#123;</div><div class="line">                inputNumber(item.<span class="keyword">value</span>);</div><div class="line">              &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">item.type === Types.DECIMAL</span>) </span>&#123;</div><div class="line">                inputDecimal();</div><div class="line">              &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> (<span class="params">item.type === Types.SIGN</span>) </span>&#123;</div><div class="line">                inputSigned();</div><div class="line">              &#125;</div><div class="line">            &#125;&#125;&gt;</div><div class="line">            &lt;Text style=&#123;styles.inputText&#125;&gt;&#123;item.<span class="keyword">value</span>&#125;&lt;/Text&gt;</div><div class="line">          &lt;/TouchableHighlight&gt;</div><div class="line">        );</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>看看这个数组的reducer方法的使用.<a href="https://github.com/benoitvallon/react-native-nw-react-calculator" target="_blank" rel="external">源代码在这里</a></p>
<p>这个我稍后再补充,会补充大神给我的解答.</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"> var Types = &#123;</div><div class="line">  <span class="keyword">NUMBER</span>: <span class="string">'NUMBER'</span>,</div><div class="line">  <span class="keyword">DECIMAL</span>: <span class="string">'DECIMAL'</span>,</div><div class="line">  <span class="built_in">SIGN</span>: <span class="string">'SIGN'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">var inputs = [</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">1</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">2</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">3</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">4</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">5</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">6</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">7</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">8</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">9</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'+/-'</span>, <span class="keyword">type</span>: Types.<span class="built_in">SIGN</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="number">0</span>, <span class="keyword">type</span>: Types.<span class="keyword">NUMBER</span>&#125;,</div><div class="line">  &#123;<span class="keyword">value</span>: <span class="string">'.'</span>, <span class="keyword">type</span>: Types.<span class="keyword">DECIMAL</span>&#125;,</div><div class="line">];</div><div class="line">//这里其实是有一维数组转为二维数组，打印结构可以看到.</div><div class="line">//注意reduce的起始值就是一个二维数组.</div><div class="line">var result = inputs.reduce((collection, input) =&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;</div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length-<span class="number">1</span>].push(input);</div><div class="line">      <span class="keyword">return</span> collection;</div><div class="line">    &#125;, [[]])</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(result)</div><div class="line">console.table(result)</div></pre></td></tr></table></figure>
<p>再看看下面这里两段代码<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">let str = `name,  age,  hair\nMerble,  <span class="number">35</span>,  red\nBob,  <span class="number">64</span>,  blonde`;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">lameCSV</span><span class="params">(str)</span></span> &#123;</div><div class="line">  <span class="keyword">return</span> str.split(<span class="string">'\n'</span>).reduce(<span class="function"><span class="keyword">function</span><span class="params">(table, row)</span></span>&#123;</div><div class="line">    <span class="built_in">table</span>.push(row.split(<span class="string">','</span>).map(<span class="function"><span class="keyword">function</span><span class="params">(c)</span></span> &#123;<span class="keyword">return</span> c.trim();&#125;));</div><div class="line">    <span class="keyword">return</span> <span class="built_in">table</span></div><div class="line">  &#125;, <span class="string">[[]]</span>);</div><div class="line">&#125;;</div><div class="line">lameCSV(str);</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</div><div class="line"> var result = arr.reduce((collection, input) =&gt; &#123;</div><div class="line">      if (collection[collection.length - <span class="number">1</span>].length === <span class="number">3</span>) &#123;</div><div class="line">        collection.push([]);</div><div class="line">      &#125;</div><div class="line">      collection[collection.length<span class="number">-1</span>].push(input);</div><div class="line">      console.log(collection);</div><div class="line">      return collection;</div><div class="line">    &#125;, [[]]);</div></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/zaxlct/baike_spider/issues/1" target="_blank" rel="external">感谢大神的帮助,大神的github</a><br>reduce这个方法还能演变出什么花样来呢？数组的操作真的是一个需要好好学习的内容.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;javascript Reduce函数是比较强大的一个函数,在简书上看到有个作者写了这个函数的文章,也是看到有个问题就向他请教,大神很忙,但是仍然在github上做了答复,我对那个问题搞明白了,所以写了下面这个文章,但是没有写完,现在陪老娘在医院,
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>测试文件</title>
    <link href="http://yoursite.com/2017/03/23/new-article-2/"/>
    <id>http://yoursite.com/2017/03/23/new-article-2/</id>
    <published>2017-03-23T15:31:30.000Z</published>
    <updated>2017-03-23T11:33:16.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>翻译-如何使用React,Redux和Immutable-js构建Todo-App</title>
    <link href="http://yoursite.com/2017/03/23/%E7%BF%BB%E8%AF%91-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8React,Redux%E5%92%8CImmutable-js%E6%9E%84%E5%BB%BATodo-App/"/>
    <id>http://yoursite.com/2017/03/23/翻译-如何使用React,Redux和Immutable-js构建Todo-App/</id>
    <published>2017-03-23T00:04:10.000Z</published>
    <updated>2017-03-23T11:29:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文是翻译版本,<a href="https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/" target="_blank" rel="external">原文请见</a><br><em>By Dan Prince  May 03, 2016</em></p>
</blockquote>
<p>React使用组件和单向数据流方式描述用户界面,但是React对state的处理非常的简单.这一点让我们知道,React仅仅只当于传统的<code>Model-View-Controller</code>构架的<code>View</code>层.</p>
<p>仅仅使用React也可以构建大型的app,但是很快我们会发现,要保持代码的简洁,我们需要在其他地方管理state(把state的管理独立出来).</p>
<p>没有官方管理应用state的工具,但是有几个库工作的的不错.今天我们添加两个库和React一起来构建一个简单的app.</p>
<h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>Redux是一个小型的js库,作为app的state容器.糅合了Fluc和Elm的概念.我们可以使用Redux管理任何app的state,只要我们紧扣下面的指导：</p>
<ol>
<li>我们的state保持在一个单一的store中</li>
<li>state的改变只会来自于actions</li>
</ol>
<p>Redux的核心 store是一个函数,它接收当前的application的state和一个action,合并创建一个新的application state,这个函数叫做Reducer.</p>
<p>我们的React组件负责发送actions到我们的store,反过来,如果组件需要渲染的时候,store会通知他.</p>
<h2 id="ImmutableJS"><a href="#ImmutableJS" class="headerlink" title="ImmutableJS"></a>ImmutableJS</h2><p>因为Redux不允许我们mutate程序的state,如果借助immutable数据结构模型化应用程序的state将会非常的有用.<br><code>Immutable.js</code>使用突变界面(mutative interfaces)提供一些immutable数据结构,这些界面实施时非常的高效,灵感来自于Clojure和Scala.</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们将会使用React,Redux和ImmutableJS去构建一个简单的todo list,允许我们添加todos,在完成和未完成之间切换.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//html</div><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">//css</div><div class="line"> html, body, input, button &#123;</div><div class="line">  font-family: Sawasdee;</div><div class="line">  font-size: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__list &#123;</div><div class="line">  margin: 0;</div><div class="line">  padding: 0;</div><div class="line">  list-style-type: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item &#123;</div><div class="line">  padding: .5em .25em;</div><div class="line">  border-bottom: solid 1px #eee;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__item:hover &#123;</div><div class="line">  background: #f7f7f7;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__entry &#123;</div><div class="line">  border: solid 1px #ccc;</div><div class="line">  padding: .25em .5em;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #f3f3f3;</div><div class="line">  width: 100%;</div><div class="line">  box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button &#123;</div><div class="line">  border: 0;</div><div class="line">  border-radius: .2em;</div><div class="line">  background: #71B7FF;  </div><div class="line">  color: #fff;</div><div class="line">  padding: .25em .5em;</div><div class="line">  margin: .5em 0;</div><div class="line">  margin-right: .25em;</div><div class="line">  cursor: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.todo__button:hover &#123;</div><div class="line">  background: #B2D8FF;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//js</span></div><div class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span>, List &#125; = Immutable;</div><div class="line"><span class="keyword">const</span> &#123; createStore &#125; = Redux;</div><div class="line"><span class="keyword">const</span> &#123; Provider, connect &#125; = reactRedux;</div><div class="line"></div><div class="line"><span class="keyword">const</span> components = &#123;</div><div class="line">  Todo(&#123; todo &#125;) &#123;</div><div class="line">    <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;  </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  TodoList(&#123; todos, toggleTodo, addTodo &#125;) &#123;</div><div class="line">    <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> text = e.target.value;</div><div class="line">      <span class="keyword">if</span>(e.which === <span class="number">13</span> &amp;&amp; text.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        addTodo(text);</div><div class="line">        e.target.value = <span class="string">''</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> toggleClick = <span class="function">(<span class="params">id</span>) =&gt;</span> () =&gt; toggleTodo(id);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> &#123; Todo &#125; = components;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;div className='todo'&gt;</div><div class="line">        &lt;input type='text'</div><div class="line">               className='todo__entry'</div><div class="line">               placeholder='Add todo'</div><div class="line">               onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">        &lt;ul className='todo__list'&gt;</div><div class="line">          &#123;todos.map(t =&gt; (</div><div class="line">            &lt;li</div><div class="line">              key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">              &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">          ))&#125; </div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const actions = &#123;</div><div class="line">  addTodo(text) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'ADD_TODO',</div><div class="line">      payload: &#123;</div><div class="line">        id: Math.random().toString(34).slice(2),</div><div class="line">        isDone: false,</div><div class="line">        text</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;,</div><div class="line">  toggleTodo(id) &#123;</div><div class="line">    return &#123;</div><div class="line">      type: 'TOGGLE_TODO',</div><div class="line">      payload: id</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const init = List();</div><div class="line"></div><div class="line">const reducer = function(state=init, action) &#123;</div><div class="line">  switch(action.type) &#123;</div><div class="line">    case 'ADD_TODO':</div><div class="line">      return state.push(</div><div class="line">        Map(action.payload)</div><div class="line">      );</div><div class="line">    case 'TOGGLE_TODO':</div><div class="line">      return state.map(t =&gt; &#123;</div><div class="line">        if(t.get('id') == action.payload) &#123;</div><div class="line">          return t.update('isDone', isDone =&gt; !isDone);</div><div class="line">        &#125; else &#123;</div><div class="line">          return t;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    default:</div><div class="line">      return state;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const containers = &#123;</div><div class="line">  TodoList: connect(</div><div class="line">    function mapStateToProps(state) &#123;</div><div class="line">      return &#123;</div><div class="line">        todos: state</div><div class="line">      &#125;;</div><div class="line">    &#125;,</div><div class="line">    function mapDispatchToProps(dispatch) &#123;</div><div class="line">      return &#123;</div><div class="line">        toggleTodo: (id) =&gt; dispatch(actions.toggleTodo(id)),</div><div class="line">        addTodo: (text) =&gt; dispatch(actions.addTodo(text))</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line">  )(components.TodoList)</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const &#123; TodoList &#125; = containers;</div><div class="line">const store = createStore(reducer);</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">    &lt;TodoList /&gt;</div><div class="line">  &lt;/Provider&gt;,</div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>代码在 <a href="https://github.com/sitepoint-editors/immutable-redux-todo" target="_blank" rel="external">Github</a></p>
<blockquote>
<p>可能提示build失败,<code>npm install babel-core</code>试试</p>
</blockquote>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p>从创建项目📂开始,建立一个package.json文件.然后安装需要的依赖包.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> npm install --save react react-dom redux react-redux immutable</div><div class="line">npm install --save-dev webpack babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure>
<hr>
<p>使用JSX和ES2015,用Babel编译代码,使用Webpack来完成这个模块绑定过程.</p>
<p>在<code>webpack.config.js</code>文件中创建Webpack配置文件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/app.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">        <span class="attr">query</span>: &#123; <span class="attr">presets</span>: [ <span class="string">'es2015'</span>, <span class="string">'react'</span> ] &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<hr>
<p>最后扩展一下<code>package.json</code>,添加一个npm script使用source maps编译我们的代码.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> "scripts": &#123;</div><div class="line">  "build": "webpack --debug"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每次编译代码的时候,运行<code>npm run build</code>.</p>
<h2 id="React-amp-Components"><a href="#React-amp-Components" class="headerlink" title="React&amp;Components"></a>React&amp;Components</h2><p>在实施项目之前,先创建一些傻瓜数据有很大的用处,但我们构思需要渲染的组件的时候,有一点点初步的感觉.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<hr>
<p>我们需要两个React组件<code>&lt;Todo/&gt;</code>和<code>&lt;TodoList&gt;</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/components.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Todo</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todo &#125; = props;</div><div class="line">  <span class="keyword">if</span>(todo.isDone) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos &#125; = props;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text' placeholder='Add todo' /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.id&#125; className='todo__item'&gt;</div><div class="line">            &lt;Todo todo=&#123;t&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>到了这一步,可以创建<code>index.html</code>文件来测试这些组价,添加下面的标记</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Immutable Todo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>还有一个项目的入口文件<code>src/app.js</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;dummyTodos&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>使用<code>npm run build</code>编译文件,然后在浏览器中打开index.html文件,确保运行.</p>
<h2 id="Redux-amp-ImmutableJS"><a href="#Redux-amp-ImmutableJS" class="headerlink" title="Redux&amp;ImmutableJS"></a>Redux&amp;ImmutableJS</h2><p>现在我们有了很好的UI,可以开始考虑组件最后的state.开始创建的傻瓜数据是一个很好的开端,我们可以很容易转化为ImmutableJS集合.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dummyTodos = List([</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">isDone</span>: <span class="literal">true</span>,  <span class="attr">text</span>: <span class="string">'make components'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'design actions'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'implement reducer'</span> &#125;),</div><div class="line">  <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">isDone</span>: <span class="literal">false</span>, <span class="attr">text</span>: <span class="string">'connect components'</span> &#125;)</div><div class="line">]);</div></pre></td></tr></table></figure>
<hr>
<p>ImmutableJS map和Javascript的对象工作方式不同,所以我们要对组件做一点轻微的改变.property接入的地方(例如：todo.id)需要使用一个方法调用来代替(例如:<code>todo.get(‘id’)</code>).</p>
<h2 id="设计Actions"><a href="#设计Actions" class="headerlink" title="设计Actions"></a>设计Actions</h2><p>现在我们获得了数据的特征,可以考虑一下actions的更新.这个实例中,我们仅仅需要两个acions,一个是添加新的todo,另一个转换todo的状态.</p>
<p>让我们定义几个函数创建这些actions</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">// src/actions.js</span></div><div class="line"></div><div class="line"><span class="comment">// succinct hack for generating passable unique ids</span></div><div class="line"><span class="keyword">const</span> uid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">34</span>).slice(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: &#123;</div><div class="line">      <span class="attr">id</span>: uid(),</div><div class="line">      <span class="attr">isDone</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">text</span>: text</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">toggleTodo</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>,</div><div class="line">    <span class="attr">payload</span>: id</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>每一个action仅仅是一个有type和payload的属性对象.在我们触发action后,type属性帮助我们用payload来作什么.</p>
<h2 id="设计一个Reducer"><a href="#设计一个Reducer" class="headerlink" title="设计一个Reducer"></a>设计一个Reducer</h2><p>现在我们知道了state的特性和更新state的action,我们可以创建reducer了.仅仅提醒一下,reducer是一个接收state和action的函数,然后用来计算更新state.</p>
<p>这里是我们reducer的初始结构.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/reducer.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; List, <span class="built_in">Map</span> &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> init = List([]);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">todos=init, action</span>) </span>&#123;</div><div class="line">  <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> todos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>操作<code>ADD_TODO</code>action非常简单,可是使用<code>.push()</code>方法,返回一个新的列表,添加todo到末尾.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.push(<span class="built_in">Map</span>(action.payload));</div></pre></td></tr></table></figure>
<hr>
<p>记住要push到列表之前,要把todo对象转变为immutable map.</p>
<p>我们需要处理的稍微复杂的action是<code>TOOGLE_TODO</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</div><div class="line"> <span class="keyword">return</span> todos.map(<span class="function"><span class="params">t</span> =&gt;</span> &#123;</div><div class="line">   <span class="keyword">if</span>(t.get(<span class="string">'id'</span>) === action.payload) &#123;</div><div class="line">     <span class="keyword">return</span> t.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     <span class="keyword">return</span> t;</div><div class="line">   &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>.map()</code>遍历列表,找到与aciton<code>id</code>匹配的todo项目.之后我们调用<code>.update()</code>方法,接收一个键和函数,然后返回一个map的新拷贝到updata函数,新拷贝中新值替换了初始值.</p>
<p>字面量版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">const</span> todo = <span class="built_in">Map</span>(&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">'foo'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</div><div class="line">todo.update(<span class="string">'isDone'</span>, isDone =&gt; !isDone);</div><div class="line"><span class="comment">// =&gt; &#123; id: 0, text: 'foo', isDone: true &#125;</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="把所有的东西都连系到一起"><a href="#把所有的东西都连系到一起" class="headerlink" title="把所有的东西都连系到一起"></a>把所有的东西都连系到一起</h2><p>actions和reducer准备好了,可以创建一个store,连接到我们的React组件中.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">todos</span>=<span class="string">&#123;store.getState()&#125;</span> /&gt;</span>,</span></div><div class="line">  document.getElementById('app')</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<p>为了保持组件和store的独立,我们使用<code>react-redux</code>帮助简化这个过程.它允许我们创建独立于store的容器,包装所有的组件,我们不需要改变先前的设计.</p>
<p>我们需要一个容器包装<code>&lt;TodoList/&gt;</code>组件,看看下面的内容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/containers.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> components <span class="keyword">from</span> <span class="string">'./components'</span>;</div><div class="line"><span class="keyword">import</span> &#123; addTodo, toggleTodo &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TodoList = connect(</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">)(components.TodoList);</div></pre></td></tr></table></figure>
<hr>
<p>我们使用<code>connect</code>函数创建容器.当我们调用<code>connect()</code>函数,传递两个函数,<code>mapStateToProps()</code>和<code>mapDispatchToProps()</code>.</p>
<p><code>mapStateToProps()</code>函数接收当前store的state作为参数,期待返回一个我们包装组件需要的对象映射.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">todos</span>: state &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>下面代码是一个包装组件根据映射map可视化的结果.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>我们也需要提供<code>mapDispatchProps</code>函数,传递store的<code>dispatch</code>方法,所以我们可以使用action creatros来dispatch actions.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mapDispatchToProps</span>(<span class="params">dispatch</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">addTodo</span>: <span class="function"><span class="params">text</span> =&gt;</span> dispatch(addTodo(text)),</div><div class="line">    <span class="attr">toggleTodo</span>: <span class="function"><span class="params">id</span> =&gt;</span> dispatch(toggleTodo(id))</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>再一次实例化组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;TodoList todos=&#123;state&#125;</div><div class="line">         addTodo=&#123;text =&gt; dispatch(addTodo(text))&#125;</div><div class="line">         toggleTodo=&#123;id =&gt; dispatch(toggleTodo(id))&#125; /&gt;</div></pre></td></tr></table></figure>
<hr>
<p>现在我们已经把action creators映射到组件,可以从事件监听中调用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">TodoList</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123; todos, toggleTodo, addTodo &#125; = props;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> onSubmit = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> input = event.target;</div><div class="line">    <span class="keyword">const</span> text = input.value;</div><div class="line">    <span class="keyword">const</span> isEnterKey = (event.which == <span class="number">13</span>);</div><div class="line">    <span class="keyword">const</span> isLongEnough = text.length &gt; <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(isEnterKey &amp;&amp; isLongEnough) &#123;</div><div class="line">      input.value = <span class="string">''</span>;</div><div class="line">      addTodo(text);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> toggleClick = <span class="function"><span class="params">id</span> =&gt;</span> event =&gt; toggleTodo(id);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;div className='todo'&gt;</div><div class="line">      &lt;input type='text'</div><div class="line">             className='todo__entry'</div><div class="line">             placeholder='Add todo'</div><div class="line">             onKeyDown=&#123;onSubmit&#125; /&gt;</div><div class="line">      &lt;ul className='todo__list'&gt;</div><div class="line">        &#123;todos.map(t =&gt; (</div><div class="line">          &lt;li key=&#123;t.get('id')&#125;</div><div class="line">              className='todo__item'</div><div class="line">              onClick=&#123;toggleClick(t.get('id'))&#125;&gt;</div><div class="line">            &lt;Todo todo=&#123;t.toJS()&#125; /&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        ))&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>container容器自动订阅store的变化,只要的映射的props变化的时候,容器包装的组件就会重新渲染.</p>
<p>最后,需要使容器组件独立于store,使用<code>&lt;Provider/&gt;</code>组件.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// src/app.js</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</div><div class="line"><span class="keyword">import</span> &#123; TodoList &#125; <span class="keyword">from</span> <span class="string">'./containers'</span>;</div><div class="line"><span class="comment">//                          ^^^^^^^^^^</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> store = createStore(reducer);</div><div class="line"></div><div class="line">render(</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">TodoList</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span>,</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<hr>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>不可否认,对于初学者来说,React和Redux的生态系统是相当复杂和令人迷惑的.<br>但是好消息是这些概念是可以可以转移的.我们仅仅粗略的接触了Redux的基础构架,但是已经足够我们学习<code>Elm 构架</code>,或者选取ClojureScript库例如：<code>Om</code>,<code>Re-frame</code>.类似的,我们仅仅看到immutable数据结构的只言片语,但是已经足够我们学习<code>Clojure</code>或者<code>Haskell</code>.</p>
<p>不管你是刚开始探索有关state的web编程开发者,还是使用javascript很长时间的开发者,基于action构架的办成和immutable数据结构变得至观重要的技能.所以现在是学习这些内容的时间了.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是翻译版本,&lt;a href=&quot;https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/&quot; target=&quot;_blank&quot; rel=
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Immutable-collections</title>
    <link href="http://yoursite.com/2017/03/22/Immutable%20collections%20for%20JavaScript/"/>
    <id>http://yoursite.com/2017/03/22/Immutable collections for JavaScript/</id>
    <published>2017-03-22T00:04:10.000Z</published>
    <updated>2017-03-23T12:57:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Immutable-collections-for-JavaScript"><a href="#Immutable-collections-for-JavaScript" class="headerlink" title="Immutable collections for JavaScript"></a>Immutable collections for JavaScript</h1><p><a href="https://travis-ci.org/facebook/immutable-js" target="_blank" rel="external"><img src="https://travis-ci.org/facebook/immutable-js.svg?branch=master" alt="Build Status"></a></p>
<p><a href="http://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="external">Immutable</a> data cannot be changed once created, leading to much simpler<br>application development, no defensive copying, and enabling advanced memoization<br>and change detection techniques with simple logic. <a href="http://en.wikipedia.org/wiki/Persistent_data_structure" target="_blank" rel="external">Persistent</a> data presents<br>a mutative API which does not update the data in-place, but instead always<br>yields new updated data.</p>
<p>Immutable.js provides many Persistent Immutable data structures including:<br><code>List</code>, <code>Stack</code>, <code>Map</code>, <code>OrderedMap</code>, <code>Set</code>, <code>OrderedSet</code> and <code>Record</code>.</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using<br>structural sharing via <a href="http://en.wikipedia.org/wiki/Hash_array_mapped_trie" target="_blank" rel="external">hash maps tries</a> and <a href="http://hypirion.com/musings/understanding-persistent-vector-pt-1" target="_blank" rel="external">vector tries</a> as popularized<br>by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p><code>Immutable</code> also provides a lazy <code>Seq</code>, allowing efficient<br>chaining of collection methods like <code>map</code> and <code>filter</code> without creating<br>intermediate representations. Create some <code>Seq</code> with <code>Range</code> and <code>Repeat</code>.</p>
<p>Want to hear more? Watch the presentation about Immutable.js:</p>
<p><a href="https://youtu.be/I7IdS-PbEgI" target="_blank" alt="Immutable Data and React"><img src="https://img.youtube.com/vi/I7IdS-PbEgI/0.jpg"></a></p>
<h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><p>Install <code>immutable</code> using npm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install immutable</div></pre></td></tr></table></figure>
<p>Then require it into any module.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>To use <code>immutable</code> from a browser, download <a href="https://github.com/facebook/immutable-js/blob/master/dist/immutable.min.js" target="_blank" rel="external">dist/immutable.min.js</a><br>or use a CDN such as <a href="https://cdnjs.com/libraries/immutable" target="_blank" rel="external">CDNJS</a><br>or <a href="http://www.jsdelivr.com/#!immutable.js" target="_blank" rel="external">jsDelivr</a>.</p>
<p>Then, add it as a script tag to your page:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"immutable.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;a:<span class="number">1</span>, b:<span class="number">2</span>, c:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Or use an AMD loader (such as <a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a>):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>([<span class="string">'./immutable.min.js'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">Immutable</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line">    <span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">    map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">    map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>If you’re using <a href="http://browserify.org/" target="_blank" rel="external">browserify</a>, the <code>immutable</code> npm module<br>also works from the browser.</p>
<h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>Use these Immutable collections and sequences as you would use native<br>collections in your <a href="http://typescriptlang.org" target="_blank" rel="external">TypeScript</a> programs while still taking<br>advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Just add a reference with a relative path to the type declarations at the top<br>of your file.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/&gt;</span></div><div class="line"><span class="keyword">import</span> Immutable = <span class="built_in">require</span>(<span class="string">'immutable'</span>);</div><div class="line"><span class="keyword">var</span> map1: Immutable.Map&lt;string, number&gt;;</div><div class="line">map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">map1.get(<span class="string">'b'</span>); <span class="comment">// 2</span></div><div class="line">map2.get(<span class="string">'b'</span>); <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h2 id="The-case-for-Immutability"><a href="#The-case-for-Immutability" class="headerlink" title="The case for Immutability"></a>The case for Immutability</h2><p>Much of what makes application development difficult is tracking mutation and<br>maintaining state. Developing with immutable data encourages you to think<br>differently about how data flows through your application.</p>
<p>Subscribing to data events throughout your application creates a huge overhead of<br>book-keeping which can hurt performance, sometimes dramatically, and creates<br>opportunities for areas of your application to get out of sync with each other<br>due to easy to make programmer error. Since immutable data never changes,<br>subscribing to changes throughout the model is a dead-end and new data can only<br>ever be passed from above.</p>
<p>This model of data flow aligns well with the architecture of <a href="http://facebook.github.io/react/" target="_blank" rel="external">React</a><br>and especially well with an application designed using the ideas of <a href="http://facebook.github.io/flux/docs/overview.html" target="_blank" rel="external">Flux</a>.</p>
<p>When data is passed from above rather than being subscribed to, and you’re only<br>interested in doing work when something has changed, you can use equality.</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While<br>objects represent some thing which could change over time, a value represents<br>the state of that thing at a particular instance of time. This principle is most<br>important to understanding the appropriate use of immutable data. In order to<br>treat Immutable.js collections as values, it’s important to use the<br><code>Immutable.is()</code> function or <code>.equals()</code> method to determine value equality<br>instead of the <code>===</code> operator which determines object reference identity.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">2</span>);</div><div class="line">assert(map1.equals(map2) === <span class="literal">true</span>);</div><div class="line"><span class="keyword">var</span> map3 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>);</div><div class="line">assert(map1.equals(map3) === <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>Note: As a performance optimization <code>Immutable</code> attempts to return the existing<br>collection when an operation would result in an identical collection, allowing<br>for using <code>===</code> reference equality to determine if something definitely has not<br>changed. This can be extremely useful when used within a memoization function<br>which would prefer to re-run the function if a deeper equality check could<br>potentially be more costly. The <code>===</code> equality check is also used internally by<br><code>Immutable.is</code> and <code>.equals()</code> as a performance optimization.</p>
<p>If an object is immutable, it can be “copied” simply by making another reference<br>to it instead of copying the entire object. Because a reference is much smaller<br>than the object itself, this results in memory savings and a potential boost in<br>execution speed for programs which rely on copies (such as an undo-stack).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;);</div><div class="line"><span class="keyword">var</span> clone = map1;</div></pre></td></tr></table></figure>
<h2 id="JavaScript-first-API"><a href="#JavaScript-first-API" class="headerlink" title="JavaScript-first API"></a>JavaScript-first API</h2><p>While <code>immutable</code> is inspired by Clojure, Scala, Haskell and other functional<br>programming environments, it’s designed to bring these powerful concepts to<br>JavaScript, and therefore has an Object-Oriented API that closely mirrors that<br>of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES6</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a>.</p>
<p>The difference for the immutable collections is that methods which would mutate<br>the collection, like <code>push</code>, <code>set</code>, <code>unshift</code> or <code>splice</code> instead return a new<br>immutable collection. Methods which return new arrays like <code>slice</code> or <code>concat</code><br>instead return new immutable collections.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list1 = Immutable.List.of(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="keyword">var</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line"><span class="keyword">var</span> list3 = list2.unshift(<span class="number">0</span>);</div><div class="line"><span class="keyword">var</span> list4 = list1.concat(list2, list3);</div><div class="line">assert(list1.size === <span class="number">2</span>);</div><div class="line">assert(list2.size === <span class="number">5</span>);</div><div class="line">assert(list3.size === <span class="number">6</span>);</div><div class="line">assert(list4.size === <span class="number">13</span>);</div><div class="line">assert(list4.get(<span class="number">0</span>) === <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array</a> will be found in similar form on<br><code>Immutable.List</code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> found on <code>Immutable.Map</code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a><br>found on <code>Immutable.Set</code>, including collection operations like <code>forEach()</code><br>and <code>map()</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> alpha = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;);</div><div class="line">alpha.map(<span class="function">(<span class="params">v, k</span>) =&gt;</span> k.toUpperCase()).join();</div><div class="line"><span class="comment">// 'A,B,C,D'</span></div></pre></td></tr></table></figure>
<h3 id="Accepts-raw-JavaScript-objects"><a href="#Accepts-raw-JavaScript-objects" class="headerlink" title="Accepts raw JavaScript objects."></a>Accepts raw JavaScript objects.</h3><p>Designed to inter-operate with your existing JavaScript, <code>immutable</code><br>accepts plain JavaScript Arrays and Objects anywhere a method expects an<br><code>Iterable</code> with no performance penalty.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = Immutable.Map(&#123;<span class="attr">c</span>:<span class="number">10</span>, <span class="attr">a</span>:<span class="number">20</span>, <span class="attr">t</span>:<span class="number">30</span>&#125;);</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">d</span>:<span class="number">100</span>, <span class="attr">o</span>:<span class="number">200</span>, <span class="attr">g</span>:<span class="number">300</span>&#125;;</div><div class="line"><span class="keyword">var</span> map3 = map1.merge(map2, obj);</div><div class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></div></pre></td></tr></table></figure>
<p>This is possible because <code>immutable</code> can treat any JavaScript Array or Object<br>as an Iterable. You can take advantage of this in order to get sophisticated<br>collection methods on JavaScript Objects, which otherwise have a very sparse<br>native API. Because Seq evaluates lazily and does not cache intermediate<br>results, these operations can be extremely efficient.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line">Immutable.Seq(myObject).map(<span class="function"><span class="params">x</span> =&gt;</span> x * x).toObject();</div><div class="line"><span class="comment">// &#123; a: 1, b: 4, c: 9 &#125;</span></div></pre></td></tr></table></figure>
<p>Keep in mind, when using JS objects to construct Immutable Maps, that<br>JavaScript Object properties are always strings, even if written in a quote-less<br>shorthand, while Immutable Maps accept keys of any type.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="number">1</span>: <span class="string">"one"</span> &#125;;</div><div class="line"><span class="built_in">Object</span>.keys(obj); <span class="comment">// [ "1" ]</span></div><div class="line">obj[<span class="string">"1"</span>]; <span class="comment">// "one"</span></div><div class="line">obj[<span class="number">1</span>];   <span class="comment">// "one"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> map = Immutable.fromJS(obj);</div><div class="line">map.get(<span class="string">"1"</span>); <span class="comment">// "one"</span></div><div class="line">map.get(<span class="number">1</span>);   <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>Property access for JavaScript Objects first converts the key to a string, but<br>since Immutable Map keys can be of any type the argument to <code>get()</code> is<br>not altered.</p>
<h3 id="Converts-back-to-raw-JavaScript-objects"><a href="#Converts-back-to-raw-JavaScript-objects" class="headerlink" title="Converts back to raw JavaScript objects."></a>Converts back to raw JavaScript objects.</h3><p>All <code>immutable</code> Iterables can be converted to plain JavaScript Arrays and<br>Objects shallowly with <code>toArray()</code> and <code>toObject()</code> or deeply with <code>toJS()</code>.<br>All Immutable Iterables also implement <code>toJSON()</code> allowing them to be passed to<br><code>JSON.stringify</code> directly.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deep = Immutable.Map(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: Immutable.List.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) &#125;);</div><div class="line">deep.toObject() <span class="comment">// &#123; a: 1, b: 2, c: List [ 3, 4, 5 ] &#125;</span></div><div class="line">deep.toArray() <span class="comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span></div><div class="line">deep.toJS() <span class="comment">// &#123; a: 1, b: 2, c: [ 3, 4, 5 ] &#125;</span></div><div class="line"><span class="built_in">JSON</span>.stringify(deep) <span class="comment">// '&#123;"a":1,"b":2,"c":[3,4,5]&#125;'</span></div></pre></td></tr></table></figure>
<h3 id="Embraces-ES6"><a href="#Embraces-ES6" class="headerlink" title="Embraces ES6"></a>Embraces ES6</h3><p><code>Immutable</code> takes advantage of features added to JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla" target="_blank" rel="external">ES6</a>,<br>the latest standard version of ECMAScript (JavaScript), including <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol" target="_blank" rel="external">Iterators</a>,<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">Arrow Functions</a>, <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes" target="_blank" rel="external">Classes</a>, and <a href="http://www.2ality.com/2014/09/es6-modules-final.html" target="_blank" rel="external">Modules</a>. It’s also inspired by the<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set</a> collections added to ES6. The library is “transpiled” to ES3<br>in order to support all modern browsers.</p>
<p>All examples are presented in ES6. To run in all browsers, they need to be<br>translated to ES3.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES6</span></div><div class="line">foo.map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</div><div class="line"><span class="comment">// ES3</span></div><div class="line">foo.map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;);</div></pre></td></tr></table></figure>
<h2 id="Nested-Structures"><a href="#Nested-Structures" class="headerlink" title="Nested Structures"></a>Nested Structures</h2><p>The collections in <code>immutable</code> are intended to be nested, allowing for deep<br>trees of data, similar to JSON.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nested = Immutable.fromJS(&#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">c</span>:[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]&#125;&#125;&#125;);</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ] &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<p>A few power-tools allow for reading and operating on nested data. The<br>most useful are <code>mergeDeep</code>, <code>getIn</code>, <code>setIn</code>, and <code>updateIn</code>, found on <code>List</code>,<br><code>Map</code> and <code>OrderedMap</code>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nested2 = nested.mergeDeep(&#123;<span class="attr">a</span>:&#123;<span class="attr">b</span>:&#123;<span class="attr">d</span>:<span class="number">6</span>&#125;&#125;&#125;);</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 6 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line">nested2.getIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]); <span class="comment">// 6</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> nested3 = nested2.updateIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], value =&gt; value + <span class="number">1</span>);</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> nested4 = nested3.updateIn([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], list =&gt; list.push(<span class="number">6</span>));</div><div class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Lazy-Seq"><a href="#Lazy-Seq" class="headerlink" title="Lazy Seq"></a>Lazy Seq</h2><p><code>Seq</code> describes a lazy operation, allowing them to efficiently chain<br>use of all the Iterable methods (such as <code>map</code> and <code>filter</code>).</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be<br>changed, appended to, rearranged or otherwise modified. Instead, any mutative<br>method called on a Seq will return a new Seq.</p>
<p><strong>Seq is lazy</strong> — Seq does as little work as necessary to respond to any<br>method call.</p>
<p>For example, the following does not perform any work, because the resulting<br>Seq is never used:</p>
<pre><code>var oddSquares = Immutable.Seq.of(1,2,3,4,5,6,7,8)
  .filter(x =&gt; x % 2).map(x =&gt; x * x);
</code></pre><p>Once the Seq is used, it performs only the work necessary. In this<br>example, no intermediate arrays are ever created, filter is called three times,<br>and map is only called once:</p>
<pre><code>console.log(oddSquares.get(1)); // 9
</code></pre><p>Any collection can be converted to a lazy Seq with <code>.toSeq()</code>.</p>
<pre><code>var seq = Immutable.Map({a:1, b:1, c:1}).toSeq();
</code></pre><p>Seq allows for the efficient chaining of sequence operations, especially when<br>converting to a different concrete type (such as to a JS object):</p>
<pre><code>seq.flip().map(key =&gt; key.toUpperCase()).flip().toObject();
// { A: 1, B: 1, C: 1 }
</code></pre><p>As well as expressing logic that would otherwise seem memory-limited:</p>
<pre><code>Immutable.Range(1, Infinity)
  .skip(1000)
  .map(n =&gt; -n)
  .filter(n =&gt; n % 2 === 0)
  .take(2)
  .reduce((r, n) =&gt; r * n, 1);
// 1006008
</code></pre><p>Note: An iterable is always iterated in the same order, however that order may<br>not always be well defined, as is the case for the <code>Map</code>.</p>
<h2 id="Equality-treats-Collections-as-Data"><a href="#Equality-treats-Collections-as-Data" class="headerlink" title="Equality treats Collections as Data"></a>Equality treats Collections as Data</h2><p><code>Immutable</code> provides equality which treats immutable data structures as pure<br>data, performing a deep equality check if necessary.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map1 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</div><div class="line"><span class="keyword">var</span> map2 = Immutable.Map(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">1</span>, <span class="attr">c</span>:<span class="number">1</span>&#125;);</div><div class="line">assert(map1 !== map2); <span class="comment">// two different instances</span></div><div class="line">assert(Immutable.is(map1, map2)); <span class="comment">// have equivalent values</span></div><div class="line">assert(map1.equals(map2)); <span class="comment">// alternatively use the equals method</span></div></pre></td></tr></table></figure>
<p><code>Immutable.is()</code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is" target="_blank" rel="external">Object.is</a><br>including if both are immutable and all keys and values are equal<br>using the same measure of equality.</p>
<h2 id="Batching-Mutations"><a href="#Batching-Mutations" class="headerlink" title="Batching Mutations"></a>Batching Mutations</h2><blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable<br>return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,<br>which can add up to a minor performance penalty. If you need to apply a series<br>of mutations locally before returning, <code>Immutable</code> gives you the ability to<br>create a temporary mutable (transient) copy of a collection and apply a batch of<br>mutations in a performant manner by using <code>withMutations</code>. In fact, this is<br>exactly how  <code>Immutable</code> applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new<br>immutable Lists.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list1 = Immutable.List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="keyword">var</span> list2 = list1.withMutations(<span class="function"><span class="keyword">function</span> (<span class="params">list</span>) </span>&#123;</div><div class="line">  list.push(<span class="number">4</span>).push(<span class="number">5</span>).push(<span class="number">6</span>);</div><div class="line">&#125;);</div><div class="line">assert(list1.size === <span class="number">3</span>);</div><div class="line">assert(list2.size === <span class="number">6</span>);</div></pre></td></tr></table></figure>
<p>Note: <code>immutable</code> also provides <code>asMutable</code> and <code>asImmutable</code>, but only<br>encourages their use when <code>withMutations</code> will not suffice. Use caution to not<br>return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including<br><code>set</code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a<br>persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,<br>and <code>splice</code> will always return new immutable data-structures and never mutate<br>a mutable collection.</p>
<h2 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h2><p><a href="http://facebook.github.io/immutable-js/docs/" target="_blank" rel="external">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/facebook/immutable-js/blob/master/type-definitions/Immutable.d.ts" target="_blank" rel="external">Immutable.d.ts</a>.<br>Please contribute!</p>
<p>Also, don’t miss the <a href="https://github.com/facebook/immutable-js/wiki" target="_blank" rel="external">Wiki</a> which<br>contains articles on specific topics. Can’t find something? Open an <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">issue</a>.</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>If you are using the <a href="http://chaijs.com/" target="_blank" rel="external">Chai Assertion Library</a>, <a href="https://github.com/astorije/chai-immutable" target="_blank" rel="external">Chai Immutable</a> provides a set of assertions to use against <code>Immutable</code> collections.</p>
<h2 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h2><p>Use <a href="https://github.com/facebook/immutable-js/issues" target="_blank" rel="external">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="./CONTRIBUTING.md">contribute</a>.</p>
<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><p>Changes are tracked as <a href="https://github.com/facebook/immutable-js/releases" target="_blank" rel="external">Github releases</a>.</p>
<h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs" target="_blank" rel="external">Phil Bagwell</a>, for his inspiration<br>and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/" target="_blank" rel="external">Hugh Jackson</a>, for providing the npm package<br>name. If you’re looking for his unsupported package, see <a href="https://github.com/hughfdjackson/immutable" target="_blank" rel="external">this repository</a>.</p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><code>Immutable</code> is <a href="https://github.com/facebook/immutable-js/blob/master/LICENSE" target="_blank" rel="external">BSD-licensed</a>. We also provide an additional <a href="https://github.com/facebook/immutable-js/blob/master/PATENTS" target="_blank" rel="external">patent grant</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Immutable-collections-for-JavaScript&quot;&gt;&lt;a href=&quot;#Immutable-collections-for-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Immutable collection
    
    </summary>
    
      <category term="Redux" scheme="http://yoursite.com/categories/Redux/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>翻译-让我们把React-Container组合起来</title>
    <link href="http://yoursite.com/2017/03/21/%E7%BF%BB%E8%AF%91-%E8%AE%A9%E6%88%91%E4%BB%AC%E6%8A%8AReact-Container%E7%BB%84%E5%90%88%E8%B5%B7%E6%9D%A5/"/>
    <id>http://yoursite.com/2017/03/21/翻译-让我们把React-Container组合起来/</id>
    <published>2017-03-21T00:04:10.000Z</published>
    <updated>2017-03-23T11:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><em>Arunoda Susiripala</em>  <a href="https://voice.kadira.io/let-s-compose-some-react-containers-3b91b6d9b7c8#.92sjwgug1" target="_blank" rel="external">请参看原文</a></p>
</blockquote>
<p>近来(Jan,2016),自给自足的container(Redux的容器)方法在React的社区中非常的流行.他们在Realy,Redux甚至是在Meteor中广泛使用.这篇文章里我们深入container内部,了解一下怎么简便的组合containers.</p>
<h2 id="什么是Container"><a href="#什么是Container" class="headerlink" title="什么是Container?"></a>什么是Container?</h2><p>在React中,我们有props和states来管理组件的数据需求.最近有一个趋势,在组件中仅仅只通过props来接收数据和action.我们仅仅在组件内部保留state.</p>
<p>我们有时候叫这些组件为“单纯展示组件”.<br>我也不太确定谁发明的这个术语.但是我才可能是<a href="https://medium.com/@dan_abramov" target="_blank" rel="external">Dan Abramov</a>.<br>查看一下他的文章“Smart and Dumb Components”.</p>
<p>但是我认为叫做<strong><code>UI组件</code></strong>更好一点(或者仅仅叫做组件).<br>接着又另一套组件实际管理本地数据和获取远程数据.这些组件被称为<strong><code>container组件</code></strong>.Relay和Redux的React绑定是他们更流行了.</p>
<p>下面是怎么使用Reat Devtools来查看组件的视图.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-f461d4894bfc06de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/500" alt="1*QhMLf9dhu-cbAxN9Gc9dtg-2.png"></p>
<p>Container(BlogPost)接收postId Props.然后他将会获取数据传递到实际UI组件中.</p>
<h2 id="Container的常规任务"><a href="#Container的常规任务" class="headerlink" title="Container的常规任务"></a>Container的常规任务</h2><p>container的主要任务是获取数据,这里面有一些事情要做,让我们看看:</p>
<ul>
<li>请求数据(调用订阅或者仅仅获取数据)</li>
<li>当数据加载的时候展示加载图片</li>
<li>一旦数据返回,把它传递到UI组件中</li>
<li>如果有错误,展示给用户</li>
<li>当props改变了,需要重新获取或者重新订阅</li>
<li>当container卸载的时候,需要清除资源.</li>
</ul>
<p>这里container有很多的任务要完成.如果你想自己做这些任务,你就不得不做一些重复的工作,发生错误的来源就由此诞生了.</p>
<h2 id="React-Komposer的介绍"><a href="#React-Komposer的介绍" class="headerlink" title="React Komposer的介绍"></a>React Komposer的介绍</h2><p>React Komposer试图帮助我们更容易的合并containers.有了它,你可以使用任何数据资源,不管你的数据是来自于Promise,Observable甚至是Meteor‘s Tracker.</p>
<h3 id="让我们看看一个简单的例子"><a href="#让我们看看一个简单的例子" class="headerlink" title="让我们看看一个简单的例子"></a>让我们看看一个简单的例子</h3><p>像下面这样创建一个<em>数字时钟</em>:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-10d84673aea28707.gif?imageMogr2/auto-orient/strip" alt="Digital clock"></p>
<p>这是一个好的实例,因为我们可以测试一个container的几乎所有的功能.开始</p>
<p>首先安装react-komposer:</p>
<p><code>npm i — save react-komposer</code></p>
<p>然后输入compose函数：<br><code>import {compose} from ‘react-komposer’;</code></p>
<p>现在需要一个UI组件去渲染时间:</p>
<p><code>const Time = ({time}) =&gt; (&lt;div&gt;{time}&lt;/div&gt;);</code></p>
<p>这是我们的组合函数:</p>
<p>获取时间的时候需要调用<code>onData</code>回调函数(这里没有实际做什么.)</p>
<p>需要调用<code>onData</code>函数多少次可以,只要程序需要.如果有错误,可以把错误信息作为<code>onData</code>的第一个值.</p>
<p>最后,我们需要返回一个清除资源的额函数.在这个实例中用他来清除setInterva的句柄.</p>
<p>好了,现在来合并一下composer:<br><code>const Clock = compose(composerFunction)(Time);</code></p>
<p>然后渲染到DOM中:<br><code>ReactDOM.render(&lt;Clock /&gt;, document.body);</code></p>
<p>现在我们得到了一个自我管理(state)的时钟.<a href="https://jsfiddle.net/arunoda/jxse2yw8/" target="_blank" rel="external">看看实际演示</a>.</p>
<p>这里有个<a href="https://jsfiddle.net/arunoda/7qy1mxc7/" target="_blank" rel="external">更复杂的版本</a>,使用props,处理错误信息.</p>
<p>你也可以改变默认加载和错误组件.查看一下<a href="https://github.com/kadirahq/react-komposer#api" target="_blank" rel="external">react-komposer 文档</a>.</p>
<p>获得好处:更容易测试</p>
<p>作为这个组件的附加效果,我们现在可以很容易测试UI代码.</p>
<ul>
<li>因为UI组件仅仅通过props接收数据(和action),是的测试很容易.</li>
<li>也可以测试组合函数的数据获取逻辑.</li>
</ul>
<h2 id="对于多种数据源的支持"><a href="#对于多种数据源的支持" class="headerlink" title="对于多种数据源的支持"></a>对于多种数据源的支持</h2><p>我已经提到过,可以使用这个组件和任何数据源一起工作,因为组合的API是通用的.我们有处理流行数据源的特定APIS.<br> 这里是:</p>
<ul>
<li><em>composeWithPromise</em>用于Promise-baseed 数据源</li>
<li><em>composeWithObservable</em>用于Rx.js Observalbe-based数据源</li>
<li><em>composeWithTracker</em>出事特殊的一些数据源.</li>
</ul>
<p>有了这些API,我们可以使用react-komposer去合并任何数据源的container.</p>
<p>看看<a href="https://github.com/kadirahq/react-komposer#using-with-xxx" target="_blank" rel="external">repo</a>,有更多的例子.</p>
<p>在你的app中使用一下react-komposer,你会喜欢上他的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Arunoda Susiripala&lt;/em&gt;  &lt;a href=&quot;https://voice.kadira.io/let-s-compose-some-react-containers-3b91b6d9b7c8#.92sjwgug1&quot; t
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript动态类型，鸭子终于煮熟了</title>
    <link href="http://yoursite.com/2017/03/20/javascript%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%B8%AD%E5%AD%90%E7%BB%88%E4%BA%8E%E7%85%AE%E7%86%9F%E4%BA%86/"/>
    <id>http://yoursite.com/2017/03/20/javascript动态类型，鸭子终于煮熟了/</id>
    <published>2017-03-20T00:04:10.000Z</published>
    <updated>2017-03-23T12:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>冬至来了，刚去吃了一碗萝卜饺子，浑身发热。突然觉得鸭子已经熟了。</p>
<p>开个玩笑。这里要说的是动态语言的鸭子类型(ducking type)。 <code>这个话题应该是整个javascript面向对象编程的核心思想</code>.不知道下这个结论对不对？可是在前面还不太了解到底是什么意思。看代码的时候总有种感觉，就是javascript太灵活了，怎么什么对象的方法都可以直接通过参数传递的方式来在另一个函数中使用。在模式学习时常看到这种代码。<br>刚才又重新看这部分内容时突然明白了。这个方法就是面向对象编程里的鸭子模型。</p>
<p>什么是鸭子类型呢？我总结一句话，英雄不问出处，只要能干活就行。javascript里面对象都是蓝领，只干活，至于是小学水平还是博士水平，我们不关心，能干活就行。 java语言就不是，java在你干活之前想要把你的祖宗十八代都查一遍，根正苗红的才能来干活。所以javascript就很灵活啦。</p>
<p>这就是鸭子类型。<code>如果它走起路来像鸭子，叫起来嘎嘎的，那么它就是鸭子</code>。</p>
<p>鸭子类型赋予了javascript极大的灵活性，动态调用对象方法的时候非常自由。 </p>
<p>参考《javascript模式设计与开发实践》 第一章</p>
<p>看下面代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> duck = &#123;  <span class="comment">//鸭子对象</span></div><div class="line">		duckSinging: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'嘎嘎嘎'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> chicken = &#123;  <span class="comment">//鸡对象</span></div><div class="line">		duckSinging: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'嘎嘎嘎'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> choir = []; <span class="comment">// 合唱团</span></div><div class="line">	<span class="keyword">var</span> joinChoir = <span class="function"><span class="keyword">function</span>(<span class="params"> animal </span>)</span>&#123; <span class="comment">//实例化动物对象</span></div><div class="line">		<span class="keyword">if</span> ( animal &amp;&amp; <span class="keyword">typeof</span> animal.duckSinging === <span class="string">'function'</span> )&#123; </div><div class="line">       <span class="comment">//稍作检测，只要有唱歌的方法就可以用。</span></div><div class="line">			choir.push( animal );</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'恭喜加入合唱团'</span> );</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'合唱团已有成员数量:'</span> + choir.length );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	joinChoir( duck ); <span class="comment">// 恭喜加入合唱团</span></div><div class="line">	joinChoir( chicken ); <span class="comment">// 恭喜加入合唱团</span></div></pre></td></tr></table></figure>
<p>以上就是一个鸭子类型的代码， 鸡也混入合唱团了，但是没有关系，英雄不问出处，只要你能唱歌就行了。<br>很方便对象方法的调用。 javascript代码中遍布这样的例子，但是现在看来一点也不奇怪了。因为这鸭子类型就是动态语言的优势。而javascript就是动态语言之一，只是实现了这种模式而已。</p>
<p>对于这个问题的认识也破费周折，但是现在看来是值得的。理解了这一点，对javascript的应用能力就更加深了一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;冬至来了，刚去吃了一碗萝卜饺子，浑身发热。突然觉得鸭子已经熟了。&lt;/p&gt;
&lt;p&gt;开个玩笑。这里要说的是动态语言的鸭子类型(ducking type)。 &lt;code&gt;这个话题应该是整个javascript面向对象编程的核心思想&lt;/code&gt;.不知道下这个结论对不对？可是在前面
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript的模板方法模式</title>
    <link href="http://yoursite.com/2017/03/19/javascript%E7%9A%84%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/19/javascript的模板方法模式/</id>
    <published>2017-03-19T00:04:10.000Z</published>
    <updated>2017-03-23T12:05:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>模板方法是一种只需要使用继承就可以实现的非常简单的模式<br> 模板方法由两部分组成，一是抽象的父类，二是具体实现的子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。</p>
</blockquote>
<p>参考《javascript模式设计与开发实践》第11章</p>
<p>这个模式方法很有意思,在使用之前需要有一个抽象的额过程，是对类似的生产过程的具体细节的理解，找出流程中的共同点作为抽象的父类。<br>咖啡和茶的冲泡过程</p>
<table>
<thead>
<tr>
<th style="text-align:left">泡<code>咖啡</code></th>
<th style="text-align:left">泡<code>茶</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">把水煮沸</td>
<td style="text-align:left">把水煮沸</td>
</tr>
<tr>
<td style="text-align:left">用沸水<code>泡咖啡</code></td>
<td style="text-align:left">用沸水<code>浸泡茶叶</code></td>
</tr>
<tr>
<td style="text-align:left">把<code>咖啡</code>倒进杯子</td>
<td style="text-align:left">把<code>茶水</code>倒进杯子</td>
</tr>
<tr>
<td style="text-align:left">加<code>糖和牛奶</code></td>
<td style="text-align:left">加<code>柠檬</code></td>
</tr>
</tbody>
</table>
<p>把泡咖啡和泡茶的不同点标示出来，剩下的部分就是共同的部分</p>
<ul>
<li>[ ] 原料不同，一个是咖啡，一个是茶。抽象为饮料</li>
<li>[ ] 泡的方式不同，一个是泡，一个是浸泡。统一抽象为泡</li>
<li>[ ] 加入的调味品不同，一个是糖和牛奶，一个是柠檬。抽象为调料<br>整个冲泡饮料的过程就抽象为下面的流程</li>
</ul>
<ol>
<li>把水煮沸</li>
<li>用沸水冲泡饮料</li>
<li>把饮料倒进被子</li>
<li>加调料</li>
</ol>
<p>抽象的父类的代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Beverage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line">Beverage.prototype.boilWater = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log( <span class="string">'把水煮沸'</span> );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Beverage.prototype.brew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 空方法，应该由子类重写</span></div><div class="line">Beverage.prototype.pourInCup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 空方法，应该由子类重写</span></div><div class="line">Beverage.prototype.addCondiments = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 空方法，应该由子类重写</span></div><div class="line">Beverage.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定义子类的函数执行顺序</span></div><div class="line">	<span class="keyword">this</span>.boilWater();</div><div class="line">	<span class="keyword">this</span>.brew();</div><div class="line">	<span class="keyword">this</span>.pourInCup();</div><div class="line">	<span class="keyword">this</span>.addCondiments();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有了父类的模板，在煮茶是就依照父类的模板来使用，通用部分不动，特殊的地方重写父类的方法</p>
<p>茶叶子类继承父类的模板</p>
<pre><code>var Tea = function(){}; //定义煮茶子类
Tea.prototype = new Beverage(); //继承父类
Tea.prototype.brew = function(){ //重写父类方法
    console.log( &apos;用沸水浸泡茶叶&apos; );
};
Tea.prototype.pourInCup = function(){ 重写父类方法
    console.log( &apos;把茶倒进杯子&apos; );
};
Tea.prototype.addCondiments = function(){ 重写父类方法
    console.log( &apos;加柠檬&apos; );
};
var tea = new Tea(); //实例化子类
tea.init(); //依照父类的方法执行顺序来执行

//由于javascript的对象原型继承链的方式和java的继承是完全不同的，这里代码结构和java类似，但是里面的机制是不同的

<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line">	</div><div class="line"></div><div class="line"><span class="clean">#####钩子方法</span></div><div class="line"></div><div class="line"><span class="number">1.</span> 把水煮沸</div><div class="line"><span class="number">2.</span> 用沸水冲泡饮料</div><div class="line"><span class="number">3.</span> 把饮料倒进被子</div><div class="line"><span class="number">4.</span> 加调料</div><div class="line"></div><div class="line">上面是一般的冲调饮料的流程，但是可能会有特殊情况，比如有的人可能不会加调料。遇到这种情况需要使用`钩子方法`来在隔离有变化的步骤</div></pre></td></tr></table></figure>
</code></pre><p>var Beverage = function(){};<br>    Beverage.prototype.boilWater = function(){<br>        console.log( ‘把水煮沸’ );<br>    };<br>    Beverage.prototype.brew = function(){<br>        throw new Error( ‘子类必须重写brew 方法’ );<br>    };<br>    Beverage.prototype.pourInCup = function(){<br>        throw new Error( ‘子类必须重写pourInCup 方法’ );<br>    };<br>    Beverage.prototype.addCondiments = function(){<br>        throw new Error( ‘子类必须重写addCondiments 方法’ );<br>    };<br>    Beverage.prototype.customerWantsCondiments = function(){<br>        return true; // 默认需要调料<br>    };<br>    Beverage.prototype.init = function(){<br>        this.boilWater();<br>        this.brew();<br>        this.pourInCup();<br>    if ( this.customerWantsCondiments() ){ // 如果挂钩返回true，则需要调料<br>        this.addCondiments(); //第四步就变为可选的方法了<br>    }<br>};<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">实例化冲泡咖啡的实例</div></pre></td></tr></table></figure></p>
<p> var CoffeeWithHook = function(){};<br> CoffeeWithHook.prototype = new Beverage();<br>CoffeeWithHook.prototype.brew = function(){<br>    console.log( ‘用沸水冲泡咖啡’ );<br>};<br>CoffeeWithHook.prototype.pourInCup = function(){<br>    console.log( ‘把咖啡倒进杯子’ );<br>};<br>CoffeeWithHook.prototype.addCondiments = function(){<br>    console.log( ‘加糖和牛奶’ );<br>};<br>CoffeeWithHook.prototype.customerWantsCondiments = function(){<br>    return window.confirm( ‘请问需要调料吗？’ );//对顾客选择的判断条件<br>};<br>var coffeeWithHook = new CoffeeWithHook();</p>
<p>```</p>
<p>模板方法通过封装变化提高系统扩展能力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模板方法是一种只需要使用继承就可以实现的非常简单的模式&lt;br&gt; 模板方法由两部分组成，一是抽象的父类，二是具体实现的子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。&lt;/p&gt;
&lt;/blockquote
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript组合模式</title>
    <link href="http://yoursite.com/2017/03/18/javascript%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/18/javascript组合模式/</id>
    <published>2017-03-17T23:04:10.000Z</published>
    <updated>2017-03-23T12:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在程序设计中，组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也是由更小的对象组成的。这里只是组合，并没有从属关系。参考《javascript设计模式与开发实践》第十章</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//宏命令的代码</span></div><div class="line"><span class="keyword">var</span> closeDoorCommand = &#123;<span class="comment">//作为叶对象</span></div><div class="line">		execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'关门'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> openPcCommand = &#123; <span class="comment">//作为叶对象</span></div><div class="line">		execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'开电脑'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> openQQCommand = &#123;<span class="comment">//作为叶对象</span></div><div class="line">		execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'登录QQ'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="comment">//组合模式的根对象</span></div><div class="line">	<span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">commandsList</span>: [],</div><div class="line">			<span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> command </span>)</span>&#123;<span class="comment">//叶对象作为数组的元素传递到</span></div><div class="line">			<span class="comment">//数组中</span></div><div class="line">				<span class="keyword">this</span>.commandsList.push( command );</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//执行组合命令</span></div><div class="line">				<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, command; command = <span class="keyword">this</span>.commandsList[ i++ ]; )&#123;</div><div class="line">					command.execute(); <span class="comment">//叶对象都有execute方法</span></div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> macroCommand = MacroCommand();</div><div class="line">	macroCommand.add( closeDoorCommand );<span class="comment">//添加到根对象数组中</span></div><div class="line">	macroCommand.add( openPcCommand );<span class="comment">//同上</span></div><div class="line">	macroCommand.add( openQQCommand );<span class="comment">//同上</span></div><div class="line">	macroCommand.execute();<span class="comment">//执行根命令</span></div></pre></td></tr></table></figure>
<p><em>两个要点</em>:1.js对象引用可以作为数组元素加入到数组中。2. 叶对象都有一样的execute方法。在根对象执行的时候，可以使用leaf.execute的模式来调用对象的方法。</p>
<blockquote>
<p>在叶对象中还可以继续扩展也对象，组合的深度继续加深。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//根对象的方法保持不变</span></div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">commandsList</span>: [],</div><div class="line">			<span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> command </span>)</span>&#123;</div><div class="line">				<span class="keyword">this</span>.commandsList.push( command );</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, command; command = <span class="keyword">this</span>.commandsList[ i++ ]; )&#123;</div><div class="line">					command.execute();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">var</span> openAcCommand = &#123;</div><div class="line">		<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="built_in">console</span>.log( <span class="string">'打开空调'</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line"><span class="comment">/**********家里的电视和音响是连接在一起的，所以可以用一个宏命令来组合打开电视和打开音响的命令</span></div><div class="line">*********/</div><div class="line"><span class="keyword">var</span> openTvCommand = &#123;</div><div class="line">	<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'打开电视'</span> );</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> openSoundCommand = &#123;</div><div class="line">	<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'打开音响'</span> );</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> macroCommand1 = MacroCommand(); <span class="comment">//第一个叶对象</span></div><div class="line">macroCommand1.add( openTvCommand ); <span class="comment">//添加下一级叶对象</span></div><div class="line">macroCommand1.add( openSoundCommand );<span class="comment">//同上</span></div><div class="line"><span class="comment">/*********关门、打开电脑和打登录QQ 的命令****************/</span></div><div class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</div><div class="line">	<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'关门'</span> );</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> openPcCommand = &#123;</div><div class="line">	<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'开电脑'</span> );</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> openQQCommand = &#123;</div><div class="line">	<span class="attr">execute</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'登录QQ'</span> );</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> macroCommand2 = MacroCommand();<span class="comment">//第二个叶对象</span></div><div class="line">macroCommand2.add( closeDoorCommand );<span class="comment">//添加下一级叶对象</span></div><div class="line">macroCommand2.add( openPcCommand );<span class="comment">//同上</span></div><div class="line">macroCommand2.add( openQQCommand );</div><div class="line"><span class="comment">/*********现在把所有的命令组合成一个“超级命令”**********/</span></div><div class="line"><span class="keyword">var</span> macroCommand = MacroCommand(); <span class="comment">//顶级根对象</span></div><div class="line">macroCommand.add( openAcCommand ); <span class="comment">//一个叶对象</span></div><div class="line">macroCommand.add( macroCommand1 ); <span class="comment">//另一个</span></div><div class="line">macroCommand.add( macroCommand2 ); <span class="comment">//另一个</span></div><div class="line"><span class="comment">/*********最后给遥控器绑定“超级命令”**********/</span></div><div class="line"><span class="keyword">var</span> setCommand = (<span class="function"><span class="keyword">function</span>(<span class="params"> command </span>)</span>&#123;</div><div class="line">	<span class="built_in">document</span>.getElementById( <span class="string">'button'</span> ).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		command.execute();</div><div class="line">	&#125;</div><div class="line">&#125;)( macroCommand );</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//最终所有的叶对象的引用都添加到commandlist数组中，在根对象上执行</span></div><div class="line"><span class="comment">//execute方法时，会遍历所有的叶对象，并执行leaf.execute()方法。</span></div><div class="line"><span class="comment">//得到结果</span></div></pre></td></tr></table></figure>
<p>#####最终还是使用了javascript的数组操作和对象操作的便利性。在javascript的模式设计中，基本都是在操作数组和对象。所有有必要还好在深刻理解一下数组对象的方法。</p>
<p>这个系列写了好几篇文章了。其实写的时候好多地方还不太懂，写着写着有些地方就明白了，所以还是要坚持写下去。现在觉得写的还不错，过半年可能觉得就很傻了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在程序设计中，组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也是由更小的对象组成的。这里只是组合，并没有从属关系。参考《javascript设计模式与开发实践》第十章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript桥接模式(2)</title>
    <link href="http://yoursite.com/2017/03/17/javascript%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F(2)/"/>
    <id>http://yoursite.com/2017/03/17/javascript桥接模式(2)/</id>
    <published>2017-03-17T13:04:10.000Z</published>
    <updated>2017-03-23T13:17:34.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>事件监听器</li>
<li>桥接模式的其他例子<br>这实际就是一个闭包的例子，通过闭包函数获取外层函数作用域内定义的私有变量。这个函数又可以叫做特权函数，getter函数。这个函数只get不set.       </li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> <span class="keyword">Public</span> = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> secret = <span class="number">3</span>;</div><div class="line">  this.privilegedGetter = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> secret;</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="keyword">Public</span>;</div><div class="line"><span class="keyword">var</span> data = o.privilegedGetter();</div></pre></td></tr></table></figure>
<p>3 .  用桥接模式联结多个类.通过下面的方法，如果代码从上往下看是聚合了连个类。在桥接类中统一返回。如果是从下往上看代码，实际是把一个完整的代码拆成了两个独立的类，这样两个独立的类可以修改自己的逻辑，不会影响到另一类的工作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> Class1 = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.a = a;</div><div class="line">  <span class="keyword">this</span>.b = b;</div><div class="line">  <span class="keyword">this</span>.c = c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> Class2 = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.d = d;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> BridgeClass = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.one = <span class="keyword">new</span> Class1(a, b, c);</div><div class="line">  <span class="keyword">this</span>.two = <span class="keyword">new</span> Class2(d);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>4 . 构建XHR连接队列</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;事件监听器&lt;/li&gt;
&lt;li&gt;桥接模式的其他例子&lt;br&gt;这实际就是一个闭包的例子，通过闭包函数获取外层函数作用域内定义的私有变量。这个函数又可以叫做特权函数，getter函数。这个函数只get不set.       &lt;/li&gt;
&lt;/ol&gt;
&lt;figure cla
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript单例模式(1)</title>
    <link href="http://yoursite.com/2017/03/16/javascript%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F(1)/"/>
    <id>http://yoursite.com/2017/03/16/javascript单例模式(1)/</id>
    <published>2017-03-16T00:04:10.000Z</published>
    <updated>2017-03-23T12:04:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>单例(singleton).这种模式提供了一种将代码组织为一个逻辑单元的手段，可以通过单一变量来访问。通过确保单例对象只有一个拷贝，可以确保代买使用童颜的全局资源。单例可以用来划分命名空间，可以借助单例把代码组织的更为一致，从而更容易阅读和维护。</p>
</blockquote>
<pre><code>本文参照这本书第五章，介绍的重点和另一本书好像是不同的。结合着看看    
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/2044710-c97bcd5773f19459.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="s3398900.jpg"></p>
<p>####单例的基本结构<br>最基本的就是一个对象字面量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象字面量作为单体</span></div><div class="line"><span class="keyword">var</span> Singleton = &#123;</div><div class="line">  <span class="attr">attribute1</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">attribute2</span>: <span class="number">10</span>,</div><div class="line"></div><div class="line">  <span class="attr">method1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">method2</span>: <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Singleton.attribute1 = <span class="literal">false</span>; <span class="comment">//修改</span></div><div class="line"><span class="keyword">var</span> total = Singleton.attribute2 + <span class="number">5</span>; <span class="comment">//使用单例</span></div><div class="line"><span class="keyword">var</span> result = Singleton.method1();</div></pre></td></tr></table></figure>
<p><code>方法位于对象字面量中就有了命名空间，和其他同名的函数就不会冲突了。对象字面量里的方法统一用  nameSpace.method的格式调用</code><br>对象字面量的命名空间还可以继续划分例如parent.children.method。<br>这样不仅变量发生冲突的机会大大减少，而且归属更明确了。</p>
<p>上面的对象字面量的单例是不是很眼熟？ 在node程序中的配置文件config.js里面是不是都是这种代码？ 配置项都是全局唯一的。</p>
<p>#####惰性实例化<br>本来单例是想写这个内容的，但是今天一看，还是没看全。曾探的js模式书里的单例其实都是这个部分。<code>实际的单例代码放在一个函数中，然后使用一个变量来缓存实例化的代码，如果已经实例化就直接返回缓存的代码。</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">  MyNamespace.Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> uniqueInstance; <span class="comment">// 私有变量缓存实例化单例</span></div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">constructor</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 具体需要按需加载的代码.</span></div><div class="line">    <span class="keyword">var</span> privateAttribute1 = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> privateAttribute2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod2</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> &#123; <span class="comment">// Public members.</span></div><div class="line">      publicAttribute1: <span class="literal">true</span>,</div><div class="line">      <span class="attr">publicAttribute2</span>: <span class="number">10</span>,</div><div class="line">    </div><div class="line">      <span class="attr">publicMethod1</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        ...</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">publicMethod2</span>: <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125;  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">getInstance</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(!uniqueInstance) &#123; <span class="comment">// 单例若不存在，调用constructor函数</span></div><div class="line">        uniqueInstance = <span class="keyword">constructor</span>(); //调用<span class="keyword">constructor</span>函数后，缓存返回值</div><div class="line">      &#125;</div><div class="line">      return uniqueInstance;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单例(singleton).这种模式提供了一种将代码组织为一个逻辑单元的手段，可以通过单一变量来访问。通过确保单例对象只有一个拷贝，可以确保代买使用童颜的全局资源。单例可以用来划分命名空间，可以借助单例把代码组织的更为一致，从而更容易阅读和维护。&lt;
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript代理模式</title>
    <link href="http://yoursite.com/2017/03/12/javascript%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/03/12/javascript代理模式/</id>
    <published>2017-03-12T00:04:10.000Z</published>
    <updated>2017-03-23T12:03:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>代理模式是给对象提供一个代用品或占位符，以便控制对它的访问<br>   参考《javascript模式设计与开发实践》</p>
</blockquote>
<p><code>缓存代理</code></p>
<p>  缓存代理可以为一些开销比较大的运算结果提供暂时的存储，下一次运算时如果传递参数和缓存的参数一致，则可是直接返回前面存储的运算结果</p>
<p>计算乘积的实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//默认传递的arguments参数列表</span></div><div class="line">		<span class="built_in">console</span>.log( <span class="string">'开始计算乘积'</span> );</div><div class="line">		<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++ )&#123;</div><div class="line">			a = a * <span class="built_in">arguments</span>[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> a;</div><div class="line">	&#125;;</div><div class="line">	mult( <span class="number">2</span>, <span class="number">3</span> ); <span class="comment">// 输出：6</span></div><div class="line">	mult( <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24</span></div><div class="line">	<span class="comment">//现在加入缓存代理函数：</span></div><div class="line"></div><div class="line">	<span class="keyword">var</span> proxyMult = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> cache = &#123;&#125;;  <span class="comment">//缓存对象</span></div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.join.call( <span class="built_in">arguments</span>, <span class="string">','</span> ); </div><div class="line">			<span class="keyword">if</span> ( args <span class="keyword">in</span> cache )&#123; <span class="comment">//如果合并的参数在缓存中</span></div><div class="line">				<span class="keyword">return</span> cache[ args ]; <span class="comment">//直接分会缓存数据</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> cache[ args ] = mult.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </div><div class="line">                        <span class="comment">//调用函数之后存储到缓存对象中</span></div><div class="line">		&#125;</div><div class="line">	&#125;)();</div><div class="line"></div><div class="line">	proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24  //第一次计算</span></div><div class="line">	proxyMult( <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ); <span class="comment">// 输出：24 //第二次计算，直接存缓存中获取</span></div><div class="line"></div><div class="line"><span class="comment">//这里的两个函数，multi负责计算，proxyMulti负责缓存的存储和读取。</span></div><div class="line"><span class="comment">//两个函数分功能完成对应的功能</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;代理模式是给对象提供一个代用品或占位符，以便控制对它的访问&lt;br&gt;   参考《javascript模式设计与开发实践》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;缓存代理&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  缓存代理可以为一些开销比较大的运
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>翻译-使用React构建你的App</title>
    <link href="http://yoursite.com/2017/03/12/%E7%BF%BB%E8%AF%91-%E4%BD%BF%E7%94%A8React%E6%9E%84%E5%BB%BA%E4%BD%A0%E7%9A%84App/"/>
    <id>http://yoursite.com/2017/03/12/翻译-使用React构建你的App/</id>
    <published>2017-03-12T00:04:10.000Z</published>
    <updated>2017-03-23T11:29:53.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章时间有点久远,翻译试试看.但是本篇文章对于React的渲染工作原理讲的比较好,使用一个游戏引擎的渲染方式来类比解释React的数据流程,值得学习. <a href="http://konkle.us/architecting-your-app-react-part-1/" target="_blank" rel="external">原文在这里</a></p>
</blockquote>
<p>去年五月(2013年5月),Facebook发布了构建前端组件库的开源软件-React.React对于浏览器和app的结构来说有点异类.但是经过这段时间,开发者逐渐看到了一些优势,React也因此获取了很多的人气.React最为相助的额特征是引入了virtual-DOM方法,virtual-DOM使实际的浏览器的DOM变化减到最低,DOM的渲染性能大幅提高.</p>
<p>React并不是完整的MVC框架,React实际是MVC的加强版(这点,真是雪中送炭,一直都对这个框架到底是不是MVC而心存疑虑).很多开发者选择React作为MVC框架的延伸,例如Backbone.React本身并没有路由和数据同步的内容,所以你可以很容易的使用喜欢的工具来完成类似的功能.React也可以在其他的应用中管理一部分特定的组件.但是如果在应用的界面上全面使用React,发挥的功能会更大.</p>
<p>#####尽可能的避免DOM<br>React作为javascript的一个类,提供virtual-DOM实施方案.这意味着你可以频繁的更新你的应用程序的元素树,但是实际上没有发生浏览器的DOM操作.由于使用了现代的引擎,Javascript的速度相当快.实际由于引擎的速度很快,当每一次数据更新的时候,渲染应用程序的所有元素都是可以的,减少了实时元素操作和双向数据绑定的需求.React周期性的比较virtual-DOM和浏览器DOM,仅仅做出最有必要的DOM同步.</p>
<p>#####单向数据流<br>当HTML元素的渲染花销大幅度降低以后,你现在需要花费更多的的方法来管理你的界面.放弃错综复杂的就地更新元素操作和数据变化中的的多个state的同步,你可以把状态放在一个地方,基于集中的state来描述你的界面.只要状态以改变,React的组件就可以进行更新操作.<br>当你的整个应用都基于这个思想来设计,你可以把immutable 数据从顶层组件传递给子组件,然后执行自顶向下的应用更新.React从根本上改变了你对应用的思路,而且经常会简化应用的设计.</p>
<p>#####浏览器作为渲染引擎<br>这一点是对MVC框架非常激进的改变,它强调使用双向数据绑定,尽可能多自动就地重新渲染.当我刚开始了解React的时候,我还不是太确定.转折点是我看了一个Pete Hunt的视频:比较React和Doom3渲染引擎.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-a1553d287e86aebb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="doom3的渲染示意图"><br>在图表中,游戏的sate经过底层的图形代码导入前端逻辑和抽象层.这个操作会创建一个“场景中间表示层”(scene intermediate representation),这个表示层表现出用户应该看到的内容.这个表示层会传递给”backend”(后端),后端接收表示层内容,随之转换为OpenGL操作,OpenGL使用图形卡(电脑显卡)渲染出内容.React的工作原理和Doom3的渲染方式是一样的.(doom3是早期一款比较著名的第一人称射击游戏,这里使用doom3的图形渲染方式来说明React的工作方式).</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2044710-73a98731bc9d6411.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="React组件渲染"></p>
<p>当程序的state由于浏览器或者实时事件发生变化,React程序接收这些变化,并且传递给组件们,接着使用virtual-DOM方式生成中间表示层.浏览器的DOM并不会发生立即的变化.然而React会周期性的接收virtual DOM,计算出必要的DOM操作.这一点和游戏引擎接受场景中间表示层,决定是否使用OpenGL渲染场景类似.React是接收DOM,把它渲染到用户屏幕上.(可见两者渲染的思路是一样的,React使用了浏览器来做这个工作).</p>
<p>浏览器和游戏引擎一样,最慢的部分实际是中间表示层到屏幕的渲染部分.你可以对virtual-DOM做出许多细小的改变,React优化了这个部分,所以不会因此而牺牲渲染的性能.</p>
<p>#####更多的资源<br>在第二部分,我将会演示怎么把React的设计哲学付诸实践.我会分享怎么更具不同的功能责任,渲染一个由小组件组成的顶级组件的界面.我也会演示怎么在React应用中整合路由功能和数据同步功能.</p>
<p>如果你想了解更多的React内容,想知道它是怎么工作的,看看下面的资源列表.</p>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">React主页</a></li>
<li><a href="http://facebook.github.io/react/docs/videos.html" target="_blank" rel="external">视频</a></li>
<li><a href="http://facebook.github.io/react/docs/examples.html" target="_blank" rel="external">实例</a></li>
<li><a href="https://groups.google.com/forum/#!forum/reactjs" target="_blank" rel="external">React Google Group</a></li>
<li>#reactjs on Freenode-官方 IRC频道,比较活跃</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章时间有点久远,翻译试试看.但是本篇文章对于React的渲染工作原理讲的比较好,使用一个游戏引擎的渲染方式来类比解释React的数据流程,值得学习. &lt;a href=&quot;http://konkle.us/architecting-your-ap
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript开放-封闭原则-NBA常规赛结束</title>
    <link href="http://yoursite.com/2017/03/11/javascript%E5%BC%80%E6%94%BE-%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99-NBA%E5%B8%B8%E8%A7%84%E8%B5%9B%E7%BB%93%E6%9D%9F/"/>
    <id>http://yoursite.com/2017/03/11/javascript开放-封闭原则-NBA常规赛结束/</id>
    <published>2017-03-11T08:04:10.000Z</published>
    <updated>2017-03-23T12:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在面向对象程序(OOP)设计中，开放-封闭原则(OCP)是最重要的原则，一个oop的程序具有良好的设计，往往说明它是符合开放-封闭原则的.<br>参考《javascript模式设计与开发实践》第20章<br>首先看一个代码.开放封闭是相互关联的在一段代码中既要体现封闭又要体现开放。封闭不破坏旧功能，开放有可以添加新功能。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下面这个函数是修饰模式，在函数运行后添加功能</span></div><div class="line"><span class="comment">//通过这个函数，添加的功能不影响原函数的功能</span></div><div class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params"> afterfn </span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> __self = <span class="keyword">this</span>;</div><div class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">var</span> ret = __self.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</div><div class="line">			afterfn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</div><div class="line">			<span class="keyword">return</span> ret;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">	</div><div class="line">	<span class="comment">//如果多人开发，都要在window.onload下挂载函数功能(原生的js代码</span></div><div class="line">	<span class="comment">//只能加载一次window.load函数)。很有可能别人也在使用.</span></div><div class="line">	<span class="comment">//要解决这个问题可以结合after函数和函数引用赋值来解决这个问题</span></div><div class="line">	<span class="comment">//如果windoW.load已经挂载有内容，就引用赋值，然后使用after</span></div><div class="line">	<span class="comment">//如果没有使用则直接引用空函数对象，然后挂载after函数</span></div><div class="line">	<span class="comment">//无论哪种情况，通过after函数的</span></div><div class="line">	<span class="built_in">window</span>.onload = ( <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; ).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( <span class="built_in">document</span>.getElementsByTagName( <span class="string">'*'</span> ).length );</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<p>但是在实际应用中使用开放-封闭原则很困难，关键是要找到程序在哪里发生变化，这不是一朝一夕之功。所以道理很简单，但是应用起来可能很困难。长路漫漫啊。</p>
<p>至此本人基本把javascript的模式设计的内容过了一遍。可以说收获良多，学到很多东西。阅读代码和分析代码的能力有了提高，好像是在NBA的赛场上，通过解说员的一些战术分析，慢慢看明白了一些跑位和战术，对于一个球迷来说在这种情况下看比赛就不光光是看热闹了，比赛有了更深层次的意义，此时的心情就是有想看更多比赛来验证下一场比赛是否也会出现同样的战术。<br>但这也只是一个起点而已，过一年肯能会觉得现在写的这些文章很幼稚很傻比。就拿这些学习笔记记录这个傻逼的过程吧.</p>
<p>NBA常规赛结束了，还有季后赛和下一赛季等着呢。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在面向对象程序(OOP)设计中，开放-封闭原则(OCP)是最重要的原则，一个oop的程序具有良好的设计，往往说明它是符合开放-封闭原则的.&lt;br&gt;参考《javascript模式设计与开发实践》第20章&lt;br&gt;首先看一个代码.开放封闭是相互关联的在一
    
    </summary>
    
      <category term="Designpattern" scheme="http://yoursite.com/categories/Designpattern/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
